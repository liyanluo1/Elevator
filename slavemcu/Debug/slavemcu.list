
slavemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005630  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  0800573c  0800573c  0000673c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc0  08005fc0  00007084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005fc0  08005fc0  00007084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005fc0  08005fc0  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005fc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  20000084  0800604c  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000998  0800604c  00007998  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dc1  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d6  00000000  00000000  00010e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00013448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079c  00000000  00000000  00013e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dba  00000000  00000000  000145fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d40a  00000000  00000000  000183b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008577c  00000000  00000000  000257c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aaf3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f40  00000000  00000000  000aaf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000adec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08005724 	.word	0x08005724

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08005724 	.word	0x08005724

0800014c <LocalBB_Init>:
/* 全局实例 */
LocalBlackboard_t g_local_bb;

/* ==================== 初始化函数 ==================== */

void LocalBB_Init(void) {
 800014c:	b598      	push	{r3, r4, r7, lr}
 800014e:	af00      	add	r7, sp, #0
    memset(&g_local_bb, 0, sizeof(LocalBlackboard_t));
 8000150:	22c8      	movs	r2, #200	@ 0xc8
 8000152:	2100      	movs	r1, #0
 8000154:	4814      	ldr	r0, [pc, #80]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000156:	f004 fba3 	bl	80048a0 <memset>
    
    /* 初始状态 */
    g_local_bb.current_floor = 1;
 800015a:	4b13      	ldr	r3, [pc, #76]	@ (80001a8 <LocalBB_Init+0x5c>)
 800015c:	2201      	movs	r2, #1
 800015e:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    g_local_bb.expected_next_floor = 1;
 8000162:	4b11      	ldr	r3, [pc, #68]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000164:	2201      	movs	r2, #1
 8000166:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    g_local_bb.direction = DIR_STOP;
 800016a:	4b0f      	ldr	r3, [pc, #60]	@ (80001a8 <LocalBB_Init+0x5c>)
 800016c:	2200      	movs	r2, #0
 800016e:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
    g_local_bb.door_state = LOCAL_DOOR_CLOSED;
 8000172:	4b0d      	ldr	r3, [pc, #52]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000174:	2200      	movs	r2, #0
 8000176:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    
    /* 事件队列 */
    g_local_bb.event_head = 0;
 800017a:	4b0b      	ldr	r3, [pc, #44]	@ (80001a8 <LocalBB_Init+0x5c>)
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_tail = 0;
 8000182:	4b09      	ldr	r3, [pc, #36]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000184:	2200      	movs	r2, #0
 8000186:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count = 0;
 800018a:	4b07      	ldr	r3, [pc, #28]	@ (80001a8 <LocalBB_Init+0x5c>)
 800018c:	2200      	movs	r2, #0
 800018e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    strcpy(g_local_bb.debug_msg, "LocalBB Init");
 8000192:	4a06      	ldr	r2, [pc, #24]	@ (80001ac <LocalBB_Init+0x60>)
 8000194:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <LocalBB_Init+0x64>)
 8000196:	4614      	mov	r4, r2
 8000198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019a:	c407      	stmia	r4!, {r0, r1, r2}
 800019c:	7023      	strb	r3, [r4, #0]
    printf("[LocalBB] Initialized\r\n");
 800019e:	4805      	ldr	r0, [pc, #20]	@ (80001b4 <LocalBB_Init+0x68>)
 80001a0:	f004 fa7c 	bl	800469c <puts>
}
 80001a4:	bf00      	nop
 80001a6:	bd98      	pop	{r3, r4, r7, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	20000148 	.word	0x20000148
 80001b0:	0800573c 	.word	0x0800573c
 80001b4:	0800574c 	.word	0x0800574c

080001b8 <PushEvent>:
    LocalBB_Init();
}

/* ==================== 事件队列管理 ==================== */

static bool PushEvent(LocalEventType_t type, uint8_t data1, uint8_t data2, uint8_t data3) {
 80001b8:	b590      	push	{r4, r7, lr}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4604      	mov	r4, r0
 80001c0:	4608      	mov	r0, r1
 80001c2:	4611      	mov	r1, r2
 80001c4:	461a      	mov	r2, r3
 80001c6:	4623      	mov	r3, r4
 80001c8:	71fb      	strb	r3, [r7, #7]
 80001ca:	4603      	mov	r3, r0
 80001cc:	71bb      	strb	r3, [r7, #6]
 80001ce:	460b      	mov	r3, r1
 80001d0:	717b      	strb	r3, [r7, #5]
 80001d2:	4613      	mov	r3, r2
 80001d4:	713b      	strb	r3, [r7, #4]
    if (g_local_bb.event_count >= MAX_EVENT_QUEUE) {
 80001d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000254 <PushEvent+0x9c>)
 80001d8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80001dc:	2b0f      	cmp	r3, #15
 80001de:	d904      	bls.n	80001ea <PushEvent+0x32>
        printf("[LocalBB] Event queue full!\r\n");
 80001e0:	481d      	ldr	r0, [pc, #116]	@ (8000258 <PushEvent+0xa0>)
 80001e2:	f004 fa5b 	bl	800469c <puts>
        return false;
 80001e6:	2300      	movs	r3, #0
 80001e8:	e02f      	b.n	800024a <PushEvent+0x92>
    }
    
    LocalEvent_t* event = &g_local_bb.event_queue[g_local_bb.event_tail];
 80001ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000254 <PushEvent+0x9c>)
 80001ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80001f0:	00db      	lsls	r3, r3, #3
 80001f2:	4a18      	ldr	r2, [pc, #96]	@ (8000254 <PushEvent+0x9c>)
 80001f4:	4413      	add	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]
    event->type = type;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	701a      	strb	r2, [r3, #0]
    event->data1 = data1;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	79ba      	ldrb	r2, [r7, #6]
 8000202:	705a      	strb	r2, [r3, #1]
    event->data2 = data2;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	797a      	ldrb	r2, [r7, #5]
 8000208:	709a      	strb	r2, [r3, #2]
    event->data3 = data3;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	793a      	ldrb	r2, [r7, #4]
 800020e:	70da      	strb	r2, [r3, #3]
    event->timestamp = HAL_GetTick();
 8000210:	f001 fe88 	bl	8001f24 <HAL_GetTick>
 8000214:	4602      	mov	r2, r0
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	605a      	str	r2, [r3, #4]
    
    g_local_bb.event_tail = (g_local_bb.event_tail + 1) % MAX_EVENT_QUEUE;
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <PushEvent+0x9c>)
 800021c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000220:	3301      	adds	r3, #1
 8000222:	425a      	negs	r2, r3
 8000224:	f003 030f 	and.w	r3, r3, #15
 8000228:	f002 020f 	and.w	r2, r2, #15
 800022c:	bf58      	it	pl
 800022e:	4253      	negpl	r3, r2
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <PushEvent+0x9c>)
 8000234:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count++;
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <PushEvent+0x9c>)
 800023a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800023e:	3301      	adds	r3, #1
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <PushEvent+0x9c>)
 8000244:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    return true;
 8000248:	2301      	movs	r3, #1
}
 800024a:	4618      	mov	r0, r3
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bd90      	pop	{r4, r7, pc}
 8000252:	bf00      	nop
 8000254:	200000a0 	.word	0x200000a0
 8000258:	08005764 	.word	0x08005764

0800025c <PopEvent>:

static bool PopEvent(LocalEvent_t* event) {
 800025c:	b490      	push	{r4, r7}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    if (g_local_bb.event_count == 0) {
 8000264:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <PopEvent+0x68>)
 8000266:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800026a:	2b00      	cmp	r3, #0
 800026c:	d101      	bne.n	8000272 <PopEvent+0x16>
        return false;
 800026e:	2300      	movs	r3, #0
 8000270:	e023      	b.n	80002ba <PopEvent+0x5e>
    }
    
    *event = g_local_bb.event_queue[g_local_bb.event_head];
 8000272:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <PopEvent+0x68>)
 8000274:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <PopEvent+0x68>)
 800027c:	460c      	mov	r4, r1
 800027e:	00db      	lsls	r3, r3, #3
 8000280:	4413      	add	r3, r2
 8000282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000286:	e884 0003 	stmia.w	r4, {r0, r1}
    g_local_bb.event_head = (g_local_bb.event_head + 1) % MAX_EVENT_QUEUE;
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <PopEvent+0x68>)
 800028c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000290:	3301      	adds	r3, #1
 8000292:	425a      	negs	r2, r3
 8000294:	f003 030f 	and.w	r3, r3, #15
 8000298:	f002 020f 	and.w	r2, r2, #15
 800029c:	bf58      	it	pl
 800029e:	4253      	negpl	r3, r2
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <PopEvent+0x68>)
 80002a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_count--;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <PopEvent+0x68>)
 80002aa:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80002ae:	3b01      	subs	r3, #1
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <PopEvent+0x68>)
 80002b4:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    return true;
 80002b8:	2301      	movs	r3, #1
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc90      	pop	{r4, r7}
 80002c2:	4770      	bx	lr
 80002c4:	200000a0 	.word	0x200000a0

080002c8 <LocalBB_AddCabinCall>:

/* ==================== 事件输入接口 ==================== */

void LocalBB_AddCabinCall(uint8_t floor) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
    if (floor < 1 || floor > MAX_FLOORS) return;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d02b      	beq.n	8000330 <LocalBB_AddCabinCall+0x68>
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b03      	cmp	r3, #3
 80002dc:	d828      	bhi.n	8000330 <LocalBB_AddCabinCall+0x68>
    
    /* 防抖：如果短时间内重复按同一楼层，忽略 */
    uint32_t current_time = HAL_GetTick();
 80002de:	f001 fe21 	bl	8001f24 <HAL_GetTick>
 80002e2:	60f8      	str	r0, [r7, #12]
    if (floor == g_local_bb.last_sent_cabin_call && 
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 80002e6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80002ea:	79fa      	ldrb	r2, [r7, #7]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d10c      	bne.n	800030a <LocalBB_AddCabinCall+0x42>
        (current_time - g_local_bb.last_cabin_call_time) < DEBOUNCE_TIME_MS) {
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 80002f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	1ad3      	subs	r3, r2, r3
    if (floor == g_local_bb.last_sent_cabin_call && 
 80002fa:	2b63      	cmp	r3, #99	@ 0x63
 80002fc:	d805      	bhi.n	800030a <LocalBB_AddCabinCall+0x42>
        printf("[LocalBB] Cabin call %d debounced\r\n", floor);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	4619      	mov	r1, r3
 8000302:	480e      	ldr	r0, [pc, #56]	@ (800033c <LocalBB_AddCabinCall+0x74>)
 8000304:	f004 f962 	bl	80045cc <iprintf>
        return;
 8000308:	e013      	b.n	8000332 <LocalBB_AddCabinCall+0x6a>
    }
    
    PushEvent(LOCAL_EVENT_CABIN_CALL, floor, 0, 0);
 800030a:	79f9      	ldrb	r1, [r7, #7]
 800030c:	2300      	movs	r3, #0
 800030e:	2200      	movs	r2, #0
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ff51 	bl	80001b8 <PushEvent>
    g_local_bb.cabin_call_count++;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 8000318:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800031c:	3301      	adds	r3, #1
 800031e:	4a06      	ldr	r2, [pc, #24]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 8000320:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    printf("[LocalBB] Cabin call queued: floor %d\r\n", floor);
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	@ (8000340 <LocalBB_AddCabinCall+0x78>)
 800032a:	f004 f94f 	bl	80045cc <iprintf>
 800032e:	e000      	b.n	8000332 <LocalBB_AddCabinCall+0x6a>
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000330:	bf00      	nop
}
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	200000a0 	.word	0x200000a0
 800033c:	08005784 	.word	0x08005784
 8000340:	080057a8 	.word	0x080057a8

08000344 <LocalBB_AddPhotoSensor>:

void LocalBB_AddPhotoSensor(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
    /* 使用预期楼层 */
    uint8_t floor = g_local_bb.expected_next_floor;
 800034a:	4b23      	ldr	r3, [pc, #140]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 800034c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000350:	71fb      	strb	r3, [r7, #7]
    
    PushEvent(LOCAL_EVENT_PHOTO_SENSOR, floor, 0, 0);
 8000352:	79f9      	ldrb	r1, [r7, #7]
 8000354:	2300      	movs	r3, #0
 8000356:	2200      	movs	r2, #0
 8000358:	2002      	movs	r0, #2
 800035a:	f7ff ff2d 	bl	80001b8 <PushEvent>
    g_local_bb.photo_trigger_count++;
 800035e:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000360:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000364:	3301      	adds	r3, #1
 8000366:	4a1c      	ldr	r2, [pc, #112]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000368:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    printf("[LocalBB] Photo sensor queued: floor %d\r\n", floor);
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4619      	mov	r1, r3
 8000370:	481a      	ldr	r0, [pc, #104]	@ (80003dc <LocalBB_AddPhotoSensor+0x98>)
 8000372:	f004 f92b 	bl	80045cc <iprintf>
    
    /* 更新当前楼层 */
    g_local_bb.current_floor = floor;
 8000376:	4a18      	ldr	r2, [pc, #96]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    
    /* 根据方向更新预期楼层 */
    if (g_local_bb.direction == DIR_UP) {
 800037e:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000380:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10f      	bne.n	80003a8 <LocalBB_AddPhotoSensor+0x64>
        g_local_bb.expected_next_floor = floor + 1;
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000390:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        if (g_local_bb.expected_next_floor > MAX_FLOORS) {
 8000394:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000396:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800039a:	2b03      	cmp	r3, #3
 800039c:	d917      	bls.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
            g_local_bb.expected_next_floor = MAX_FLOORS;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003a0:	2203      	movs	r2, #3
 80003a2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
            g_local_bb.expected_next_floor = floor - 1;
        } else {
            g_local_bb.expected_next_floor = 1;
        }
    }
}
 80003a6:	e012      	b.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
    } else if (g_local_bb.direction == DIR_DOWN) {
 80003a8:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003aa:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d10d      	bne.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
        if (floor > 1) {
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d906      	bls.n	80003c6 <LocalBB_AddPhotoSensor+0x82>
            g_local_bb.expected_next_floor = floor - 1;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003c0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 80003c4:	e003      	b.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
            g_local_bb.expected_next_floor = 1;
 80003c6:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000a0 	.word	0x200000a0
 80003dc:	080057d0 	.word	0x080057d0

080003e0 <LocalBB_SetDirection>:

void LocalBB_SetDirection(uint8_t dir, uint8_t current, uint8_t target) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	460b      	mov	r3, r1
 80003ec:	71bb      	strb	r3, [r7, #6]
 80003ee:	4613      	mov	r3, r2
 80003f0:	717b      	strb	r3, [r7, #5]
    g_local_bb.direction = dir;
 80003f2:	4a22      	ldr	r2, [pc, #136]	@ (800047c <LocalBB_SetDirection+0x9c>)
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	f882 3085 	strb.w	r3, [r2, #133]	@ 0x85
    g_local_bb.current_floor = current;
 80003fa:	4a20      	ldr	r2, [pc, #128]	@ (800047c <LocalBB_SetDirection+0x9c>)
 80003fc:	79bb      	ldrb	r3, [r7, #6]
 80003fe:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    g_local_bb.target_floor = target;
 8000402:	4a1e      	ldr	r2, [pc, #120]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000404:	797b      	ldrb	r3, [r7, #5]
 8000406:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
    
    /* 设置预期楼层 */
    if (dir == DIR_UP) {
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d106      	bne.n	800041e <LocalBB_SetDirection+0x3e>
        g_local_bb.expected_next_floor = current + 1;
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b19      	ldr	r3, [pc, #100]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000418:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 800041c:	e010      	b.n	8000440 <LocalBB_SetDirection+0x60>
    } else if (dir == DIR_DOWN && current > 1) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d109      	bne.n	8000438 <LocalBB_SetDirection+0x58>
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d906      	bls.n	8000438 <LocalBB_SetDirection+0x58>
        g_local_bb.expected_next_floor = current - 1;
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	3b01      	subs	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000432:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000436:	e003      	b.n	8000440 <LocalBB_SetDirection+0x60>
    } else {
        g_local_bb.expected_next_floor = current;
 8000438:	4a10      	ldr	r2, [pc, #64]	@ (800047c <LocalBB_SetDirection+0x9c>)
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
    }
    
    PushEvent(LOCAL_EVENT_DIRECTION_SET, dir, current, target);
 8000440:	797b      	ldrb	r3, [r7, #5]
 8000442:	79ba      	ldrb	r2, [r7, #6]
 8000444:	79f9      	ldrb	r1, [r7, #7]
 8000446:	2003      	movs	r0, #3
 8000448:	f7ff feb6 	bl	80001b8 <PushEvent>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d006      	beq.n	8000460 <LocalBB_SetDirection+0x80>
           dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DOWN" : "STOP",
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d101      	bne.n	800045c <LocalBB_SetDirection+0x7c>
 8000458:	4909      	ldr	r1, [pc, #36]	@ (8000480 <LocalBB_SetDirection+0xa0>)
 800045a:	e002      	b.n	8000462 <LocalBB_SetDirection+0x82>
 800045c:	4909      	ldr	r1, [pc, #36]	@ (8000484 <LocalBB_SetDirection+0xa4>)
 800045e:	e000      	b.n	8000462 <LocalBB_SetDirection+0x82>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000460:	4909      	ldr	r1, [pc, #36]	@ (8000488 <LocalBB_SetDirection+0xa8>)
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	797b      	ldrb	r3, [r7, #5]
           current, target, g_local_bb.expected_next_floor);
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000468:	f890 0086 	ldrb.w	r0, [r0, #134]	@ 0x86
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 800046c:	9000      	str	r0, [sp, #0]
 800046e:	4807      	ldr	r0, [pc, #28]	@ (800048c <LocalBB_SetDirection+0xac>)
 8000470:	f004 f8ac 	bl	80045cc <iprintf>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000a0 	.word	0x200000a0
 8000480:	080057fc 	.word	0x080057fc
 8000484:	08005804 	.word	0x08005804
 8000488:	0800580c 	.word	0x0800580c
 800048c:	08005810 	.word	0x08005810

08000490 <LocalBB_AddDoorCommand>:

void LocalBB_AddDoorCommand(bool open) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
    PushEvent(LOCAL_EVENT_DOOR_CMD, open ? 1 : 0, 0, 0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4619      	mov	r1, r3
 800049e:	2300      	movs	r3, #0
 80004a0:	2200      	movs	r2, #0
 80004a2:	2004      	movs	r0, #4
 80004a4:	f7ff fe88 	bl	80001b8 <PushEvent>
    g_local_bb.door_state = open ? LOCAL_DOOR_OPENING : LOCAL_DOOR_CLOSING;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <LocalBB_AddDoorCommand+0x22>
 80004ae:	2201      	movs	r2, #1
 80004b0:	e000      	b.n	80004b4 <LocalBB_AddDoorCommand+0x24>
 80004b2:	2203      	movs	r2, #3
 80004b4:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <LocalBB_AddDoorCommand+0x54>)
 80004b6:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    g_local_bb.door_cmd_time = HAL_GetTick();
 80004ba:	f001 fd33 	bl	8001f24 <HAL_GetTick>
 80004be:	4603      	mov	r3, r0
 80004c0:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <LocalBB_AddDoorCommand+0x54>)
 80004c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    printf("[LocalBB] Door command queued: %s\r\n", open ? "OPEN" : "CLOSE");
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <LocalBB_AddDoorCommand+0x40>
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <LocalBB_AddDoorCommand+0x58>)
 80004ce:	e000      	b.n	80004d2 <LocalBB_AddDoorCommand+0x42>
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <LocalBB_AddDoorCommand+0x5c>)
 80004d2:	4619      	mov	r1, r3
 80004d4:	4806      	ldr	r0, [pc, #24]	@ (80004f0 <LocalBB_AddDoorCommand+0x60>)
 80004d6:	f004 f879 	bl	80045cc <iprintf>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000a0 	.word	0x200000a0
 80004e8:	08005844 	.word	0x08005844
 80004ec:	0800584c 	.word	0x0800584c
 80004f0:	08005854 	.word	0x08005854

080004f4 <LocalBB_Process>:

/* ==================== 事件处理主函数 ==================== */

void LocalBB_Process(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af02      	add	r7, sp, #8
    LocalEvent_t event;
    uint32_t current_time = HAL_GetTick();
 80004fa:	f001 fd13 	bl	8001f24 <HAL_GetTick>
 80004fe:	6178      	str	r0, [r7, #20]
    
    while (PopEvent(&event)) {
 8000500:	e083      	b.n	800060a <LocalBB_Process+0x116>
        switch (event.type) {
 8000502:	7b3b      	ldrb	r3, [r7, #12]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d066      	beq.n	80005d6 <LocalBB_Process+0xe2>
 8000508:	2b03      	cmp	r3, #3
 800050a:	dc79      	bgt.n	8000600 <LocalBB_Process+0x10c>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d002      	beq.n	8000516 <LocalBB_Process+0x22>
 8000510:	2b02      	cmp	r3, #2
 8000512:	d031      	beq.n	8000578 <LocalBB_Process+0x84>
                        event.data1 == DIR_DOWN ? "DN" : "ST",
                        event.data2, event.data3);
                break;
                
            default:
                break;
 8000514:	e074      	b.n	8000600 <LocalBB_Process+0x10c>
                if (event.data1 != g_local_bb.last_sent_cabin_call ||
 8000516:	7b7a      	ldrb	r2, [r7, #13]
 8000518:	4b43      	ldr	r3, [pc, #268]	@ (8000628 <LocalBB_Process+0x134>)
 800051a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800051e:	429a      	cmp	r2, r3
 8000520:	d107      	bne.n	8000532 <LocalBB_Process+0x3e>
                    (current_time - g_local_bb.last_cabin_call_time) > MIN_RESEND_TIME_MS) {
 8000522:	4b41      	ldr	r3, [pc, #260]	@ (8000628 <LocalBB_Process+0x134>)
 8000524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_cabin_call ||
 800052c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000530:	d968      	bls.n	8000604 <LocalBB_Process+0x110>
                    tx_buffer[0] = CMD_CABIN_CALL;
 8000532:	2331      	movs	r3, #49	@ 0x31
 8000534:	723b      	strb	r3, [r7, #8]
                    tx_buffer[1] = event.data1;  // 楼层
 8000536:	7b7b      	ldrb	r3, [r7, #13]
 8000538:	727b      	strb	r3, [r7, #9]
                    tx_buffer[2] = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	72bb      	strb	r3, [r7, #10]
                    tx_buffer[3] = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	72fb      	strb	r3, [r7, #11]
                    rs485_send_packet_dma(tx_buffer, 4);
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	2104      	movs	r1, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f921 	bl	8000790 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 800054e:	4b36      	ldr	r3, [pc, #216]	@ (8000628 <LocalBB_Process+0x134>)
 8000550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000554:	3301      	adds	r3, #1
 8000556:	4a34      	ldr	r2, [pc, #208]	@ (8000628 <LocalBB_Process+0x134>)
 8000558:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    g_local_bb.last_sent_cabin_call = event.data1;
 800055c:	7b7a      	ldrb	r2, [r7, #13]
 800055e:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <LocalBB_Process+0x134>)
 8000560:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
                    g_local_bb.last_cabin_call_time = current_time;
 8000564:	4a30      	ldr	r2, [pc, #192]	@ (8000628 <LocalBB_Process+0x134>)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                    printf("[LocalBB] RS485 TX: Cabin call floor %d\r\n", event.data1);
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	4619      	mov	r1, r3
 8000570:	482e      	ldr	r0, [pc, #184]	@ (800062c <LocalBB_Process+0x138>)
 8000572:	f004 f82b 	bl	80045cc <iprintf>
                break;
 8000576:	e045      	b.n	8000604 <LocalBB_Process+0x110>
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000578:	7b7a      	ldrb	r2, [r7, #13]
 800057a:	4b2b      	ldr	r3, [pc, #172]	@ (8000628 <LocalBB_Process+0x134>)
 800057c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000580:	429a      	cmp	r2, r3
 8000582:	d106      	bne.n	8000592 <LocalBB_Process+0x9e>
                    (current_time - g_local_bb.last_photo_send_time) > 200) {  // 光电允许更快
 8000584:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <LocalBB_Process+0x134>)
 8000586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 800058e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000590:	d93a      	bls.n	8000608 <LocalBB_Process+0x114>
                    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8000592:	2310      	movs	r3, #16
 8000594:	713b      	strb	r3, [r7, #4]
                    tx_buffer[1] = event.data1;  // 楼层
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	717b      	strb	r3, [r7, #5]
                    tx_buffer[2] = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	71bb      	strb	r3, [r7, #6]
                    tx_buffer[3] = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
                    rs485_send_packet_dma(tx_buffer, 4);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f8f2 	bl	8000790 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <LocalBB_Process+0x134>)
 80005ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80005b2:	3301      	adds	r3, #1
 80005b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000628 <LocalBB_Process+0x134>)
 80005b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    g_local_bb.last_sent_photo_floor = event.data1;
 80005ba:	7b7a      	ldrb	r2, [r7, #13]
 80005bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <LocalBB_Process+0x134>)
 80005be:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
                    g_local_bb.last_photo_send_time = current_time;
 80005c2:	4a19      	ldr	r2, [pc, #100]	@ (8000628 <LocalBB_Process+0x134>)
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
                    printf("[LocalBB] RS485 TX: Photo sensor floor %d\r\n", event.data1);
 80005ca:	7b7b      	ldrb	r3, [r7, #13]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4818      	ldr	r0, [pc, #96]	@ (8000630 <LocalBB_Process+0x13c>)
 80005d0:	f003 fffc 	bl	80045cc <iprintf>
                break;
 80005d4:	e018      	b.n	8000608 <LocalBB_Process+0x114>
                        event.data1 == DIR_UP ? "UP" : 
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d006      	beq.n	80005ea <LocalBB_Process+0xf6>
                        event.data1 == DIR_DOWN ? "DN" : "ST",
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d101      	bne.n	80005e6 <LocalBB_Process+0xf2>
 80005e2:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <LocalBB_Process+0x140>)
 80005e4:	e002      	b.n	80005ec <LocalBB_Process+0xf8>
 80005e6:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <LocalBB_Process+0x144>)
 80005e8:	e000      	b.n	80005ec <LocalBB_Process+0xf8>
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <LocalBB_Process+0x148>)
                        event.data2, event.data3);
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005ee:	4619      	mov	r1, r3
                        event.data2, event.data3);
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	460b      	mov	r3, r1
 80005f6:	4912      	ldr	r1, [pc, #72]	@ (8000640 <LocalBB_Process+0x14c>)
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <LocalBB_Process+0x150>)
 80005fa:	f004 f857 	bl	80046ac <siprintf>
                break;
 80005fe:	e004      	b.n	800060a <LocalBB_Process+0x116>
                break;
 8000600:	bf00      	nop
 8000602:	e002      	b.n	800060a <LocalBB_Process+0x116>
                break;
 8000604:	bf00      	nop
 8000606:	e000      	b.n	800060a <LocalBB_Process+0x116>
                break;
 8000608:	bf00      	nop
    while (PopEvent(&event)) {
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fe24 	bl	800025c <PopEvent>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	f47f af73 	bne.w	8000502 <LocalBB_Process+0xe>
        }
    }
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000a0 	.word	0x200000a0
 800062c:	08005878 	.word	0x08005878
 8000630:	080058a4 	.word	0x080058a4
 8000634:	080058d0 	.word	0x080058d0
 8000638:	080058d4 	.word	0x080058d4
 800063c:	0800580c 	.word	0x0800580c
 8000640:	080058d8 	.word	0x080058d8
 8000644:	20000148 	.word	0x20000148

08000648 <LocalBB_PrintStatus>:
    return g_local_bb.direction;
}

/* ==================== 调试输出 ==================== */

void LocalBB_PrintStatus(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    printf("\r\n=== LocalBB Status ===\r\n");
 800064c:	481f      	ldr	r0, [pc, #124]	@ (80006cc <LocalBB_PrintStatus+0x84>)
 800064e:	f004 f825 	bl	800469c <puts>
    printf("Floor: %d (expect: %d)\r\n", 
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000652:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000654:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
    printf("Floor: %d (expect: %d)\r\n", 
 8000658:	4619      	mov	r1, r3
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 800065a:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 800065c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
    printf("Floor: %d (expect: %d)\r\n", 
 8000660:	461a      	mov	r2, r3
 8000662:	481c      	ldr	r0, [pc, #112]	@ (80006d4 <LocalBB_PrintStatus+0x8c>)
 8000664:	f003 ffb2 	bl	80045cc <iprintf>
    printf("Direction: %s, Target: %d\r\n",
           g_local_bb.direction == DIR_UP ? "UP" : 
 8000668:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 800066a:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
    printf("Direction: %s, Target: %d\r\n",
 800066e:	2b01      	cmp	r3, #1
 8000670:	d008      	beq.n	8000684 <LocalBB_PrintStatus+0x3c>
           g_local_bb.direction == DIR_DOWN ? "DOWN" : "STOP",
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000674:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000678:	2b02      	cmp	r3, #2
 800067a:	d101      	bne.n	8000680 <LocalBB_PrintStatus+0x38>
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <LocalBB_PrintStatus+0x90>)
 800067e:	e002      	b.n	8000686 <LocalBB_PrintStatus+0x3e>
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <LocalBB_PrintStatus+0x94>)
 8000682:	e000      	b.n	8000686 <LocalBB_PrintStatus+0x3e>
    printf("Direction: %s, Target: %d\r\n",
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <LocalBB_PrintStatus+0x98>)
           g_local_bb.target_floor);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000688:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
    printf("Direction: %s, Target: %d\r\n",
 800068c:	4619      	mov	r1, r3
 800068e:	4815      	ldr	r0, [pc, #84]	@ (80006e4 <LocalBB_PrintStatus+0x9c>)
 8000690:	f003 ff9c 	bl	80045cc <iprintf>
    printf("Events: %d in queue\r\n", g_local_bb.event_count);
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000696:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800069a:	4619      	mov	r1, r3
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <LocalBB_PrintStatus+0xa0>)
 800069e:	f003 ff95 	bl	80045cc <iprintf>
    printf("Stats: Cabin=%lu, Photo=%lu, RS485=%lu\r\n",
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 80006a4:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 80006aa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 80006b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <LocalBB_PrintStatus+0xa4>)
 80006b6:	f003 ff89 	bl	80045cc <iprintf>
           g_local_bb.cabin_call_count,
           g_local_bb.photo_trigger_count,
           g_local_bb.rs485_send_count);
    printf("Debug: %s\r\n", g_local_bb.debug_msg);
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LocalBB_PrintStatus+0xa8>)
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <LocalBB_PrintStatus+0xac>)
 80006be:	f003 ff85 	bl	80045cc <iprintf>
    printf("======================\r\n");
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <LocalBB_PrintStatus+0xb0>)
 80006c4:	f003 ffea 	bl	800469c <puts>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	080058e8 	.word	0x080058e8
 80006d0:	200000a0 	.word	0x200000a0
 80006d4:	08005904 	.word	0x08005904
 80006d8:	080057fc 	.word	0x080057fc
 80006dc:	08005804 	.word	0x08005804
 80006e0:	0800580c 	.word	0x0800580c
 80006e4:	08005920 	.word	0x08005920
 80006e8:	0800593c 	.word	0x0800593c
 80006ec:	08005954 	.word	0x08005954
 80006f0:	20000148 	.word	0x20000148
 80006f4:	08005980 	.word	0x08005980
 80006f8:	0800598c 	.word	0x0800598c

080006fc <rs485_init>:

/**
 * @brief Initialize RS485 driver
 */
rs485_status_t rs485_init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    /* Clear driver structure */
    memset(&rs485_driver, 0, sizeof(rs485_driver));
 8000700:	2248      	movs	r2, #72	@ 0x48
 8000702:	2100      	movs	r1, #0
 8000704:	481b      	ldr	r0, [pc, #108]	@ (8000774 <rs485_init+0x78>)
 8000706:	f004 f8cb 	bl	80048a0 <memset>
    
    /* Set buffer pointers */
    rs485_driver.dma_rx_buffer = rs485_dma_rx_buffer;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <rs485_init+0x78>)
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <rs485_init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
    rs485_driver.rx_buffer = rs485_rx_ring_buffer;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <rs485_init+0x78>)
 8000712:	4a1a      	ldr	r2, [pc, #104]	@ (800077c <rs485_init+0x80>)
 8000714:	609a      	str	r2, [r3, #8]
    rs485_driver.tx_buffer = rs485_tx_ring_buffer;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <rs485_init+0x78>)
 8000718:	4a19      	ldr	r2, [pc, #100]	@ (8000780 <rs485_init+0x84>)
 800071a:	60da      	str	r2, [r3, #12]
    
    /* Initialize ring buffers */
    ring_buffer_init(&rs485_driver.rx_ring, rs485_rx_ring_buffer, RS485_RX_BUFFER_SIZE);
 800071c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000720:	4916      	ldr	r1, [pc, #88]	@ (800077c <rs485_init+0x80>)
 8000722:	4818      	ldr	r0, [pc, #96]	@ (8000784 <rs485_init+0x88>)
 8000724:	f000 f8fe 	bl	8000924 <ring_buffer_init>
    ring_buffer_init(&rs485_driver.tx_ring, rs485_tx_ring_buffer, RS485_TX_BUFFER_SIZE);
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	4914      	ldr	r1, [pc, #80]	@ (8000780 <rs485_init+0x84>)
 800072e:	4816      	ldr	r0, [pc, #88]	@ (8000788 <rs485_init+0x8c>)
 8000730:	f000 f8f8 	bl	8000924 <ring_buffer_init>
    
    /* Set UART handle */
    rs485_driver.huart = &huart2;  /* slavemcu uses USART2 */
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <rs485_init+0x78>)
 8000736:	4a15      	ldr	r2, [pc, #84]	@ (800078c <rs485_init+0x90>)
 8000738:	601a      	str	r2, [r3, #0]
    
    /* Clear DMA buffer */
    memset(rs485_dma_rx_buffer, 0, RS485_DMA_RX_BUFFER_SIZE);
 800073a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800073e:	2100      	movs	r1, #0
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <rs485_init+0x7c>)
 8000742:	f004 f8ad 	bl	80048a0 <memset>
    
    /* Start DMA reception (already configured as circular in HAL_MspInit) */
    HAL_UART_Receive_DMA(rs485_driver.huart, rs485_dma_rx_buffer, RS485_DMA_RX_BUFFER_SIZE);
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <rs485_init+0x78>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800074e:	490a      	ldr	r1, [pc, #40]	@ (8000778 <rs485_init+0x7c>)
 8000750:	4618      	mov	r0, r3
 8000752:	f002 feed 	bl	8003530 <HAL_UART_Receive_DMA>
    
    /* Enable IDLE interrupt */
     __HAL_UART_ENABLE_IT(rs485_driver.huart, UART_IT_IDLE);
 8000756:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <rs485_init+0x78>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <rs485_init+0x78>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f042 0210 	orr.w	r2, r2, #16
 8000768:	60da      	str	r2, [r3, #12]
    
    /* Reset statistics */
    rs485_reset_stats();
 800076a:	f000 f8cf 	bl	800090c <rs485_reset_stats>
    
    return RS485_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000168 	.word	0x20000168
 8000778:	200001b0 	.word	0x200001b0
 800077c:	200002b0 	.word	0x200002b0
 8000780:	200004b0 	.word	0x200004b0
 8000784:	20000178 	.word	0x20000178
 8000788:	20000184 	.word	0x20000184
 800078c:	20000730 	.word	0x20000730

08000790 <rs485_send_packet_dma>:

/**
 * @brief Send packet via RS485 using DMA (non-blocking)
 */
rs485_status_t rs485_send_packet_dma(const uint8_t *data, uint16_t length)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    
    if (data == NULL || length == 0 || length > RS485_TX_BUFFER_SIZE) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d006      	beq.n	80007b0 <rs485_send_packet_dma+0x20>
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d003      	beq.n	80007b0 <rs485_send_packet_dma+0x20>
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80007ae:	d901      	bls.n	80007b4 <rs485_send_packet_dma+0x24>
        return RS485_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e036      	b.n	8000822 <rs485_send_packet_dma+0x92>
    }
    
    if (rs485_driver.tx_pending) {
 80007b4:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <rs485_send_packet_dma+0x9c>)
 80007b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <rs485_send_packet_dma+0x34>
        return RS485_BUSY;
 80007c0:	2302      	movs	r3, #2
 80007c2:	e02e      	b.n	8000822 <rs485_send_packet_dma+0x92>
    }
    
    /* Set pending flag */
    rs485_driver.tx_pending = 1;
 80007c4:	4b19      	ldr	r3, [pc, #100]	@ (800082c <rs485_send_packet_dma+0x9c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    
    /* Copy data to TX buffer */
    memcpy(rs485_driver.tx_buffer, data, length);
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <rs485_send_packet_dma+0x9c>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	887a      	ldrh	r2, [r7, #2]
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 f8de 	bl	8004996 <memcpy>
    
    /* Send data via DMA */
    status = HAL_UART_Transmit_DMA(rs485_driver.huart, rs485_driver.tx_buffer, length);
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <rs485_send_packet_dma+0x9c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a13      	ldr	r2, [pc, #76]	@ (800082c <rs485_send_packet_dma+0x9c>)
 80007e0:	68d1      	ldr	r1, [r2, #12]
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fe33 	bl	8003450 <HAL_UART_Transmit_DMA>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
    
    if (status == HAL_OK) {
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10c      	bne.n	800080e <rs485_send_packet_dma+0x7e>
        rs485_driver.stats.tx_packets++;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <rs485_send_packet_dma+0x9c>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <rs485_send_packet_dma+0x9c>)
 80007fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        rs485_driver.stats.tx_bytes += length;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <rs485_send_packet_dma+0x9c>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000802:	887b      	ldrh	r3, [r7, #2]
 8000804:	4413      	add	r3, r2
 8000806:	4a09      	ldr	r2, [pc, #36]	@ (800082c <rs485_send_packet_dma+0x9c>)
 8000808:	6353      	str	r3, [r2, #52]	@ 0x34
        return RS485_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	e009      	b.n	8000822 <rs485_send_packet_dma+0x92>
    } else {
        rs485_driver.stats.tx_errors++;
 800080e:	4b07      	ldr	r3, [pc, #28]	@ (800082c <rs485_send_packet_dma+0x9c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	3301      	adds	r3, #1
 8000814:	4a05      	ldr	r2, [pc, #20]	@ (800082c <rs485_send_packet_dma+0x9c>)
 8000816:	6413      	str	r3, [r2, #64]	@ 0x40
        rs485_driver.tx_pending = 0;
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <rs485_send_packet_dma+0x9c>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        return RS485_ERROR;
 8000820:	2301      	movs	r3, #1
    }
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000168 	.word	0x20000168

08000830 <rs485_receive_packet>:

/**
 * @brief Receive packet from RS485
 */
uint16_t rs485_receive_packet(uint8_t *buffer, uint16_t max_length)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
    if (buffer == NULL || max_length == 0) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <rs485_receive_packet+0x18>
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <rs485_receive_packet+0x1c>
        return 0;
 8000848:	2300      	movs	r3, #0
 800084a:	e013      	b.n	8000874 <rs485_receive_packet+0x44>
    }
    
    /* Process any pending DMA data */
    rs485_process_dma_rx();
 800084c:	f000 f91a 	bl	8000a84 <rs485_process_dma_rx>
    
    /* Read from ring buffer */
    uint16_t received = ring_buffer_read(&rs485_driver.rx_ring, buffer, max_length);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	461a      	mov	r2, r3
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4809      	ldr	r0, [pc, #36]	@ (800087c <rs485_receive_packet+0x4c>)
 8000858:	f000 f8b5 	bl	80009c6 <ring_buffer_read>
 800085c:	4603      	mov	r3, r0
 800085e:	81fb      	strh	r3, [r7, #14]
    
    if (received > 0) {
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d005      	beq.n	8000872 <rs485_receive_packet+0x42>
        rs485_driver.stats.rx_bytes += received;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <rs485_receive_packet+0x50>)
 8000868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800086a:	89fb      	ldrh	r3, [r7, #14]
 800086c:	4413      	add	r3, r2
 800086e:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <rs485_receive_packet+0x50>)
 8000870:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    
    return received;
 8000872:	89fb      	ldrh	r3, [r7, #14]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000178 	.word	0x20000178
 8000880:	20000168 	.word	0x20000168

08000884 <rs485_idle_interrupt_handler>:

/**
 * @brief Handle IDLE interrupt for RS485
 */
void rs485_idle_interrupt_handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800088a:	af00      	add	r7, sp, #0
    /* Clear IDLE flag */
    __HAL_UART_CLEAR_IDLEFLAG(rs485_driver.huart);
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <rs485_idle_interrupt_handler+0x80>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <rs485_idle_interrupt_handler+0x80>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80008aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
    
    /* Process received data */
    rs485_process_dma_rx();
 80008ae:	f000 f8e9 	bl	8000a84 <rs485_process_dma_rx>
    
    rs485_driver.stats.rx_packets++;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <rs485_idle_interrupt_handler+0x80>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <rs485_idle_interrupt_handler+0x80>)
 80008ba:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Call packet callback if set */
    if (rs485_driver.packet_received_callback != NULL) {
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <rs485_idle_interrupt_handler+0x80>)
 80008be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d01a      	beq.n	80008fa <rs485_idle_interrupt_handler+0x76>
        uint16_t available = ring_buffer_available(&rs485_driver.rx_ring);
 80008c4:	4810      	ldr	r0, [pc, #64]	@ (8000908 <rs485_idle_interrupt_handler+0x84>)
 80008c6:	f000 f8b6 	bl	8000a36 <ring_buffer_available>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        if (available > 0) {
 80008d0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d010      	beq.n	80008fa <rs485_idle_interrupt_handler+0x76>
            uint8_t temp_buffer[RS485_RX_BUFFER_SIZE];
            uint16_t length = ring_buffer_read(&rs485_driver.rx_ring, temp_buffer, available);
 80008d8:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4809      	ldr	r0, [pc, #36]	@ (8000908 <rs485_idle_interrupt_handler+0x84>)
 80008e2:	f000 f870 	bl	80009c6 <ring_buffer_read>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f8a7 3204 	strh.w	r3, [r7, #516]	@ 0x204
            rs485_driver.packet_received_callback(temp_buffer, length);
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <rs485_idle_interrupt_handler+0x80>)
 80008ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f0:	f8b7 1204 	ldrh.w	r1, [r7, #516]	@ 0x204
 80008f4:	463a      	mov	r2, r7
 80008f6:	4610      	mov	r0, r2
 80008f8:	4798      	blx	r3
        }
    }
}
 80008fa:	bf00      	nop
 80008fc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000168 	.word	0x20000168
 8000908:	20000178 	.word	0x20000178

0800090c <rs485_reset_stats>:

/**
 * @brief Reset RS485 statistics
 */
void rs485_reset_stats(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    memset(&rs485_driver.stats, 0, sizeof(rs485_stats_t));
 8000910:	2218      	movs	r2, #24
 8000912:	2100      	movs	r1, #0
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <rs485_reset_stats+0x14>)
 8000916:	f003 ffc3 	bl	80048a0 <memset>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000194 	.word	0x20000194

08000924 <ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
static void ring_buffer_init(ring_buffer_t *rb, uint8_t *buffer, uint16_t size)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	4613      	mov	r3, r2
 8000930:	80fb      	strh	r3, [r7, #6]
    rb->buffer = buffer;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	601a      	str	r2, [r3, #0]
    rb->size = size;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	809a      	strh	r2, [r3, #4]
    rb->head = 0;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	80da      	strh	r2, [r3, #6]
    rb->tail = 0;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	811a      	strh	r2, [r3, #8]
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <ring_buffer_write>:

/**
 * @brief Write data to ring buffer
 */
static uint16_t ring_buffer_write(ring_buffer_t *rb, const uint8_t *data, uint16_t length)
{
 8000954:	b480      	push	{r7}
 8000956:	b087      	sub	sp, #28
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	4613      	mov	r3, r2
 8000960:	80fb      	strh	r3, [r7, #6]
    uint16_t written = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	82fb      	strh	r3, [r7, #22]
    
    while (written < length) {
 8000966:	e022      	b.n	80009ae <ring_buffer_write+0x5a>
        uint16_t next_head = (rb->head + 1) % rb->size;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	b29b      	uxth	r3, r3
 800096e:	3301      	adds	r3, #1
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	8892      	ldrh	r2, [r2, #4]
 8000974:	fb93 f1f2 	sdiv	r1, r3, r2
 8000978:	fb01 f202 	mul.w	r2, r1, r2
 800097c:	1a9b      	subs	r3, r3, r2
 800097e:	82bb      	strh	r3, [r7, #20]
        
        /* Check if buffer is full */
        if (next_head == rb->tail) {
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	891b      	ldrh	r3, [r3, #8]
 8000984:	b29b      	uxth	r3, r3
 8000986:	8aba      	ldrh	r2, [r7, #20]
 8000988:	429a      	cmp	r2, r3
 800098a:	d015      	beq.n	80009b8 <ring_buffer_write+0x64>
            break;  /* Buffer full */
        }
        
        rb->buffer[rb->head] = data[written];
 800098c:	8afb      	ldrh	r3, [r7, #22]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	441a      	add	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68f9      	ldr	r1, [r7, #12]
 8000998:	88c9      	ldrh	r1, [r1, #6]
 800099a:	b289      	uxth	r1, r1
 800099c:	440b      	add	r3, r1
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	701a      	strb	r2, [r3, #0]
        rb->head = next_head;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	8aba      	ldrh	r2, [r7, #20]
 80009a6:	80da      	strh	r2, [r3, #6]
        written++;
 80009a8:	8afb      	ldrh	r3, [r7, #22]
 80009aa:	3301      	adds	r3, #1
 80009ac:	82fb      	strh	r3, [r7, #22]
    while (written < length) {
 80009ae:	8afa      	ldrh	r2, [r7, #22]
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d3d8      	bcc.n	8000968 <ring_buffer_write+0x14>
 80009b6:	e000      	b.n	80009ba <ring_buffer_write+0x66>
            break;  /* Buffer full */
 80009b8:	bf00      	nop
    }
    
    return written;
 80009ba:	8afb      	ldrh	r3, [r7, #22]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	371c      	adds	r7, #28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <ring_buffer_read>:

/**
 * @brief Read data from ring buffer
 */
static uint16_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data, uint16_t length)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b087      	sub	sp, #28
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	4613      	mov	r3, r2
 80009d2:	80fb      	strh	r3, [r7, #6]
    uint16_t read = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	82fb      	strh	r3, [r7, #22]
    
    while (read < length && rb->tail != rb->head) {
 80009d8:	e01b      	b.n	8000a12 <ring_buffer_read+0x4c>
        data[read] = rb->buffer[rb->tail];
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	8912      	ldrh	r2, [r2, #8]
 80009e2:	b292      	uxth	r2, r2
 80009e4:	441a      	add	r2, r3
 80009e6:	8afb      	ldrh	r3, [r7, #22]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	440b      	add	r3, r1
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
        rb->tail = (rb->tail + 1) % rb->size;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	891b      	ldrh	r3, [r3, #8]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3301      	adds	r3, #1
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	8892      	ldrh	r2, [r2, #4]
 80009fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a00:	fb01 f202 	mul.w	r2, r1, r2
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	811a      	strh	r2, [r3, #8]
        read++;
 8000a0c:	8afb      	ldrh	r3, [r7, #22]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	82fb      	strh	r3, [r7, #22]
    while (read < length && rb->tail != rb->head) {
 8000a12:	8afa      	ldrh	r2, [r7, #22]
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d207      	bcs.n	8000a2a <ring_buffer_read+0x64>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	891b      	ldrh	r3, [r3, #8]
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	88db      	ldrh	r3, [r3, #6]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d1d7      	bne.n	80009da <ring_buffer_read+0x14>
    }
    
    return read;
 8000a2a:	8afb      	ldrh	r3, [r7, #22]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	371c      	adds	r7, #28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <ring_buffer_available>:

/**
 * @brief Get available data in ring buffer
 */
static uint16_t ring_buffer_available(ring_buffer_t *rb)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
    if (rb->head >= rb->tail) {
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	88db      	ldrh	r3, [r3, #6]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	891b      	ldrh	r3, [r3, #8]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d308      	bcc.n	8000a60 <ring_buffer_available+0x2a>
        return rb->head - rb->tail;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	88db      	ldrh	r3, [r3, #6]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	891b      	ldrh	r3, [r3, #8]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	e00b      	b.n	8000a78 <ring_buffer_available+0x42>
    } else {
        return rb->size - rb->tail + rb->head;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	889a      	ldrh	r2, [r3, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	891b      	ldrh	r3, [r3, #8]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	88db      	ldrh	r3, [r3, #6]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	4413      	add	r3, r2
 8000a76:	b29b      	uxth	r3, r3
    }
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
	...

08000a84 <rs485_process_dma_rx>:

/**
 * @brief Process DMA received data
 */
static void rs485_process_dma_rx(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
    /* Get current DMA position */
    uint16_t dma_pos = RS485_DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(rs485_driver.huart->hdmarx);
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000a9a:	80bb      	strh	r3, [r7, #4]
    
    /* Calculate received bytes */
    uint16_t length;
    if (dma_pos >= rs485_driver.last_dma_pos) {
 8000a9c:	4b27      	ldr	r3, [pc, #156]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	88ba      	ldrh	r2, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d306      	bcc.n	8000ab6 <rs485_process_dma_rx+0x32>
        length = dma_pos - rs485_driver.last_dma_pos;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	e008      	b.n	8000ac8 <rs485_process_dma_rx+0x44>
    } else {
        /* DMA wrapped around */
        length = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos + dma_pos;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	88ba      	ldrh	r2, [r7, #4]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ac6:	80fb      	strh	r3, [r7, #6]
    }
    
    if (length > 0) {
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d031      	beq.n	8000b32 <rs485_process_dma_rx+0xae>
        /* Copy data to ring buffer */
        if (rs485_driver.last_dma_pos + length <= RS485_DMA_RX_BUFFER_SIZE) {
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	4413      	add	r3, r2
 8000ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ade:	dc0b      	bgt.n	8000af8 <rs485_process_dma_rx+0x74>
            /* Simple copy */
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <rs485_process_dma_rx+0xbc>)
 8000aea:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <rs485_process_dma_rx+0xc0>)
 8000af2:	f7ff ff2f 	bl	8000954 <ring_buffer_write>
 8000af6:	e019      	b.n	8000b2c <rs485_process_dma_rx+0xa8>
                            length);
        } else {
            /* Wrapped copy */
            uint16_t first_part = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos;
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000b02:	807b      	strh	r3, [r7, #2]
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <rs485_process_dma_rx+0xbc>)
 8000b0e:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8000b10:	887a      	ldrh	r2, [r7, #2]
 8000b12:	4619      	mov	r1, r3
 8000b14:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <rs485_process_dma_rx+0xc0>)
 8000b16:	f7ff ff1d 	bl	8000954 <ring_buffer_write>
                            first_part);
            ring_buffer_write(&rs485_driver.rx_ring, 
 8000b1a:	88fa      	ldrh	r2, [r7, #6]
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	4906      	ldr	r1, [pc, #24]	@ (8000b40 <rs485_process_dma_rx+0xbc>)
 8000b26:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <rs485_process_dma_rx+0xc0>)
 8000b28:	f7ff ff14 	bl	8000954 <ring_buffer_write>
                            &rs485_dma_rx_buffer[0], 
                            length - first_part);
        }
        
        /* Update last position */
        rs485_driver.last_dma_pos = dma_pos;
 8000b2c:	4a03      	ldr	r2, [pc, #12]	@ (8000b3c <rs485_process_dma_rx+0xb8>)
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	8553      	strh	r3, [r2, #42]	@ 0x2a
    }
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000168 	.word	0x20000168
 8000b40:	200001b0 	.word	0x200001b0
 8000b44:	20000178 	.word	0x20000178

08000b48 <Keyboard_Init>:

// 全局键盘实例
Keyboard_t g_keyboard;

// 初始化键盘模块
void Keyboard_Init(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    // 清零结构体
    memset(&g_keyboard, 0, sizeof(Keyboard_t));
 8000b4c:	2228      	movs	r2, #40	@ 0x28
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4811      	ldr	r0, [pc, #68]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b52:	f003 fea5 	bl	80048a0 <memset>
    
    // 初始化变量
    g_keyboard.current_key = KEY_NONE;
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
    g_keyboard.last_key = KEY_NONE;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	705a      	strb	r2, [r3, #1]
    g_keyboard.last_scan_time = HAL_GetTick();
 8000b62:	f001 f9df 	bl	8001f24 <HAL_GetTick>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b6a:	6053      	str	r3, [r2, #4]
    g_keyboard.key_stable = false;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	735a      	strb	r2, [r3, #13]
    g_keyboard.buffer_head = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	761a      	strb	r2, [r3, #24]
    g_keyboard.interrupt_flag = false;
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = 0;
 8000b8a:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <Keyboard_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
    
    // 初始化GPIO
    Keyboard_GPIO_Init();
 8000b90:	f000 fa0e 	bl	8000fb0 <Keyboard_GPIO_Init>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200006b0 	.word	0x200006b0

08000b9c <Keyboard_Handler>:

// 主处理函数 - 中断模式
void Keyboard_Handler(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
    // 检查中断标志
    if (g_keyboard.interrupt_flag) {
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000ba4:	7e5b      	ldrb	r3, [r3, #25]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d027      	beq.n	8000bfc <Keyboard_Handler+0x60>
        g_keyboard.interrupt_flag = false;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	765a      	strb	r2, [r3, #25]
        
        uint32_t current_time = HAL_GetTick();
 8000bb2:	f001 f9b7 	bl	8001f24 <HAL_GetTick>
 8000bb6:	60f8      	str	r0, [r7, #12]
        
        // 去抖处理 - 两次按键间隔至少 KEYBOARD_DEBOUNCE_TIME
        if (current_time - g_keyboard.last_scan_time >= KEYBOARD_DEBOUNCE_TIME) {
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b63      	cmp	r3, #99	@ 0x63
 8000bc2:	d91b      	bls.n	8000bfc <Keyboard_Handler+0x60>
            g_keyboard.last_scan_time = current_time;
 8000bc4:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6053      	str	r3, [r2, #4]
            
            // 延时5ms后再扫描，等待信号稳定
            HAL_Delay(5);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f001 f9b4 	bl	8001f38 <HAL_Delay>
            
            // 扫描键盘确定哪个按键被按下
            uint8_t key = Keyboard_ScanInterrupt();
 8000bd0:	f000 f82a 	bl	8000c28 <Keyboard_ScanInterrupt>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	72fb      	strb	r3, [r7, #11]
            
            // 处理按键 - 只处理不同于上次的按键
            if (key != KEY_NONE && key != g_keyboard.last_key) {
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00b      	beq.n	8000bf6 <Keyboard_Handler+0x5a>
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000be0:	785b      	ldrb	r3, [r3, #1]
 8000be2:	7afa      	ldrb	r2, [r7, #11]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d006      	beq.n	8000bf6 <Keyboard_Handler+0x5a>
                Keyboard_ProcessKey(key);
 8000be8:	7afb      	ldrb	r3, [r7, #11]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f9b8 	bl	8000f60 <Keyboard_ProcessKey>
                g_keyboard.last_key = key;
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	7053      	strb	r3, [r2, #1]
            }
            
            // 设置按键释放超时
            g_keyboard.key_press_time = current_time;
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6093      	str	r3, [r2, #8]
        }
    }
    
    // 检查按键释放
    uint32_t current_time = HAL_GetTick();
 8000bfc:	f001 f992 	bl	8001f24 <HAL_GetTick>
 8000c00:	6078      	str	r0, [r7, #4]
    if (g_keyboard.last_key != KEY_NONE) {
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d008      	beq.n	8000c1c <Keyboard_Handler+0x80>
        if (current_time - g_keyboard.key_press_time > KEYBOARD_RELEASE_TIME) {
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c14:	d902      	bls.n	8000c1c <Keyboard_Handler+0x80>
            g_keyboard.last_key = KEY_NONE;
 8000c16:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <Keyboard_Handler+0x88>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	705a      	strb	r2, [r3, #1]
        }
    }
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200006b0 	.word	0x200006b0

08000c28 <Keyboard_ScanInterrupt>:
    
    return KEY_NONE;
}

// Scan keyboard when interrupt triggered
uint8_t Keyboard_ScanInterrupt(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
    uint8_t key = KEY_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t confirm_count = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    // First set all columns HIGH to prepare for scanning
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f241 1130 	movw	r1, #4400	@ 0x1130
 8000c40:	488f      	ldr	r0, [pc, #572]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000c42:	f001 fee8 	bl	8002a16 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_SET);
    
    // 等待电平稳定
    HAL_Delay(1);
 8000c46:	2001      	movs	r0, #1
 8000c48:	f001 f976 	bl	8001f38 <HAL_Delay>
    // S13 -> PA12 -> Not used
    
    // Test each column one by one with confirmation
    
    // Test PA4 (COL4_PIN) for S16 -> Floor 1
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_RESET);  // PA4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	488b      	ldr	r0, [pc, #556]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000c52:	f001 fee0 	bl	8002a16 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 等待电平稳定
 8000c56:	2001      	movs	r0, #1
 8000c58:	f001 f96e 	bl	8001f38 <HAL_Delay>
    // 连续读取3次确认
    confirm_count = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < 3; i++) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
 8000c66:	e018      	b.n	8000c9a <Keyboard_ScanInterrupt+0x72>
        if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8000c68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c6c:	4884      	ldr	r0, [pc, #528]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000c6e:	f001 febb 	bl	80029e8 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d104      	bne.n	8000c82 <Keyboard_ScanInterrupt+0x5a>
            confirm_count++;
 8000c78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        for(volatile int j = 0; j < 100; j++);
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e002      	b.n	8000c8e <Keyboard_ScanInterrupt+0x66>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b63      	cmp	r3, #99	@ 0x63
 8000c92:	ddf9      	ble.n	8000c88 <Keyboard_ScanInterrupt+0x60>
    for (int i = 0; i < 3; i++) {
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	3301      	adds	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	dde3      	ble.n	8000c68 <Keyboard_ScanInterrupt+0x40>
    }
    if (confirm_count >= 2) {  // 至少3次中有2次读到低电平
 8000ca0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d902      	bls.n	8000cae <Keyboard_ScanInterrupt+0x86>
        key = KEY_S16;  // Floor 1
 8000ca8:	2310      	movs	r3, #16
 8000caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	4873      	ldr	r0, [pc, #460]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000cb4:	f001 feaf 	bl	8002a16 <HAL_GPIO_WritePin>
    
    if (key == KEY_NONE) {
 8000cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d137      	bne.n	8000d30 <Keyboard_ScanInterrupt+0x108>
        // Test PA8 (COL1_PIN) for S15 -> Floor 2
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_RESET);  // PA8
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc6:	486e      	ldr	r0, [pc, #440]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000cc8:	f001 fea5 	bl	8002a16 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f001 f933 	bl	8001f38 <HAL_Delay>
        confirm_count = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	e018      	b.n	8000d10 <Keyboard_ScanInterrupt+0xe8>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8000cde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ce2:	4867      	ldr	r0, [pc, #412]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000ce4:	f001 fe80 	bl	80029e8 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d104      	bne.n	8000cf8 <Keyboard_ScanInterrupt+0xd0>
                confirm_count++;
 8000cee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	e002      	b.n	8000d04 <Keyboard_ScanInterrupt+0xdc>
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b63      	cmp	r3, #99	@ 0x63
 8000d08:	ddf9      	ble.n	8000cfe <Keyboard_ScanInterrupt+0xd6>
        for (int i = 0; i < 3; i++) {
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dde3      	ble.n	8000cde <Keyboard_ScanInterrupt+0xb6>
        }
        if (confirm_count >= 2) {
 8000d16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d902      	bls.n	8000d24 <Keyboard_ScanInterrupt+0xfc>
            key = KEY_S15;  // Floor 2
 8000d1e:	230f      	movs	r3, #15
 8000d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2a:	4855      	ldr	r0, [pc, #340]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000d2c:	f001 fe73 	bl	8002a16 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 8000d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d135      	bne.n	8000da4 <Keyboard_ScanInterrupt+0x17c>
        // Test PA5 (COL3_PIN) for S14 -> Floor 3
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_RESET);  // PA5
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	4850      	ldr	r0, [pc, #320]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000d3e:	f001 fe6a 	bl	8002a16 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f001 f8f8 	bl	8001f38 <HAL_Delay>
        confirm_count = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	e018      	b.n	8000d86 <Keyboard_ScanInterrupt+0x15e>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8000d54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d58:	4849      	ldr	r0, [pc, #292]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000d5a:	f001 fe45 	bl	80029e8 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d104      	bne.n	8000d6e <Keyboard_ScanInterrupt+0x146>
                confirm_count++;
 8000d64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e002      	b.n	8000d7a <Keyboard_ScanInterrupt+0x152>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3301      	adds	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b63      	cmp	r3, #99	@ 0x63
 8000d7e:	ddf9      	ble.n	8000d74 <Keyboard_ScanInterrupt+0x14c>
        for (int i = 0; i < 3; i++) {
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3301      	adds	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	dde3      	ble.n	8000d54 <Keyboard_ScanInterrupt+0x12c>
        }
        if (confirm_count >= 2) {
 8000d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d902      	bls.n	8000d9a <Keyboard_ScanInterrupt+0x172>
            key = KEY_S14;  // Floor 3
 8000d94:	230e      	movs	r3, #14
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4838      	ldr	r0, [pc, #224]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000da0:	f001 fe39 	bl	8002a16 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 8000da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d137      	bne.n	8000e1c <Keyboard_ScanInterrupt+0x1f4>
        // Test PA12 (COL2_PIN) for S13 -> Not used
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_RESET);  // PA12
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db2:	4833      	ldr	r0, [pc, #204]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000db4:	f001 fe2f 	bl	8002a16 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f001 f8bd 	bl	8001f38 <HAL_Delay>
        confirm_count = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e018      	b.n	8000dfc <Keyboard_ScanInterrupt+0x1d4>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8000dca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dce:	482c      	ldr	r0, [pc, #176]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000dd0:	f001 fe0a 	bl	80029e8 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <Keyboard_ScanInterrupt+0x1bc>
                confirm_count++;
 8000dda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dde:	3301      	adds	r3, #1
 8000de0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 8000de4:	2300      	movs	r3, #0
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	e002      	b.n	8000df0 <Keyboard_ScanInterrupt+0x1c8>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2b63      	cmp	r3, #99	@ 0x63
 8000df4:	ddf9      	ble.n	8000dea <Keyboard_ScanInterrupt+0x1c2>
        for (int i = 0; i < 3; i++) {
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	dde3      	ble.n	8000dca <Keyboard_ScanInterrupt+0x1a2>
        }
        if (confirm_count >= 2) {
 8000e02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d902      	bls.n	8000e10 <Keyboard_ScanInterrupt+0x1e8>
            key = KEY_S13;  // S13 detected but not used in elevator logic
 8000e0a:	230d      	movs	r3, #13
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e16:	481a      	ldr	r0, [pc, #104]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000e18:	f001 fdfd 	bl	8002a16 <HAL_GPIO_WritePin>
    }
    
    // 等待按键释放
    if (key != KEY_NONE) {
 8000e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d020      	beq.n	8000e66 <Keyboard_ScanInterrupt+0x23e>
        // 等待按键释放（最多等500ms）
        uint32_t wait_start = HAL_GetTick();
 8000e24:	f001 f87e 	bl	8001f24 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]
        while ((HAL_GetTick() - wait_start) < 500) {
 8000e2a:	e014      	b.n	8000e56 <Keyboard_ScanInterrupt+0x22e>
            // 设置所有列为HIGH
            HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f241 1130 	movw	r1, #4400	@ 0x1130
 8000e32:	4813      	ldr	r0, [pc, #76]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000e34:	f001 fdef 	bl	8002a16 <HAL_GPIO_WritePin>
                              KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                              KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                              GPIO_PIN_SET);
            HAL_Delay(5);
 8000e38:	2005      	movs	r0, #5
 8000e3a:	f001 f87d 	bl	8001f38 <HAL_Delay>
            
            // 检查是否释放
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_SET) {
 8000e3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e42:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000e44:	f001 fdd0 	bl	80029e8 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d103      	bne.n	8000e56 <Keyboard_ScanInterrupt+0x22e>
                // 按键已释放
                HAL_Delay(10);  // 额外延时确保完全释放
 8000e4e:	200a      	movs	r0, #10
 8000e50:	f001 f872 	bl	8001f38 <HAL_Delay>
                break;
 8000e54:	e007      	b.n	8000e66 <Keyboard_ScanInterrupt+0x23e>
        while ((HAL_GetTick() - wait_start) < 500) {
 8000e56:	f001 f865 	bl	8001f24 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e64:	d3e2      	bcc.n	8000e2c <Keyboard_ScanInterrupt+0x204>
            }
        }
    }
    
    // After scanning, set all columns LOW again for next interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8000e66:	2200      	movs	r2, #0
 8000e68:	f241 1130 	movw	r1, #4400	@ 0x1130
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <Keyboard_ScanInterrupt+0x258>)
 8000e6e:	f001 fdd2 	bl	8002a16 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
    
    return key;
 8000e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800

08000e84 <Keyboard_PushKey>:
bool Keyboard_IsKeyPressed(uint8_t key) {
    return (g_keyboard.current_key == key && g_keyboard.key_stable);
}

// 将按键推入缓冲区
bool Keyboard_PushKey(uint8_t key) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
    if (g_keyboard.buffer_count >= KEYBOARD_BUFFER_SIZE) {
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <Keyboard_PushKey+0x58>)
 8000e90:	7e1b      	ldrb	r3, [r3, #24]
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d901      	bls.n	8000e9a <Keyboard_PushKey+0x16>
        return false;  // 缓冲区满
 8000e96:	2300      	movs	r3, #0
 8000e98:	e01a      	b.n	8000ed0 <Keyboard_PushKey+0x4c>
    }
    
    g_keyboard.key_buffer[g_keyboard.buffer_tail] = key;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <Keyboard_PushKey+0x58>)
 8000e9c:	7ddb      	ldrb	r3, [r3, #23]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <Keyboard_PushKey+0x58>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	739a      	strb	r2, [r3, #14]
    g_keyboard.buffer_tail = (g_keyboard.buffer_tail + 1) % KEYBOARD_BUFFER_SIZE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <Keyboard_PushKey+0x58>)
 8000eaa:	7ddb      	ldrb	r3, [r3, #23]
 8000eac:	3301      	adds	r3, #1
 8000eae:	425a      	negs	r2, r3
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	f002 0207 	and.w	r2, r2, #7
 8000eb8:	bf58      	it	pl
 8000eba:	4253      	negpl	r3, r2
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <Keyboard_PushKey+0x58>)
 8000ec0:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count++;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <Keyboard_PushKey+0x58>)
 8000ec4:	7e1b      	ldrb	r3, [r3, #24]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <Keyboard_PushKey+0x58>)
 8000ecc:	761a      	strb	r2, [r3, #24]
    
    return true;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200006b0 	.word	0x200006b0

08000ee0 <Keyboard_PopKey>:

// 从缓冲区弹出按键
bool Keyboard_PopKey(uint8_t* key) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    if (g_keyboard.buffer_count == 0) {
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <Keyboard_PopKey+0x58>)
 8000eea:	7e1b      	ldrb	r3, [r3, #24]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <Keyboard_PopKey+0x14>
        return false;  // 缓冲区空
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e01b      	b.n	8000f2c <Keyboard_PopKey+0x4c>
    }
    
    *key = g_keyboard.key_buffer[g_keyboard.buffer_head];
 8000ef4:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <Keyboard_PopKey+0x58>)
 8000ef6:	7d9b      	ldrb	r3, [r3, #22]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <Keyboard_PopKey+0x58>)
 8000efc:	4413      	add	r3, r2
 8000efe:	7b9a      	ldrb	r2, [r3, #14]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	701a      	strb	r2, [r3, #0]
    g_keyboard.buffer_head = (g_keyboard.buffer_head + 1) % KEYBOARD_BUFFER_SIZE;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <Keyboard_PopKey+0x58>)
 8000f06:	7d9b      	ldrb	r3, [r3, #22]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	425a      	negs	r2, r3
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	f002 0207 	and.w	r2, r2, #7
 8000f14:	bf58      	it	pl
 8000f16:	4253      	negpl	r3, r2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <Keyboard_PopKey+0x58>)
 8000f1c:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_count--;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <Keyboard_PopKey+0x58>)
 8000f20:	7e1b      	ldrb	r3, [r3, #24]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <Keyboard_PopKey+0x58>)
 8000f28:	761a      	strb	r2, [r3, #24]
    
    return true;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200006b0 	.word	0x200006b0

08000f3c <Keyboard_ClearBuffer>:
bool Keyboard_HasKey(void) {
    return g_keyboard.buffer_count > 0;
}

// 清空缓冲区
void Keyboard_ClearBuffer(void) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
    g_keyboard.buffer_head = 0;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <Keyboard_ClearBuffer+0x20>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <Keyboard_ClearBuffer+0x20>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <Keyboard_ClearBuffer+0x20>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	761a      	strb	r2, [r3, #24]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200006b0 	.word	0x200006b0

08000f60 <Keyboard_ProcessKey>:

// 处理按键
void Keyboard_ProcessKey(uint8_t key) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    if (key != KEY_NONE) {
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d019      	beq.n	8000fa4 <Keyboard_ProcessKey+0x44>
        g_keyboard.total_key_presses++;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <Keyboard_ProcessKey+0x4c>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <Keyboard_ProcessKey+0x4c>)
 8000f78:	6213      	str	r3, [r2, #32]
        g_keyboard.key_press_time = HAL_GetTick();
 8000f7a:	f000 ffd3 	bl	8001f24 <HAL_GetTick>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <Keyboard_ProcessKey+0x4c>)
 8000f82:	6093      	str	r3, [r2, #8]
        
        // 推入缓冲区
        if (!Keyboard_PushKey(key)) {
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff7c 	bl	8000e84 <Keyboard_PushKey>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <Keyboard_ProcessKey+0x44>
            // 缓冲区满，清空后再推入
            Keyboard_ClearBuffer();
 8000f98:	f7ff ffd0 	bl	8000f3c <Keyboard_ClearBuffer>
            Keyboard_PushKey(key);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff70 	bl	8000e84 <Keyboard_PushKey>
        }
        
    }
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200006b0 	.word	0x200006b0

08000fb0 <Keyboard_GPIO_Init>:


// GPIO Init
void Keyboard_GPIO_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    // GPIO is already initialized in gpio.c
    // Set all columns LOW initially for interrupt mode
    // When any button is pressed, it will pull PA11 LOW and trigger interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f241 1130 	movw	r1, #4400	@ 0x1130
 8000fba:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <Keyboard_GPIO_Init+0x14>)
 8000fbc:	f001 fd2b 	bl	8002a16 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <Keyboard_IRQHandler>:


// 中断处理函数
void Keyboard_IRQHandler(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
    // 设置中断标志
    g_keyboard.interrupt_flag = true;
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <Keyboard_IRQHandler+0x18>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = HAL_GetTick();
 8000fd2:	f000 ffa7 	bl	8001f24 <HAL_GetTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a01      	ldr	r2, [pc, #4]	@ (8000fe0 <Keyboard_IRQHandler+0x18>)
 8000fda:	61d3      	str	r3, [r2, #28]
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200006b0 	.word	0x200006b0

08000fe4 <PhotoSensor_Init>:

/**
 * @brief Initialize photo sensor on PB5 with interrupt
 */
void PhotoSensor_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
    
    /* Enable GPIOB clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <PhotoSensor_Init+0x68>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a13      	ldr	r2, [pc, #76]	@ (800104c <PhotoSensor_Init+0x68>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <PhotoSensor_Init+0x68>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
    
    /* Configure PB5 as input with pull-up */
    GPIO_InitStruct.Pin = PHOTO_SENSOR_GPIO_PIN;  // GPIO_PIN_5
 8001010:	2320      	movs	r3, #32
 8001012:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;   /* Interrupt on rising edge only */
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <PhotoSensor_Init+0x6c>)
 8001016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;           /* Internal pull-up resistor */
 8001018:	2301      	movs	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PHOTO_SENSOR_GPIO_PORT, &GPIO_InitStruct);
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <PhotoSensor_Init+0x70>)
 8001024:	f001 fb5c 	bl	80026e0 <HAL_GPIO_Init>
    
    /* Enable and set EXTI9_5 interrupt priority (PB5 uses this) */
    HAL_NVIC_SetPriority(PHOTO_SENSOR_IRQn, 2, 0);  // EXTI9_5_IRQn
 8001028:	2200      	movs	r2, #0
 800102a:	2102      	movs	r1, #2
 800102c:	2017      	movs	r0, #23
 800102e:	f001 f87e 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PHOTO_SENSOR_IRQn);
 8001032:	2017      	movs	r0, #23
 8001034:	f001 f897 	bl	8002166 <HAL_NVIC_EnableIRQ>
    
    /* Reset counter */
    trigger_count = 0;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <PhotoSensor_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
    last_trigger_time = 0;
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <PhotoSensor_Init+0x78>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	10110000 	.word	0x10110000
 8001054:	40010c00 	.word	0x40010c00
 8001058:	200006d8 	.word	0x200006d8
 800105c:	200006dc 	.word	0x200006dc

08001060 <PhotoSensor_GetState>:
/**
 * @brief Get current state of photo sensor
 * @return PHOTO_SENSOR_BLOCKED if object detected, PHOTO_SENSOR_CLEAR if no object
 */
photo_sensor_state_t PhotoSensor_GetState(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
    /* Read GPIO pin state */
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(PHOTO_SENSOR_GPIO_PORT, PHOTO_SENSOR_GPIO_PIN);
 8001066:	2120      	movs	r1, #32
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <PhotoSensor_GetState+0x28>)
 800106a:	f001 fcbd 	bl	80029e8 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    
    /* White line (Dark-ON): LOW = object detected, HIGH = no object */
    if (pin_state == GPIO_PIN_RESET) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <PhotoSensor_GetState+0x1c>
        return PHOTO_SENSOR_BLOCKED;
 8001078:	2300      	movs	r3, #0
 800107a:	e000      	b.n	800107e <PhotoSensor_GetState+0x1e>
    } else {
        return PHOTO_SENSOR_CLEAR;
 800107c:	2301      	movs	r3, #1
    }
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010c00 	.word	0x40010c00

0800108c <PhotoSensor_IRQHandler>:
/**
 * @brief Photo sensor interrupt handler
 * @note Called from HAL_GPIO_EXTI_Callback
 */
void PhotoSensor_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
    /* Simple debounce: ignore triggers within 50ms */
    uint32_t current_time = HAL_GetTick();
 8001092:	f000 ff47 	bl	8001f24 <HAL_GetTick>
 8001096:	6078      	str	r0, [r7, #4]
    if (current_time - last_trigger_time > 50) {
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <PhotoSensor_IRQHandler+0x34>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b32      	cmp	r3, #50	@ 0x32
 80010a2:	d909      	bls.n	80010b8 <PhotoSensor_IRQHandler+0x2c>
        trigger_count++;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <PhotoSensor_IRQHandler+0x38>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <PhotoSensor_IRQHandler+0x38>)
 80010ac:	6013      	str	r3, [r2, #0]
        last_trigger_time = current_time;
 80010ae:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <PhotoSensor_IRQHandler+0x34>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6013      	str	r3, [r2, #0]
        
        /* Call user callback */
        PhotoSensor_TriggerCallback();
 80010b4:	f000 fbc2 	bl	800183c <PhotoSensor_TriggerCallback>
    }
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200006dc 	.word	0x200006dc
 80010c4:	200006d8 	.word	0x200006d8

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_DMA_Init+0x48>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <MX_DMA_Init+0x48>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <MX_DMA_Init+0x48>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2010      	movs	r0, #16
 80010ec:	f001 f81f 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010f0:	2010      	movs	r0, #16
 80010f2:	f001 f838 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2011      	movs	r0, #17
 80010fc:	f001 f817 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001100:	2011      	movs	r0, #17
 8001102:	f001 f830 	bl	8002166 <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001128:	4b38      	ldr	r3, [pc, #224]	@ (800120c <MX_GPIO_Init+0xf8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a37      	ldr	r2, [pc, #220]	@ (800120c <MX_GPIO_Init+0xf8>)
 800112e:	f043 0320 	orr.w	r3, r3, #32
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b35      	ldr	r3, [pc, #212]	@ (800120c <MX_GPIO_Init+0xf8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b32      	ldr	r3, [pc, #200]	@ (800120c <MX_GPIO_Init+0xf8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a31      	ldr	r2, [pc, #196]	@ (800120c <MX_GPIO_Init+0xf8>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <MX_GPIO_Init+0xf8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <MX_GPIO_Init+0xf8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_GPIO_Init+0xf8>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b29      	ldr	r3, [pc, #164]	@ (800120c <MX_GPIO_Init+0xf8>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2102      	movs	r1, #2
 8001174:	4826      	ldr	r0, [pc, #152]	@ (8001210 <MX_GPIO_Init+0xfc>)
 8001176:	f001 fc4e 	bl	8002a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001180:	4823      	ldr	r0, [pc, #140]	@ (8001210 <MX_GPIO_Init+0xfc>)
 8001182:	f001 fc48 	bl	8002a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	481c      	ldr	r0, [pc, #112]	@ (8001210 <MX_GPIO_Init+0xfc>)
 800119e:	f001 fa9f 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA12 (Keyboard columns - output) */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12;
 80011a2:	f241 1330 	movw	r3, #4400	@ 0x1130
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4815      	ldr	r0, [pc, #84]	@ (8001210 <MX_GPIO_Init+0xfc>)
 80011bc:	f001 fa90 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 (Keyboard row r4 - input with interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_GPIO_Init+0x100>)
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	480e      	ldr	r0, [pc, #56]	@ (8001210 <MX_GPIO_Init+0xfc>)
 80011d6:	f001 fa83 	bl	80026e0 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2102      	movs	r1, #2
 80011de:	2028      	movs	r0, #40	@ 0x28
 80011e0:	f000 ffa5 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011e4:	2028      	movs	r0, #40	@ 0x28
 80011e6:	f000 ffbe 	bl	8002166 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ea:	2301      	movs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <MX_GPIO_Init+0x104>)
 80011fe:	f001 fa6f 	bl	80026e0 <HAL_GPIO_Init>
  
  /* PB5 is configured by PhotoSensor_Init() as input with interrupt */

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800
 8001214:	10210000 	.word	0x10210000
 8001218:	40010c00 	.word	0x40010c00

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b087      	sub	sp, #28
 8001220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001222:	f000 fe27 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f8b9 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f7ff ff73 	bl	8001114 <MX_GPIO_Init>
  MX_DMA_Init();
 800122e:	f7ff ff4b 	bl	80010c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001232:	f000 fc9b 	bl	8001b6c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001236:	f000 fc45 	bl	8001ac4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800123a:	f000 fc6d 	bl	8001b18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  printf("\r\n=== SLAVE MCU - ELEVATOR CONTROL SYSTEM ===\r\n");
 800123e:	4840      	ldr	r0, [pc, #256]	@ (8001340 <main+0x124>)
 8001240:	f003 fa2c 	bl	800469c <puts>
  printf("Keyboard + Photo Sensor + Door Control\r\n\r\n");
 8001244:	483f      	ldr	r0, [pc, #252]	@ (8001344 <main+0x128>)
 8001246:	f003 fa29 	bl	800469c <puts>
  
  /* 初始化RS485通信 */
  rs485_init();
 800124a:	f7ff fa57 	bl	80006fc <rs485_init>
  printf("[RS485] Initialized on USART2\r\n");
 800124e:	483e      	ldr	r0, [pc, #248]	@ (8001348 <main+0x12c>)
 8001250:	f003 fa24 	bl	800469c <puts>
  
  /* 初始化键盘 - 中断模式 */
  Keyboard_Init();
 8001254:	f7ff fc78 	bl	8000b48 <Keyboard_Init>
  printf("[KEYBOARD] Initialized (PA11 EXTI)\r\n");
 8001258:	483c      	ldr	r0, [pc, #240]	@ (800134c <main+0x130>)
 800125a:	f003 fa1f 	bl	800469c <puts>
  printf("  S16 (PA4)  -> Floor 1 (Cabin Call)\r\n");
 800125e:	483c      	ldr	r0, [pc, #240]	@ (8001350 <main+0x134>)
 8001260:	f003 fa1c 	bl	800469c <puts>
  printf("  S15 (PA8)  -> Floor 2 (Cabin Call)\r\n");
 8001264:	483b      	ldr	r0, [pc, #236]	@ (8001354 <main+0x138>)
 8001266:	f003 fa19 	bl	800469c <puts>
  printf("  S14 (PA5)  -> Floor 3 (Cabin Call)\r\n");
 800126a:	483b      	ldr	r0, [pc, #236]	@ (8001358 <main+0x13c>)
 800126c:	f003 fa16 	bl	800469c <puts>
  printf("  S13 (PA12) -> Not Used\r\n\r\n");
 8001270:	483a      	ldr	r0, [pc, #232]	@ (800135c <main+0x140>)
 8001272:	f003 fa13 	bl	800469c <puts>
  
  /* 初始化光电传感器 - 中断模式 */
  PhotoSensor_Init();
 8001276:	f7ff feb5 	bl	8000fe4 <PhotoSensor_Init>
  photo_sensor_state_t initial_state = PhotoSensor_GetState();
 800127a:	f7ff fef1 	bl	8001060 <PhotoSensor_GetState>
 800127e:	4603      	mov	r3, r0
 8001280:	72fb      	strb	r3, [r7, #11]
  last_sensor_state = initial_state;
 8001282:	4a37      	ldr	r2, [pc, #220]	@ (8001360 <main+0x144>)
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	7013      	strb	r3, [r2, #0]
  printf("[PHOTO] Initialized (PB5 EXTI) - State: %s\r\n", 
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <main+0x76>
 800128e:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <main+0x148>)
 8001290:	e000      	b.n	8001294 <main+0x78>
 8001292:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <main+0x14c>)
 8001294:	4619      	mov	r1, r3
 8001296:	4835      	ldr	r0, [pc, #212]	@ (800136c <main+0x150>)
 8001298:	f003 f998 	bl	80045cc <iprintf>
  
  /* 初始化舵机门控系统 - 暂时禁用 */
  // servo_init(&huart1);  // 使用USART1控制舵机
  // DoorControl_Init(&door_controller, 0);  // 使用舵机ID 0
  // DoorControl_Close(&door_controller);  // 初始关门
  printf("[DOOR] DISABLED for testing\r\n");
 800129c:	4834      	ldr	r0, [pc, #208]	@ (8001370 <main+0x154>)
 800129e:	f003 f9fd 	bl	800469c <puts>
  
  /* 初始化Local Blackboard - 中央事件管理 */
  LocalBB_Init();
 80012a2:	f7fe ff53 	bl	800014c <LocalBB_Init>
  printf("[LocalBB] Initialized - Event queue ready\r\n");
 80012a6:	4833      	ldr	r0, [pc, #204]	@ (8001374 <main+0x158>)
 80012a8:	f003 f9f8 	bl	800469c <puts>
  
  printf("\r\nSystem ready. Waiting for commands...\r\n\r\n");
 80012ac:	4832      	ldr	r0, [pc, #200]	@ (8001378 <main+0x15c>)
 80012ae:	f003 f9f5 	bl	800469c <puts>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_status_time = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  uint32_t last_door_update = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 80012ba:	f000 fe33 	bl	8001f24 <HAL_GetTick>
 80012be:	6038      	str	r0, [r7, #0]
    
    /* 处理键盘输入 */
    ProcessKeyboard();
 80012c0:	f000 f8b2 	bl	8001428 <ProcessKeyboard>
    
    /* 处理光电传感器 */
    ProcessPhotoSensor();
 80012c4:	f000 f91c 	bl	8001500 <ProcessPhotoSensor>
    
    /* 处理RS485接收 */
    ProcessRS485();
 80012c8:	f000 f9a8 	bl	800161c <ProcessRS485>
    //     last_door_update = current_time;
    //     ProcessDoorControl();
    // }
    
    /* 处理LocalBB事件队列 */
    LocalBB_Process();
 80012cc:	f7ff f912 	bl	80004f4 <LocalBB_Process>
    
    /* 每5秒打印一次状态 */
    if (current_time - last_status_time >= 5000) {
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012da:	4293      	cmp	r3, r2
 80012dc:	d9ed      	bls.n	80012ba <main+0x9e>
        last_status_time = current_time;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
               system_state.current_floor,
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <main+0x160>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80012e6:	4619      	mov	r1, r3
               system_state.direction == DIR_UP ? "UP" : 
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <main+0x160>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d007      	beq.n	8001300 <main+0xe4>
               system_state.direction == DIR_DOWN ? "DN" : "STOP",
 80012f0:	4b22      	ldr	r3, [pc, #136]	@ (800137c <main+0x160>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d101      	bne.n	80012fc <main+0xe0>
 80012f8:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <main+0x164>)
 80012fa:	e002      	b.n	8001302 <main+0xe6>
 80012fc:	4a21      	ldr	r2, [pc, #132]	@ (8001384 <main+0x168>)
 80012fe:	e000      	b.n	8001302 <main+0xe6>
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8001300:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <main+0x16c>)
               system_state.door_is_open ? "OPEN" : "CLOSED");
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <main+0x160>)
 8001304:	78db      	ldrb	r3, [r3, #3]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <main+0xf2>
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <main+0x170>)
 800130c:	e000      	b.n	8001310 <main+0xf4>
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <main+0x174>)
 8001310:	4820      	ldr	r0, [pc, #128]	@ (8001394 <main+0x178>)
 8001312:	f003 f95b 	bl	80045cc <iprintf>
        printf("  Keyboard=%lu, Photo=%lu, RS485_RX=%lu, TX=%lu, DoorCmd=%lu\r\n",
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <main+0x160>)
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <main+0x160>)
 800131c:	6898      	ldr	r0, [r3, #8]
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <main+0x160>)
 8001320:	68dc      	ldr	r4, [r3, #12]
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <main+0x160>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	4a15      	ldr	r2, [pc, #84]	@ (800137c <main+0x160>)
 8001328:	6952      	ldr	r2, [r2, #20]
 800132a:	9201      	str	r2, [sp, #4]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4623      	mov	r3, r4
 8001330:	4602      	mov	r2, r0
 8001332:	4819      	ldr	r0, [pc, #100]	@ (8001398 <main+0x17c>)
 8001334:	f003 f94a 	bl	80045cc <iprintf>
               system_state.keyboard_count,
               system_state.photo_count,
               system_state.rs485_rx_count,
               system_state.rs485_tx_count,
               system_state.door_cmd_count);
        LocalBB_PrintStatus();
 8001338:	f7ff f986 	bl	8000648 <LocalBB_PrintStatus>
  {
 800133c:	e7bd      	b.n	80012ba <main+0x9e>
 800133e:	bf00      	nop
 8001340:	080059a4 	.word	0x080059a4
 8001344:	080059d4 	.word	0x080059d4
 8001348:	08005a00 	.word	0x08005a00
 800134c:	08005a20 	.word	0x08005a20
 8001350:	08005a44 	.word	0x08005a44
 8001354:	08005a6c 	.word	0x08005a6c
 8001358:	08005a94 	.word	0x08005a94
 800135c:	08005abc 	.word	0x08005abc
 8001360:	20000018 	.word	0x20000018
 8001364:	08005ad8 	.word	0x08005ad8
 8001368:	08005ae0 	.word	0x08005ae0
 800136c:	08005ae8 	.word	0x08005ae8
 8001370:	08005b18 	.word	0x08005b18
 8001374:	08005b38 	.word	0x08005b38
 8001378:	08005b64 	.word	0x08005b64
 800137c:	20000000 	.word	0x20000000
 8001380:	08005b90 	.word	0x08005b90
 8001384:	08005b94 	.word	0x08005b94
 8001388:	08005b9c 	.word	0x08005b9c
 800138c:	08005ba0 	.word	0x08005ba0
 8001390:	08005ba8 	.word	0x08005ba8
 8001394:	08005bb0 	.word	0x08005bb0
 8001398:	08005bd8 	.word	0x08005bd8

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	@ 0x40
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0318 	add.w	r3, r7, #24
 80013a6:	2228      	movs	r2, #40	@ 0x28
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fa78 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d0:	2302      	movs	r3, #2
 80013d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fb47 	bl	8002a78 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013f0:	f000 fa45 	bl	800187e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fdb4 	bl	8002f7c <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800141a:	f000 fa30 	bl	800187e <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3740      	adds	r7, #64	@ 0x40
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <ProcessKeyboard>:
/* USER CODE BEGIN 4 */

/**
  * @brief  处理键盘输入
  */
void ProcessKeyboard(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
    Keyboard_Handler();
 800142e:	f7ff fbb5 	bl	8000b9c <Keyboard_Handler>
    
    uint8_t key;
    if (Keyboard_PopKey(&key)) {
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd53 	bl	8000ee0 <Keyboard_PopKey>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d048      	beq.n	80014d2 <ProcessKeyboard+0xaa>
        system_state.keyboard_count++;
 8001440:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <ProcessKeyboard+0xb4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	3301      	adds	r3, #1
 8001446:	4a25      	ldr	r2, [pc, #148]	@ (80014dc <ProcessKeyboard+0xb4>)
 8001448:	6053      	str	r3, [r2, #4]
        
        printf("\r\n========================================\r\n");
 800144a:	4825      	ldr	r0, [pc, #148]	@ (80014e0 <ProcessKeyboard+0xb8>)
 800144c:	f003 f926 	bl	800469c <puts>
        printf("[KEYBOARD #%lu] Key detected: 0x%02X\r\n", system_state.keyboard_count, key);
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <ProcessKeyboard+0xb4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4619      	mov	r1, r3
 8001458:	4822      	ldr	r0, [pc, #136]	@ (80014e4 <ProcessKeyboard+0xbc>)
 800145a:	f003 f8b7 	bl	80045cc <iprintf>
        
        switch(key) {
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	3b0d      	subs	r3, #13
 8001462:	2b03      	cmp	r3, #3
 8001464:	d82c      	bhi.n	80014c0 <ProcessKeyboard+0x98>
 8001466:	a201      	add	r2, pc, #4	@ (adr r2, 800146c <ProcessKeyboard+0x44>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	080014b9 	.word	0x080014b9
 8001470:	080014a5 	.word	0x080014a5
 8001474:	08001491 	.word	0x08001491
 8001478:	0800147d 	.word	0x0800147d
            case KEY_S16:  // Floor 1
                printf("S16 -> Floor 1 call\r\n");
 800147c:	481a      	ldr	r0, [pc, #104]	@ (80014e8 <ProcessKeyboard+0xc0>)
 800147e:	f003 f90d 	bl	800469c <puts>
                SendCabinCall(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f000 f988 	bl	8001798 <SendCabinCall>
                LocalBB_AddCabinCall(1);
 8001488:	2001      	movs	r0, #1
 800148a:	f7fe ff1d 	bl	80002c8 <LocalBB_AddCabinCall>
                break;
 800148e:	e01d      	b.n	80014cc <ProcessKeyboard+0xa4>
                
            case KEY_S15:  // Floor 2
                printf("S15 -> Floor 2 call\r\n");
 8001490:	4816      	ldr	r0, [pc, #88]	@ (80014ec <ProcessKeyboard+0xc4>)
 8001492:	f003 f903 	bl	800469c <puts>
                SendCabinCall(2);
 8001496:	2002      	movs	r0, #2
 8001498:	f000 f97e 	bl	8001798 <SendCabinCall>
                LocalBB_AddCabinCall(2);
 800149c:	2002      	movs	r0, #2
 800149e:	f7fe ff13 	bl	80002c8 <LocalBB_AddCabinCall>
                break;
 80014a2:	e013      	b.n	80014cc <ProcessKeyboard+0xa4>
                
            case KEY_S14:  // Floor 3
                printf("S14 -> Floor 3 call\r\n");
 80014a4:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <ProcessKeyboard+0xc8>)
 80014a6:	f003 f8f9 	bl	800469c <puts>
                SendCabinCall(3);
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 f974 	bl	8001798 <SendCabinCall>
                LocalBB_AddCabinCall(3);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f7fe ff09 	bl	80002c8 <LocalBB_AddCabinCall>
                break;
 80014b6:	e009      	b.n	80014cc <ProcessKeyboard+0xa4>
                
            case KEY_S13:  // Not used
                printf("S13 pressed (not used)\r\n");
 80014b8:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <ProcessKeyboard+0xcc>)
 80014ba:	f003 f8ef 	bl	800469c <puts>
                break;
 80014be:	e005      	b.n	80014cc <ProcessKeyboard+0xa4>
                
            default:
                printf("Unknown key (0x%02X)\r\n", key);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <ProcessKeyboard+0xd0>)
 80014c6:	f003 f881 	bl	80045cc <iprintf>
                break;
 80014ca:	bf00      	nop
        }
        printf("========================================\r\n");
 80014cc:	480b      	ldr	r0, [pc, #44]	@ (80014fc <ProcessKeyboard+0xd4>)
 80014ce:	f003 f8e5 	bl	800469c <puts>
    }
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000000 	.word	0x20000000
 80014e0:	08005c18 	.word	0x08005c18
 80014e4:	08005c44 	.word	0x08005c44
 80014e8:	08005c6c 	.word	0x08005c6c
 80014ec:	08005c84 	.word	0x08005c84
 80014f0:	08005c9c 	.word	0x08005c9c
 80014f4:	08005cb4 	.word	0x08005cb4
 80014f8:	08005ccc 	.word	0x08005ccc
 80014fc:	08005ce4 	.word	0x08005ce4

08001500 <ProcessPhotoSensor>:

/**
  * @brief  处理光电传感器
  */
void ProcessPhotoSensor(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
    if (sensor_triggered) {
 8001506:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <ProcessPhotoSensor+0xfc>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d071      	beq.n	80015f4 <ProcessPhotoSensor+0xf4>
        sensor_triggered = false;
 8001510:	4b3a      	ldr	r3, [pc, #232]	@ (80015fc <ProcessPhotoSensor+0xfc>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
        
        photo_sensor_state_t current_state = PhotoSensor_GetState();
 8001516:	f7ff fda3 	bl	8001060 <PhotoSensor_GetState>
 800151a:	4603      	mov	r3, r0
 800151c:	71bb      	strb	r3, [r7, #6]
        
        /* 只在状态从CLEAR变为BLOCKED时触发（到达楼层） */
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d164      	bne.n	80015ee <ProcessPhotoSensor+0xee>
            last_sensor_state == PHOTO_SENSOR_CLEAR) {
 8001524:	4b36      	ldr	r3, [pc, #216]	@ (8001600 <ProcessPhotoSensor+0x100>)
 8001526:	781b      	ldrb	r3, [r3, #0]
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 8001528:	2b01      	cmp	r3, #1
 800152a:	d160      	bne.n	80015ee <ProcessPhotoSensor+0xee>
            
            system_state.photo_count++;
 800152c:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <ProcessPhotoSensor+0x104>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	4a34      	ldr	r2, [pc, #208]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001534:	6093      	str	r3, [r2, #8]
            
            /* 根据移动方向判断到达的楼层 */
            uint8_t detected_floor = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
            
            if (system_state.direction == DIR_UP) {
 800153a:	4b32      	ldr	r3, [pc, #200]	@ (8001604 <ProcessPhotoSensor+0x104>)
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10e      	bne.n	8001560 <ProcessPhotoSensor+0x60>
                /* 上行时，预测下一个楼层 */
                if (system_state.current_floor < system_state.target_floor) {
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001548:	789b      	ldrb	r3, [r3, #2]
 800154a:	429a      	cmp	r2, r3
 800154c:	d204      	bcs.n	8001558 <ProcessPhotoSensor+0x58>
                    detected_floor = system_state.current_floor + 1;
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	e019      	b.n	800158c <ProcessPhotoSensor+0x8c>
                } else {
                    detected_floor = system_state.target_floor;
 8001558:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <ProcessPhotoSensor+0x104>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	e015      	b.n	800158c <ProcessPhotoSensor+0x8c>
                }
            }
            else if (system_state.direction == DIR_DOWN) {
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d10e      	bne.n	8001586 <ProcessPhotoSensor+0x86>
                /* 下行时，预测下一个楼层 */
                if (system_state.current_floor > system_state.target_floor) {
 8001568:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <ProcessPhotoSensor+0x104>)
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <ProcessPhotoSensor+0x104>)
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	429a      	cmp	r2, r3
 8001572:	d904      	bls.n	800157e <ProcessPhotoSensor+0x7e>
                    detected_floor = system_state.current_floor - 1;
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	e006      	b.n	800158c <ProcessPhotoSensor+0x8c>
                } else {
                    detected_floor = system_state.target_floor;
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001580:	789b      	ldrb	r3, [r3, #2]
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	e002      	b.n	800158c <ProcessPhotoSensor+0x8c>
                }
            }
            else {
                /* 停止状态，保持当前楼层 */
                detected_floor = system_state.current_floor;
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <ProcessPhotoSensor+0x104>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
            }
            
            /* 确保楼层在有效范围内 */
            if (detected_floor < 1) detected_floor = 1;
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <ProcessPhotoSensor+0x96>
 8001592:	2301      	movs	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
            if (detected_floor > MAX_FLOORS) detected_floor = MAX_FLOORS;
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d901      	bls.n	80015a0 <ProcessPhotoSensor+0xa0>
 800159c:	2303      	movs	r3, #3
 800159e:	71fb      	strb	r3, [r7, #7]
            
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s)\r\n",
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <ProcessPhotoSensor+0x104>)
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	79fa      	ldrb	r2, [r7, #7]
                   system_state.photo_count, detected_floor,
                   system_state.direction == DIR_UP ? "UP" :
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <ProcessPhotoSensor+0x104>)
 80015a8:	785b      	ldrb	r3, [r3, #1]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s)\r\n",
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d007      	beq.n	80015be <ProcessPhotoSensor+0xbe>
                   system_state.direction == DIR_DOWN ? "DN" : "STOP");
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <ProcessPhotoSensor+0x104>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d101      	bne.n	80015ba <ProcessPhotoSensor+0xba>
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <ProcessPhotoSensor+0x108>)
 80015b8:	e002      	b.n	80015c0 <ProcessPhotoSensor+0xc0>
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <ProcessPhotoSensor+0x10c>)
 80015bc:	e000      	b.n	80015c0 <ProcessPhotoSensor+0xc0>
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s)\r\n",
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <ProcessPhotoSensor+0x110>)
 80015c0:	4814      	ldr	r0, [pc, #80]	@ (8001614 <ProcessPhotoSensor+0x114>)
 80015c2:	f003 f803 	bl	80045cc <iprintf>
            
            /* 发送光电传感器事件给Master */
            SendPhotoSensorEvent(detected_floor);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f8bf 	bl	800174c <SendPhotoSensorEvent>
            
            /* 更新当前楼层 */
            system_state.current_floor = detected_floor;
 80015ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <ProcessPhotoSensor+0x104>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	7013      	strb	r3, [r2, #0]
            
            /* 如果到达目标楼层，停止 */
            if (detected_floor == system_state.target_floor) {
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <ProcessPhotoSensor+0x104>)
 80015d6:	789b      	ldrb	r3, [r3, #2]
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d105      	bne.n	80015ea <ProcessPhotoSensor+0xea>
                system_state.direction = DIR_STOP;
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <ProcessPhotoSensor+0x104>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	705a      	strb	r2, [r3, #1]
                printf("[PHOTO] Target floor reached, stopping\r\n");
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <ProcessPhotoSensor+0x118>)
 80015e6:	f003 f859 	bl	800469c <puts>
            }
            
            /* 通过LocalBB处理 */
            LocalBB_AddPhotoSensor();
 80015ea:	f7fe feab 	bl	8000344 <LocalBB_AddPhotoSensor>
        }
        
        last_sensor_state = current_state;
 80015ee:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <ProcessPhotoSensor+0x100>)
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	7013      	strb	r3, [r2, #0]
    }
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200006e0 	.word	0x200006e0
 8001600:	20000018 	.word	0x20000018
 8001604:	20000000 	.word	0x20000000
 8001608:	08005b90 	.word	0x08005b90
 800160c:	08005b94 	.word	0x08005b94
 8001610:	08005b9c 	.word	0x08005b9c
 8001614:	08005d10 	.word	0x08005d10
 8001618:	08005d3c 	.word	0x08005d3c

0800161c <ProcessRS485>:

/**
  * @brief  处理RS485接收
  */
void ProcessRS485(void) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b094      	sub	sp, #80	@ 0x50
 8001620:	af00      	add	r7, sp, #0
    uint8_t rx_buffer[64];
    uint16_t rx_len = rs485_receive_packet(rx_buffer, sizeof(rx_buffer));
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2140      	movs	r1, #64	@ 0x40
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f901 	bl	8000830 <rs485_receive_packet>
 800162e:	4603      	mov	r3, r0
 8001630:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    
    if (rx_len > 0) {
 8001634:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001638:	2b00      	cmp	r3, #0
 800163a:	d075      	beq.n	8001728 <ProcessRS485+0x10c>
        system_state.rs485_rx_count++;
 800163c:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <ProcessRS485+0x114>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	4a3b      	ldr	r2, [pc, #236]	@ (8001730 <ProcessRS485+0x114>)
 8001644:	60d3      	str	r3, [r2, #12]
        
        /* 方向设置命令 */
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8001646:	7a3b      	ldrb	r3, [r7, #8]
 8001648:	2b40      	cmp	r3, #64	@ 0x40
 800164a:	d137      	bne.n	80016bc <ProcessRS485+0xa0>
 800164c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001650:	2b03      	cmp	r3, #3
 8001652:	d933      	bls.n	80016bc <ProcessRS485+0xa0>
            uint8_t dir = rx_buffer[1];
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            uint8_t cur = rx_buffer[2];
 800165a:	7abb      	ldrb	r3, [r7, #10]
 800165c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            uint8_t target = rx_buffer[3];
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            
            system_state.direction = dir;
 8001666:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <ProcessRS485+0x114>)
 8001668:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800166c:	7053      	strb	r3, [r2, #1]
            system_state.current_floor = cur;
 800166e:	4a30      	ldr	r2, [pc, #192]	@ (8001730 <ProcessRS485+0x114>)
 8001670:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001674:	7013      	strb	r3, [r2, #0]
            system_state.target_floor = target;
 8001676:	4a2e      	ldr	r2, [pc, #184]	@ (8001730 <ProcessRS485+0x114>)
 8001678:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800167c:	7093      	strb	r3, [r2, #2]
            
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 800167e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001682:	2b01      	cmp	r3, #1
 8001684:	d007      	beq.n	8001696 <ProcessRS485+0x7a>
                   dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DN" : "STOP",
 8001686:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800168a:	2b02      	cmp	r3, #2
 800168c:	d101      	bne.n	8001692 <ProcessRS485+0x76>
 800168e:	4929      	ldr	r1, [pc, #164]	@ (8001734 <ProcessRS485+0x118>)
 8001690:	e002      	b.n	8001698 <ProcessRS485+0x7c>
 8001692:	4929      	ldr	r1, [pc, #164]	@ (8001738 <ProcessRS485+0x11c>)
 8001694:	e000      	b.n	8001698 <ProcessRS485+0x7c>
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8001696:	4929      	ldr	r1, [pc, #164]	@ (800173c <ProcessRS485+0x120>)
 8001698:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800169c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016a0:	4827      	ldr	r0, [pc, #156]	@ (8001740 <ProcessRS485+0x124>)
 80016a2:	f002 ff93 	bl	80045cc <iprintf>
                   cur, target);
            
            /* 通过LocalBB处理 */
            LocalBB_SetDirection(dir, cur, target);
 80016a6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80016aa:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 80016ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe94 	bl	80003e0 <LocalBB_SetDirection>
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 80016b8:	bf00      	nop
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
            rs485_send_packet_dma(tx_buffer, 4);
            system_state.rs485_tx_count++;
        }
    }
}
 80016ba:	e035      	b.n	8001728 <ProcessRS485+0x10c>
        else if (rx_buffer[0] == CMD_DOOR_OPEN) {
 80016bc:	7a3b      	ldrb	r3, [r7, #8]
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d10b      	bne.n	80016da <ProcessRS485+0xbe>
            printf("[RS485 RX] Door OPEN command\r\n");
 80016c2:	4820      	ldr	r0, [pc, #128]	@ (8001744 <ProcessRS485+0x128>)
 80016c4:	f002 ffea 	bl	800469c <puts>
            LocalBB_AddDoorCommand(true);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7fe fee1 	bl	8000490 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <ProcessRS485+0x114>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <ProcessRS485+0x114>)
 80016d6:	6153      	str	r3, [r2, #20]
}
 80016d8:	e026      	b.n	8001728 <ProcessRS485+0x10c>
        else if (rx_buffer[0] == CMD_DOOR_CLOSE) {
 80016da:	7a3b      	ldrb	r3, [r7, #8]
 80016dc:	2b21      	cmp	r3, #33	@ 0x21
 80016de:	d10b      	bne.n	80016f8 <ProcessRS485+0xdc>
            printf("[RS485 RX] Door CLOSE command\r\n");
 80016e0:	4819      	ldr	r0, [pc, #100]	@ (8001748 <ProcessRS485+0x12c>)
 80016e2:	f002 ffdb 	bl	800469c <puts>
            LocalBB_AddDoorCommand(false);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7fe fed2 	bl	8000490 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <ProcessRS485+0x114>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <ProcessRS485+0x114>)
 80016f4:	6153      	str	r3, [r2, #20]
}
 80016f6:	e017      	b.n	8001728 <ProcessRS485+0x10c>
        else if (rx_buffer[0] == CMD_STATUS_REQUEST) {
 80016f8:	7a3b      	ldrb	r3, [r7, #8]
 80016fa:	2b50      	cmp	r3, #80	@ 0x50
 80016fc:	d114      	bne.n	8001728 <ProcessRS485+0x10c>
            tx_buffer[0] = CMD_STATUS_RESPONSE;
 80016fe:	2351      	movs	r3, #81	@ 0x51
 8001700:	713b      	strb	r3, [r7, #4]
            tx_buffer[1] = system_state.current_floor;
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <ProcessRS485+0x114>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	717b      	strb	r3, [r7, #5]
            tx_buffer[2] = system_state.direction;
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <ProcessRS485+0x114>)
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	71bb      	strb	r3, [r7, #6]
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <ProcessRS485+0x114>)
 8001710:	78db      	ldrb	r3, [r3, #3]
 8001712:	71fb      	strb	r3, [r7, #7]
            rs485_send_packet_dma(tx_buffer, 4);
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2104      	movs	r1, #4
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f839 	bl	8000790 <rs485_send_packet_dma>
            system_state.rs485_tx_count++;
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <ProcessRS485+0x114>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	3301      	adds	r3, #1
 8001724:	4a02      	ldr	r2, [pc, #8]	@ (8001730 <ProcessRS485+0x114>)
 8001726:	6113      	str	r3, [r2, #16]
}
 8001728:	bf00      	nop
 800172a:	3750      	adds	r7, #80	@ 0x50
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000000 	.word	0x20000000
 8001734:	08005b90 	.word	0x08005b90
 8001738:	08005b94 	.word	0x08005b94
 800173c:	08005b9c 	.word	0x08005b9c
 8001740:	08005d64 	.word	0x08005d64
 8001744:	08005d88 	.word	0x08005d88
 8001748:	08005da8 	.word	0x08005da8

0800174c <SendPhotoSensorEvent>:
}

/**
  * @brief  发送光电传感器事件
  */
void SendPhotoSensorEvent(uint8_t floor) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8001756:	2310      	movs	r3, #16
 8001758:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = floor;
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	73bb      	strb	r3, [r7, #14]
    tx_buffer[3] = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
    
    rs485_send_packet_dma(tx_buffer, 4);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2104      	movs	r1, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff f80f 	bl	8000790 <rs485_send_packet_dma>
    system_state.rs485_tx_count++;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <SendPhotoSensorEvent+0x44>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	3301      	adds	r3, #1
 8001778:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <SendPhotoSensorEvent+0x44>)
 800177a:	6113      	str	r3, [r2, #16]
    printf("[RS485 TX] Photo sensor floor %d\r\n", floor);
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4619      	mov	r1, r3
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <SendPhotoSensorEvent+0x48>)
 8001782:	f002 ff23 	bl	80045cc <iprintf>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000
 8001794:	08005e3c 	.word	0x08005e3c

08001798 <SendCabinCall>:

/**
  * @brief  发送轿厢内呼
  */
void SendCabinCall(uint8_t floor) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_CABIN_CALL;
 80017a2:	2331      	movs	r3, #49	@ 0x31
 80017a4:	723b      	strb	r3, [r7, #8]
    tx_buffer[1] = floor;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	727b      	strb	r3, [r7, #9]
    tx_buffer[2] = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	72bb      	strb	r3, [r7, #10]
    tx_buffer[3] = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	72fb      	strb	r3, [r7, #11]
    
    printf("[RS485 TX] Sending cabin call for floor %d\r\n", floor);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	4619      	mov	r1, r3
 80017b6:	481b      	ldr	r0, [pc, #108]	@ (8001824 <SendCabinCall+0x8c>)
 80017b8:	f002 ff08 	bl	80045cc <iprintf>
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 80017bc:	7a3b      	ldrb	r3, [r7, #8]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 80017be:	4619      	mov	r1, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 80017c0:	7a7b      	ldrb	r3, [r7, #9]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 80017c2:	461a      	mov	r2, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 80017c4:	7abb      	ldrb	r3, [r7, #10]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 80017c6:	4618      	mov	r0, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 80017c8:	7afb      	ldrb	r3, [r7, #11]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4603      	mov	r3, r0
 80017ce:	4816      	ldr	r0, [pc, #88]	@ (8001828 <SendCabinCall+0x90>)
 80017d0:	f002 fefc 	bl	80045cc <iprintf>
    
    rs485_status_t status = rs485_send_packet_dma(tx_buffer, 4);
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ffd8 	bl	8000790 <rs485_send_packet_dma>
 80017e0:	4603      	mov	r3, r0
 80017e2:	73fb      	strb	r3, [r7, #15]
    if (status == RS485_OK) {
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10b      	bne.n	8001802 <SendCabinCall+0x6a>
        system_state.rs485_tx_count++;
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <SendCabinCall+0x94>)
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <SendCabinCall+0x94>)
 80017f2:	6113      	str	r3, [r2, #16]
        printf("[RS485 TX] Cabin call sent successfully (count=%lu)\r\n", system_state.rs485_tx_count);
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <SendCabinCall+0x94>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4619      	mov	r1, r3
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <SendCabinCall+0x98>)
 80017fc:	f002 fee6 	bl	80045cc <iprintf>
    } else if (status == RS485_BUSY) {
        printf("[RS485 TX] ERROR: RS485 busy!\r\n");
    } else {
        printf("[RS485 TX] ERROR: Send failed (status=%d)\r\n", status);
    }
}
 8001800:	e00b      	b.n	800181a <SendCabinCall+0x82>
    } else if (status == RS485_BUSY) {
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d103      	bne.n	8001810 <SendCabinCall+0x78>
        printf("[RS485 TX] ERROR: RS485 busy!\r\n");
 8001808:	480a      	ldr	r0, [pc, #40]	@ (8001834 <SendCabinCall+0x9c>)
 800180a:	f002 ff47 	bl	800469c <puts>
}
 800180e:	e004      	b.n	800181a <SendCabinCall+0x82>
        printf("[RS485 TX] ERROR: Send failed (status=%d)\r\n", status);
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	4619      	mov	r1, r3
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <SendCabinCall+0xa0>)
 8001816:	f002 fed9 	bl	80045cc <iprintf>
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	08005e60 	.word	0x08005e60
 8001828:	08005e90 	.word	0x08005e90
 800182c:	20000000 	.word	0x20000000
 8001830:	08005ec0 	.word	0x08005ec0
 8001834:	08005ef8 	.word	0x08005ef8
 8001838:	08005f18 	.word	0x08005f18

0800183c <PhotoSensor_TriggerCallback>:
/**
  * @brief  光电传感器触发回调
  * @note   在中断中被调用
  */
void PhotoSensor_TriggerCallback(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
    sensor_triggered = true;
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <PhotoSensor_TriggerCallback+0x14>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200006e0 	.word	0x200006e0

08001854 <HAL_GPIO_EXTI_Callback>:
  * @brief  HAL GPIO EXTI回调 - 统一处理所有GPIO中断
  * @param  GPIO_Pin: 触发中断的引脚
  * @note   这个函数覆盖HAL库的weak函数
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001864:	d102      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x18>
        // PA11 中断 - 键盘按下
        Keyboard_IRQHandler();
 8001866:	f7ff fbaf 	bl	8000fc8 <Keyboard_IRQHandler>
    }
    else if (GPIO_Pin == GPIO_PIN_5) {
        // PB5 中断 - 光电传感器
        PhotoSensor_IRQHandler();
    }
}
 800186a:	e004      	b.n	8001876 <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_Pin == GPIO_PIN_5) {
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_EXTI_Callback+0x22>
        PhotoSensor_IRQHandler();
 8001872:	f7ff fc0b 	bl	800108c <PhotoSensor_IRQHandler>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001882:	b672      	cpsid	i
}
 8001884:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001886:	bf00      	nop
 8001888:	e7fd      	b.n	8001886 <Error_Handler+0x8>
	...

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_MspInit+0x5c>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_MspInit+0x5c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_MspInit+0x60>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_MspInit+0x60>)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <NMI_Handler+0x4>

080018f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <MemManage_Handler+0x4>

08001908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <UsageFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001940:	f000 fade 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Channel6_IRQHandler+0x10>)
 800194e:	f000 fd93 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200007c0 	.word	0x200007c0

0800195c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Channel7_IRQHandler+0x10>)
 8001962:	f000 fd89 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000804 	.word	0x20000804

08001970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* Check for IDLE interrupt */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <USART2_IRQHandler+0x20>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b10      	cmp	r3, #16
 8001980:	d101      	bne.n	8001986 <USART2_IRQHandler+0x16>
  {
    /* Call RS485 IDLE handler */
    extern void rs485_idle_interrupt_handler(void);
    rs485_idle_interrupt_handler();
 8001982:	f7fe ff7f 	bl	8000884 <rs485_idle_interrupt_handler>
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001986:	4802      	ldr	r0, [pc, #8]	@ (8001990 <USART2_IRQHandler+0x20>)
 8001988:	f001 fdf8 	bl	800357c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000730 	.word	0x20000730

08001994 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts for PB5 (Photo Sensor).
  */
void EXTI9_5_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001998:	2020      	movs	r0, #32
 800199a:	f001 f855 	bl	8002a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts for PA11 (Keyboard).
  */
void EXTI15_10_IRQHandler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019a6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019aa:	f001 f84d 	bl	8002a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e00a      	b.n	80019da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c4:	f3af 8000 	nop.w
 80019c8:	4601      	mov	r1, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	60ba      	str	r2, [r7, #8]
 80019d0:	b2ca      	uxtb	r2, r1
 80019d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbf0      	blt.n	80019c4 <_read+0x12>
  }

  return len;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a12:	605a      	str	r2, [r3, #4]
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <_isatty>:

int _isatty(int file)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f002 ff5e 	bl	800493c <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20005000 	.word	0x20005000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	200006e4 	.word	0x200006e4
 8001ab4:	20000998 	.word	0x20000998

08001ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_USART1_UART_Init+0x50>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001afc:	f001 fbcc 	bl	8003298 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b06:	f7ff feba 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200006e8 	.word	0x200006e8
 8001b14:	40013800 	.word	0x40013800

08001b18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <MX_USART2_UART_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f001 fba2 	bl	8003298 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f7ff fe90 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000730 	.word	0x20000730
 8001b68:	40004400 	.word	0x40004400

08001b6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b72:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b78:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <MX_USART3_UART_Init+0x50>)
 8001b7a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b90:	220c      	movs	r2, #12
 8001b92:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <MX_USART3_UART_Init+0x48>)
 8001ba2:	f001 fb79 	bl	8003298 <HAL_UART_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001bac:	f7ff fe67 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000778 	.word	0x20000778
 8001bb8:	40004800 	.word	0x40004800
 8001bbc:	000f4240 	.word	0x000f4240

08001bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	@ 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd4 <HAL_UART_MspInit+0x214>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d132      	bne.n	8001c46 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be0:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a7c      	ldr	r2, [pc, #496]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001be6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b77      	ldr	r3, [pc, #476]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a76      	ldr	r2, [pc, #472]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b74      	ldr	r3, [pc, #464]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	4619      	mov	r1, r3
 8001c24:	486d      	ldr	r0, [pc, #436]	@ (8001ddc <HAL_UART_MspInit+0x21c>)
 8001c26:	f000 fd5b 	bl	80026e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0320 	add.w	r3, r7, #32
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4867      	ldr	r0, [pc, #412]	@ (8001ddc <HAL_UART_MspInit+0x21c>)
 8001c40:	f000 fd4e 	bl	80026e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c44:	e0c1      	b.n	8001dca <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a65      	ldr	r2, [pc, #404]	@ (8001de0 <HAL_UART_MspInit+0x220>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	f040 8085 	bne.w	8001d5c <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c52:	4b61      	ldr	r3, [pc, #388]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a60      	ldr	r2, [pc, #384]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	4a5a      	ldr	r2, [pc, #360]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6193      	str	r3, [r2, #24]
 8001c76:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c82:	2304      	movs	r3, #4
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	4619      	mov	r1, r3
 8001c94:	4851      	ldr	r0, [pc, #324]	@ (8001ddc <HAL_UART_MspInit+0x21c>)
 8001c96:	f000 fd23 	bl	80026e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	4619      	mov	r1, r3
 8001cac:	484b      	ldr	r0, [pc, #300]	@ (8001ddc <HAL_UART_MspInit+0x21c>)
 8001cae:	f000 fd17 	bl	80026e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001de8 <HAL_UART_MspInit+0x228>)
 8001cb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbe:	4b49      	ldr	r3, [pc, #292]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc4:	4b47      	ldr	r3, [pc, #284]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cca:	4b46      	ldr	r3, [pc, #280]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd0:	4b44      	ldr	r3, [pc, #272]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001cd6:	4b43      	ldr	r3, [pc, #268]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cd8:	2220      	movs	r2, #32
 8001cda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cdc:	4b41      	ldr	r3, [pc, #260]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ce2:	4840      	ldr	r0, [pc, #256]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001ce4:	f000 fa5a 	bl	800219c <HAL_DMA_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001cee:	f7ff fdc6 	bl	800187e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a3b      	ldr	r2, [pc, #236]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8001de4 <HAL_UART_MspInit+0x224>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d00:	4a3b      	ldr	r2, [pc, #236]	@ (8001df0 <HAL_UART_MspInit+0x230>)
 8001d02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d04:	4b39      	ldr	r3, [pc, #228]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d06:	2210      	movs	r2, #16
 8001d08:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0a:	4b38      	ldr	r3, [pc, #224]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d10:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d16:	4b35      	ldr	r3, [pc, #212]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d22:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d28:	4b30      	ldr	r3, [pc, #192]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d2e:	482f      	ldr	r0, [pc, #188]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d30:	f000 fa34 	bl	800219c <HAL_DMA_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8001d3a:	f7ff fda0 	bl	800187e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2a      	ldr	r2, [pc, #168]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d42:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d44:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <HAL_UART_MspInit+0x22c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2026      	movs	r0, #38	@ 0x26
 8001d50:	f000 f9ed 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d54:	2026      	movs	r0, #38	@ 0x26
 8001d56:	f000 fa06 	bl	8002166 <HAL_NVIC_EnableIRQ>
}
 8001d5a:	e036      	b.n	8001dca <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a24      	ldr	r2, [pc, #144]	@ (8001df4 <HAL_UART_MspInit+0x234>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d131      	bne.n	8001dca <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4a15      	ldr	r2, [pc, #84]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6193      	str	r3, [r2, #24]
 8001d8a:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <HAL_UART_MspInit+0x218>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4619      	mov	r1, r3
 8001daa:	4813      	ldr	r0, [pc, #76]	@ (8001df8 <HAL_UART_MspInit+0x238>)
 8001dac:	f000 fc98 	bl	80026e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001db0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 0320 	add.w	r3, r7, #32
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <HAL_UART_MspInit+0x238>)
 8001dc6:	f000 fc8b 	bl	80026e0 <HAL_GPIO_Init>
}
 8001dca:	bf00      	nop
 8001dcc:	3730      	adds	r7, #48	@ 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40004400 	.word	0x40004400
 8001de4:	200007c0 	.word	0x200007c0
 8001de8:	4002006c 	.word	0x4002006c
 8001dec:	20000804 	.word	0x20000804
 8001df0:	40020080 	.word	0x40020080
 8001df4:	40004800 	.word	0x40004800
 8001df8:	40010c00 	.word	0x40010c00

08001dfc <_write>:

/* USER CODE BEGIN 1 */

/* Redirect printf to USART1 for debug output */
int _write(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <_write+0x28>)
 8001e14:	f001 fa90 	bl	8003338 <HAL_UART_Transmit>
  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200006e8 	.word	0x200006e8

08001e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff fe46 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480b      	ldr	r0, [pc, #44]	@ (8001e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e2e:	490c      	ldr	r1, [pc, #48]	@ (8001e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e30:	4a0c      	ldr	r2, [pc, #48]	@ (8001e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a09      	ldr	r2, [pc, #36]	@ (8001e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e44:	4c09      	ldr	r4, [pc, #36]	@ (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f002 fd79 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e56:	f7ff f9e1 	bl	800121c <main>
  bx lr
 8001e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001e64:	08005fc8 	.word	0x08005fc8
  ldr r2, =_sbss
 8001e68:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001e6c:	20000998 	.word	0x20000998

08001e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_2_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_Init+0x28>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_Init+0x28>)
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f947 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fcfc 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f95f 	bl	8002182 <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f927 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	@ (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000001c 	.word	0x2000001c
 8001ef8:	20000024 	.word	0x20000024
 8001efc:	20000020 	.word	0x20000020

08001f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_IncTick+0x1c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a03      	ldr	r2, [pc, #12]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000024 	.word	0x20000024
 8001f20:	20000848 	.word	0x20000848

08001f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b02      	ldr	r3, [pc, #8]	@ (8001f34 <HAL_GetTick+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000848 	.word	0x20000848

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fff0 	bl	8001f24 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffe0 	bl	8001f24 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000024 	.word	0x20000024

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4906      	ldr	r1, [pc, #24]	@ (8002018 <__NVIC_EnableIRQ+0x34>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff90 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	@ (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff2d 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff42 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff90 	bl	8002070 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5f 	bl	800201c <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff35 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e043      	b.n	800223a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <HAL_DMA_Init+0xa8>)
 80021ba:	4413      	add	r3, r2
 80021bc:	4a22      	ldr	r2, [pc, #136]	@ (8002248 <HAL_DMA_Init+0xac>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a1f      	ldr	r2, [pc, #124]	@ (800224c <HAL_DMA_Init+0xb0>)
 80021ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80021ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	bffdfff8 	.word	0xbffdfff8
 8002248:	cccccccd 	.word	0xcccccccd
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Start_IT+0x20>
 800226c:	2302      	movs	r3, #2
 800226e:	e04b      	b.n	8002308 <HAL_DMA_Start_IT+0xb8>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d13a      	bne.n	80022fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f9eb 	bl	8002684 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 020e 	orr.w	r2, r2, #14
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e00f      	b.n	80022e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 020a 	orr.w	r2, r2, #10
 80022e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e005      	b.n	8002306 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d008      	beq.n	800233a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2204      	movs	r2, #4
 800232c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e020      	b.n	800237c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 020e 	bic.w	r2, r2, #14
 8002348:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0201 	bic.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
	...

08002388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d005      	beq.n	80023ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2204      	movs	r2, #4
 80023a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e051      	b.n	8002450 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a22      	ldr	r2, [pc, #136]	@ (800245c <HAL_DMA_Abort_IT+0xd4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d029      	beq.n	800242a <HAL_DMA_Abort_IT+0xa2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_DMA_Abort_IT+0xd8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_Abort_IT+0x9e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002464 <HAL_DMA_Abort_IT+0xdc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01a      	beq.n	8002420 <HAL_DMA_Abort_IT+0x98>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002468 <HAL_DMA_Abort_IT+0xe0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d012      	beq.n	800241a <HAL_DMA_Abort_IT+0x92>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <HAL_DMA_Abort_IT+0xe4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00a      	beq.n	8002414 <HAL_DMA_Abort_IT+0x8c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1b      	ldr	r2, [pc, #108]	@ (8002470 <HAL_DMA_Abort_IT+0xe8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d102      	bne.n	800240e <HAL_DMA_Abort_IT+0x86>
 8002408:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800240c:	e00e      	b.n	800242c <HAL_DMA_Abort_IT+0xa4>
 800240e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002412:	e00b      	b.n	800242c <HAL_DMA_Abort_IT+0xa4>
 8002414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002418:	e008      	b.n	800242c <HAL_DMA_Abort_IT+0xa4>
 800241a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800241e:	e005      	b.n	800242c <HAL_DMA_Abort_IT+0xa4>
 8002420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002424:	e002      	b.n	800242c <HAL_DMA_Abort_IT+0xa4>
 8002426:	2310      	movs	r3, #16
 8002428:	e000      	b.n	800242c <HAL_DMA_Abort_IT+0xa4>
 800242a:	2301      	movs	r3, #1
 800242c:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <HAL_DMA_Abort_IT+0xec>)
 800242e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
    } 
  }
  return status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40020008 	.word	0x40020008
 8002460:	4002001c 	.word	0x4002001c
 8002464:	40020030 	.word	0x40020030
 8002468:	40020044 	.word	0x40020044
 800246c:	40020058 	.word	0x40020058
 8002470:	4002006c 	.word	0x4002006c
 8002474:	40020000 	.word	0x40020000

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	2204      	movs	r2, #4
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d04f      	beq.n	8002540 <HAL_DMA_IRQHandler+0xc8>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d04a      	beq.n	8002540 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0204 	bic.w	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a66      	ldr	r2, [pc, #408]	@ (8002668 <HAL_DMA_IRQHandler+0x1f0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d029      	beq.n	8002526 <HAL_DMA_IRQHandler+0xae>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a65      	ldr	r2, [pc, #404]	@ (800266c <HAL_DMA_IRQHandler+0x1f4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_DMA_IRQHandler+0xaa>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a63      	ldr	r2, [pc, #396]	@ (8002670 <HAL_DMA_IRQHandler+0x1f8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01a      	beq.n	800251c <HAL_DMA_IRQHandler+0xa4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a62      	ldr	r2, [pc, #392]	@ (8002674 <HAL_DMA_IRQHandler+0x1fc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d012      	beq.n	8002516 <HAL_DMA_IRQHandler+0x9e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a60      	ldr	r2, [pc, #384]	@ (8002678 <HAL_DMA_IRQHandler+0x200>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00a      	beq.n	8002510 <HAL_DMA_IRQHandler+0x98>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a5f      	ldr	r2, [pc, #380]	@ (800267c <HAL_DMA_IRQHandler+0x204>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d102      	bne.n	800250a <HAL_DMA_IRQHandler+0x92>
 8002504:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002508:	e00e      	b.n	8002528 <HAL_DMA_IRQHandler+0xb0>
 800250a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800250e:	e00b      	b.n	8002528 <HAL_DMA_IRQHandler+0xb0>
 8002510:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002514:	e008      	b.n	8002528 <HAL_DMA_IRQHandler+0xb0>
 8002516:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800251a:	e005      	b.n	8002528 <HAL_DMA_IRQHandler+0xb0>
 800251c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002520:	e002      	b.n	8002528 <HAL_DMA_IRQHandler+0xb0>
 8002522:	2340      	movs	r3, #64	@ 0x40
 8002524:	e000      	b.n	8002528 <HAL_DMA_IRQHandler+0xb0>
 8002526:	2304      	movs	r3, #4
 8002528:	4a55      	ldr	r2, [pc, #340]	@ (8002680 <HAL_DMA_IRQHandler+0x208>)
 800252a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8094 	beq.w	800265e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800253e:	e08e      	b.n	800265e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2202      	movs	r2, #2
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d056      	beq.n	80025fe <HAL_DMA_IRQHandler+0x186>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d051      	beq.n	80025fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020a 	bic.w	r2, r2, #10
 8002576:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a38      	ldr	r2, [pc, #224]	@ (8002668 <HAL_DMA_IRQHandler+0x1f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d029      	beq.n	80025de <HAL_DMA_IRQHandler+0x166>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a37      	ldr	r2, [pc, #220]	@ (800266c <HAL_DMA_IRQHandler+0x1f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d022      	beq.n	80025da <HAL_DMA_IRQHandler+0x162>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a35      	ldr	r2, [pc, #212]	@ (8002670 <HAL_DMA_IRQHandler+0x1f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d01a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x15c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a34      	ldr	r2, [pc, #208]	@ (8002674 <HAL_DMA_IRQHandler+0x1fc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d012      	beq.n	80025ce <HAL_DMA_IRQHandler+0x156>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a32      	ldr	r2, [pc, #200]	@ (8002678 <HAL_DMA_IRQHandler+0x200>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00a      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x150>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a31      	ldr	r2, [pc, #196]	@ (800267c <HAL_DMA_IRQHandler+0x204>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d102      	bne.n	80025c2 <HAL_DMA_IRQHandler+0x14a>
 80025bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025c0:	e00e      	b.n	80025e0 <HAL_DMA_IRQHandler+0x168>
 80025c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025c6:	e00b      	b.n	80025e0 <HAL_DMA_IRQHandler+0x168>
 80025c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025cc:	e008      	b.n	80025e0 <HAL_DMA_IRQHandler+0x168>
 80025ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025d2:	e005      	b.n	80025e0 <HAL_DMA_IRQHandler+0x168>
 80025d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025d8:	e002      	b.n	80025e0 <HAL_DMA_IRQHandler+0x168>
 80025da:	2320      	movs	r3, #32
 80025dc:	e000      	b.n	80025e0 <HAL_DMA_IRQHandler+0x168>
 80025de:	2302      	movs	r3, #2
 80025e0:	4a27      	ldr	r2, [pc, #156]	@ (8002680 <HAL_DMA_IRQHandler+0x208>)
 80025e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d034      	beq.n	800265e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025fc:	e02f      	b.n	800265e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	2208      	movs	r2, #8
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d028      	beq.n	8002660 <HAL_DMA_IRQHandler+0x1e8>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d023      	beq.n	8002660 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 020e 	bic.w	r2, r2, #14
 8002626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f202 	lsl.w	r2, r1, r2
 8002636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
    }
  }
  return;
 800265e:	bf00      	nop
 8002660:	bf00      	nop
}
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40020008 	.word	0x40020008
 800266c:	4002001c 	.word	0x4002001c
 8002670:	40020030 	.word	0x40020030
 8002674:	40020044 	.word	0x40020044
 8002678:	40020058 	.word	0x40020058
 800267c:	4002006c 	.word	0x4002006c
 8002680:	40020000 	.word	0x40020000

08002684 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d108      	bne.n	80026c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026c2:	e007      	b.n	80026d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b08b      	sub	sp, #44	@ 0x2c
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f2:	e169      	b.n	80029c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026f4:	2201      	movs	r2, #1
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	f040 8158 	bne.w	80029c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a9a      	ldr	r2, [pc, #616]	@ (8002980 <HAL_GPIO_Init+0x2a0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d05e      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 800271c:	4a98      	ldr	r2, [pc, #608]	@ (8002980 <HAL_GPIO_Init+0x2a0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d875      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 8002722:	4a98      	ldr	r2, [pc, #608]	@ (8002984 <HAL_GPIO_Init+0x2a4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d058      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 8002728:	4a96      	ldr	r2, [pc, #600]	@ (8002984 <HAL_GPIO_Init+0x2a4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d86f      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 800272e:	4a96      	ldr	r2, [pc, #600]	@ (8002988 <HAL_GPIO_Init+0x2a8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d052      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 8002734:	4a94      	ldr	r2, [pc, #592]	@ (8002988 <HAL_GPIO_Init+0x2a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d869      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 800273a:	4a94      	ldr	r2, [pc, #592]	@ (800298c <HAL_GPIO_Init+0x2ac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d04c      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 8002740:	4a92      	ldr	r2, [pc, #584]	@ (800298c <HAL_GPIO_Init+0x2ac>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d863      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 8002746:	4a92      	ldr	r2, [pc, #584]	@ (8002990 <HAL_GPIO_Init+0x2b0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d046      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 800274c:	4a90      	ldr	r2, [pc, #576]	@ (8002990 <HAL_GPIO_Init+0x2b0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d85d      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 8002752:	2b12      	cmp	r3, #18
 8002754:	d82a      	bhi.n	80027ac <HAL_GPIO_Init+0xcc>
 8002756:	2b12      	cmp	r3, #18
 8002758:	d859      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 800275a:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <HAL_GPIO_Init+0x80>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	080027db 	.word	0x080027db
 8002764:	080027b5 	.word	0x080027b5
 8002768:	080027c7 	.word	0x080027c7
 800276c:	08002809 	.word	0x08002809
 8002770:	0800280f 	.word	0x0800280f
 8002774:	0800280f 	.word	0x0800280f
 8002778:	0800280f 	.word	0x0800280f
 800277c:	0800280f 	.word	0x0800280f
 8002780:	0800280f 	.word	0x0800280f
 8002784:	0800280f 	.word	0x0800280f
 8002788:	0800280f 	.word	0x0800280f
 800278c:	0800280f 	.word	0x0800280f
 8002790:	0800280f 	.word	0x0800280f
 8002794:	0800280f 	.word	0x0800280f
 8002798:	0800280f 	.word	0x0800280f
 800279c:	0800280f 	.word	0x0800280f
 80027a0:	0800280f 	.word	0x0800280f
 80027a4:	080027bd 	.word	0x080027bd
 80027a8:	080027d1 	.word	0x080027d1
 80027ac:	4a79      	ldr	r2, [pc, #484]	@ (8002994 <HAL_GPIO_Init+0x2b4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027b2:	e02c      	b.n	800280e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	623b      	str	r3, [r7, #32]
          break;
 80027ba:	e029      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	3304      	adds	r3, #4
 80027c2:	623b      	str	r3, [r7, #32]
          break;
 80027c4:	e024      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	3308      	adds	r3, #8
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e01f      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	330c      	adds	r3, #12
 80027d6:	623b      	str	r3, [r7, #32]
          break;
 80027d8:	e01a      	b.n	8002810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027e2:	2304      	movs	r3, #4
 80027e4:	623b      	str	r3, [r7, #32]
          break;
 80027e6:	e013      	b.n	8002810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f0:	2308      	movs	r3, #8
 80027f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	611a      	str	r2, [r3, #16]
          break;
 80027fa:	e009      	b.n	8002810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027fc:	2308      	movs	r3, #8
 80027fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	615a      	str	r2, [r3, #20]
          break;
 8002806:	e003      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x130>
          break;
 800280e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2bff      	cmp	r3, #255	@ 0xff
 8002814:	d801      	bhi.n	800281a <HAL_GPIO_Init+0x13a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	e001      	b.n	800281e <HAL_GPIO_Init+0x13e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2bff      	cmp	r3, #255	@ 0xff
 8002824:	d802      	bhi.n	800282c <HAL_GPIO_Init+0x14c>
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x152>
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	3b08      	subs	r3, #8
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	210f      	movs	r1, #15
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	6a39      	ldr	r1, [r7, #32]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80b1 	beq.w	80029c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002860:	4b4d      	ldr	r3, [pc, #308]	@ (8002998 <HAL_GPIO_Init+0x2b8>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a4c      	ldr	r2, [pc, #304]	@ (8002998 <HAL_GPIO_Init+0x2b8>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <HAL_GPIO_Init+0x2b8>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002878:	4a48      	ldr	r2, [pc, #288]	@ (800299c <HAL_GPIO_Init+0x2bc>)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a40      	ldr	r2, [pc, #256]	@ (80029a0 <HAL_GPIO_Init+0x2c0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_GPIO_Init+0x1ec>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3f      	ldr	r2, [pc, #252]	@ (80029a4 <HAL_GPIO_Init+0x2c4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00d      	beq.n	80028c8 <HAL_GPIO_Init+0x1e8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3e      	ldr	r2, [pc, #248]	@ (80029a8 <HAL_GPIO_Init+0x2c8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <HAL_GPIO_Init+0x1e4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3d      	ldr	r2, [pc, #244]	@ (80029ac <HAL_GPIO_Init+0x2cc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_GPIO_Init+0x1e0>
 80028bc:	2303      	movs	r3, #3
 80028be:	e006      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e004      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e002      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028cc:	2300      	movs	r3, #0
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	f002 0203 	and.w	r2, r2, #3
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	4093      	lsls	r3, r2
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028de:	492f      	ldr	r1, [pc, #188]	@ (800299c <HAL_GPIO_Init+0x2bc>)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	492c      	ldr	r1, [pc, #176]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002906:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4928      	ldr	r1, [pc, #160]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002920:	4b23      	ldr	r3, [pc, #140]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4922      	ldr	r1, [pc, #136]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800292e:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	43db      	mvns	r3, r3
 8002936:	491e      	ldr	r1, [pc, #120]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002938:	4013      	ands	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002948:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4918      	ldr	r1, [pc, #96]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002956:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	43db      	mvns	r3, r3
 800295e:	4914      	ldr	r1, [pc, #80]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002960:	4013      	ands	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d021      	beq.n	80029b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	490e      	ldr	r1, [pc, #56]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	600b      	str	r3, [r1, #0]
 800297c:	e021      	b.n	80029c2 <HAL_GPIO_Init+0x2e2>
 800297e:	bf00      	nop
 8002980:	10320000 	.word	0x10320000
 8002984:	10310000 	.word	0x10310000
 8002988:	10220000 	.word	0x10220000
 800298c:	10210000 	.word	0x10210000
 8002990:	10120000 	.word	0x10120000
 8002994:	10110000 	.word	0x10110000
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	40010800 	.word	0x40010800
 80029a4:	40010c00 	.word	0x40010c00
 80029a8:	40011000 	.word	0x40011000
 80029ac:	40011400 	.word	0x40011400
 80029b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	4909      	ldr	r1, [pc, #36]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 80029be:	4013      	ands	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	3301      	adds	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f47f ae8e 	bne.w	80026f4 <HAL_GPIO_Init+0x14>
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	372c      	adds	r7, #44	@ 0x2c
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e001      	b.n	8002a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]
 8002a22:	4613      	mov	r3, r2
 8002a24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a26:	787b      	ldrb	r3, [r7, #1]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2c:	887a      	ldrh	r2, [r7, #2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a32:	e003      	b.n	8002a3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	041a      	lsls	r2, r3, #16
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	611a      	str	r2, [r3, #16]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a52:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a5e:	4a05      	ldr	r2, [pc, #20]	@ (8002a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fef4 	bl	8001854 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40010400 	.word	0x40010400

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e272      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8087 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a98:	4b92      	ldr	r3, [pc, #584]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d00c      	beq.n	8002abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d112      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x5e>
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abc:	d10b      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abe:	4b89      	ldr	r3, [pc, #548]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d06c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x12c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d168      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e24c      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x76>
 8002ae0:	4b80      	ldr	r3, [pc, #512]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a7f      	ldr	r2, [pc, #508]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x98>
 8002af6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7a      	ldr	r2, [pc, #488]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b78      	ldr	r3, [pc, #480]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a77      	ldr	r2, [pc, #476]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0xbc>
 8002b1a:	4b72      	ldr	r3, [pc, #456]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a71      	ldr	r2, [pc, #452]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002b34:	4b6b      	ldr	r3, [pc, #428]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b68      	ldr	r3, [pc, #416]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a67      	ldr	r2, [pc, #412]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7ff f9e6 	bl	8001f24 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7ff f9e2 	bl	8001f24 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	@ 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e200      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe4>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f9d2 	bl	8001f24 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7ff f9ce 	bl	8001f24 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1ec      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	4b53      	ldr	r3, [pc, #332]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x10c>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d063      	beq.n	8002c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bbe:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d11c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x18c>
 8002bca:	4b46      	ldr	r3, [pc, #280]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	4b43      	ldr	r3, [pc, #268]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x176>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e1c0      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4939      	ldr	r1, [pc, #228]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	e03a      	b.n	8002c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7ff f987 	bl	8001f24 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7ff f983 	bl	8001f24 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e1a1      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4927      	ldr	r1, [pc, #156]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	e015      	b.n	8002c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <HAL_RCC_OscConfig+0x270>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7ff f966 	bl	8001f24 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7ff f962 	bl	8001f24 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e180      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d03a      	beq.n	8002cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d019      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8e:	4b17      	ldr	r3, [pc, #92]	@ (8002cec <HAL_RCC_OscConfig+0x274>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7ff f946 	bl	8001f24 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7ff f942 	bl	8001f24 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e160      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f000 face 	bl	800325c <RCC_Delay>
 8002cc0:	e01c      	b.n	8002cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <HAL_RCC_OscConfig+0x274>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7ff f92c 	bl	8001f24 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cce:	e00f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7ff f928 	bl	8001f24 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d908      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e146      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	42420000 	.word	0x42420000
 8002cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	4b92      	ldr	r3, [pc, #584]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e9      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a6 	beq.w	8002e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a87      	ldr	r2, [pc, #540]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]
 8002d26:	4b85      	ldr	r3, [pc, #532]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCC_OscConfig+0x4c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b7f      	ldr	r3, [pc, #508]	@ (8002f40 <HAL_RCC_OscConfig+0x4c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7e      	ldr	r2, [pc, #504]	@ (8002f40 <HAL_RCC_OscConfig+0x4c8>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f8e9 	bl	8001f24 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7ff f8e5 	bl	8001f24 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	@ 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e103      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b75      	ldr	r3, [pc, #468]	@ (8002f40 <HAL_RCC_OscConfig+0x4c8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x312>
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a6e      	ldr	r2, [pc, #440]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	e02d      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x334>
 8002d92:	4b6a      	ldr	r3, [pc, #424]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a69      	ldr	r2, [pc, #420]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	4b67      	ldr	r3, [pc, #412]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a66      	ldr	r2, [pc, #408]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	e01c      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d10c      	bne.n	8002dce <HAL_RCC_OscConfig+0x356>
 8002db4:	4b61      	ldr	r3, [pc, #388]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a60      	ldr	r2, [pc, #384]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002dce:	4b5b      	ldr	r3, [pc, #364]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6213      	str	r3, [r2, #32]
 8002dda:	4b58      	ldr	r3, [pc, #352]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a57      	ldr	r2, [pc, #348]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d015      	beq.n	8002e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7ff f899 	bl	8001f24 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7ff f895 	bl	8001f24 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0b1      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ee      	beq.n	8002df6 <HAL_RCC_OscConfig+0x37e>
 8002e18:	e014      	b.n	8002e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7ff f883 	bl	8001f24 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7ff f87f 	bl	8001f24 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e09b      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	4b40      	ldr	r3, [pc, #256]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8087 	beq.w	8002f6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d061      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d146      	bne.n	8002f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b33      	ldr	r3, [pc, #204]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7ff f853 	bl	8001f24 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7ff f84f 	bl	8001f24 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e06d      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e94:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eaa:	4b24      	ldr	r3, [pc, #144]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4921      	ldr	r1, [pc, #132]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a19      	ldr	r1, [r3, #32]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	491b      	ldr	r1, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eda:	f7ff f823 	bl	8001f24 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7ff f81f 	bl	8001f24 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e03d      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef4:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x46a>
 8002f00:	e035      	b.n	8002f6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7ff f80c 	bl	8001f24 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7ff f808 	bl	8001f24 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e026      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x498>
 8002f2e:	e01e      	b.n	8002f6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e019      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
 8002f44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_OscConfig+0x500>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0d0      	b.n	8003132 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b6a      	ldr	r3, [pc, #424]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d910      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b67      	ldr	r3, [pc, #412]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0207 	bic.w	r2, r3, #7
 8002fa6:	4965      	ldr	r1, [pc, #404]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d040      	beq.n	800309c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d115      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e073      	b.n	8003132 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06b      	b.n	8003132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4936      	ldr	r1, [pc, #216]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306c:	f7fe ff5a 	bl	8001f24 <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe ff56 	bl	8001f24 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e053      	b.n	8003132 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b2d      	ldr	r3, [pc, #180]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d210      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4922      	ldr	r1, [pc, #136]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f821 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	@ (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	@ (8003148 <HAL_RCC_ClockConfig+0x1cc>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0x1d0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe feb8 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40022000 	.word	0x40022000
 8003140:	40021000 	.word	0x40021000
 8003144:	08005f60 	.word	0x08005f60
 8003148:	2000001c 	.word	0x2000001c
 800314c:	20000020 	.word	0x20000020

08003150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x30>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x36>
 800317e:	e027      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003180:	4b19      	ldr	r3, [pc, #100]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003182:	613b      	str	r3, [r7, #16]
      break;
 8003184:	e027      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0c9b      	lsrs	r3, r3, #18
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a17      	ldr	r2, [pc, #92]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0c5b      	lsrs	r3, r3, #17
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	4a11      	ldr	r2, [pc, #68]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031b2:	fb03 f202 	mul.w	r2, r3, r2
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e004      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	613b      	str	r3, [r7, #16]
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031d2:	613b      	str	r3, [r7, #16]
      break;
 80031d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d6:	693b      	ldr	r3, [r7, #16]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	007a1200 	.word	0x007a1200
 80031ec:	08005f78 	.word	0x08005f78
 80031f0:	08005f88 	.word	0x08005f88
 80031f4:	003d0900 	.word	0x003d0900

080031f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031fc:	4b02      	ldr	r3, [pc, #8]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x10>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	2000001c 	.word	0x2000001c

0800320c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003210:	f7ff fff2 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4903      	ldr	r1, [pc, #12]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	08005f70 	.word	0x08005f70

08003234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003238:	f7ff ffde 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	0adb      	lsrs	r3, r3, #11
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4903      	ldr	r1, [pc, #12]	@ (8003258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	08005f70 	.word	0x08005f70

0800325c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003264:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <RCC_Delay+0x34>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0a      	ldr	r2, [pc, #40]	@ (8003294 <RCC_Delay+0x38>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0a5b      	lsrs	r3, r3, #9
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003278:	bf00      	nop
  }
  while (Delay --);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	60fa      	str	r2, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f9      	bne.n	8003278 <RCC_Delay+0x1c>
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	2000001c 	.word	0x2000001c
 8003294:	10624dd3 	.word	0x10624dd3

08003298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e042      	b.n	8003330 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fc7e 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	@ 0x24
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f001 f825 	bl	800432c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	d175      	bne.n	8003444 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_UART_Transmit+0x2c>
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e06e      	b.n	8003446 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2221      	movs	r2, #33	@ 0x21
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003376:	f7fe fdd5 	bl	8001f24 <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88fa      	ldrh	r2, [r7, #6]
 8003386:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003390:	d108      	bne.n	80033a4 <HAL_UART_Transmit+0x6c>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e003      	b.n	80033ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033ac:	e02e      	b.n	800340c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	@ 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fd02 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e03a      	b.n	8003446 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	3302      	adds	r3, #2
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	e007      	b.n	80033fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	3301      	adds	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1cb      	bne.n	80033ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2140      	movs	r1, #64	@ 0x40
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fcce 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e006      	b.n	8003446 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08c      	sub	sp, #48	@ 0x30
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	d156      	bne.n	8003518 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_UART_Transmit_DMA+0x26>
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e04f      	b.n	800351a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	@ 0x21
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	4a21      	ldr	r2, [pc, #132]	@ (8003524 <HAL_UART_Transmit_DMA+0xd4>)
 80034a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	4a20      	ldr	r2, [pc, #128]	@ (8003528 <HAL_UART_Transmit_DMA+0xd8>)
 80034a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	4a1f      	ldr	r2, [pc, #124]	@ (800352c <HAL_UART_Transmit_DMA+0xdc>)
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	2200      	movs	r2, #0
 80034b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80034ba:	f107 0308 	add.w	r3, r7, #8
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3304      	adds	r3, #4
 80034ce:	461a      	mov	r2, r3
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	f7fe febd 	bl	8002250 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	617b      	str	r3, [r7, #20]
   return(result);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3314      	adds	r3, #20
 80034fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003500:	627a      	str	r2, [r7, #36]	@ 0x24
 8003502:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	61fb      	str	r3, [r7, #28]
   return(result);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e5      	bne.n	80034e0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3730      	adds	r7, #48	@ 0x30
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	08003b11 	.word	0x08003b11
 8003528:	08003bab 	.word	0x08003bab
 800352c:	08003d2f 	.word	0x08003d2f

08003530 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	d112      	bne.n	8003570 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_Receive_DMA+0x26>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e00b      	b.n	8003572 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	461a      	mov	r2, r3
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fc84 	bl	8003e74 <UART_Start_Receive_DMA>
 800356c:	4603      	mov	r3, r0
 800356e:	e000      	b.n	8003572 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b0ba      	sub	sp, #232	@ 0xe8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_UART_IRQHandler+0x66>
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fde8 	bl	80041b0 <UART_Receive_IT>
      return;
 80035e0:	e25b      	b.n	8003a9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80de 	beq.w	80037a8 <HAL_UART_IRQHandler+0x22c>
 80035ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80d1 	beq.w	80037a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_UART_IRQHandler+0xae>
 8003612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_UART_IRQHandler+0xd2>
 8003636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f043 0202 	orr.w	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_UART_IRQHandler+0xf6>
 800365a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d011      	beq.n	80036a2 <HAL_UART_IRQHandler+0x126>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800368a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	f043 0208 	orr.w	r2, r3, #8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 81f2 	beq.w	8003a90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_UART_IRQHandler+0x14e>
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fd73 	bl	80041b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <HAL_UART_IRQHandler+0x17a>
 80036ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d04f      	beq.n	8003796 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fc7d 	bl	8003ff6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d041      	beq.n	800378e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3314      	adds	r3, #20
 8003710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3314      	adds	r3, #20
 8003732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003736:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800373a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800374e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1d9      	bne.n	800370a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d013      	beq.n	8003786 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003762:	4a7e      	ldr	r2, [pc, #504]	@ (800395c <HAL_UART_IRQHandler+0x3e0>)
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fe0c 	bl	8002388 <HAL_DMA_Abort_IT>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003780:	4610      	mov	r0, r2
 8003782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	e00e      	b.n	80037a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9ae 	bl	8003ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378c:	e00a      	b.n	80037a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f9aa 	bl	8003ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	e006      	b.n	80037a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9a6 	bl	8003ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037a2:	e175      	b.n	8003a90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	bf00      	nop
    return;
 80037a6:	e173      	b.n	8003a90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f040 814f 	bne.w	8003a50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8148 	beq.w	8003a50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8141 	beq.w	8003a50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80b6 	beq.w	8003960 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003800:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8145 	beq.w	8003a94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800380e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003812:	429a      	cmp	r2, r3
 8003814:	f080 813e 	bcs.w	8003a94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800381e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b20      	cmp	r3, #32
 8003828:	f000 8088 	beq.w	800393c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003842:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800384a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003858:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800385c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003864:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1d9      	bne.n	800382c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003888:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3314      	adds	r3, #20
 8003898:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800389c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e1      	bne.n	8003878 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e3      	bne.n	80038b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800390a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800390c:	f023 0310 	bic.w	r3, r3, #16
 8003910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800391e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003920:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800392c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e3      	bne.n	80038fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fcea 	bl	8002310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800394a:	b29b      	uxth	r3, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	b29b      	uxth	r3, r3
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8d1 	bl	8003afa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003958:	e09c      	b.n	8003a94 <HAL_UART_IRQHandler+0x518>
 800395a:	bf00      	nop
 800395c:	080040bb 	.word	0x080040bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003968:	b29b      	uxth	r3, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 808e 	beq.w	8003a98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800397c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8089 	beq.w	8003a98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800399c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80039ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e3      	bne.n	8003986 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3314      	adds	r3, #20
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	623b      	str	r3, [r7, #32]
   return(result);
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3314      	adds	r3, #20
 80039de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e3      	bne.n	80039be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0310 	bic.w	r3, r3, #16
 8003a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a28:	61fa      	str	r2, [r7, #28]
 8003a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	617b      	str	r3, [r7, #20]
   return(result);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e3      	bne.n	8003a04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f856 	bl	8003afa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a4e:	e023      	b.n	8003a98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_UART_IRQHandler+0x4f4>
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fb3a 	bl	80040e2 <UART_Transmit_IT>
    return;
 8003a6e:	e014      	b.n	8003a9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00e      	beq.n	8003a9a <HAL_UART_IRQHandler+0x51e>
 8003a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fb79 	bl	8004180 <UART_EndTransmit_IT>
    return;
 8003a8e:	e004      	b.n	8003a9a <HAL_UART_IRQHandler+0x51e>
    return;
 8003a90:	bf00      	nop
 8003a92:	e002      	b.n	8003a9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a98:	bf00      	nop
  }
}
 8003a9a:	37e8      	adds	r7, #232	@ 0xe8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	@ 0x40
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d137      	bne.n	8003b9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2e:	2200      	movs	r2, #0
 8003b30:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	623b      	str	r3, [r7, #32]
   return(result);
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b86:	61fa      	str	r2, [r7, #28]
 8003b88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	617b      	str	r3, [r7, #20]
   return(result);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e5      	bne.n	8003b66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b9a:	e002      	b.n	8003ba2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003b9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b9e:	f7ff ff7f 	bl	8003aa0 <HAL_UART_TxCpltCallback>
}
 8003ba2:	bf00      	nop
 8003ba4:	3740      	adds	r7, #64	@ 0x40
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff ff7a 	bl	8003ab2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b09c      	sub	sp, #112	@ 0x70
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d172      	bne.n	8003cc8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be4:	2200      	movs	r2, #0
 8003be6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e5      	bne.n	8003c1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3314      	adds	r3, #20
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c70:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e5      	bne.n	8003c50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d119      	bne.n	8003cc8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0310 	bic.w	r3, r3, #16
 8003caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003cb4:	61fa      	str	r2, [r7, #28]
 8003cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cca:	2200      	movs	r2, #0
 8003ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d106      	bne.n	8003ce4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003cde:	f7ff ff0c 	bl	8003afa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ce2:	e002      	b.n	8003cea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003ce4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ce6:	f7ff feed 	bl	8003ac4 <HAL_UART_RxCpltCallback>
}
 8003cea:	bf00      	nop
 8003cec:	3770      	adds	r7, #112	@ 0x70
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d108      	bne.n	8003d20 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff feee 	bl	8003afa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d1e:	e002      	b.n	8003d26 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff fed8 	bl	8003ad6 <HAL_UART_RxHalfCpltCallback>
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b21      	cmp	r3, #33	@ 0x21
 8003d60:	d108      	bne.n	8003d74 <UART_DMAError+0x46>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003d6e:	68b8      	ldr	r0, [r7, #8]
 8003d70:	f000 f91a 	bl	8003fa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b22      	cmp	r3, #34	@ 0x22
 8003d94:	d108      	bne.n	8003da8 <UART_DMAError+0x7a>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003da2:	68b8      	ldr	r0, [r7, #8]
 8003da4:	f000 f927 	bl	8003ff6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dac:	f043 0210 	orr.w	r2, r3, #16
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db4:	68b8      	ldr	r0, [r7, #8]
 8003db6:	f7ff fe97 	bl	8003ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	e03b      	b.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d037      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ddc:	f7fe f8a2 	bl	8001f24 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e03a      	b.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d023      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b80      	cmp	r3, #128	@ 0x80
 8003e08:	d020      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b40      	cmp	r3, #64	@ 0x40
 8003e0e:	d01d      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d116      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f8de 	bl	8003ff6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e00f      	b.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d0b4      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b098      	sub	sp, #96	@ 0x60
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2222      	movs	r2, #34	@ 0x22
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8003f9c <UART_Start_Receive_DMA+0x128>)
 8003ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8003fa0 <UART_Start_Receive_DMA+0x12c>)
 8003eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa4 <UART_Start_Receive_DMA+0x130>)
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	2200      	movs	r2, #0
 8003eba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	f7fe f9bc 	bl	8002250 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d019      	beq.n	8003f2a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f16:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f4a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003f7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6a39      	ldr	r1, [r7, #32]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3760      	adds	r7, #96	@ 0x60
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	08003bc7 	.word	0x08003bc7
 8003fa0:	08003cf3 	.word	0x08003cf3
 8003fa4:	08003d2f 	.word	0x08003d2f

08003fa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	@ 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	61ba      	str	r2, [r7, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6979      	ldr	r1, [r7, #20]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003fec:	bf00      	nop
 8003fee:	3724      	adds	r7, #36	@ 0x24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b095      	sub	sp, #84	@ 0x54
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800401e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e5      	bne.n	8003ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3314      	adds	r3, #20
 8004038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	61fb      	str	r3, [r7, #28]
   return(result);
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	2b01      	cmp	r3, #1
 800406c:	d119      	bne.n	80040a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	60bb      	str	r3, [r7, #8]
   return(result);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0310 	bic.w	r3, r3, #16
 8004084:	647b      	str	r3, [r7, #68]	@ 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800408e:	61ba      	str	r2, [r7, #24]
 8004090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	613b      	str	r3, [r7, #16]
   return(result);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e5      	bne.n	800406e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040b0:	bf00      	nop
 80040b2:	3754      	adds	r7, #84	@ 0x54
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff fd07 	bl	8003ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b21      	cmp	r3, #33	@ 0x21
 80040f4:	d13e      	bne.n	8004174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fe:	d114      	bne.n	800412a <UART_Transmit_IT+0x48>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d110      	bne.n	800412a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	621a      	str	r2, [r3, #32]
 8004128:	e008      	b.n	800413c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6211      	str	r1, [r2, #32]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29b      	uxth	r3, r3
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4619      	mov	r1, r3
 800414a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10f      	bne.n	8004170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800415e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800416e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fc7d 	bl	8003aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	@ 0x30
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b22      	cmp	r3, #34	@ 0x22
 80041c2:	f040 80ae 	bne.w	8004322 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ce:	d117      	bne.n	8004200 <UART_Receive_IT+0x50>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d113      	bne.n	8004200 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80041fe:	e026      	b.n	800424e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004212:	d007      	beq.n	8004224 <UART_Receive_IT+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <UART_Receive_IT+0x82>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e008      	b.n	8004244 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004242:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4619      	mov	r1, r3
 800425c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800425e:	2b00      	cmp	r3, #0
 8004260:	d15d      	bne.n	800431e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0220 	bic.w	r2, r2, #32
 8004270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d135      	bne.n	8004314 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	613b      	str	r3, [r7, #16]
   return(result);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ce:	623a      	str	r2, [r7, #32]
 80042d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	69f9      	ldr	r1, [r7, #28]
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	61bb      	str	r3, [r7, #24]
   return(result);
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e5      	bne.n	80042ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d10a      	bne.n	8004306 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fbf4 	bl	8003afa <HAL_UARTEx_RxEventCallback>
 8004312:	e002      	b.n	800431a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff fbd5 	bl	8003ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e002      	b.n	8004324 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3730      	adds	r7, #48	@ 0x30
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004366:	f023 030c 	bic.w	r3, r3, #12
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	430b      	orrs	r3, r1
 8004372:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2c      	ldr	r2, [pc, #176]	@ (8004440 <UART_SetConfig+0x114>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe ff4e 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	e002      	b.n	80043a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe ff36 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 80043a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	4a22      	ldr	r2, [pc, #136]	@ (8004444 <UART_SetConfig+0x118>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	0119      	lsls	r1, r3, #4
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <UART_SetConfig+0x118>)
 80043da:	fba3 0302 	umull	r0, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2064      	movs	r0, #100	@ 0x64
 80043e2:	fb00 f303 	mul.w	r3, r0, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	3332      	adds	r3, #50	@ 0x32
 80043ec:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <UART_SetConfig+0x118>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f8:	4419      	add	r1, r3
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009a      	lsls	r2, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <UART_SetConfig+0x118>)
 8004412:	fba3 0302 	umull	r0, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2064      	movs	r0, #100	@ 0x64
 800441a:	fb00 f303 	mul.w	r3, r0, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	3332      	adds	r3, #50	@ 0x32
 8004424:	4a07      	ldr	r2, [pc, #28]	@ (8004444 <UART_SetConfig+0x118>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	f003 020f 	and.w	r2, r3, #15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	440a      	add	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40013800 	.word	0x40013800
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <std>:
 8004448:	2300      	movs	r3, #0
 800444a:	b510      	push	{r4, lr}
 800444c:	4604      	mov	r4, r0
 800444e:	e9c0 3300 	strd	r3, r3, [r0]
 8004452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004456:	6083      	str	r3, [r0, #8]
 8004458:	8181      	strh	r1, [r0, #12]
 800445a:	6643      	str	r3, [r0, #100]	@ 0x64
 800445c:	81c2      	strh	r2, [r0, #14]
 800445e:	6183      	str	r3, [r0, #24]
 8004460:	4619      	mov	r1, r3
 8004462:	2208      	movs	r2, #8
 8004464:	305c      	adds	r0, #92	@ 0x5c
 8004466:	f000 fa1b 	bl	80048a0 <memset>
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <std+0x58>)
 800446c:	6224      	str	r4, [r4, #32]
 800446e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <std+0x5c>)
 8004472:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <std+0x60>)
 8004476:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004478:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <std+0x64>)
 800447a:	6323      	str	r3, [r4, #48]	@ 0x30
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <std+0x68>)
 800447e:	429c      	cmp	r4, r3
 8004480:	d006      	beq.n	8004490 <std+0x48>
 8004482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004486:	4294      	cmp	r4, r2
 8004488:	d002      	beq.n	8004490 <std+0x48>
 800448a:	33d0      	adds	r3, #208	@ 0xd0
 800448c:	429c      	cmp	r4, r3
 800448e:	d105      	bne.n	800449c <std+0x54>
 8004490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004498:	f000 ba7a 	b.w	8004990 <__retarget_lock_init_recursive>
 800449c:	bd10      	pop	{r4, pc}
 800449e:	bf00      	nop
 80044a0:	080046f1 	.word	0x080046f1
 80044a4:	08004713 	.word	0x08004713
 80044a8:	0800474b 	.word	0x0800474b
 80044ac:	0800476f 	.word	0x0800476f
 80044b0:	2000084c 	.word	0x2000084c

080044b4 <stdio_exit_handler>:
 80044b4:	4a02      	ldr	r2, [pc, #8]	@ (80044c0 <stdio_exit_handler+0xc>)
 80044b6:	4903      	ldr	r1, [pc, #12]	@ (80044c4 <stdio_exit_handler+0x10>)
 80044b8:	4803      	ldr	r0, [pc, #12]	@ (80044c8 <stdio_exit_handler+0x14>)
 80044ba:	f000 b869 	b.w	8004590 <_fwalk_sglue>
 80044be:	bf00      	nop
 80044c0:	20000028 	.word	0x20000028
 80044c4:	080054f1 	.word	0x080054f1
 80044c8:	20000038 	.word	0x20000038

080044cc <cleanup_stdio>:
 80044cc:	6841      	ldr	r1, [r0, #4]
 80044ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <cleanup_stdio+0x34>)
 80044d0:	b510      	push	{r4, lr}
 80044d2:	4299      	cmp	r1, r3
 80044d4:	4604      	mov	r4, r0
 80044d6:	d001      	beq.n	80044dc <cleanup_stdio+0x10>
 80044d8:	f001 f80a 	bl	80054f0 <_fflush_r>
 80044dc:	68a1      	ldr	r1, [r4, #8]
 80044de:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <cleanup_stdio+0x38>)
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d002      	beq.n	80044ea <cleanup_stdio+0x1e>
 80044e4:	4620      	mov	r0, r4
 80044e6:	f001 f803 	bl	80054f0 <_fflush_r>
 80044ea:	68e1      	ldr	r1, [r4, #12]
 80044ec:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <cleanup_stdio+0x3c>)
 80044ee:	4299      	cmp	r1, r3
 80044f0:	d004      	beq.n	80044fc <cleanup_stdio+0x30>
 80044f2:	4620      	mov	r0, r4
 80044f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f8:	f000 bffa 	b.w	80054f0 <_fflush_r>
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	bf00      	nop
 8004500:	2000084c 	.word	0x2000084c
 8004504:	200008b4 	.word	0x200008b4
 8004508:	2000091c 	.word	0x2000091c

0800450c <global_stdio_init.part.0>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <global_stdio_init.part.0+0x30>)
 8004510:	4c0b      	ldr	r4, [pc, #44]	@ (8004540 <global_stdio_init.part.0+0x34>)
 8004512:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <global_stdio_init.part.0+0x38>)
 8004514:	4620      	mov	r0, r4
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	2104      	movs	r1, #4
 800451a:	2200      	movs	r2, #0
 800451c:	f7ff ff94 	bl	8004448 <std>
 8004520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004524:	2201      	movs	r2, #1
 8004526:	2109      	movs	r1, #9
 8004528:	f7ff ff8e 	bl	8004448 <std>
 800452c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004530:	2202      	movs	r2, #2
 8004532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004536:	2112      	movs	r1, #18
 8004538:	f7ff bf86 	b.w	8004448 <std>
 800453c:	20000984 	.word	0x20000984
 8004540:	2000084c 	.word	0x2000084c
 8004544:	080044b5 	.word	0x080044b5

08004548 <__sfp_lock_acquire>:
 8004548:	4801      	ldr	r0, [pc, #4]	@ (8004550 <__sfp_lock_acquire+0x8>)
 800454a:	f000 ba22 	b.w	8004992 <__retarget_lock_acquire_recursive>
 800454e:	bf00      	nop
 8004550:	2000098d 	.word	0x2000098d

08004554 <__sfp_lock_release>:
 8004554:	4801      	ldr	r0, [pc, #4]	@ (800455c <__sfp_lock_release+0x8>)
 8004556:	f000 ba1d 	b.w	8004994 <__retarget_lock_release_recursive>
 800455a:	bf00      	nop
 800455c:	2000098d 	.word	0x2000098d

08004560 <__sinit>:
 8004560:	b510      	push	{r4, lr}
 8004562:	4604      	mov	r4, r0
 8004564:	f7ff fff0 	bl	8004548 <__sfp_lock_acquire>
 8004568:	6a23      	ldr	r3, [r4, #32]
 800456a:	b11b      	cbz	r3, 8004574 <__sinit+0x14>
 800456c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004570:	f7ff bff0 	b.w	8004554 <__sfp_lock_release>
 8004574:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <__sinit+0x28>)
 8004576:	6223      	str	r3, [r4, #32]
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <__sinit+0x2c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f5      	bne.n	800456c <__sinit+0xc>
 8004580:	f7ff ffc4 	bl	800450c <global_stdio_init.part.0>
 8004584:	e7f2      	b.n	800456c <__sinit+0xc>
 8004586:	bf00      	nop
 8004588:	080044cd 	.word	0x080044cd
 800458c:	20000984 	.word	0x20000984

08004590 <_fwalk_sglue>:
 8004590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004594:	4607      	mov	r7, r0
 8004596:	4688      	mov	r8, r1
 8004598:	4614      	mov	r4, r2
 800459a:	2600      	movs	r6, #0
 800459c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045a0:	f1b9 0901 	subs.w	r9, r9, #1
 80045a4:	d505      	bpl.n	80045b2 <_fwalk_sglue+0x22>
 80045a6:	6824      	ldr	r4, [r4, #0]
 80045a8:	2c00      	cmp	r4, #0
 80045aa:	d1f7      	bne.n	800459c <_fwalk_sglue+0xc>
 80045ac:	4630      	mov	r0, r6
 80045ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b2:	89ab      	ldrh	r3, [r5, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d907      	bls.n	80045c8 <_fwalk_sglue+0x38>
 80045b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045bc:	3301      	adds	r3, #1
 80045be:	d003      	beq.n	80045c8 <_fwalk_sglue+0x38>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4638      	mov	r0, r7
 80045c4:	47c0      	blx	r8
 80045c6:	4306      	orrs	r6, r0
 80045c8:	3568      	adds	r5, #104	@ 0x68
 80045ca:	e7e9      	b.n	80045a0 <_fwalk_sglue+0x10>

080045cc <iprintf>:
 80045cc:	b40f      	push	{r0, r1, r2, r3}
 80045ce:	b507      	push	{r0, r1, r2, lr}
 80045d0:	4906      	ldr	r1, [pc, #24]	@ (80045ec <iprintf+0x20>)
 80045d2:	ab04      	add	r3, sp, #16
 80045d4:	6808      	ldr	r0, [r1, #0]
 80045d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80045da:	6881      	ldr	r1, [r0, #8]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	f000 fc5f 	bl	8004ea0 <_vfiprintf_r>
 80045e2:	b003      	add	sp, #12
 80045e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e8:	b004      	add	sp, #16
 80045ea:	4770      	bx	lr
 80045ec:	20000034 	.word	0x20000034

080045f0 <_puts_r>:
 80045f0:	6a03      	ldr	r3, [r0, #32]
 80045f2:	b570      	push	{r4, r5, r6, lr}
 80045f4:	4605      	mov	r5, r0
 80045f6:	460e      	mov	r6, r1
 80045f8:	6884      	ldr	r4, [r0, #8]
 80045fa:	b90b      	cbnz	r3, 8004600 <_puts_r+0x10>
 80045fc:	f7ff ffb0 	bl	8004560 <__sinit>
 8004600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004602:	07db      	lsls	r3, r3, #31
 8004604:	d405      	bmi.n	8004612 <_puts_r+0x22>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	0598      	lsls	r0, r3, #22
 800460a:	d402      	bmi.n	8004612 <_puts_r+0x22>
 800460c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800460e:	f000 f9c0 	bl	8004992 <__retarget_lock_acquire_recursive>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	0719      	lsls	r1, r3, #28
 8004616:	d502      	bpl.n	800461e <_puts_r+0x2e>
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d135      	bne.n	800468a <_puts_r+0x9a>
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f8e7 	bl	80047f4 <__swsetup_r>
 8004626:	b380      	cbz	r0, 800468a <_puts_r+0x9a>
 8004628:	f04f 35ff 	mov.w	r5, #4294967295
 800462c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800462e:	07da      	lsls	r2, r3, #31
 8004630:	d405      	bmi.n	800463e <_puts_r+0x4e>
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	059b      	lsls	r3, r3, #22
 8004636:	d402      	bmi.n	800463e <_puts_r+0x4e>
 8004638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800463a:	f000 f9ab 	bl	8004994 <__retarget_lock_release_recursive>
 800463e:	4628      	mov	r0, r5
 8004640:	bd70      	pop	{r4, r5, r6, pc}
 8004642:	2b00      	cmp	r3, #0
 8004644:	da04      	bge.n	8004650 <_puts_r+0x60>
 8004646:	69a2      	ldr	r2, [r4, #24]
 8004648:	429a      	cmp	r2, r3
 800464a:	dc17      	bgt.n	800467c <_puts_r+0x8c>
 800464c:	290a      	cmp	r1, #10
 800464e:	d015      	beq.n	800467c <_puts_r+0x8c>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	6022      	str	r2, [r4, #0]
 8004656:	7019      	strb	r1, [r3, #0]
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800465e:	3b01      	subs	r3, #1
 8004660:	60a3      	str	r3, [r4, #8]
 8004662:	2900      	cmp	r1, #0
 8004664:	d1ed      	bne.n	8004642 <_puts_r+0x52>
 8004666:	2b00      	cmp	r3, #0
 8004668:	da11      	bge.n	800468e <_puts_r+0x9e>
 800466a:	4622      	mov	r2, r4
 800466c:	210a      	movs	r1, #10
 800466e:	4628      	mov	r0, r5
 8004670:	f000 f881 	bl	8004776 <__swbuf_r>
 8004674:	3001      	adds	r0, #1
 8004676:	d0d7      	beq.n	8004628 <_puts_r+0x38>
 8004678:	250a      	movs	r5, #10
 800467a:	e7d7      	b.n	800462c <_puts_r+0x3c>
 800467c:	4622      	mov	r2, r4
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f879 	bl	8004776 <__swbuf_r>
 8004684:	3001      	adds	r0, #1
 8004686:	d1e7      	bne.n	8004658 <_puts_r+0x68>
 8004688:	e7ce      	b.n	8004628 <_puts_r+0x38>
 800468a:	3e01      	subs	r6, #1
 800468c:	e7e4      	b.n	8004658 <_puts_r+0x68>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	6022      	str	r2, [r4, #0]
 8004694:	220a      	movs	r2, #10
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e7ee      	b.n	8004678 <_puts_r+0x88>
	...

0800469c <puts>:
 800469c:	4b02      	ldr	r3, [pc, #8]	@ (80046a8 <puts+0xc>)
 800469e:	4601      	mov	r1, r0
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	f7ff bfa5 	b.w	80045f0 <_puts_r>
 80046a6:	bf00      	nop
 80046a8:	20000034 	.word	0x20000034

080046ac <siprintf>:
 80046ac:	b40e      	push	{r1, r2, r3}
 80046ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046b2:	b510      	push	{r4, lr}
 80046b4:	2400      	movs	r4, #0
 80046b6:	b09d      	sub	sp, #116	@ 0x74
 80046b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80046ba:	9002      	str	r0, [sp, #8]
 80046bc:	9006      	str	r0, [sp, #24]
 80046be:	9107      	str	r1, [sp, #28]
 80046c0:	9104      	str	r1, [sp, #16]
 80046c2:	4809      	ldr	r0, [pc, #36]	@ (80046e8 <siprintf+0x3c>)
 80046c4:	4909      	ldr	r1, [pc, #36]	@ (80046ec <siprintf+0x40>)
 80046c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ca:	9105      	str	r1, [sp, #20]
 80046cc:	6800      	ldr	r0, [r0, #0]
 80046ce:	a902      	add	r1, sp, #8
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80046d4:	f000 fac0 	bl	8004c58 <_svfiprintf_r>
 80046d8:	9b02      	ldr	r3, [sp, #8]
 80046da:	701c      	strb	r4, [r3, #0]
 80046dc:	b01d      	add	sp, #116	@ 0x74
 80046de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e2:	b003      	add	sp, #12
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000034 	.word	0x20000034
 80046ec:	ffff0208 	.word	0xffff0208

080046f0 <__sread>:
 80046f0:	b510      	push	{r4, lr}
 80046f2:	460c      	mov	r4, r1
 80046f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f8:	f000 f8fc 	bl	80048f4 <_read_r>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	bfab      	itete	ge
 8004700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004702:	89a3      	ldrhlt	r3, [r4, #12]
 8004704:	181b      	addge	r3, r3, r0
 8004706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800470a:	bfac      	ite	ge
 800470c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800470e:	81a3      	strhlt	r3, [r4, #12]
 8004710:	bd10      	pop	{r4, pc}

08004712 <__swrite>:
 8004712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004716:	461f      	mov	r7, r3
 8004718:	898b      	ldrh	r3, [r1, #12]
 800471a:	4605      	mov	r5, r0
 800471c:	05db      	lsls	r3, r3, #23
 800471e:	460c      	mov	r4, r1
 8004720:	4616      	mov	r6, r2
 8004722:	d505      	bpl.n	8004730 <__swrite+0x1e>
 8004724:	2302      	movs	r3, #2
 8004726:	2200      	movs	r2, #0
 8004728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472c:	f000 f8d0 	bl	80048d0 <_lseek_r>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	4632      	mov	r2, r6
 8004734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004738:	81a3      	strh	r3, [r4, #12]
 800473a:	4628      	mov	r0, r5
 800473c:	463b      	mov	r3, r7
 800473e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004746:	f000 b8e7 	b.w	8004918 <_write_r>

0800474a <__sseek>:
 800474a:	b510      	push	{r4, lr}
 800474c:	460c      	mov	r4, r1
 800474e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004752:	f000 f8bd 	bl	80048d0 <_lseek_r>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	bf15      	itete	ne
 800475c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800475e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004762:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004766:	81a3      	strheq	r3, [r4, #12]
 8004768:	bf18      	it	ne
 800476a:	81a3      	strhne	r3, [r4, #12]
 800476c:	bd10      	pop	{r4, pc}

0800476e <__sclose>:
 800476e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004772:	f000 b89d 	b.w	80048b0 <_close_r>

08004776 <__swbuf_r>:
 8004776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004778:	460e      	mov	r6, r1
 800477a:	4614      	mov	r4, r2
 800477c:	4605      	mov	r5, r0
 800477e:	b118      	cbz	r0, 8004788 <__swbuf_r+0x12>
 8004780:	6a03      	ldr	r3, [r0, #32]
 8004782:	b90b      	cbnz	r3, 8004788 <__swbuf_r+0x12>
 8004784:	f7ff feec 	bl	8004560 <__sinit>
 8004788:	69a3      	ldr	r3, [r4, #24]
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	071a      	lsls	r2, r3, #28
 8004790:	d501      	bpl.n	8004796 <__swbuf_r+0x20>
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	b943      	cbnz	r3, 80047a8 <__swbuf_r+0x32>
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f000 f82b 	bl	80047f4 <__swsetup_r>
 800479e:	b118      	cbz	r0, 80047a8 <__swbuf_r+0x32>
 80047a0:	f04f 37ff 	mov.w	r7, #4294967295
 80047a4:	4638      	mov	r0, r7
 80047a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	6922      	ldr	r2, [r4, #16]
 80047ac:	b2f6      	uxtb	r6, r6
 80047ae:	1a98      	subs	r0, r3, r2
 80047b0:	6963      	ldr	r3, [r4, #20]
 80047b2:	4637      	mov	r7, r6
 80047b4:	4283      	cmp	r3, r0
 80047b6:	dc05      	bgt.n	80047c4 <__swbuf_r+0x4e>
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 fe98 	bl	80054f0 <_fflush_r>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1ed      	bne.n	80047a0 <__swbuf_r+0x2a>
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	60a3      	str	r3, [r4, #8]
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	6022      	str	r2, [r4, #0]
 80047d0:	701e      	strb	r6, [r3, #0]
 80047d2:	6962      	ldr	r2, [r4, #20]
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d004      	beq.n	80047e4 <__swbuf_r+0x6e>
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	07db      	lsls	r3, r3, #31
 80047de:	d5e1      	bpl.n	80047a4 <__swbuf_r+0x2e>
 80047e0:	2e0a      	cmp	r6, #10
 80047e2:	d1df      	bne.n	80047a4 <__swbuf_r+0x2e>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fe82 	bl	80054f0 <_fflush_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d0d9      	beq.n	80047a4 <__swbuf_r+0x2e>
 80047f0:	e7d6      	b.n	80047a0 <__swbuf_r+0x2a>
	...

080047f4 <__swsetup_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4b29      	ldr	r3, [pc, #164]	@ (800489c <__swsetup_r+0xa8>)
 80047f8:	4605      	mov	r5, r0
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	460c      	mov	r4, r1
 80047fe:	b118      	cbz	r0, 8004808 <__swsetup_r+0x14>
 8004800:	6a03      	ldr	r3, [r0, #32]
 8004802:	b90b      	cbnz	r3, 8004808 <__swsetup_r+0x14>
 8004804:	f7ff feac 	bl	8004560 <__sinit>
 8004808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480c:	0719      	lsls	r1, r3, #28
 800480e:	d422      	bmi.n	8004856 <__swsetup_r+0x62>
 8004810:	06da      	lsls	r2, r3, #27
 8004812:	d407      	bmi.n	8004824 <__swsetup_r+0x30>
 8004814:	2209      	movs	r2, #9
 8004816:	602a      	str	r2, [r5, #0]
 8004818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	e033      	b.n	800488c <__swsetup_r+0x98>
 8004824:	0758      	lsls	r0, r3, #29
 8004826:	d512      	bpl.n	800484e <__swsetup_r+0x5a>
 8004828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800482a:	b141      	cbz	r1, 800483e <__swsetup_r+0x4a>
 800482c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004830:	4299      	cmp	r1, r3
 8004832:	d002      	beq.n	800483a <__swsetup_r+0x46>
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f8bd 	bl	80049b4 <_free_r>
 800483a:	2300      	movs	r3, #0
 800483c:	6363      	str	r3, [r4, #52]	@ 0x34
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	2300      	movs	r3, #0
 8004848:	6063      	str	r3, [r4, #4]
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	b94b      	cbnz	r3, 800486e <__swsetup_r+0x7a>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004864:	d003      	beq.n	800486e <__swsetup_r+0x7a>
 8004866:	4621      	mov	r1, r4
 8004868:	4628      	mov	r0, r5
 800486a:	f000 fe8e 	bl	800558a <__smakebuf_r>
 800486e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004872:	f013 0201 	ands.w	r2, r3, #1
 8004876:	d00a      	beq.n	800488e <__swsetup_r+0x9a>
 8004878:	2200      	movs	r2, #0
 800487a:	60a2      	str	r2, [r4, #8]
 800487c:	6962      	ldr	r2, [r4, #20]
 800487e:	4252      	negs	r2, r2
 8004880:	61a2      	str	r2, [r4, #24]
 8004882:	6922      	ldr	r2, [r4, #16]
 8004884:	b942      	cbnz	r2, 8004898 <__swsetup_r+0xa4>
 8004886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800488a:	d1c5      	bne.n	8004818 <__swsetup_r+0x24>
 800488c:	bd38      	pop	{r3, r4, r5, pc}
 800488e:	0799      	lsls	r1, r3, #30
 8004890:	bf58      	it	pl
 8004892:	6962      	ldrpl	r2, [r4, #20]
 8004894:	60a2      	str	r2, [r4, #8]
 8004896:	e7f4      	b.n	8004882 <__swsetup_r+0x8e>
 8004898:	2000      	movs	r0, #0
 800489a:	e7f7      	b.n	800488c <__swsetup_r+0x98>
 800489c:	20000034 	.word	0x20000034

080048a0 <memset>:
 80048a0:	4603      	mov	r3, r0
 80048a2:	4402      	add	r2, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <_close_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	2300      	movs	r3, #0
 80048b4:	4d05      	ldr	r5, [pc, #20]	@ (80048cc <_close_r+0x1c>)
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fd f896 	bl	80019ec <_close>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_close_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_close_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20000988 	.word	0x20000988

080048d0 <_lseek_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	2200      	movs	r2, #0
 80048da:	4d05      	ldr	r5, [pc, #20]	@ (80048f0 <_lseek_r+0x20>)
 80048dc:	602a      	str	r2, [r5, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	f7fd f8a8 	bl	8001a34 <_lseek>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_lseek_r+0x1e>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_lseek_r+0x1e>
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	20000988 	.word	0x20000988

080048f4 <_read_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4604      	mov	r4, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	2200      	movs	r2, #0
 80048fe:	4d05      	ldr	r5, [pc, #20]	@ (8004914 <_read_r+0x20>)
 8004900:	602a      	str	r2, [r5, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f7fd f855 	bl	80019b2 <_read>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_read_r+0x1e>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_read_r+0x1e>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20000988 	.word	0x20000988

08004918 <_write_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4604      	mov	r4, r0
 800491c:	4608      	mov	r0, r1
 800491e:	4611      	mov	r1, r2
 8004920:	2200      	movs	r2, #0
 8004922:	4d05      	ldr	r5, [pc, #20]	@ (8004938 <_write_r+0x20>)
 8004924:	602a      	str	r2, [r5, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f7fd fa68 	bl	8001dfc <_write>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_write_r+0x1e>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_write_r+0x1e>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20000988 	.word	0x20000988

0800493c <__errno>:
 800493c:	4b01      	ldr	r3, [pc, #4]	@ (8004944 <__errno+0x8>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000034 	.word	0x20000034

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	2600      	movs	r6, #0
 800494c:	4d0c      	ldr	r5, [pc, #48]	@ (8004980 <__libc_init_array+0x38>)
 800494e:	4c0d      	ldr	r4, [pc, #52]	@ (8004984 <__libc_init_array+0x3c>)
 8004950:	1b64      	subs	r4, r4, r5
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	f000 fee4 	bl	8005724 <_init>
 800495c:	2600      	movs	r6, #0
 800495e:	4d0a      	ldr	r5, [pc, #40]	@ (8004988 <__libc_init_array+0x40>)
 8004960:	4c0a      	ldr	r4, [pc, #40]	@ (800498c <__libc_init_array+0x44>)
 8004962:	1b64      	subs	r4, r4, r5
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	08005fc0 	.word	0x08005fc0
 8004984:	08005fc0 	.word	0x08005fc0
 8004988:	08005fc0 	.word	0x08005fc0
 800498c:	08005fc4 	.word	0x08005fc4

08004990 <__retarget_lock_init_recursive>:
 8004990:	4770      	bx	lr

08004992 <__retarget_lock_acquire_recursive>:
 8004992:	4770      	bx	lr

08004994 <__retarget_lock_release_recursive>:
 8004994:	4770      	bx	lr

08004996 <memcpy>:
 8004996:	440a      	add	r2, r1
 8004998:	4291      	cmp	r1, r2
 800499a:	f100 33ff 	add.w	r3, r0, #4294967295
 800499e:	d100      	bne.n	80049a2 <memcpy+0xc>
 80049a0:	4770      	bx	lr
 80049a2:	b510      	push	{r4, lr}
 80049a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a8:	4291      	cmp	r1, r2
 80049aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ae:	d1f9      	bne.n	80049a4 <memcpy+0xe>
 80049b0:	bd10      	pop	{r4, pc}
	...

080049b4 <_free_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4605      	mov	r5, r0
 80049b8:	2900      	cmp	r1, #0
 80049ba:	d040      	beq.n	8004a3e <_free_r+0x8a>
 80049bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c0:	1f0c      	subs	r4, r1, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfb8      	it	lt
 80049c6:	18e4      	addlt	r4, r4, r3
 80049c8:	f000 f8de 	bl	8004b88 <__malloc_lock>
 80049cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a40 <_free_r+0x8c>)
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	b933      	cbnz	r3, 80049e0 <_free_r+0x2c>
 80049d2:	6063      	str	r3, [r4, #4]
 80049d4:	6014      	str	r4, [r2, #0]
 80049d6:	4628      	mov	r0, r5
 80049d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049dc:	f000 b8da 	b.w	8004b94 <__malloc_unlock>
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d908      	bls.n	80049f6 <_free_r+0x42>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	1821      	adds	r1, r4, r0
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf01      	itttt	eq
 80049ec:	6819      	ldreq	r1, [r3, #0]
 80049ee:	685b      	ldreq	r3, [r3, #4]
 80049f0:	1809      	addeq	r1, r1, r0
 80049f2:	6021      	streq	r1, [r4, #0]
 80049f4:	e7ed      	b.n	80049d2 <_free_r+0x1e>
 80049f6:	461a      	mov	r2, r3
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b10b      	cbz	r3, 8004a00 <_free_r+0x4c>
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	d9fa      	bls.n	80049f6 <_free_r+0x42>
 8004a00:	6811      	ldr	r1, [r2, #0]
 8004a02:	1850      	adds	r0, r2, r1
 8004a04:	42a0      	cmp	r0, r4
 8004a06:	d10b      	bne.n	8004a20 <_free_r+0x6c>
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	4401      	add	r1, r0
 8004a0c:	1850      	adds	r0, r2, r1
 8004a0e:	4283      	cmp	r3, r0
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	d1e0      	bne.n	80049d6 <_free_r+0x22>
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4408      	add	r0, r1
 8004a1a:	6010      	str	r0, [r2, #0]
 8004a1c:	6053      	str	r3, [r2, #4]
 8004a1e:	e7da      	b.n	80049d6 <_free_r+0x22>
 8004a20:	d902      	bls.n	8004a28 <_free_r+0x74>
 8004a22:	230c      	movs	r3, #12
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	e7d6      	b.n	80049d6 <_free_r+0x22>
 8004a28:	6820      	ldr	r0, [r4, #0]
 8004a2a:	1821      	adds	r1, r4, r0
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	bf01      	itttt	eq
 8004a30:	6819      	ldreq	r1, [r3, #0]
 8004a32:	685b      	ldreq	r3, [r3, #4]
 8004a34:	1809      	addeq	r1, r1, r0
 8004a36:	6021      	streq	r1, [r4, #0]
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6054      	str	r4, [r2, #4]
 8004a3c:	e7cb      	b.n	80049d6 <_free_r+0x22>
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	20000994 	.word	0x20000994

08004a44 <sbrk_aligned>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4e0f      	ldr	r6, [pc, #60]	@ (8004a84 <sbrk_aligned+0x40>)
 8004a48:	460c      	mov	r4, r1
 8004a4a:	6831      	ldr	r1, [r6, #0]
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b911      	cbnz	r1, 8004a56 <sbrk_aligned+0x12>
 8004a50:	f000 fe14 	bl	800567c <_sbrk_r>
 8004a54:	6030      	str	r0, [r6, #0]
 8004a56:	4621      	mov	r1, r4
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f000 fe0f 	bl	800567c <_sbrk_r>
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	d103      	bne.n	8004a6a <sbrk_aligned+0x26>
 8004a62:	f04f 34ff 	mov.w	r4, #4294967295
 8004a66:	4620      	mov	r0, r4
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
 8004a6a:	1cc4      	adds	r4, r0, #3
 8004a6c:	f024 0403 	bic.w	r4, r4, #3
 8004a70:	42a0      	cmp	r0, r4
 8004a72:	d0f8      	beq.n	8004a66 <sbrk_aligned+0x22>
 8004a74:	1a21      	subs	r1, r4, r0
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fe00 	bl	800567c <_sbrk_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d1f2      	bne.n	8004a66 <sbrk_aligned+0x22>
 8004a80:	e7ef      	b.n	8004a62 <sbrk_aligned+0x1e>
 8004a82:	bf00      	nop
 8004a84:	20000990 	.word	0x20000990

08004a88 <_malloc_r>:
 8004a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a8c:	1ccd      	adds	r5, r1, #3
 8004a8e:	f025 0503 	bic.w	r5, r5, #3
 8004a92:	3508      	adds	r5, #8
 8004a94:	2d0c      	cmp	r5, #12
 8004a96:	bf38      	it	cc
 8004a98:	250c      	movcc	r5, #12
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	db01      	blt.n	8004aa4 <_malloc_r+0x1c>
 8004aa0:	42a9      	cmp	r1, r5
 8004aa2:	d904      	bls.n	8004aae <_malloc_r+0x26>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b84 <_malloc_r+0xfc>
 8004ab2:	f000 f869 	bl	8004b88 <__malloc_lock>
 8004ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8004aba:	461c      	mov	r4, r3
 8004abc:	bb44      	cbnz	r4, 8004b10 <_malloc_r+0x88>
 8004abe:	4629      	mov	r1, r5
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff ffbf 	bl	8004a44 <sbrk_aligned>
 8004ac6:	1c43      	adds	r3, r0, #1
 8004ac8:	4604      	mov	r4, r0
 8004aca:	d158      	bne.n	8004b7e <_malloc_r+0xf6>
 8004acc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ad0:	4627      	mov	r7, r4
 8004ad2:	2f00      	cmp	r7, #0
 8004ad4:	d143      	bne.n	8004b5e <_malloc_r+0xd6>
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	d04b      	beq.n	8004b72 <_malloc_r+0xea>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	4639      	mov	r1, r7
 8004ade:	4630      	mov	r0, r6
 8004ae0:	eb04 0903 	add.w	r9, r4, r3
 8004ae4:	f000 fdca 	bl	800567c <_sbrk_r>
 8004ae8:	4581      	cmp	r9, r0
 8004aea:	d142      	bne.n	8004b72 <_malloc_r+0xea>
 8004aec:	6821      	ldr	r1, [r4, #0]
 8004aee:	4630      	mov	r0, r6
 8004af0:	1a6d      	subs	r5, r5, r1
 8004af2:	4629      	mov	r1, r5
 8004af4:	f7ff ffa6 	bl	8004a44 <sbrk_aligned>
 8004af8:	3001      	adds	r0, #1
 8004afa:	d03a      	beq.n	8004b72 <_malloc_r+0xea>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	442b      	add	r3, r5
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	f8d8 3000 	ldr.w	r3, [r8]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	bb62      	cbnz	r2, 8004b64 <_malloc_r+0xdc>
 8004b0a:	f8c8 7000 	str.w	r7, [r8]
 8004b0e:	e00f      	b.n	8004b30 <_malloc_r+0xa8>
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	1b52      	subs	r2, r2, r5
 8004b14:	d420      	bmi.n	8004b58 <_malloc_r+0xd0>
 8004b16:	2a0b      	cmp	r2, #11
 8004b18:	d917      	bls.n	8004b4a <_malloc_r+0xc2>
 8004b1a:	1961      	adds	r1, r4, r5
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	6025      	str	r5, [r4, #0]
 8004b20:	bf18      	it	ne
 8004b22:	6059      	strne	r1, [r3, #4]
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	bf08      	it	eq
 8004b28:	f8c8 1000 	streq.w	r1, [r8]
 8004b2c:	5162      	str	r2, [r4, r5]
 8004b2e:	604b      	str	r3, [r1, #4]
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 f82f 	bl	8004b94 <__malloc_unlock>
 8004b36:	f104 000b 	add.w	r0, r4, #11
 8004b3a:	1d23      	adds	r3, r4, #4
 8004b3c:	f020 0007 	bic.w	r0, r0, #7
 8004b40:	1ac2      	subs	r2, r0, r3
 8004b42:	bf1c      	itt	ne
 8004b44:	1a1b      	subne	r3, r3, r0
 8004b46:	50a3      	strne	r3, [r4, r2]
 8004b48:	e7af      	b.n	8004aaa <_malloc_r+0x22>
 8004b4a:	6862      	ldr	r2, [r4, #4]
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	bf0c      	ite	eq
 8004b50:	f8c8 2000 	streq.w	r2, [r8]
 8004b54:	605a      	strne	r2, [r3, #4]
 8004b56:	e7eb      	b.n	8004b30 <_malloc_r+0xa8>
 8004b58:	4623      	mov	r3, r4
 8004b5a:	6864      	ldr	r4, [r4, #4]
 8004b5c:	e7ae      	b.n	8004abc <_malloc_r+0x34>
 8004b5e:	463c      	mov	r4, r7
 8004b60:	687f      	ldr	r7, [r7, #4]
 8004b62:	e7b6      	b.n	8004ad2 <_malloc_r+0x4a>
 8004b64:	461a      	mov	r2, r3
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d1fb      	bne.n	8004b64 <_malloc_r+0xdc>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6053      	str	r3, [r2, #4]
 8004b70:	e7de      	b.n	8004b30 <_malloc_r+0xa8>
 8004b72:	230c      	movs	r3, #12
 8004b74:	4630      	mov	r0, r6
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	f000 f80c 	bl	8004b94 <__malloc_unlock>
 8004b7c:	e794      	b.n	8004aa8 <_malloc_r+0x20>
 8004b7e:	6005      	str	r5, [r0, #0]
 8004b80:	e7d6      	b.n	8004b30 <_malloc_r+0xa8>
 8004b82:	bf00      	nop
 8004b84:	20000994 	.word	0x20000994

08004b88 <__malloc_lock>:
 8004b88:	4801      	ldr	r0, [pc, #4]	@ (8004b90 <__malloc_lock+0x8>)
 8004b8a:	f7ff bf02 	b.w	8004992 <__retarget_lock_acquire_recursive>
 8004b8e:	bf00      	nop
 8004b90:	2000098c 	.word	0x2000098c

08004b94 <__malloc_unlock>:
 8004b94:	4801      	ldr	r0, [pc, #4]	@ (8004b9c <__malloc_unlock+0x8>)
 8004b96:	f7ff befd 	b.w	8004994 <__retarget_lock_release_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	2000098c 	.word	0x2000098c

08004ba0 <__ssputs_r>:
 8004ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	461f      	mov	r7, r3
 8004ba6:	688e      	ldr	r6, [r1, #8]
 8004ba8:	4682      	mov	sl, r0
 8004baa:	42be      	cmp	r6, r7
 8004bac:	460c      	mov	r4, r1
 8004bae:	4690      	mov	r8, r2
 8004bb0:	680b      	ldr	r3, [r1, #0]
 8004bb2:	d82d      	bhi.n	8004c10 <__ssputs_r+0x70>
 8004bb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bbc:	d026      	beq.n	8004c0c <__ssputs_r+0x6c>
 8004bbe:	6965      	ldr	r5, [r4, #20]
 8004bc0:	6909      	ldr	r1, [r1, #16]
 8004bc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bc6:	eba3 0901 	sub.w	r9, r3, r1
 8004bca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bce:	1c7b      	adds	r3, r7, #1
 8004bd0:	444b      	add	r3, r9
 8004bd2:	106d      	asrs	r5, r5, #1
 8004bd4:	429d      	cmp	r5, r3
 8004bd6:	bf38      	it	cc
 8004bd8:	461d      	movcc	r5, r3
 8004bda:	0553      	lsls	r3, r2, #21
 8004bdc:	d527      	bpl.n	8004c2e <__ssputs_r+0x8e>
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7ff ff52 	bl	8004a88 <_malloc_r>
 8004be4:	4606      	mov	r6, r0
 8004be6:	b360      	cbz	r0, 8004c42 <__ssputs_r+0xa2>
 8004be8:	464a      	mov	r2, r9
 8004bea:	6921      	ldr	r1, [r4, #16]
 8004bec:	f7ff fed3 	bl	8004996 <memcpy>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	6126      	str	r6, [r4, #16]
 8004bfe:	444e      	add	r6, r9
 8004c00:	6026      	str	r6, [r4, #0]
 8004c02:	463e      	mov	r6, r7
 8004c04:	6165      	str	r5, [r4, #20]
 8004c06:	eba5 0509 	sub.w	r5, r5, r9
 8004c0a:	60a5      	str	r5, [r4, #8]
 8004c0c:	42be      	cmp	r6, r7
 8004c0e:	d900      	bls.n	8004c12 <__ssputs_r+0x72>
 8004c10:	463e      	mov	r6, r7
 8004c12:	4632      	mov	r2, r6
 8004c14:	4641      	mov	r1, r8
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	f000 fcf3 	bl	8005602 <memmove>
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	68a3      	ldr	r3, [r4, #8]
 8004c20:	1b9b      	subs	r3, r3, r6
 8004c22:	60a3      	str	r3, [r4, #8]
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	4433      	add	r3, r6
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2e:	462a      	mov	r2, r5
 8004c30:	f000 fd42 	bl	80056b8 <_realloc_r>
 8004c34:	4606      	mov	r6, r0
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d1e0      	bne.n	8004bfc <__ssputs_r+0x5c>
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	6921      	ldr	r1, [r4, #16]
 8004c3e:	f7ff feb9 	bl	80049b4 <_free_r>
 8004c42:	230c      	movs	r3, #12
 8004c44:	f8ca 3000 	str.w	r3, [sl]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	e7e9      	b.n	8004c2a <__ssputs_r+0x8a>
	...

08004c58 <_svfiprintf_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	4698      	mov	r8, r3
 8004c5e:	898b      	ldrh	r3, [r1, #12]
 8004c60:	4607      	mov	r7, r0
 8004c62:	061b      	lsls	r3, r3, #24
 8004c64:	460d      	mov	r5, r1
 8004c66:	4614      	mov	r4, r2
 8004c68:	b09d      	sub	sp, #116	@ 0x74
 8004c6a:	d510      	bpl.n	8004c8e <_svfiprintf_r+0x36>
 8004c6c:	690b      	ldr	r3, [r1, #16]
 8004c6e:	b973      	cbnz	r3, 8004c8e <_svfiprintf_r+0x36>
 8004c70:	2140      	movs	r1, #64	@ 0x40
 8004c72:	f7ff ff09 	bl	8004a88 <_malloc_r>
 8004c76:	6028      	str	r0, [r5, #0]
 8004c78:	6128      	str	r0, [r5, #16]
 8004c7a:	b930      	cbnz	r0, 8004c8a <_svfiprintf_r+0x32>
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	b01d      	add	sp, #116	@ 0x74
 8004c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8a:	2340      	movs	r3, #64	@ 0x40
 8004c8c:	616b      	str	r3, [r5, #20]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c92:	2320      	movs	r3, #32
 8004c94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c98:	2330      	movs	r3, #48	@ 0x30
 8004c9a:	f04f 0901 	mov.w	r9, #1
 8004c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ca2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004e3c <_svfiprintf_r+0x1e4>
 8004ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004caa:	4623      	mov	r3, r4
 8004cac:	469a      	mov	sl, r3
 8004cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cb2:	b10a      	cbz	r2, 8004cb8 <_svfiprintf_r+0x60>
 8004cb4:	2a25      	cmp	r2, #37	@ 0x25
 8004cb6:	d1f9      	bne.n	8004cac <_svfiprintf_r+0x54>
 8004cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cbc:	d00b      	beq.n	8004cd6 <_svfiprintf_r+0x7e>
 8004cbe:	465b      	mov	r3, fp
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f7ff ff6b 	bl	8004ba0 <__ssputs_r>
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f000 80a7 	beq.w	8004e1e <_svfiprintf_r+0x1c6>
 8004cd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cd2:	445a      	add	r2, fp
 8004cd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 809f 	beq.w	8004e1e <_svfiprintf_r+0x1c6>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cea:	f10a 0a01 	add.w	sl, sl, #1
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	9307      	str	r3, [sp, #28]
 8004cf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cf8:	4654      	mov	r4, sl
 8004cfa:	2205      	movs	r2, #5
 8004cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d00:	484e      	ldr	r0, [pc, #312]	@ (8004e3c <_svfiprintf_r+0x1e4>)
 8004d02:	f000 fccb 	bl	800569c <memchr>
 8004d06:	9a04      	ldr	r2, [sp, #16]
 8004d08:	b9d8      	cbnz	r0, 8004d42 <_svfiprintf_r+0xea>
 8004d0a:	06d0      	lsls	r0, r2, #27
 8004d0c:	bf44      	itt	mi
 8004d0e:	2320      	movmi	r3, #32
 8004d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d14:	0711      	lsls	r1, r2, #28
 8004d16:	bf44      	itt	mi
 8004d18:	232b      	movmi	r3, #43	@ 0x2b
 8004d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d22:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d24:	d015      	beq.n	8004d52 <_svfiprintf_r+0xfa>
 8004d26:	4654      	mov	r4, sl
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f04f 0c0a 	mov.w	ip, #10
 8004d2e:	9a07      	ldr	r2, [sp, #28]
 8004d30:	4621      	mov	r1, r4
 8004d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d36:	3b30      	subs	r3, #48	@ 0x30
 8004d38:	2b09      	cmp	r3, #9
 8004d3a:	d94b      	bls.n	8004dd4 <_svfiprintf_r+0x17c>
 8004d3c:	b1b0      	cbz	r0, 8004d6c <_svfiprintf_r+0x114>
 8004d3e:	9207      	str	r2, [sp, #28]
 8004d40:	e014      	b.n	8004d6c <_svfiprintf_r+0x114>
 8004d42:	eba0 0308 	sub.w	r3, r0, r8
 8004d46:	fa09 f303 	lsl.w	r3, r9, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	46a2      	mov	sl, r4
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	e7d2      	b.n	8004cf8 <_svfiprintf_r+0xa0>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	1d19      	adds	r1, r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	9103      	str	r1, [sp, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bfbb      	ittet	lt
 8004d5e:	425b      	neglt	r3, r3
 8004d60:	f042 0202 	orrlt.w	r2, r2, #2
 8004d64:	9307      	strge	r3, [sp, #28]
 8004d66:	9307      	strlt	r3, [sp, #28]
 8004d68:	bfb8      	it	lt
 8004d6a:	9204      	strlt	r2, [sp, #16]
 8004d6c:	7823      	ldrb	r3, [r4, #0]
 8004d6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d70:	d10a      	bne.n	8004d88 <_svfiprintf_r+0x130>
 8004d72:	7863      	ldrb	r3, [r4, #1]
 8004d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d76:	d132      	bne.n	8004dde <_svfiprintf_r+0x186>
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	3402      	adds	r4, #2
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	9203      	str	r2, [sp, #12]
 8004d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d86:	9305      	str	r3, [sp, #20]
 8004d88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004e40 <_svfiprintf_r+0x1e8>
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	4650      	mov	r0, sl
 8004d90:	7821      	ldrb	r1, [r4, #0]
 8004d92:	f000 fc83 	bl	800569c <memchr>
 8004d96:	b138      	cbz	r0, 8004da8 <_svfiprintf_r+0x150>
 8004d98:	2240      	movs	r2, #64	@ 0x40
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	eba0 000a 	sub.w	r0, r0, sl
 8004da0:	4082      	lsls	r2, r0
 8004da2:	4313      	orrs	r3, r2
 8004da4:	3401      	adds	r4, #1
 8004da6:	9304      	str	r3, [sp, #16]
 8004da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dac:	2206      	movs	r2, #6
 8004dae:	4825      	ldr	r0, [pc, #148]	@ (8004e44 <_svfiprintf_r+0x1ec>)
 8004db0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004db4:	f000 fc72 	bl	800569c <memchr>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d036      	beq.n	8004e2a <_svfiprintf_r+0x1d2>
 8004dbc:	4b22      	ldr	r3, [pc, #136]	@ (8004e48 <_svfiprintf_r+0x1f0>)
 8004dbe:	bb1b      	cbnz	r3, 8004e08 <_svfiprintf_r+0x1b0>
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	3307      	adds	r3, #7
 8004dc4:	f023 0307 	bic.w	r3, r3, #7
 8004dc8:	3308      	adds	r3, #8
 8004dca:	9303      	str	r3, [sp, #12]
 8004dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dce:	4433      	add	r3, r6
 8004dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dd2:	e76a      	b.n	8004caa <_svfiprintf_r+0x52>
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ddc:	e7a8      	b.n	8004d30 <_svfiprintf_r+0xd8>
 8004dde:	2300      	movs	r3, #0
 8004de0:	f04f 0c0a 	mov.w	ip, #10
 8004de4:	4619      	mov	r1, r3
 8004de6:	3401      	adds	r4, #1
 8004de8:	9305      	str	r3, [sp, #20]
 8004dea:	4620      	mov	r0, r4
 8004dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df0:	3a30      	subs	r2, #48	@ 0x30
 8004df2:	2a09      	cmp	r2, #9
 8004df4:	d903      	bls.n	8004dfe <_svfiprintf_r+0x1a6>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0c6      	beq.n	8004d88 <_svfiprintf_r+0x130>
 8004dfa:	9105      	str	r1, [sp, #20]
 8004dfc:	e7c4      	b.n	8004d88 <_svfiprintf_r+0x130>
 8004dfe:	4604      	mov	r4, r0
 8004e00:	2301      	movs	r3, #1
 8004e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e06:	e7f0      	b.n	8004dea <_svfiprintf_r+0x192>
 8004e08:	ab03      	add	r3, sp, #12
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4638      	mov	r0, r7
 8004e10:	4b0e      	ldr	r3, [pc, #56]	@ (8004e4c <_svfiprintf_r+0x1f4>)
 8004e12:	a904      	add	r1, sp, #16
 8004e14:	f3af 8000 	nop.w
 8004e18:	1c42      	adds	r2, r0, #1
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	d1d6      	bne.n	8004dcc <_svfiprintf_r+0x174>
 8004e1e:	89ab      	ldrh	r3, [r5, #12]
 8004e20:	065b      	lsls	r3, r3, #25
 8004e22:	f53f af2d 	bmi.w	8004c80 <_svfiprintf_r+0x28>
 8004e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e28:	e72c      	b.n	8004c84 <_svfiprintf_r+0x2c>
 8004e2a:	ab03      	add	r3, sp, #12
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	462a      	mov	r2, r5
 8004e30:	4638      	mov	r0, r7
 8004e32:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <_svfiprintf_r+0x1f4>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	f000 f9bd 	bl	80051b4 <_printf_i>
 8004e3a:	e7ed      	b.n	8004e18 <_svfiprintf_r+0x1c0>
 8004e3c:	08005f8a 	.word	0x08005f8a
 8004e40:	08005f90 	.word	0x08005f90
 8004e44:	08005f94 	.word	0x08005f94
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	08004ba1 	.word	0x08004ba1

08004e50 <__sfputc_r>:
 8004e50:	6893      	ldr	r3, [r2, #8]
 8004e52:	b410      	push	{r4}
 8004e54:	3b01      	subs	r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	6093      	str	r3, [r2, #8]
 8004e5a:	da07      	bge.n	8004e6c <__sfputc_r+0x1c>
 8004e5c:	6994      	ldr	r4, [r2, #24]
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	db01      	blt.n	8004e66 <__sfputc_r+0x16>
 8004e62:	290a      	cmp	r1, #10
 8004e64:	d102      	bne.n	8004e6c <__sfputc_r+0x1c>
 8004e66:	bc10      	pop	{r4}
 8004e68:	f7ff bc85 	b.w	8004776 <__swbuf_r>
 8004e6c:	6813      	ldr	r3, [r2, #0]
 8004e6e:	1c58      	adds	r0, r3, #1
 8004e70:	6010      	str	r0, [r2, #0]
 8004e72:	7019      	strb	r1, [r3, #0]
 8004e74:	4608      	mov	r0, r1
 8004e76:	bc10      	pop	{r4}
 8004e78:	4770      	bx	lr

08004e7a <__sfputs_r>:
 8004e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460f      	mov	r7, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	18d5      	adds	r5, r2, r3
 8004e84:	42ac      	cmp	r4, r5
 8004e86:	d101      	bne.n	8004e8c <__sfputs_r+0x12>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e007      	b.n	8004e9c <__sfputs_r+0x22>
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e94:	f7ff ffdc 	bl	8004e50 <__sfputc_r>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d1f3      	bne.n	8004e84 <__sfputs_r+0xa>
 8004e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ea0 <_vfiprintf_r>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	4698      	mov	r8, r3
 8004eaa:	4606      	mov	r6, r0
 8004eac:	b09d      	sub	sp, #116	@ 0x74
 8004eae:	b118      	cbz	r0, 8004eb8 <_vfiprintf_r+0x18>
 8004eb0:	6a03      	ldr	r3, [r0, #32]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <_vfiprintf_r+0x18>
 8004eb4:	f7ff fb54 	bl	8004560 <__sinit>
 8004eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eba:	07d9      	lsls	r1, r3, #31
 8004ebc:	d405      	bmi.n	8004eca <_vfiprintf_r+0x2a>
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	059a      	lsls	r2, r3, #22
 8004ec2:	d402      	bmi.n	8004eca <_vfiprintf_r+0x2a>
 8004ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ec6:	f7ff fd64 	bl	8004992 <__retarget_lock_acquire_recursive>
 8004eca:	89ab      	ldrh	r3, [r5, #12]
 8004ecc:	071b      	lsls	r3, r3, #28
 8004ece:	d501      	bpl.n	8004ed4 <_vfiprintf_r+0x34>
 8004ed0:	692b      	ldr	r3, [r5, #16]
 8004ed2:	b99b      	cbnz	r3, 8004efc <_vfiprintf_r+0x5c>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7ff fc8c 	bl	80047f4 <__swsetup_r>
 8004edc:	b170      	cbz	r0, 8004efc <_vfiprintf_r+0x5c>
 8004ede:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ee0:	07dc      	lsls	r4, r3, #31
 8004ee2:	d504      	bpl.n	8004eee <_vfiprintf_r+0x4e>
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	b01d      	add	sp, #116	@ 0x74
 8004eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	0598      	lsls	r0, r3, #22
 8004ef2:	d4f7      	bmi.n	8004ee4 <_vfiprintf_r+0x44>
 8004ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ef6:	f7ff fd4d 	bl	8004994 <__retarget_lock_release_recursive>
 8004efa:	e7f3      	b.n	8004ee4 <_vfiprintf_r+0x44>
 8004efc:	2300      	movs	r3, #0
 8004efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f00:	2320      	movs	r3, #32
 8004f02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f06:	2330      	movs	r3, #48	@ 0x30
 8004f08:	f04f 0901 	mov.w	r9, #1
 8004f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80050bc <_vfiprintf_r+0x21c>
 8004f14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f18:	4623      	mov	r3, r4
 8004f1a:	469a      	mov	sl, r3
 8004f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f20:	b10a      	cbz	r2, 8004f26 <_vfiprintf_r+0x86>
 8004f22:	2a25      	cmp	r2, #37	@ 0x25
 8004f24:	d1f9      	bne.n	8004f1a <_vfiprintf_r+0x7a>
 8004f26:	ebba 0b04 	subs.w	fp, sl, r4
 8004f2a:	d00b      	beq.n	8004f44 <_vfiprintf_r+0xa4>
 8004f2c:	465b      	mov	r3, fp
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffa1 	bl	8004e7a <__sfputs_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f000 80a7 	beq.w	800508c <_vfiprintf_r+0x1ec>
 8004f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f40:	445a      	add	r2, fp
 8004f42:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f44:	f89a 3000 	ldrb.w	r3, [sl]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 809f 	beq.w	800508c <_vfiprintf_r+0x1ec>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f58:	f10a 0a01 	add.w	sl, sl, #1
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	9307      	str	r3, [sp, #28]
 8004f60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f64:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f66:	4654      	mov	r4, sl
 8004f68:	2205      	movs	r2, #5
 8004f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6e:	4853      	ldr	r0, [pc, #332]	@ (80050bc <_vfiprintf_r+0x21c>)
 8004f70:	f000 fb94 	bl	800569c <memchr>
 8004f74:	9a04      	ldr	r2, [sp, #16]
 8004f76:	b9d8      	cbnz	r0, 8004fb0 <_vfiprintf_r+0x110>
 8004f78:	06d1      	lsls	r1, r2, #27
 8004f7a:	bf44      	itt	mi
 8004f7c:	2320      	movmi	r3, #32
 8004f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f82:	0713      	lsls	r3, r2, #28
 8004f84:	bf44      	itt	mi
 8004f86:	232b      	movmi	r3, #43	@ 0x2b
 8004f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f92:	d015      	beq.n	8004fc0 <_vfiprintf_r+0x120>
 8004f94:	4654      	mov	r4, sl
 8004f96:	2000      	movs	r0, #0
 8004f98:	f04f 0c0a 	mov.w	ip, #10
 8004f9c:	9a07      	ldr	r2, [sp, #28]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa4:	3b30      	subs	r3, #48	@ 0x30
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d94b      	bls.n	8005042 <_vfiprintf_r+0x1a2>
 8004faa:	b1b0      	cbz	r0, 8004fda <_vfiprintf_r+0x13a>
 8004fac:	9207      	str	r2, [sp, #28]
 8004fae:	e014      	b.n	8004fda <_vfiprintf_r+0x13a>
 8004fb0:	eba0 0308 	sub.w	r3, r0, r8
 8004fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	46a2      	mov	sl, r4
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	e7d2      	b.n	8004f66 <_vfiprintf_r+0xc6>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	1d19      	adds	r1, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	9103      	str	r1, [sp, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bfbb      	ittet	lt
 8004fcc:	425b      	neglt	r3, r3
 8004fce:	f042 0202 	orrlt.w	r2, r2, #2
 8004fd2:	9307      	strge	r3, [sp, #28]
 8004fd4:	9307      	strlt	r3, [sp, #28]
 8004fd6:	bfb8      	it	lt
 8004fd8:	9204      	strlt	r2, [sp, #16]
 8004fda:	7823      	ldrb	r3, [r4, #0]
 8004fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fde:	d10a      	bne.n	8004ff6 <_vfiprintf_r+0x156>
 8004fe0:	7863      	ldrb	r3, [r4, #1]
 8004fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe4:	d132      	bne.n	800504c <_vfiprintf_r+0x1ac>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	3402      	adds	r4, #2
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	9203      	str	r2, [sp, #12]
 8004ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80050c0 <_vfiprintf_r+0x220>
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	7821      	ldrb	r1, [r4, #0]
 8005000:	f000 fb4c 	bl	800569c <memchr>
 8005004:	b138      	cbz	r0, 8005016 <_vfiprintf_r+0x176>
 8005006:	2240      	movs	r2, #64	@ 0x40
 8005008:	9b04      	ldr	r3, [sp, #16]
 800500a:	eba0 000a 	sub.w	r0, r0, sl
 800500e:	4082      	lsls	r2, r0
 8005010:	4313      	orrs	r3, r2
 8005012:	3401      	adds	r4, #1
 8005014:	9304      	str	r3, [sp, #16]
 8005016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501a:	2206      	movs	r2, #6
 800501c:	4829      	ldr	r0, [pc, #164]	@ (80050c4 <_vfiprintf_r+0x224>)
 800501e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005022:	f000 fb3b 	bl	800569c <memchr>
 8005026:	2800      	cmp	r0, #0
 8005028:	d03f      	beq.n	80050aa <_vfiprintf_r+0x20a>
 800502a:	4b27      	ldr	r3, [pc, #156]	@ (80050c8 <_vfiprintf_r+0x228>)
 800502c:	bb1b      	cbnz	r3, 8005076 <_vfiprintf_r+0x1d6>
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	3307      	adds	r3, #7
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	3308      	adds	r3, #8
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503c:	443b      	add	r3, r7
 800503e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005040:	e76a      	b.n	8004f18 <_vfiprintf_r+0x78>
 8005042:	460c      	mov	r4, r1
 8005044:	2001      	movs	r0, #1
 8005046:	fb0c 3202 	mla	r2, ip, r2, r3
 800504a:	e7a8      	b.n	8004f9e <_vfiprintf_r+0xfe>
 800504c:	2300      	movs	r3, #0
 800504e:	f04f 0c0a 	mov.w	ip, #10
 8005052:	4619      	mov	r1, r3
 8005054:	3401      	adds	r4, #1
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	4620      	mov	r0, r4
 800505a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505e:	3a30      	subs	r2, #48	@ 0x30
 8005060:	2a09      	cmp	r2, #9
 8005062:	d903      	bls.n	800506c <_vfiprintf_r+0x1cc>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0c6      	beq.n	8004ff6 <_vfiprintf_r+0x156>
 8005068:	9105      	str	r1, [sp, #20]
 800506a:	e7c4      	b.n	8004ff6 <_vfiprintf_r+0x156>
 800506c:	4604      	mov	r4, r0
 800506e:	2301      	movs	r3, #1
 8005070:	fb0c 2101 	mla	r1, ip, r1, r2
 8005074:	e7f0      	b.n	8005058 <_vfiprintf_r+0x1b8>
 8005076:	ab03      	add	r3, sp, #12
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	462a      	mov	r2, r5
 800507c:	4630      	mov	r0, r6
 800507e:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <_vfiprintf_r+0x22c>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	f3af 8000 	nop.w
 8005086:	4607      	mov	r7, r0
 8005088:	1c78      	adds	r0, r7, #1
 800508a:	d1d6      	bne.n	800503a <_vfiprintf_r+0x19a>
 800508c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800508e:	07d9      	lsls	r1, r3, #31
 8005090:	d405      	bmi.n	800509e <_vfiprintf_r+0x1fe>
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	059a      	lsls	r2, r3, #22
 8005096:	d402      	bmi.n	800509e <_vfiprintf_r+0x1fe>
 8005098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800509a:	f7ff fc7b 	bl	8004994 <__retarget_lock_release_recursive>
 800509e:	89ab      	ldrh	r3, [r5, #12]
 80050a0:	065b      	lsls	r3, r3, #25
 80050a2:	f53f af1f 	bmi.w	8004ee4 <_vfiprintf_r+0x44>
 80050a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050a8:	e71e      	b.n	8004ee8 <_vfiprintf_r+0x48>
 80050aa:	ab03      	add	r3, sp, #12
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	462a      	mov	r2, r5
 80050b0:	4630      	mov	r0, r6
 80050b2:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <_vfiprintf_r+0x22c>)
 80050b4:	a904      	add	r1, sp, #16
 80050b6:	f000 f87d 	bl	80051b4 <_printf_i>
 80050ba:	e7e4      	b.n	8005086 <_vfiprintf_r+0x1e6>
 80050bc:	08005f8a 	.word	0x08005f8a
 80050c0:	08005f90 	.word	0x08005f90
 80050c4:	08005f94 	.word	0x08005f94
 80050c8:	00000000 	.word	0x00000000
 80050cc:	08004e7b 	.word	0x08004e7b

080050d0 <_printf_common>:
 80050d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d4:	4616      	mov	r6, r2
 80050d6:	4698      	mov	r8, r3
 80050d8:	688a      	ldr	r2, [r1, #8]
 80050da:	690b      	ldr	r3, [r1, #16]
 80050dc:	4607      	mov	r7, r0
 80050de:	4293      	cmp	r3, r2
 80050e0:	bfb8      	it	lt
 80050e2:	4613      	movlt	r3, r2
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050ea:	460c      	mov	r4, r1
 80050ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050f0:	b10a      	cbz	r2, 80050f6 <_printf_common+0x26>
 80050f2:	3301      	adds	r3, #1
 80050f4:	6033      	str	r3, [r6, #0]
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	0699      	lsls	r1, r3, #26
 80050fa:	bf42      	ittt	mi
 80050fc:	6833      	ldrmi	r3, [r6, #0]
 80050fe:	3302      	addmi	r3, #2
 8005100:	6033      	strmi	r3, [r6, #0]
 8005102:	6825      	ldr	r5, [r4, #0]
 8005104:	f015 0506 	ands.w	r5, r5, #6
 8005108:	d106      	bne.n	8005118 <_printf_common+0x48>
 800510a:	f104 0a19 	add.w	sl, r4, #25
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	6832      	ldr	r2, [r6, #0]
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	42ab      	cmp	r3, r5
 8005116:	dc2b      	bgt.n	8005170 <_printf_common+0xa0>
 8005118:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	3b00      	subs	r3, #0
 8005120:	bf18      	it	ne
 8005122:	2301      	movne	r3, #1
 8005124:	0692      	lsls	r2, r2, #26
 8005126:	d430      	bmi.n	800518a <_printf_common+0xba>
 8005128:	4641      	mov	r1, r8
 800512a:	4638      	mov	r0, r7
 800512c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005130:	47c8      	blx	r9
 8005132:	3001      	adds	r0, #1
 8005134:	d023      	beq.n	800517e <_printf_common+0xae>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	6922      	ldr	r2, [r4, #16]
 800513a:	f003 0306 	and.w	r3, r3, #6
 800513e:	2b04      	cmp	r3, #4
 8005140:	bf14      	ite	ne
 8005142:	2500      	movne	r5, #0
 8005144:	6833      	ldreq	r3, [r6, #0]
 8005146:	f04f 0600 	mov.w	r6, #0
 800514a:	bf08      	it	eq
 800514c:	68e5      	ldreq	r5, [r4, #12]
 800514e:	f104 041a 	add.w	r4, r4, #26
 8005152:	bf08      	it	eq
 8005154:	1aed      	subeq	r5, r5, r3
 8005156:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800515a:	bf08      	it	eq
 800515c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005160:	4293      	cmp	r3, r2
 8005162:	bfc4      	itt	gt
 8005164:	1a9b      	subgt	r3, r3, r2
 8005166:	18ed      	addgt	r5, r5, r3
 8005168:	42b5      	cmp	r5, r6
 800516a:	d11a      	bne.n	80051a2 <_printf_common+0xd2>
 800516c:	2000      	movs	r0, #0
 800516e:	e008      	b.n	8005182 <_printf_common+0xb2>
 8005170:	2301      	movs	r3, #1
 8005172:	4652      	mov	r2, sl
 8005174:	4641      	mov	r1, r8
 8005176:	4638      	mov	r0, r7
 8005178:	47c8      	blx	r9
 800517a:	3001      	adds	r0, #1
 800517c:	d103      	bne.n	8005186 <_printf_common+0xb6>
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	3501      	adds	r5, #1
 8005188:	e7c1      	b.n	800510e <_printf_common+0x3e>
 800518a:	2030      	movs	r0, #48	@ 0x30
 800518c:	18e1      	adds	r1, r4, r3
 800518e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005198:	4422      	add	r2, r4
 800519a:	3302      	adds	r3, #2
 800519c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051a0:	e7c2      	b.n	8005128 <_printf_common+0x58>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4622      	mov	r2, r4
 80051a6:	4641      	mov	r1, r8
 80051a8:	4638      	mov	r0, r7
 80051aa:	47c8      	blx	r9
 80051ac:	3001      	adds	r0, #1
 80051ae:	d0e6      	beq.n	800517e <_printf_common+0xae>
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7d9      	b.n	8005168 <_printf_common+0x98>

080051b4 <_printf_i>:
 80051b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	7e0f      	ldrb	r7, [r1, #24]
 80051ba:	4691      	mov	r9, r2
 80051bc:	2f78      	cmp	r7, #120	@ 0x78
 80051be:	4680      	mov	r8, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	469a      	mov	sl, r3
 80051c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ca:	d807      	bhi.n	80051dc <_printf_i+0x28>
 80051cc:	2f62      	cmp	r7, #98	@ 0x62
 80051ce:	d80a      	bhi.n	80051e6 <_printf_i+0x32>
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	f000 80d1 	beq.w	8005378 <_printf_i+0x1c4>
 80051d6:	2f58      	cmp	r7, #88	@ 0x58
 80051d8:	f000 80b8 	beq.w	800534c <_printf_i+0x198>
 80051dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051e4:	e03a      	b.n	800525c <_printf_i+0xa8>
 80051e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051ea:	2b15      	cmp	r3, #21
 80051ec:	d8f6      	bhi.n	80051dc <_printf_i+0x28>
 80051ee:	a101      	add	r1, pc, #4	@ (adr r1, 80051f4 <_printf_i+0x40>)
 80051f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	08005261 	.word	0x08005261
 80051fc:	080051dd 	.word	0x080051dd
 8005200:	080051dd 	.word	0x080051dd
 8005204:	080051dd 	.word	0x080051dd
 8005208:	080051dd 	.word	0x080051dd
 800520c:	08005261 	.word	0x08005261
 8005210:	080051dd 	.word	0x080051dd
 8005214:	080051dd 	.word	0x080051dd
 8005218:	080051dd 	.word	0x080051dd
 800521c:	080051dd 	.word	0x080051dd
 8005220:	0800535f 	.word	0x0800535f
 8005224:	0800528b 	.word	0x0800528b
 8005228:	08005319 	.word	0x08005319
 800522c:	080051dd 	.word	0x080051dd
 8005230:	080051dd 	.word	0x080051dd
 8005234:	08005381 	.word	0x08005381
 8005238:	080051dd 	.word	0x080051dd
 800523c:	0800528b 	.word	0x0800528b
 8005240:	080051dd 	.word	0x080051dd
 8005244:	080051dd 	.word	0x080051dd
 8005248:	08005321 	.word	0x08005321
 800524c:	6833      	ldr	r3, [r6, #0]
 800524e:	1d1a      	adds	r2, r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6032      	str	r2, [r6, #0]
 8005254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800525c:	2301      	movs	r3, #1
 800525e:	e09c      	b.n	800539a <_printf_i+0x1e6>
 8005260:	6833      	ldr	r3, [r6, #0]
 8005262:	6820      	ldr	r0, [r4, #0]
 8005264:	1d19      	adds	r1, r3, #4
 8005266:	6031      	str	r1, [r6, #0]
 8005268:	0606      	lsls	r6, r0, #24
 800526a:	d501      	bpl.n	8005270 <_printf_i+0xbc>
 800526c:	681d      	ldr	r5, [r3, #0]
 800526e:	e003      	b.n	8005278 <_printf_i+0xc4>
 8005270:	0645      	lsls	r5, r0, #25
 8005272:	d5fb      	bpl.n	800526c <_printf_i+0xb8>
 8005274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005278:	2d00      	cmp	r5, #0
 800527a:	da03      	bge.n	8005284 <_printf_i+0xd0>
 800527c:	232d      	movs	r3, #45	@ 0x2d
 800527e:	426d      	negs	r5, r5
 8005280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005284:	230a      	movs	r3, #10
 8005286:	4858      	ldr	r0, [pc, #352]	@ (80053e8 <_printf_i+0x234>)
 8005288:	e011      	b.n	80052ae <_printf_i+0xfa>
 800528a:	6821      	ldr	r1, [r4, #0]
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	0608      	lsls	r0, r1, #24
 8005290:	f853 5b04 	ldr.w	r5, [r3], #4
 8005294:	d402      	bmi.n	800529c <_printf_i+0xe8>
 8005296:	0649      	lsls	r1, r1, #25
 8005298:	bf48      	it	mi
 800529a:	b2ad      	uxthmi	r5, r5
 800529c:	2f6f      	cmp	r7, #111	@ 0x6f
 800529e:	6033      	str	r3, [r6, #0]
 80052a0:	bf14      	ite	ne
 80052a2:	230a      	movne	r3, #10
 80052a4:	2308      	moveq	r3, #8
 80052a6:	4850      	ldr	r0, [pc, #320]	@ (80053e8 <_printf_i+0x234>)
 80052a8:	2100      	movs	r1, #0
 80052aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052ae:	6866      	ldr	r6, [r4, #4]
 80052b0:	2e00      	cmp	r6, #0
 80052b2:	60a6      	str	r6, [r4, #8]
 80052b4:	db05      	blt.n	80052c2 <_printf_i+0x10e>
 80052b6:	6821      	ldr	r1, [r4, #0]
 80052b8:	432e      	orrs	r6, r5
 80052ba:	f021 0104 	bic.w	r1, r1, #4
 80052be:	6021      	str	r1, [r4, #0]
 80052c0:	d04b      	beq.n	800535a <_printf_i+0x1a6>
 80052c2:	4616      	mov	r6, r2
 80052c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80052c8:	fb03 5711 	mls	r7, r3, r1, r5
 80052cc:	5dc7      	ldrb	r7, [r0, r7]
 80052ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052d2:	462f      	mov	r7, r5
 80052d4:	42bb      	cmp	r3, r7
 80052d6:	460d      	mov	r5, r1
 80052d8:	d9f4      	bls.n	80052c4 <_printf_i+0x110>
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d10b      	bne.n	80052f6 <_printf_i+0x142>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	07df      	lsls	r7, r3, #31
 80052e2:	d508      	bpl.n	80052f6 <_printf_i+0x142>
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	6861      	ldr	r1, [r4, #4]
 80052e8:	4299      	cmp	r1, r3
 80052ea:	bfde      	ittt	le
 80052ec:	2330      	movle	r3, #48	@ 0x30
 80052ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052f6:	1b92      	subs	r2, r2, r6
 80052f8:	6122      	str	r2, [r4, #16]
 80052fa:	464b      	mov	r3, r9
 80052fc:	4621      	mov	r1, r4
 80052fe:	4640      	mov	r0, r8
 8005300:	f8cd a000 	str.w	sl, [sp]
 8005304:	aa03      	add	r2, sp, #12
 8005306:	f7ff fee3 	bl	80050d0 <_printf_common>
 800530a:	3001      	adds	r0, #1
 800530c:	d14a      	bne.n	80053a4 <_printf_i+0x1f0>
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
 8005312:	b004      	add	sp, #16
 8005314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f043 0320 	orr.w	r3, r3, #32
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	2778      	movs	r7, #120	@ 0x78
 8005322:	4832      	ldr	r0, [pc, #200]	@ (80053ec <_printf_i+0x238>)
 8005324:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	6831      	ldr	r1, [r6, #0]
 800532c:	061f      	lsls	r7, r3, #24
 800532e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005332:	d402      	bmi.n	800533a <_printf_i+0x186>
 8005334:	065f      	lsls	r7, r3, #25
 8005336:	bf48      	it	mi
 8005338:	b2ad      	uxthmi	r5, r5
 800533a:	6031      	str	r1, [r6, #0]
 800533c:	07d9      	lsls	r1, r3, #31
 800533e:	bf44      	itt	mi
 8005340:	f043 0320 	orrmi.w	r3, r3, #32
 8005344:	6023      	strmi	r3, [r4, #0]
 8005346:	b11d      	cbz	r5, 8005350 <_printf_i+0x19c>
 8005348:	2310      	movs	r3, #16
 800534a:	e7ad      	b.n	80052a8 <_printf_i+0xf4>
 800534c:	4826      	ldr	r0, [pc, #152]	@ (80053e8 <_printf_i+0x234>)
 800534e:	e7e9      	b.n	8005324 <_printf_i+0x170>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	f023 0320 	bic.w	r3, r3, #32
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	e7f6      	b.n	8005348 <_printf_i+0x194>
 800535a:	4616      	mov	r6, r2
 800535c:	e7bd      	b.n	80052da <_printf_i+0x126>
 800535e:	6833      	ldr	r3, [r6, #0]
 8005360:	6825      	ldr	r5, [r4, #0]
 8005362:	1d18      	adds	r0, r3, #4
 8005364:	6961      	ldr	r1, [r4, #20]
 8005366:	6030      	str	r0, [r6, #0]
 8005368:	062e      	lsls	r6, r5, #24
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	d501      	bpl.n	8005372 <_printf_i+0x1be>
 800536e:	6019      	str	r1, [r3, #0]
 8005370:	e002      	b.n	8005378 <_printf_i+0x1c4>
 8005372:	0668      	lsls	r0, r5, #25
 8005374:	d5fb      	bpl.n	800536e <_printf_i+0x1ba>
 8005376:	8019      	strh	r1, [r3, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	4616      	mov	r6, r2
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	e7bc      	b.n	80052fa <_printf_i+0x146>
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	2100      	movs	r1, #0
 8005384:	1d1a      	adds	r2, r3, #4
 8005386:	6032      	str	r2, [r6, #0]
 8005388:	681e      	ldr	r6, [r3, #0]
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	4630      	mov	r0, r6
 800538e:	f000 f985 	bl	800569c <memchr>
 8005392:	b108      	cbz	r0, 8005398 <_printf_i+0x1e4>
 8005394:	1b80      	subs	r0, r0, r6
 8005396:	6060      	str	r0, [r4, #4]
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	2300      	movs	r3, #0
 800539e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053a2:	e7aa      	b.n	80052fa <_printf_i+0x146>
 80053a4:	4632      	mov	r2, r6
 80053a6:	4649      	mov	r1, r9
 80053a8:	4640      	mov	r0, r8
 80053aa:	6923      	ldr	r3, [r4, #16]
 80053ac:	47d0      	blx	sl
 80053ae:	3001      	adds	r0, #1
 80053b0:	d0ad      	beq.n	800530e <_printf_i+0x15a>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	079b      	lsls	r3, r3, #30
 80053b6:	d413      	bmi.n	80053e0 <_printf_i+0x22c>
 80053b8:	68e0      	ldr	r0, [r4, #12]
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	4298      	cmp	r0, r3
 80053be:	bfb8      	it	lt
 80053c0:	4618      	movlt	r0, r3
 80053c2:	e7a6      	b.n	8005312 <_printf_i+0x15e>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4632      	mov	r2, r6
 80053c8:	4649      	mov	r1, r9
 80053ca:	4640      	mov	r0, r8
 80053cc:	47d0      	blx	sl
 80053ce:	3001      	adds	r0, #1
 80053d0:	d09d      	beq.n	800530e <_printf_i+0x15a>
 80053d2:	3501      	adds	r5, #1
 80053d4:	68e3      	ldr	r3, [r4, #12]
 80053d6:	9903      	ldr	r1, [sp, #12]
 80053d8:	1a5b      	subs	r3, r3, r1
 80053da:	42ab      	cmp	r3, r5
 80053dc:	dcf2      	bgt.n	80053c4 <_printf_i+0x210>
 80053de:	e7eb      	b.n	80053b8 <_printf_i+0x204>
 80053e0:	2500      	movs	r5, #0
 80053e2:	f104 0619 	add.w	r6, r4, #25
 80053e6:	e7f5      	b.n	80053d4 <_printf_i+0x220>
 80053e8:	08005f9b 	.word	0x08005f9b
 80053ec:	08005fac 	.word	0x08005fac

080053f0 <__sflush_r>:
 80053f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	0716      	lsls	r6, r2, #28
 80053f8:	4605      	mov	r5, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	d454      	bmi.n	80054a8 <__sflush_r+0xb8>
 80053fe:	684b      	ldr	r3, [r1, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	dc02      	bgt.n	800540a <__sflush_r+0x1a>
 8005404:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd48      	ble.n	800549c <__sflush_r+0xac>
 800540a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800540c:	2e00      	cmp	r6, #0
 800540e:	d045      	beq.n	800549c <__sflush_r+0xac>
 8005410:	2300      	movs	r3, #0
 8005412:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005416:	682f      	ldr	r7, [r5, #0]
 8005418:	6a21      	ldr	r1, [r4, #32]
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	d030      	beq.n	8005480 <__sflush_r+0x90>
 800541e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	0759      	lsls	r1, r3, #29
 8005424:	d505      	bpl.n	8005432 <__sflush_r+0x42>
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	1ad2      	subs	r2, r2, r3
 800542a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800542c:	b10b      	cbz	r3, 8005432 <__sflush_r+0x42>
 800542e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005430:	1ad2      	subs	r2, r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	4628      	mov	r0, r5
 8005436:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005438:	6a21      	ldr	r1, [r4, #32]
 800543a:	47b0      	blx	r6
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	d106      	bne.n	8005450 <__sflush_r+0x60>
 8005442:	6829      	ldr	r1, [r5, #0]
 8005444:	291d      	cmp	r1, #29
 8005446:	d82b      	bhi.n	80054a0 <__sflush_r+0xb0>
 8005448:	4a28      	ldr	r2, [pc, #160]	@ (80054ec <__sflush_r+0xfc>)
 800544a:	40ca      	lsrs	r2, r1
 800544c:	07d6      	lsls	r6, r2, #31
 800544e:	d527      	bpl.n	80054a0 <__sflush_r+0xb0>
 8005450:	2200      	movs	r2, #0
 8005452:	6062      	str	r2, [r4, #4]
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	04d9      	lsls	r1, r3, #19
 8005458:	6022      	str	r2, [r4, #0]
 800545a:	d504      	bpl.n	8005466 <__sflush_r+0x76>
 800545c:	1c42      	adds	r2, r0, #1
 800545e:	d101      	bne.n	8005464 <__sflush_r+0x74>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b903      	cbnz	r3, 8005466 <__sflush_r+0x76>
 8005464:	6560      	str	r0, [r4, #84]	@ 0x54
 8005466:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005468:	602f      	str	r7, [r5, #0]
 800546a:	b1b9      	cbz	r1, 800549c <__sflush_r+0xac>
 800546c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005470:	4299      	cmp	r1, r3
 8005472:	d002      	beq.n	800547a <__sflush_r+0x8a>
 8005474:	4628      	mov	r0, r5
 8005476:	f7ff fa9d 	bl	80049b4 <_free_r>
 800547a:	2300      	movs	r3, #0
 800547c:	6363      	str	r3, [r4, #52]	@ 0x34
 800547e:	e00d      	b.n	800549c <__sflush_r+0xac>
 8005480:	2301      	movs	r3, #1
 8005482:	4628      	mov	r0, r5
 8005484:	47b0      	blx	r6
 8005486:	4602      	mov	r2, r0
 8005488:	1c50      	adds	r0, r2, #1
 800548a:	d1c9      	bne.n	8005420 <__sflush_r+0x30>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0c6      	beq.n	8005420 <__sflush_r+0x30>
 8005492:	2b1d      	cmp	r3, #29
 8005494:	d001      	beq.n	800549a <__sflush_r+0xaa>
 8005496:	2b16      	cmp	r3, #22
 8005498:	d11d      	bne.n	80054d6 <__sflush_r+0xe6>
 800549a:	602f      	str	r7, [r5, #0]
 800549c:	2000      	movs	r0, #0
 800549e:	e021      	b.n	80054e4 <__sflush_r+0xf4>
 80054a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a4:	b21b      	sxth	r3, r3
 80054a6:	e01a      	b.n	80054de <__sflush_r+0xee>
 80054a8:	690f      	ldr	r7, [r1, #16]
 80054aa:	2f00      	cmp	r7, #0
 80054ac:	d0f6      	beq.n	800549c <__sflush_r+0xac>
 80054ae:	0793      	lsls	r3, r2, #30
 80054b0:	bf18      	it	ne
 80054b2:	2300      	movne	r3, #0
 80054b4:	680e      	ldr	r6, [r1, #0]
 80054b6:	bf08      	it	eq
 80054b8:	694b      	ldreq	r3, [r1, #20]
 80054ba:	1bf6      	subs	r6, r6, r7
 80054bc:	600f      	str	r7, [r1, #0]
 80054be:	608b      	str	r3, [r1, #8]
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	ddeb      	ble.n	800549c <__sflush_r+0xac>
 80054c4:	4633      	mov	r3, r6
 80054c6:	463a      	mov	r2, r7
 80054c8:	4628      	mov	r0, r5
 80054ca:	6a21      	ldr	r1, [r4, #32]
 80054cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80054d0:	47e0      	blx	ip
 80054d2:	2800      	cmp	r0, #0
 80054d4:	dc07      	bgt.n	80054e6 <__sflush_r+0xf6>
 80054d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054de:	f04f 30ff 	mov.w	r0, #4294967295
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e6:	4407      	add	r7, r0
 80054e8:	1a36      	subs	r6, r6, r0
 80054ea:	e7e9      	b.n	80054c0 <__sflush_r+0xd0>
 80054ec:	20400001 	.word	0x20400001

080054f0 <_fflush_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	690b      	ldr	r3, [r1, #16]
 80054f4:	4605      	mov	r5, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	b913      	cbnz	r3, 8005500 <_fflush_r+0x10>
 80054fa:	2500      	movs	r5, #0
 80054fc:	4628      	mov	r0, r5
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	b118      	cbz	r0, 800550a <_fflush_r+0x1a>
 8005502:	6a03      	ldr	r3, [r0, #32]
 8005504:	b90b      	cbnz	r3, 800550a <_fflush_r+0x1a>
 8005506:	f7ff f82b 	bl	8004560 <__sinit>
 800550a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f3      	beq.n	80054fa <_fflush_r+0xa>
 8005512:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005514:	07d0      	lsls	r0, r2, #31
 8005516:	d404      	bmi.n	8005522 <_fflush_r+0x32>
 8005518:	0599      	lsls	r1, r3, #22
 800551a:	d402      	bmi.n	8005522 <_fflush_r+0x32>
 800551c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800551e:	f7ff fa38 	bl	8004992 <__retarget_lock_acquire_recursive>
 8005522:	4628      	mov	r0, r5
 8005524:	4621      	mov	r1, r4
 8005526:	f7ff ff63 	bl	80053f0 <__sflush_r>
 800552a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800552c:	4605      	mov	r5, r0
 800552e:	07da      	lsls	r2, r3, #31
 8005530:	d4e4      	bmi.n	80054fc <_fflush_r+0xc>
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	059b      	lsls	r3, r3, #22
 8005536:	d4e1      	bmi.n	80054fc <_fflush_r+0xc>
 8005538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800553a:	f7ff fa2b 	bl	8004994 <__retarget_lock_release_recursive>
 800553e:	e7dd      	b.n	80054fc <_fflush_r+0xc>

08005540 <__swhatbuf_r>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	460c      	mov	r4, r1
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	4615      	mov	r5, r2
 800554a:	2900      	cmp	r1, #0
 800554c:	461e      	mov	r6, r3
 800554e:	b096      	sub	sp, #88	@ 0x58
 8005550:	da0c      	bge.n	800556c <__swhatbuf_r+0x2c>
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	2100      	movs	r1, #0
 8005556:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800555a:	bf14      	ite	ne
 800555c:	2340      	movne	r3, #64	@ 0x40
 800555e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005562:	2000      	movs	r0, #0
 8005564:	6031      	str	r1, [r6, #0]
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	b016      	add	sp, #88	@ 0x58
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	466a      	mov	r2, sp
 800556e:	f000 f863 	bl	8005638 <_fstat_r>
 8005572:	2800      	cmp	r0, #0
 8005574:	dbed      	blt.n	8005552 <__swhatbuf_r+0x12>
 8005576:	9901      	ldr	r1, [sp, #4]
 8005578:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800557c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005580:	4259      	negs	r1, r3
 8005582:	4159      	adcs	r1, r3
 8005584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005588:	e7eb      	b.n	8005562 <__swhatbuf_r+0x22>

0800558a <__smakebuf_r>:
 800558a:	898b      	ldrh	r3, [r1, #12]
 800558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558e:	079d      	lsls	r5, r3, #30
 8005590:	4606      	mov	r6, r0
 8005592:	460c      	mov	r4, r1
 8005594:	d507      	bpl.n	80055a6 <__smakebuf_r+0x1c>
 8005596:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	6123      	str	r3, [r4, #16]
 800559e:	2301      	movs	r3, #1
 80055a0:	6163      	str	r3, [r4, #20]
 80055a2:	b003      	add	sp, #12
 80055a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a6:	466a      	mov	r2, sp
 80055a8:	ab01      	add	r3, sp, #4
 80055aa:	f7ff ffc9 	bl	8005540 <__swhatbuf_r>
 80055ae:	9f00      	ldr	r7, [sp, #0]
 80055b0:	4605      	mov	r5, r0
 80055b2:	4639      	mov	r1, r7
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff fa67 	bl	8004a88 <_malloc_r>
 80055ba:	b948      	cbnz	r0, 80055d0 <__smakebuf_r+0x46>
 80055bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c0:	059a      	lsls	r2, r3, #22
 80055c2:	d4ee      	bmi.n	80055a2 <__smakebuf_r+0x18>
 80055c4:	f023 0303 	bic.w	r3, r3, #3
 80055c8:	f043 0302 	orr.w	r3, r3, #2
 80055cc:	81a3      	strh	r3, [r4, #12]
 80055ce:	e7e2      	b.n	8005596 <__smakebuf_r+0xc>
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	6020      	str	r0, [r4, #0]
 80055e0:	b15b      	cbz	r3, 80055fa <__smakebuf_r+0x70>
 80055e2:	4630      	mov	r0, r6
 80055e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055e8:	f000 f838 	bl	800565c <_isatty_r>
 80055ec:	b128      	cbz	r0, 80055fa <__smakebuf_r+0x70>
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f023 0303 	bic.w	r3, r3, #3
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	431d      	orrs	r5, r3
 80055fe:	81a5      	strh	r5, [r4, #12]
 8005600:	e7cf      	b.n	80055a2 <__smakebuf_r+0x18>

08005602 <memmove>:
 8005602:	4288      	cmp	r0, r1
 8005604:	b510      	push	{r4, lr}
 8005606:	eb01 0402 	add.w	r4, r1, r2
 800560a:	d902      	bls.n	8005612 <memmove+0x10>
 800560c:	4284      	cmp	r4, r0
 800560e:	4623      	mov	r3, r4
 8005610:	d807      	bhi.n	8005622 <memmove+0x20>
 8005612:	1e43      	subs	r3, r0, #1
 8005614:	42a1      	cmp	r1, r4
 8005616:	d008      	beq.n	800562a <memmove+0x28>
 8005618:	f811 2b01 	ldrb.w	r2, [r1], #1
 800561c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005620:	e7f8      	b.n	8005614 <memmove+0x12>
 8005622:	4601      	mov	r1, r0
 8005624:	4402      	add	r2, r0
 8005626:	428a      	cmp	r2, r1
 8005628:	d100      	bne.n	800562c <memmove+0x2a>
 800562a:	bd10      	pop	{r4, pc}
 800562c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005630:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005634:	e7f7      	b.n	8005626 <memmove+0x24>
	...

08005638 <_fstat_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	2300      	movs	r3, #0
 800563c:	4d06      	ldr	r5, [pc, #24]	@ (8005658 <_fstat_r+0x20>)
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	4611      	mov	r1, r2
 8005644:	602b      	str	r3, [r5, #0]
 8005646:	f7fc f9dc 	bl	8001a02 <_fstat>
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	d102      	bne.n	8005654 <_fstat_r+0x1c>
 800564e:	682b      	ldr	r3, [r5, #0]
 8005650:	b103      	cbz	r3, 8005654 <_fstat_r+0x1c>
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	bd38      	pop	{r3, r4, r5, pc}
 8005656:	bf00      	nop
 8005658:	20000988 	.word	0x20000988

0800565c <_isatty_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	2300      	movs	r3, #0
 8005660:	4d05      	ldr	r5, [pc, #20]	@ (8005678 <_isatty_r+0x1c>)
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fc f9da 	bl	8001a20 <_isatty>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_isatty_r+0x1a>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_isatty_r+0x1a>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	20000988 	.word	0x20000988

0800567c <_sbrk_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	2300      	movs	r3, #0
 8005680:	4d05      	ldr	r5, [pc, #20]	@ (8005698 <_sbrk_r+0x1c>)
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fc f9e0 	bl	8001a4c <_sbrk>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_sbrk_r+0x1a>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_sbrk_r+0x1a>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000988 	.word	0x20000988

0800569c <memchr>:
 800569c:	4603      	mov	r3, r0
 800569e:	b510      	push	{r4, lr}
 80056a0:	b2c9      	uxtb	r1, r1
 80056a2:	4402      	add	r2, r0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	d101      	bne.n	80056ae <memchr+0x12>
 80056aa:	2000      	movs	r0, #0
 80056ac:	e003      	b.n	80056b6 <memchr+0x1a>
 80056ae:	7804      	ldrb	r4, [r0, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	428c      	cmp	r4, r1
 80056b4:	d1f6      	bne.n	80056a4 <memchr+0x8>
 80056b6:	bd10      	pop	{r4, pc}

080056b8 <_realloc_r>:
 80056b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	4607      	mov	r7, r0
 80056be:	4614      	mov	r4, r2
 80056c0:	460d      	mov	r5, r1
 80056c2:	b921      	cbnz	r1, 80056ce <_realloc_r+0x16>
 80056c4:	4611      	mov	r1, r2
 80056c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ca:	f7ff b9dd 	b.w	8004a88 <_malloc_r>
 80056ce:	b92a      	cbnz	r2, 80056dc <_realloc_r+0x24>
 80056d0:	f7ff f970 	bl	80049b4 <_free_r>
 80056d4:	4625      	mov	r5, r4
 80056d6:	4628      	mov	r0, r5
 80056d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056dc:	f000 f81a 	bl	8005714 <_malloc_usable_size_r>
 80056e0:	4284      	cmp	r4, r0
 80056e2:	4606      	mov	r6, r0
 80056e4:	d802      	bhi.n	80056ec <_realloc_r+0x34>
 80056e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056ea:	d8f4      	bhi.n	80056d6 <_realloc_r+0x1e>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4638      	mov	r0, r7
 80056f0:	f7ff f9ca 	bl	8004a88 <_malloc_r>
 80056f4:	4680      	mov	r8, r0
 80056f6:	b908      	cbnz	r0, 80056fc <_realloc_r+0x44>
 80056f8:	4645      	mov	r5, r8
 80056fa:	e7ec      	b.n	80056d6 <_realloc_r+0x1e>
 80056fc:	42b4      	cmp	r4, r6
 80056fe:	4622      	mov	r2, r4
 8005700:	4629      	mov	r1, r5
 8005702:	bf28      	it	cs
 8005704:	4632      	movcs	r2, r6
 8005706:	f7ff f946 	bl	8004996 <memcpy>
 800570a:	4629      	mov	r1, r5
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff f951 	bl	80049b4 <_free_r>
 8005712:	e7f1      	b.n	80056f8 <_realloc_r+0x40>

08005714 <_malloc_usable_size_r>:
 8005714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005718:	1f18      	subs	r0, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	bfbc      	itt	lt
 800571e:	580b      	ldrlt	r3, [r1, r0]
 8005720:	18c0      	addlt	r0, r0, r3
 8005722:	4770      	bx	lr

08005724 <_init>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr

08005730 <_fini>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr
