
slavemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  080042ac  080042ac  000052ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004820  08004820  00006090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004820  08004820  00006090  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004820  08004820  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004820  08004820  00005820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08004828  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000090  080048b8  00006090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080048b8  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c25  00000000  00000000  000060b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0a  00000000  00000000  0000ecde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00010be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000687  00000000  00000000  000114a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181f8  00000000  00000000  00011b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b825  00000000  00000000  00029d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085246  00000000  00000000  0003554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a64  00000000  00000000  000ba7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000bd23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004294 	.word	0x08004294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004294 	.word	0x08004294

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <LED_Init>:

// Define LED pin
#define LED_PORT GPIOA
#define LED_PIN GPIO_PIN_1  // LED -> PA1 (output)

void LED_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]

    // Enable GPIOA clock (if not already)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <LED_Init+0x5c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a10      	ldr	r2, [pc, #64]	@ (800079c <LED_Init+0x5c>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <LED_Init+0x5c>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

    // Output for LED, push-pull, initial low (off)
    GPIO_InitStruct.Pin = LED_PIN;
 800076c:	2302      	movs	r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4619      	mov	r1, r3
 8000782:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <LED_Init+0x60>)
 8000784:	f001 fd60 	bl	8002248 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);  // Off
 8000788:	2200      	movs	r2, #0
 800078a:	2102      	movs	r1, #2
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <LED_Init+0x60>)
 800078e:	f001 fedf 	bl	8002550 <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800

080007a4 <LED_On>:

void LED_On(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2102      	movs	r1, #2
 80007ac:	4802      	ldr	r0, [pc, #8]	@ (80007b8 <LED_On+0x14>)
 80007ae:	f001 fecf 	bl	8002550 <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40010800 	.word	0x40010800

080007bc <LED_Off>:

void LED_Off(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2102      	movs	r1, #2
 80007c4:	4802      	ldr	r0, [pc, #8]	@ (80007d0 <LED_Off+0x14>)
 80007c6:	f001 fec3 	bl	8002550 <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40010800 	.word	0x40010800

080007d4 <LED_Toggle>:

void LED_Toggle(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 80007d8:	2102      	movs	r1, #2
 80007da:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <LED_Toggle+0x10>)
 80007dc:	f001 fed0 	bl	8002580 <HAL_GPIO_TogglePin>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40010800 	.word	0x40010800

080007e8 <LED_Flash>:

void LED_Flash(uint8_t times) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < times; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	e012      	b.n	800081e <LED_Flash+0x36>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);  // On
 80007f8:	2201      	movs	r2, #1
 80007fa:	2102      	movs	r1, #2
 80007fc:	480e      	ldr	r0, [pc, #56]	@ (8000838 <LED_Flash+0x50>)
 80007fe:	f001 fea7 	bl	8002550 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000802:	20c8      	movs	r0, #200	@ 0xc8
 8000804:	f001 fc18 	bl	8002038 <HAL_Delay>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);  // Off
 8000808:	2200      	movs	r2, #0
 800080a:	2102      	movs	r1, #2
 800080c:	480a      	ldr	r0, [pc, #40]	@ (8000838 <LED_Flash+0x50>)
 800080e:	f001 fe9f 	bl	8002550 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000812:	20c8      	movs	r0, #200	@ 0xc8
 8000814:	f001 fc10 	bl	8002038 <HAL_Delay>
    for (uint8_t i = 0; i < times; i++) {
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3301      	adds	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	429a      	cmp	r2, r3
 8000824:	d3e8      	bcc.n	80007f8 <LED_Flash+0x10>
    }
    HAL_Delay(500);  // Pause after flashes
 8000826:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082a:	f001 fc05 	bl	8002038 <HAL_Delay>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010800 	.word	0x40010800

0800083c <calculate_checksum>:
#include <stdio.h>   // 用于printf调试

static UART_HandleTypeDef *servo_uart;  // USART句柄

// 函数：计算校验和
static uint8_t calculate_checksum(uint8_t *packet, uint8_t len) {
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 800084c:	2302      	movs	r3, #2
 800084e:	73bb      	strb	r3, [r7, #14]
 8000850:	e009      	b.n	8000866 <calculate_checksum+0x2a>
        sum += packet[i];
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	4413      	add	r3, r2
 800085e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	3301      	adds	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
 8000866:	7bba      	ldrb	r2, [r7, #14]
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	3b01      	subs	r3, #1
 800086c:	429a      	cmp	r2, r3
 800086e:	dbf0      	blt.n	8000852 <calculate_checksum+0x16>
    }
    return ~sum;
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	43db      	mvns	r3, r3
 8000874:	b2db      	uxtb	r3, r3
}
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <send_packet>:

// 函数：发送包
static void send_packet(uint8_t *packet, uint8_t len) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(servo_uart, packet, len, HAL_MAX_DELAY);
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <send_packet+0x28>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	b29a      	uxth	r2, r3
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	f002 faeb 	bl	8002e74 <HAL_UART_Transmit>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000ac 	.word	0x200000ac

080008ac <receive_packet>:

// 函数：接收包（简单阻塞式，假设响应快速；实际可加超时/DMA）
static HAL_StatusTypeDef receive_packet(uint8_t *rx_packet, uint8_t expected_len) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Receive(servo_uart, rx_packet, expected_len, 100);  // 返回状态，超时100ms
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <receive_packet+0x28>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	b29a      	uxth	r2, r3
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f002 fb61 	bl	8002f8a <HAL_UART_Receive>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000ac 	.word	0x200000ac

080008d8 <servo_init>:

// 初始化（默认波特率1M，无需设置寄存器0x06，因为初始值0=1M）
void servo_init(UART_HandleTypeDef *huart) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    servo_uart = huart;
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <servo_init+0x1c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
    // 可在此PING舵机确认连接
    servo_ping(SERVO_DEFAULT_ID);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 f806 	bl	80008f8 <servo_ping>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000ac 	.word	0x200000ac

080008f8 <servo_ping>:

// PING
uint8_t servo_ping(uint8_t id) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
    uint8_t packet[6] = {0xFF, 0xFF, id, 0x02, SERVO_INST_PING, 0x00};
 8000902:	23ff      	movs	r3, #255	@ 0xff
 8000904:	743b      	strb	r3, [r7, #16]
 8000906:	23ff      	movs	r3, #255	@ 0xff
 8000908:	747b      	strb	r3, [r7, #17]
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	74bb      	strb	r3, [r7, #18]
 800090e:	2302      	movs	r3, #2
 8000910:	74fb      	strb	r3, [r7, #19]
 8000912:	2301      	movs	r3, #1
 8000914:	753b      	strb	r3, [r7, #20]
 8000916:	2300      	movs	r3, #0
 8000918:	757b      	strb	r3, [r7, #21]
    packet[5] = calculate_checksum(packet, 6);
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	2106      	movs	r1, #6
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff8b 	bl	800083c <calculate_checksum>
 8000926:	4603      	mov	r3, r0
 8000928:	757b      	strb	r3, [r7, #21]
    send_packet(packet, 6);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	2106      	movs	r1, #6
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ffa5 	bl	8000880 <send_packet>

    uint8_t rx_packet[6];
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2106      	movs	r1, #6
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ffb5 	bl	80008ac <receive_packet>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d111      	bne.n	800096c <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8000948:	7a3b      	ldrb	r3, [r7, #8]
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 800094a:	2bff      	cmp	r3, #255	@ 0xff
 800094c:	d10e      	bne.n	800096c <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 800094e:	7a7b      	ldrb	r3, [r7, #9]
 8000950:	2bff      	cmp	r3, #255	@ 0xff
 8000952:	d10b      	bne.n	800096c <servo_ping+0x74>
 8000954:	7abb      	ldrb	r3, [r7, #10]
 8000956:	79fa      	ldrb	r2, [r7, #7]
 8000958:	429a      	cmp	r2, r3
 800095a:	d107      	bne.n	800096c <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 800095c:	7afb      	ldrb	r3, [r7, #11]
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 800095e:	2b02      	cmp	r3, #2
 8000960:	d104      	bne.n	800096c <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 8000962:	7b3b      	ldrb	r3, [r7, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <servo_ping+0x74>
        return 1;  // 成功
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <servo_ping+0x76>
    }
    return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <servo_write_reg>:

// 写寄存器（低字节在前）
void servo_write_reg(uint8_t id, uint8_t reg_addr, uint8_t *data, uint8_t data_len) {
 8000976:	b590      	push	{r4, r7, lr}
 8000978:	b0c7      	sub	sp, #284	@ 0x11c
 800097a:	af00      	add	r7, sp, #0
 800097c:	4604      	mov	r4, r0
 800097e:	4608      	mov	r0, r1
 8000980:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000984:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8000988:	600a      	str	r2, [r1, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000990:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000994:	4622      	mov	r2, r4
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800099c:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80009a0:	4602      	mov	r2, r0
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009a8:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80009ac:	460a      	mov	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
    uint8_t packet[256];
    uint8_t idx = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx++] = 0xFF;
 80009b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80009c0:	461a      	mov	r2, r3
 80009c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009ca:	21ff      	movs	r1, #255	@ 0xff
 80009cc:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0xFF;
 80009ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80009d8:	461a      	mov	r2, r3
 80009da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009e2:	21ff      	movs	r1, #255	@ 0xff
 80009e4:	5499      	strb	r1, [r3, r2]
    packet[idx++] = id;
 80009e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80009f0:	4619      	mov	r1, r3
 80009f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009fa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80009fe:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	545a      	strb	r2, [r3, r1]
    packet[idx++] = data_len + 3;  // Length = Instr + Addr + Data
 8000a06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8000a10:	461a      	mov	r2, r3
 8000a12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a16:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3303      	adds	r3, #3
 8000a1e:	b2d9      	uxtb	r1, r3
 8000a20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a28:	5499      	strb	r1, [r3, r2]
    packet[idx++] = SERVO_INST_WRITE;
 8000a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8000a34:	461a      	mov	r2, r3
 8000a36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a3e:	2103      	movs	r1, #3
 8000a40:	5499      	strb	r1, [r3, r2]
    packet[idx++] = reg_addr;
 8000a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a56:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000a5a:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 8000a5e:	7812      	ldrb	r2, [r2, #0]
 8000a60:	545a      	strb	r2, [r3, r1]
    memcpy(&packet[idx], data, data_len);
 8000a62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000a66:	f107 0214 	add.w	r2, r7, #20
 8000a6a:	18d0      	adds	r0, r2, r3
 8000a6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a70:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	f002 fee9 	bl	8003856 <memcpy>
    idx += data_len;
 8000a84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a88:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000a8c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx] = calculate_checksum(packet, idx + 1);
 8000a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	f897 4117 	ldrb.w	r4, [r7, #279]	@ 0x117
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fec6 	bl	800083c <calculate_checksum>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000abc:	551a      	strb	r2, [r3, r4]
    send_packet(packet, idx + 1);
 8000abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fed7 	bl	8000880 <send_packet>

    // 忽略响应（若非广播），实际可检查
    if (id != SERVO_BROADCAST_ID) {
 8000ad2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ad6:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ade:	d005      	beq.n	8000aec <servo_write_reg+0x176>
        uint8_t rx_packet[6];
        receive_packet(rx_packet, 6);  // 预期响应Length=2, Error+Checksum
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2106      	movs	r1, #6
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fee0 	bl	80008ac <receive_packet>
    }
}
 8000aec:	bf00      	nop
 8000aee:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd90      	pop	{r4, r7, pc}

08000af6 <servo_read_reg>:

// 读寄存器  
uint8_t servo_read_reg(uint8_t id, uint8_t reg_addr, uint8_t data_len, uint8_t *rx_data) {
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b0c7      	sub	sp, #284	@ 0x11c
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4604      	mov	r4, r0
 8000afe:	4608      	mov	r0, r1
 8000b00:	4611      	mov	r1, r2
 8000b02:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000b06:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b10:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000b14:	4622      	mov	r2, r4
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b1c:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000b20:	4602      	mov	r2, r0
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b28:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
    uint8_t packet[8] = {0xFF, 0xFF, id, 0x04, SERVO_INST_READ, reg_addr, data_len, 0x00};
 8000b30:	23ff      	movs	r3, #255	@ 0xff
 8000b32:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8000b36:	23ff      	movs	r3, #255	@ 0xff
 8000b38:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8000b3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b40:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000b50:	2302      	movs	r3, #2
 8000b52:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
 8000b56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b5a:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
 8000b64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b68:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    packet[7] = calculate_checksum(packet, 8);
 8000b78:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fe5c 	bl	800083c <calculate_checksum>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    send_packet(packet, 8);
 8000b8a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fe75 	bl	8000880 <send_packet>

    uint8_t expected_len = data_len + 6;  // FF FF ID Len Error Params... Checksum
 8000b96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b9a:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3306      	adds	r3, #6
 8000ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t rx_packet[256];
    
    HAL_StatusTypeDef status = receive_packet(rx_packet, expected_len);
 8000ba6:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe7b 	bl	80008ac <receive_packet>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    if (status == HAL_OK) {
 8000bbc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d13f      	bne.n	8000c44 <servo_read_reg+0x14e>
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8000bc4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2bff      	cmp	r3, #255	@ 0xff
 8000bd0:	d138      	bne.n	8000c44 <servo_read_reg+0x14e>
 8000bd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	2bff      	cmp	r3, #255	@ 0xff
 8000bde:	d131      	bne.n	8000c44 <servo_read_reg+0x14e>
 8000be0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000be4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000bee:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d125      	bne.n	8000c44 <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 8000bf8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bfc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c00:	78db      	ldrb	r3, [r3, #3]
 8000c02:	461a      	mov	r2, r3
 8000c04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c08:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3302      	adds	r3, #2
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d117      	bne.n	8000c44 <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 8000c14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d110      	bne.n	8000c44 <servo_read_reg+0x14e>
            memcpy(rx_data, &rx_packet[5], data_len);
 8000c22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c26:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	1d59      	adds	r1, r3, #5
 8000c32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c36:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	f002 fe0b 	bl	8003856 <memcpy>
            return 1;  // 成功
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <servo_read_reg+0x150>
        }
    }
    return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}

08000c50 <servo_set_torque_enable>:

// 扭矩开关
void servo_set_torque_enable(uint8_t id, uint8_t enable) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
    uint8_t data = enable;
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	73fb      	strb	r3, [r7, #15]
    servo_write_reg(id, SERVO_REG_TORQUE_ENABLE, &data, 1);
 8000c64:	f107 020f 	add.w	r2, r7, #15
 8000c68:	79f8      	ldrb	r0, [r7, #7]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2128      	movs	r1, #40	@ 0x28
 8000c6e:	f7ff fe82 	bl	8000976 <servo_write_reg>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <servo_set_speed>:

// 设置速度 (2字节，低在前)
void servo_set_speed(uint8_t id, int16_t speed) {
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	460a      	mov	r2, r1
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	4613      	mov	r3, r2
 8000c88:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = speed & 0xFF;  // 低
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	733b      	strb	r3, [r7, #12]
    data[1] = (speed >> 8) & 0xFF;  // 高
 8000c90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c94:	121b      	asrs	r3, r3, #8
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_SPEED, data, 2);
 8000c9c:	f107 020c 	add.w	r2, r7, #12
 8000ca0:	79f8      	ldrb	r0, [r7, #7]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	212e      	movs	r1, #46	@ 0x2e
 8000ca6:	f7ff fe66 	bl	8000976 <servo_write_reg>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <servo_set_position>:

// 设置位置 (2字节，低在前)
void servo_set_position(uint8_t id, int16_t position) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	460a      	mov	r2, r1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = position & 0xFF;
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	733b      	strb	r3, [r7, #12]
    data[1] = (position >> 8) & 0xFF;
 8000cc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ccc:	121b      	asrs	r3, r3, #8
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_TARGET_POS, data, 2);
 8000cd4:	f107 020c 	add.w	r2, r7, #12
 8000cd8:	79f8      	ldrb	r0, [r7, #7]
 8000cda:	2302      	movs	r3, #2
 8000cdc:	212a      	movs	r1, #42	@ 0x2a
 8000cde:	f7ff fe4a 	bl	8000976 <servo_write_reg>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <servo_get_position>:

// 获取当前位置
uint16_t servo_get_position(uint8_t id) {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data[2];
    if (servo_read_reg(id, SERVO_REG_CURR_POS, 2, rx_data)) {
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	79f8      	ldrb	r0, [r7, #7]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	2138      	movs	r1, #56	@ 0x38
 8000cfe:	f7ff fefa 	bl	8000af6 <servo_read_reg>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d009      	beq.n	8000d1c <servo_get_position+0x32>
        return (rx_data[1] << 8) | rx_data[0];  // 高<<8 | 低
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	7b3b      	ldrb	r3, [r7, #12]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	e000      	b.n	8000d1e <servo_get_position+0x34>
    }
    return 0;  // 错误返回0
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <ServoControl_Init>:
};

/**
 * @brief 初始化舵机控制
 */
void ServoControl_Init(ServoControl_t *ctrl, uint8_t id) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
    ctrl->id = id;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	78fa      	ldrb	r2, [r7, #3]
 8000d38:	701a      	strb	r2, [r3, #0]
    ctrl->target_position = 0;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	805a      	strh	r2, [r3, #2]
    ctrl->current_position = 0;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	809a      	strh	r2, [r3, #4]
    ctrl->position_error = 0;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	80da      	strh	r2, [r3, #6]
    ctrl->last_error = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	811a      	strh	r2, [r3, #8]
    ctrl->error_sum = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	815a      	strh	r2, [r3, #10]
    ctrl->speed = 1000;  // 默认速度
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d5e:	819a      	strh	r2, [r3, #12]
    ctrl->move_start_time = 0;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
    ctrl->is_enabled = 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    
    // 初始化状态机
    ServoFsm_Init(&ctrl->fsm);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3310      	adds	r3, #16
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fad0 	bl	8001318 <ServoFsm_Init>
    
    // 读取当前位置
    ctrl->current_position = servo_get_position(id);
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ffb5 	bl	8000cea <servo_get_position>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	809a      	strh	r2, [r3, #4]
    ctrl->target_position = ctrl->current_position;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	805a      	strh	r2, [r3, #2]
    
    printf("[SERVO_CTRL] Initialized ID=%d, Position=%d\r\n", 
 8000d92:	78f9      	ldrb	r1, [r7, #3]
           id, ctrl->current_position);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    printf("[SERVO_CTRL] Initialized ID=%d, Position=%d\r\n", 
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4803      	ldr	r0, [pc, #12]	@ (8000dac <ServoControl_Init+0x84>)
 8000d9e:	f002 fb97 	bl	80034d0 <iprintf>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	080042ac 	.word	0x080042ac

08000db0 <ServoControl_SetPID>:

/**
 * @brief 设置PID参数
 */
void ServoControl_SetPID(PIDParams_t *pid) {
 8000db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000db4:	b087      	sub	sp, #28
 8000db6:	af04      	add	r7, sp, #16
 8000db8:	6078      	str	r0, [r7, #4]
    pid_params = *pid;
 8000dba:	4a32      	ldr	r2, [pc, #200]	@ (8000e84 <ServoControl_SetPID+0xd4>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4614      	mov	r4, r2
 8000dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("[SERVO_CTRL] PID updated: Kp=%d.%02d, Ki=%d.%02d, Kd=%d.%02d\r\n",
           (int)pid_params.kp, (int)(pid_params.kp * 100) % 100,
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <ServoControl_SetPID+0xd4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
    printf("[SERVO_CTRL] PID updated: Kp=%d.%02d, Ki=%d.%02d, Kd=%d.%02d\r\n",
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fc92 	bl	80006f4 <__aeabi_f2iz>
 8000dd0:	4680      	mov	r8, r0
           (int)pid_params.kp, (int)(pid_params.kp * 100) % 100,
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <ServoControl_SetPID+0xd4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	492c      	ldr	r1, [pc, #176]	@ (8000e88 <ServoControl_SetPID+0xd8>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fac5 	bl	8000368 <__aeabi_fmul>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fc87 	bl	80006f4 <__aeabi_f2iz>
 8000de6:	4603      	mov	r3, r0
    printf("[SERVO_CTRL] PID updated: Kp=%d.%02d, Ki=%d.%02d, Kd=%d.%02d\r\n",
 8000de8:	4a28      	ldr	r2, [pc, #160]	@ (8000e8c <ServoControl_SetPID+0xdc>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1151      	asrs	r1, r2, #5
 8000df0:	17da      	asrs	r2, r3, #31
 8000df2:	1a8d      	subs	r5, r1, r2
 8000df4:	2264      	movs	r2, #100	@ 0x64
 8000df6:	fb05 f202 	mul.w	r2, r5, r2
 8000dfa:	1a9d      	subs	r5, r3, r2
           (int)pid_params.ki, (int)(pid_params.ki * 100) % 100,
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <ServoControl_SetPID+0xd4>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
    printf("[SERVO_CTRL] PID updated: Kp=%d.%02d, Ki=%d.%02d, Kd=%d.%02d\r\n",
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fc77 	bl	80006f4 <__aeabi_f2iz>
 8000e06:	4681      	mov	r9, r0
           (int)pid_params.ki, (int)(pid_params.ki * 100) % 100,
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <ServoControl_SetPID+0xd4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	491e      	ldr	r1, [pc, #120]	@ (8000e88 <ServoControl_SetPID+0xd8>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff faaa 	bl	8000368 <__aeabi_fmul>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc6c 	bl	80006f4 <__aeabi_f2iz>
 8000e1c:	4603      	mov	r3, r0
    printf("[SERVO_CTRL] PID updated: Kp=%d.%02d, Ki=%d.%02d, Kd=%d.%02d\r\n",
 8000e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <ServoControl_SetPID+0xdc>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	1151      	asrs	r1, r2, #5
 8000e26:	17da      	asrs	r2, r3, #31
 8000e28:	1a8c      	subs	r4, r1, r2
 8000e2a:	2264      	movs	r2, #100	@ 0x64
 8000e2c:	fb04 f202 	mul.w	r2, r4, r2
 8000e30:	1a9c      	subs	r4, r3, r2
           (int)pid_params.kd, (int)(pid_params.kd * 100) % 100);
 8000e32:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <ServoControl_SetPID+0xd4>)
 8000e34:	689b      	ldr	r3, [r3, #8]
    printf("[SERVO_CTRL] PID updated: Kp=%d.%02d, Ki=%d.%02d, Kd=%d.%02d\r\n",
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fc5c 	bl	80006f4 <__aeabi_f2iz>
 8000e3c:	4606      	mov	r6, r0
           (int)pid_params.kd, (int)(pid_params.kd * 100) % 100);
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <ServoControl_SetPID+0xd4>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	4911      	ldr	r1, [pc, #68]	@ (8000e88 <ServoControl_SetPID+0xd8>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fa8f 	bl	8000368 <__aeabi_fmul>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc51 	bl	80006f4 <__aeabi_f2iz>
 8000e52:	4602      	mov	r2, r0
    printf("[SERVO_CTRL] PID updated: Kp=%d.%02d, Ki=%d.%02d, Kd=%d.%02d\r\n",
 8000e54:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <ServoControl_SetPID+0xdc>)
 8000e56:	fb83 1302 	smull	r1, r3, r3, r2
 8000e5a:	1159      	asrs	r1, r3, #5
 8000e5c:	17d3      	asrs	r3, r2, #31
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	2164      	movs	r1, #100	@ 0x64
 8000e62:	fb01 f303 	mul.w	r3, r1, r3
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	9601      	str	r6, [sp, #4]
 8000e6c:	9400      	str	r4, [sp, #0]
 8000e6e:	464b      	mov	r3, r9
 8000e70:	462a      	mov	r2, r5
 8000e72:	4641      	mov	r1, r8
 8000e74:	4806      	ldr	r0, [pc, #24]	@ (8000e90 <ServoControl_SetPID+0xe0>)
 8000e76:	f002 fb2b 	bl	80034d0 <iprintf>
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	42c80000 	.word	0x42c80000
 8000e8c:	51eb851f 	.word	0x51eb851f
 8000e90:	080042dc 	.word	0x080042dc

08000e94 <ServoControl_Enable>:

/**
 * @brief 使能舵机控制
 */
void ServoControl_Enable(ServoControl_t *ctrl) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    servo_set_torque_enable(ctrl->id, 1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fed4 	bl	8000c50 <servo_set_torque_enable>
    ctrl->is_enabled = 1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    ctrl->error_sum = 0;  // 清除积分
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	815a      	strh	r2, [r3, #10]
    printf("[SERVO_CTRL] Enabled ID=%d\r\n", ctrl->id);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <ServoControl_Enable+0x38>)
 8000ebe:	f002 fb07 	bl	80034d0 <iprintf>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	0800431c 	.word	0x0800431c

08000ed0 <ServoControl_SetTargetPosition>:
}

/**
 * @brief 设置目标位置
 */
void ServoControl_SetTargetPosition(ServoControl_t *ctrl, int16_t position) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	817b      	strh	r3, [r7, #10]
    ctrl->target_position = position;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	897a      	ldrh	r2, [r7, #10]
 8000ee0:	805a      	strh	r2, [r3, #2]
    ctrl->move_start_time = HAL_GetTick();
 8000ee2:	f001 f89f 	bl	8002024 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
    ctrl->error_sum = 0;  // 清除积分
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	815a      	strh	r2, [r3, #10]
    
    // 触发状态机开始移动事件
    ServoFsm_ProcessEvent(&ctrl->fsm, SERVO_EVENT_START_MOVE);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f103 0110 	add.w	r1, r3, #16
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2201      	movs	r2, #1
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fa93 	bl	8001428 <ServoFsm_ProcessEvent>
    
    printf("[SERVO_CTRL] Target set: %d (current: %d)\r\n", 
 8000f02:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
           position, ctrl->current_position);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    printf("[SERVO_CTRL] Target set: %d (current: %d)\r\n", 
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <ServoControl_SetTargetPosition+0x4c>)
 8000f10:	f002 fade 	bl	80034d0 <iprintf>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800435c 	.word	0x0800435c

08000f20 <calculate_pid_output>:
}

/**
 * @brief PID控制计算
 */
static int16_t calculate_pid_output(ServoControl_t *ctrl) {
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    // 计算误差
    ctrl->position_error = ctrl->target_position - ctrl->current_position;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	80da      	strh	r2, [r3, #6]
    
    // P项
    float p_term = pid_params.kp * ctrl->position_error;
 8000f42:	4b60      	ldr	r3, [pc, #384]	@ (80010c4 <calculate_pid_output+0x1a4>)
 8000f44:	681c      	ldr	r4, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f9b7 	bl	80002c0 <__aeabi_i2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4619      	mov	r1, r3
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff fa06 	bl	8000368 <__aeabi_fmul>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	613b      	str	r3, [r7, #16]
    
    // I项（积分饱和限制）
    ctrl->error_sum += ctrl->position_error;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	815a      	strh	r2, [r3, #10]
    if (ctrl->error_sum > 1000) ctrl->error_sum = 1000;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f84:	dd03      	ble.n	8000f8e <calculate_pid_output+0x6e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8c:	815a      	strh	r2, [r3, #10]
    if (ctrl->error_sum < -1000) ctrl->error_sum = -1000;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f94:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000f98:	da03      	bge.n	8000fa2 <calculate_pid_output+0x82>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f64f 4218 	movw	r2, #64536	@ 0xfc18
 8000fa0:	815a      	strh	r2, [r3, #10]
    float i_term = pid_params.ki * ctrl->error_sum;
 8000fa2:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <calculate_pid_output+0x1a4>)
 8000fa4:	685c      	ldr	r4, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f987 	bl	80002c0 <__aeabi_i2f>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff f9d6 	bl	8000368 <__aeabi_fmul>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60fb      	str	r3, [r7, #12]
    
    // D项
    float d_term = pid_params.kd * (ctrl->position_error - ctrl->last_error);
 8000fc0:	4b40      	ldr	r3, [pc, #256]	@ (80010c4 <calculate_pid_output+0x1a4>)
 8000fc2:	689c      	ldr	r4, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f973 	bl	80002c0 <__aeabi_i2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f7ff f9c2 	bl	8000368 <__aeabi_fmul>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60bb      	str	r3, [r7, #8]
    
    // 总输出
    float output = p_term + i_term + d_term;
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	6938      	ldr	r0, [r7, #16]
 8000fec:	f7ff f8b4 	bl	8000158 <__addsf3>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68b8      	ldr	r0, [r7, #8]
 8000ff6:	f7ff f8af 	bl	8000158 <__addsf3>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	617b      	str	r3, [r7, #20]
    
    // 输出限幅
    if (output > pid_params.max_output) output = pid_params.max_output;
 8000ffe:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <calculate_pid_output+0x1a4>)
 8001000:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f95b 	bl	80002c0 <__aeabi_i2f>
 800100a:	4603      	mov	r3, r0
 800100c:	4619      	mov	r1, r3
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff fb66 	bl	80006e0 <__aeabi_fcmpgt>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <calculate_pid_output+0x10a>
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <calculate_pid_output+0x1a4>)
 800101c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f94d 	bl	80002c0 <__aeabi_i2f>
 8001026:	4603      	mov	r3, r0
 8001028:	617b      	str	r3, [r7, #20]
    if (output < -pid_params.max_output) output = -pid_params.max_output;
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <calculate_pid_output+0x1a4>)
 800102c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001030:	425b      	negs	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f944 	bl	80002c0 <__aeabi_i2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4619      	mov	r1, r3
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	f7ff fb31 	bl	80006a4 <__aeabi_fcmplt>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <calculate_pid_output+0x13a>
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <calculate_pid_output+0x1a4>)
 800104a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800104e:	425b      	negs	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f935 	bl	80002c0 <__aeabi_i2f>
 8001056:	4603      	mov	r3, r0
 8001058:	617b      	str	r3, [r7, #20]
    
    // 死区处理
    if (abs((int)output) < pid_params.min_output && ctrl->position_error != 0) {
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff fb4a 	bl	80006f4 <__aeabi_f2iz>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfb8      	it	lt
 8001066:	425b      	neglt	r3, r3
 8001068:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <calculate_pid_output+0x1a4>)
 800106a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800106e:	4293      	cmp	r3, r2
 8001070:	da1a      	bge.n	80010a8 <calculate_pid_output+0x188>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d015      	beq.n	80010a8 <calculate_pid_output+0x188>
        output = (ctrl->position_error > 0) ? pid_params.min_output : -pid_params.min_output;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001082:	2b00      	cmp	r3, #0
 8001084:	dd07      	ble.n	8001096 <calculate_pid_output+0x176>
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <calculate_pid_output+0x1a4>)
 8001088:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f917 	bl	80002c0 <__aeabi_i2f>
 8001092:	4603      	mov	r3, r0
 8001094:	e007      	b.n	80010a6 <calculate_pid_output+0x186>
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <calculate_pid_output+0x1a4>)
 8001098:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800109c:	425b      	negs	r3, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f90e 	bl	80002c0 <__aeabi_i2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	617b      	str	r3, [r7, #20]
    }
    
    ctrl->last_error = ctrl->position_error;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	811a      	strh	r2, [r3, #8]
    
    return (int16_t)output;
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff fb1e 	bl	80006f4 <__aeabi_f2iz>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b21b      	sxth	r3, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	20000000 	.word	0x20000000

080010c8 <ServoControl_Update>:

/**
 * @brief 更新控制循环
 */
void ServoControl_Update(ServoControl_t *ctrl) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    if (!ctrl->is_enabled) return;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8093 	beq.w	8001202 <ServoControl_Update+0x13a>
    
    uint32_t current_time = HAL_GetTick();
 80010dc:	f000 ffa2 	bl	8002024 <HAL_GetTick>
 80010e0:	6178      	str	r0, [r7, #20]
    
    // 读取当前位置
    ctrl->current_position = servo_get_position(ctrl->id);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fdff 	bl	8000cea <servo_get_position>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	809a      	strh	r2, [r3, #4]
    
    // 计算误差
    ctrl->position_error = ctrl->target_position - ctrl->current_position;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001102:	b29b      	uxth	r3, r3
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	80da      	strh	r2, [r3, #6]
    
    // 更新状态机时间
    ServoFsm_Update(&ctrl->fsm, current_time);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3310      	adds	r3, #16
 8001112:	6979      	ldr	r1, [r7, #20]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fab7 	bl	8001688 <ServoFsm_Update>
    
    // 检查条件并生成事件
    ServoFsmEvent_t event = ServoFsm_CheckConditions(&ctrl->fsm, ctrl->position_error, current_time);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f103 0010 	add.w	r0, r3, #16
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4619      	mov	r1, r3
 800112a:	f000 fa5d 	bl	80015e8 <ServoFsm_CheckConditions>
 800112e:	4603      	mov	r3, r0
 8001130:	74fb      	strb	r3, [r7, #19]
    
    // 处理事件
    if (event != SERVO_EVENT_NONE) {
 8001132:	7cfb      	ldrb	r3, [r7, #19]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d010      	beq.n	800115a <ServoControl_Update+0x92>
        ServoFsmTransition_t transition = ServoFsm_ProcessEvent(&ctrl->fsm, event);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f103 0110 	add.w	r1, r3, #16
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	7cfa      	ldrb	r2, [r7, #19]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f96f 	bl	8001428 <ServoFsm_ProcessEvent>
        if (transition.state_changed) {
 800114a:	7a3b      	ldrb	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <ServoControl_Update+0x92>
            printf("[SERVO_CTRL] %s\r\n", transition.transition_reason);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4619      	mov	r1, r3
 8001154:	482f      	ldr	r0, [pc, #188]	@ (8001214 <ServoControl_Update+0x14c>)
 8001156:	f002 f9bb 	bl	80034d0 <iprintf>
        }
    }
    
    // 根据状态执行动作
    switch (ctrl->fsm.current_state) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7c1b      	ldrb	r3, [r3, #16]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d854      	bhi.n	800120c <ServoControl_Update+0x144>
 8001162:	a201      	add	r2, pc, #4	@ (adr r2, 8001168 <ServoControl_Update+0xa0>)
 8001164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001168:	0800120d 	.word	0x0800120d
 800116c:	0800117d 	.word	0x0800117d
 8001170:	0800120d 	.word	0x0800120d
 8001174:	080011d3 	.word	0x080011d3
 8001178:	080011fb 	.word	0x080011fb
            // 空闲状态
            break;
            
        case SERVO_FSM_MOVING:
            // PID控制
            if (abs(ctrl->position_error) > ctrl->fsm.position_tolerance) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001182:	2b00      	cmp	r3, #0
 8001184:	bfb8      	it	lt
 8001186:	425b      	neglt	r3, r3
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	8bdb      	ldrh	r3, [r3, #30]
 800118e:	429a      	cmp	r2, r3
 8001190:	d939      	bls.n	8001206 <ServoControl_Update+0x13e>
                int16_t speed = calculate_pid_output(ctrl);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fec4 	bl	8000f20 <calculate_pid_output>
 8001198:	4603      	mov	r3, r0
 800119a:	823b      	strh	r3, [r7, #16]
                if (speed != 0) {
 800119c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d030      	beq.n	8001206 <ServoControl_Update+0x13e>
                    servo_set_speed(ctrl->id, abs(speed));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bfb8      	it	lt
 80011b0:	425b      	neglt	r3, r3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	4610      	mov	r0, r2
 80011ba:	f7ff fd5e 	bl	8000c7a <servo_set_speed>
                    servo_set_position(ctrl->id, ctrl->target_position);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f7ff fd71 	bl	8000cb2 <servo_set_position>
                }
            }
            break;
 80011d0:	e019      	b.n	8001206 <ServoControl_Update+0x13e>
            // 稳定阶段，保持位置
            break;
            
        case SERVO_FSM_REACHED:
            // 已到达，监控位置
            if (ctrl->fsm.state_enter_time == current_time) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d116      	bne.n	800120a <ServoControl_Update+0x142>
                printf("[SERVO_CTRL] Position reached: %d (target: %d, error: %d)\r\n",
                       ctrl->current_position, ctrl->target_position, ctrl->position_error);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                printf("[SERVO_CTRL] Position reached: %d (target: %d, error: %d)\r\n",
 80011e2:	4619      	mov	r1, r3
                       ctrl->current_position, ctrl->target_position, ctrl->position_error);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                printf("[SERVO_CTRL] Position reached: %d (target: %d, error: %d)\r\n",
 80011ea:	461a      	mov	r2, r3
                       ctrl->current_position, ctrl->target_position, ctrl->position_error);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
                printf("[SERVO_CTRL] Position reached: %d (target: %d, error: %d)\r\n",
 80011f2:	4809      	ldr	r0, [pc, #36]	@ (8001218 <ServoControl_Update+0x150>)
 80011f4:	f002 f96c 	bl	80034d0 <iprintf>
            }
            break;
 80011f8:	e007      	b.n	800120a <ServoControl_Update+0x142>
            
        case SERVO_FSM_ERROR:
            // 错误状态
            ServoControl_EmergencyStop(ctrl);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f81e 	bl	800123c <ServoControl_EmergencyStop>
            break;
 8001200:	e004      	b.n	800120c <ServoControl_Update+0x144>
    if (!ctrl->is_enabled) return;
 8001202:	bf00      	nop
 8001204:	e002      	b.n	800120c <ServoControl_Update+0x144>
            break;
 8001206:	bf00      	nop
 8001208:	e000      	b.n	800120c <ServoControl_Update+0x144>
            break;
 800120a:	bf00      	nop
    }
}
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	08004388 	.word	0x08004388
 8001218:	0800439c 	.word	0x0800439c

0800121c <ServoControl_IsAtTarget>:

/**
 * @brief 检查是否到达目标
 */
uint8_t ServoControl_IsAtTarget(ServoControl_t *ctrl) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    return ServoFsm_IsInState(&ctrl->fsm, SERVO_FSM_REACHED);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3310      	adds	r3, #16
 8001228:	2103      	movs	r1, #3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fa3c 	bl	80016a8 <ServoFsm_IsInState>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <ServoControl_EmergencyStop>:
}

/**
 * @brief 紧急停止
 */
void ServoControl_EmergencyStop(ServoControl_t *ctrl) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    // 停在当前位置
    ctrl->target_position = ctrl->current_position;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	805a      	strh	r2, [r3, #2]
    servo_set_position(ctrl->id, ctrl->current_position);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff fd29 	bl	8000cb2 <servo_set_position>
    ServoFsm_Reset(&ctrl->fsm);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3310      	adds	r3, #16
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f87d 	bl	8001364 <ServoFsm_Reset>
    ctrl->error_sum = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	815a      	strh	r2, [r3, #10]
    printf("[SERVO_CTRL] Emergency stop at position %d\r\n", ctrl->current_position);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001276:	4619      	mov	r1, r3
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <ServoControl_EmergencyStop+0x4c>)
 800127a:	f002 f929 	bl	80034d0 <iprintf>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	080043d8 	.word	0x080043d8

0800128c <ServoControl_MoveRelative>:

/**
 * @brief 相对移动
 */
void ServoControl_MoveRelative(ServoControl_t *ctrl, int16_t steps) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
    int16_t new_target = ctrl->current_position + steps;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4413      	add	r3, r2
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	81fb      	strh	r3, [r7, #14]
    ServoControl_SetTargetPosition(ctrl, new_target);
 80012a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe0e 	bl	8000ed0 <ServoControl_SetTargetPosition>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <ServoControl_RotateContinuous>:
}

/**
 * @brief 连续旋转指定角度
 */
void ServoControl_RotateContinuous(ServoControl_t *ctrl, float degrees) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    int16_t steps = (int16_t)(degrees * 4096.0f / 360.0f);
 80012c6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff f84c 	bl	8000368 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	490a      	ldr	r1, [pc, #40]	@ (80012fc <ServoControl_RotateContinuous+0x40>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f8fb 	bl	80004d0 <__aeabi_fdiv>
 80012da:	4603      	mov	r3, r0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fa09 	bl	80006f4 <__aeabi_f2iz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	81fb      	strh	r3, [r7, #14]
    ServoControl_MoveRelative(ctrl, steps);
 80012e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ea:	4619      	mov	r1, r3
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffcd 	bl	800128c <ServoControl_MoveRelative>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	43b40000 	.word	0x43b40000

08001300 <ServoControl_Home>:

/**
 * @brief 回零
 */
void ServoControl_Home(ServoControl_t *ctrl) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    ServoControl_SetTargetPosition(ctrl, 0);
 8001308:	2100      	movs	r1, #0
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fde0 	bl	8000ed0 <ServoControl_SetTargetPosition>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <ServoFsm_Init>:
#define DEFAULT_MAX_RETRIES         3      // 默认最大重试3次

/**
 * @brief 初始化状态机
 */
void ServoFsm_Init(ServoFsm_t* fsm) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    fsm->current_state = SERVO_FSM_IDLE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
    fsm->previous_state = SERVO_FSM_IDLE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	705a      	strb	r2, [r3, #1]
    fsm->state_enter_time = 0;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    fsm->state_duration = 0;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    fsm->retry_count = 0;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	731a      	strb	r2, [r3, #12]
    fsm->max_retries = DEFAULT_MAX_RETRIES;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	735a      	strb	r2, [r3, #13]
    
    // 默认参数
    fsm->position_tolerance = DEFAULT_POSITION_TOLERANCE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2205      	movs	r2, #5
 8001348:	81da      	strh	r2, [r3, #14]
    fsm->settle_time_ms = DEFAULT_SETTLE_TIME_MS;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001350:	611a      	str	r2, [r3, #16]
    fsm->timeout_ms = DEFAULT_TIMEOUT_MS;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001358:	615a      	str	r2, [r3, #20]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <ServoFsm_Reset>:

/**
 * @brief 重置状态机
 */
void ServoFsm_Reset(ServoFsm_t* fsm) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    fsm->current_state = SERVO_FSM_IDLE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
    fsm->previous_state = SERVO_FSM_IDLE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	705a      	strb	r2, [r3, #1]
    fsm->state_enter_time = HAL_GetTick();
 8001378:	f000 fe54 	bl	8002024 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	605a      	str	r2, [r3, #4]
    fsm->state_duration = 0;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
    fsm->retry_count = 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	731a      	strb	r2, [r3, #12]
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <ServoFsm_GetStateName>:

/**
 * @brief 获取状态名称
 */
const char* ServoFsm_GetStateName(ServoFsmState_t state) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
        "SETTLING",
        "REACHED",
        "ERROR"
    };
    
    if (state < sizeof(state_names)/sizeof(state_names[0])) {
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d804      	bhi.n	80013b2 <ServoFsm_GetStateName+0x1a>
        return state_names[state];
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <ServoFsm_GetStateName+0x28>)
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	e000      	b.n	80013b4 <ServoFsm_GetStateName+0x1c>
    }
    return "UNKNOWN";
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <ServoFsm_GetStateName+0x2c>)
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000010 	.word	0x20000010
 80013c4:	08004458 	.word	0x08004458

080013c8 <change_state>:
}

/**
 * @brief 状态转换
 */
static void change_state(ServoFsm_t* fsm, ServoFsmState_t new_state, uint32_t current_time) {
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	460b      	mov	r3, r1
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	72fb      	strb	r3, [r7, #11]
    if (fsm->current_state != new_state) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	7afa      	ldrb	r2, [r7, #11]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d01d      	beq.n	800141c <change_state+0x54>
        fsm->previous_state = fsm->current_state;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	705a      	strb	r2, [r3, #1]
        fsm->current_state = new_state;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	7afa      	ldrb	r2, [r7, #11]
 80013ec:	701a      	strb	r2, [r3, #0]
        fsm->state_enter_time = current_time;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]
        fsm->state_duration = 0;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
        
        printf("[FSM] State: %s -> %s\r\n", 
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffca 	bl	8001398 <ServoFsm_GetStateName>
 8001404:	4604      	mov	r4, r0
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ffc4 	bl	8001398 <ServoFsm_GetStateName>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	4621      	mov	r1, r4
 8001416:	4803      	ldr	r0, [pc, #12]	@ (8001424 <change_state+0x5c>)
 8001418:	f002 f85a 	bl	80034d0 <iprintf>
               ServoFsm_GetStateName(fsm->previous_state),
               ServoFsm_GetStateName(fsm->current_state));
    }
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bd90      	pop	{r4, r7, pc}
 8001424:	08004460 	.word	0x08004460

08001428 <ServoFsm_ProcessEvent>:

/**
 * @brief 处理事件
 */
ServoFsmTransition_t ServoFsm_ProcessEvent(ServoFsm_t* fsm, ServoFsmEvent_t event) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	71fb      	strb	r3, [r7, #7]
    ServoFsmTransition_t result = {0};
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
    ServoFsmState_t old_state = fsm->current_state;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	77fb      	strb	r3, [r7, #31]
    uint32_t current_time = HAL_GetTick();
 8001446:	f000 fded 	bl	8002024 <HAL_GetTick>
 800144a:	61b8      	str	r0, [r7, #24]
    
    switch (fsm->current_state) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b04      	cmp	r3, #4
 8001452:	f200 809d 	bhi.w	8001590 <ServoFsm_ProcessEvent+0x168>
 8001456:	a201      	add	r2, pc, #4	@ (adr r2, 800145c <ServoFsm_ProcessEvent+0x34>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	08001471 	.word	0x08001471
 8001460:	0800148f 	.word	0x0800148f
 8001464:	080014d1 	.word	0x080014d1
 8001468:	08001531 	.word	0x08001531
 800146c:	08001563 	.word	0x08001563
        case SERVO_FSM_IDLE:
            if (event == SERVO_EVENT_START_MOVE) {
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b01      	cmp	r3, #1
 8001474:	f040 8083 	bne.w	800157e <ServoFsm_ProcessEvent+0x156>
                change_state(fsm, SERVO_FSM_MOVING, current_time);
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	2101      	movs	r1, #1
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f7ff ffa3 	bl	80013c8 <change_state>
                fsm->retry_count = 0;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2200      	movs	r2, #0
 8001486:	731a      	strb	r2, [r3, #12]
                result.transition_reason = "Start movement";
 8001488:	4b4d      	ldr	r3, [pc, #308]	@ (80015c0 <ServoFsm_ProcessEvent+0x198>)
 800148a:	617b      	str	r3, [r7, #20]
            }
            break;
 800148c:	e077      	b.n	800157e <ServoFsm_ProcessEvent+0x156>
            
        case SERVO_FSM_MOVING:
            if (event == SERVO_EVENT_NEAR_TARGET) {
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d107      	bne.n	80014a4 <ServoFsm_ProcessEvent+0x7c>
                change_state(fsm, SERVO_FSM_SETTLING, current_time);
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	2102      	movs	r1, #2
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f7ff ff95 	bl	80013c8 <change_state>
                result.transition_reason = "Near target, settling";
 800149e:	4b49      	ldr	r3, [pc, #292]	@ (80015c4 <ServoFsm_ProcessEvent+0x19c>)
 80014a0:	617b      	str	r3, [r7, #20]
            } else if (event == SERVO_EVENT_AT_TARGET) {
                // 直接到达（误差很小）
                change_state(fsm, SERVO_FSM_SETTLING, current_time);
                result.transition_reason = "At target";
            }
            break;
 80014a2:	e06e      	b.n	8001582 <ServoFsm_ProcessEvent+0x15a>
            } else if (event == SERVO_EVENT_TIMEOUT) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d107      	bne.n	80014ba <ServoFsm_ProcessEvent+0x92>
                change_state(fsm, SERVO_FSM_ERROR, current_time);
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	2104      	movs	r1, #4
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f7ff ff8a 	bl	80013c8 <change_state>
                result.transition_reason = "Movement timeout";
 80014b4:	4b44      	ldr	r3, [pc, #272]	@ (80015c8 <ServoFsm_ProcessEvent+0x1a0>)
 80014b6:	617b      	str	r3, [r7, #20]
            break;
 80014b8:	e063      	b.n	8001582 <ServoFsm_ProcessEvent+0x15a>
            } else if (event == SERVO_EVENT_AT_TARGET) {
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d160      	bne.n	8001582 <ServoFsm_ProcessEvent+0x15a>
                change_state(fsm, SERVO_FSM_SETTLING, current_time);
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	2102      	movs	r1, #2
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f7ff ff7f 	bl	80013c8 <change_state>
                result.transition_reason = "At target";
 80014ca:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <ServoFsm_ProcessEvent+0x1a4>)
 80014cc:	617b      	str	r3, [r7, #20]
            break;
 80014ce:	e058      	b.n	8001582 <ServoFsm_ProcessEvent+0x15a>
            
        case SERVO_FSM_SETTLING:
            if (event == SERVO_EVENT_AT_TARGET) {
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d10d      	bne.n	80014f2 <ServoFsm_ProcessEvent+0xca>
                if (fsm->state_duration >= fsm->settle_time_ms) {
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d351      	bcc.n	8001586 <ServoFsm_ProcessEvent+0x15e>
                    change_state(fsm, SERVO_FSM_REACHED, current_time);
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	2103      	movs	r1, #3
 80014e6:	68b8      	ldr	r0, [r7, #8]
 80014e8:	f7ff ff6e 	bl	80013c8 <change_state>
                    result.transition_reason = "Position stable";
 80014ec:	4b38      	ldr	r3, [pc, #224]	@ (80015d0 <ServoFsm_ProcessEvent+0x1a8>)
 80014ee:	617b      	str	r3, [r7, #20]
                } else {
                    change_state(fsm, SERVO_FSM_MOVING, current_time);
                    result.transition_reason = "Position drift, retry";
                }
            }
            break;
 80014f0:	e049      	b.n	8001586 <ServoFsm_ProcessEvent+0x15e>
            } else if (event == SERVO_EVENT_POSITION_DRIFT) {
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d146      	bne.n	8001586 <ServoFsm_ProcessEvent+0x15e>
                fsm->retry_count++;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	7b1b      	ldrb	r3, [r3, #12]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	731a      	strb	r2, [r3, #12]
                if (fsm->retry_count > fsm->max_retries) {
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	7b1a      	ldrb	r2, [r3, #12]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	7b5b      	ldrb	r3, [r3, #13]
 800150c:	429a      	cmp	r2, r3
 800150e:	d907      	bls.n	8001520 <ServoFsm_ProcessEvent+0xf8>
                    change_state(fsm, SERVO_FSM_ERROR, current_time);
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	2104      	movs	r1, #4
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff ff57 	bl	80013c8 <change_state>
                    result.transition_reason = "Max retries exceeded";
 800151a:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <ServoFsm_ProcessEvent+0x1ac>)
 800151c:	617b      	str	r3, [r7, #20]
            break;
 800151e:	e032      	b.n	8001586 <ServoFsm_ProcessEvent+0x15e>
                    change_state(fsm, SERVO_FSM_MOVING, current_time);
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	2101      	movs	r1, #1
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f7ff ff4f 	bl	80013c8 <change_state>
                    result.transition_reason = "Position drift, retry";
 800152a:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <ServoFsm_ProcessEvent+0x1b0>)
 800152c:	617b      	str	r3, [r7, #20]
            break;
 800152e:	e02a      	b.n	8001586 <ServoFsm_ProcessEvent+0x15e>
            
        case SERVO_FSM_REACHED:
            if (event == SERVO_EVENT_POSITION_DRIFT) {
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d107      	bne.n	8001546 <ServoFsm_ProcessEvent+0x11e>
                // 位置偏离太大，重新调整
                change_state(fsm, SERVO_FSM_MOVING, current_time);
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	2101      	movs	r1, #1
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f7ff ff44 	bl	80013c8 <change_state>
                result.transition_reason = "Position drift detected";
 8001540:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <ServoFsm_ProcessEvent+0x1b4>)
 8001542:	617b      	str	r3, [r7, #20]
                // 新的移动命令
                change_state(fsm, SERVO_FSM_MOVING, current_time);
                fsm->retry_count = 0;
                result.transition_reason = "New movement";
            }
            break;
 8001544:	e021      	b.n	800158a <ServoFsm_ProcessEvent+0x162>
            } else if (event == SERVO_EVENT_START_MOVE) {
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d11e      	bne.n	800158a <ServoFsm_ProcessEvent+0x162>
                change_state(fsm, SERVO_FSM_MOVING, current_time);
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	2101      	movs	r1, #1
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f7ff ff39 	bl	80013c8 <change_state>
                fsm->retry_count = 0;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2200      	movs	r2, #0
 800155a:	731a      	strb	r2, [r3, #12]
                result.transition_reason = "New movement";
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <ServoFsm_ProcessEvent+0x1b8>)
 800155e:	617b      	str	r3, [r7, #20]
            break;
 8001560:	e013      	b.n	800158a <ServoFsm_ProcessEvent+0x162>
            
        case SERVO_FSM_ERROR:
            if (event == SERVO_EVENT_START_MOVE) {
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d112      	bne.n	800158e <ServoFsm_ProcessEvent+0x166>
                // 从错误状态恢复
                change_state(fsm, SERVO_FSM_IDLE, current_time);
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	2100      	movs	r1, #0
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f7ff ff2b 	bl	80013c8 <change_state>
                fsm->retry_count = 0;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2200      	movs	r2, #0
 8001576:	731a      	strb	r2, [r3, #12]
                result.transition_reason = "Reset from error";
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <ServoFsm_ProcessEvent+0x1bc>)
 800157a:	617b      	str	r3, [r7, #20]
            }
            break;
 800157c:	e007      	b.n	800158e <ServoFsm_ProcessEvent+0x166>
            break;
 800157e:	bf00      	nop
 8001580:	e006      	b.n	8001590 <ServoFsm_ProcessEvent+0x168>
            break;
 8001582:	bf00      	nop
 8001584:	e004      	b.n	8001590 <ServoFsm_ProcessEvent+0x168>
            break;
 8001586:	bf00      	nop
 8001588:	e002      	b.n	8001590 <ServoFsm_ProcessEvent+0x168>
            break;
 800158a:	bf00      	nop
 800158c:	e000      	b.n	8001590 <ServoFsm_ProcessEvent+0x168>
            break;
 800158e:	bf00      	nop
    }
    
    result.state_changed = (old_state != fsm->current_state);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	7ffa      	ldrb	r2, [r7, #31]
 8001596:	429a      	cmp	r2, r3
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	743b      	strb	r3, [r7, #16]
    result.new_state = fsm->current_state;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	747b      	strb	r3, [r7, #17]
    
    return result;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015b4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	08004478 	.word	0x08004478
 80015c4:	08004488 	.word	0x08004488
 80015c8:	080044a0 	.word	0x080044a0
 80015cc:	080044b4 	.word	0x080044b4
 80015d0:	080044c0 	.word	0x080044c0
 80015d4:	080044d0 	.word	0x080044d0
 80015d8:	080044e8 	.word	0x080044e8
 80015dc:	08004500 	.word	0x08004500
 80015e0:	08004518 	.word	0x08004518
 80015e4:	08004528 	.word	0x08004528

080015e8 <ServoFsm_CheckConditions>:

/**
 * @brief 根据条件检查应该触发的事件
 */
ServoFsmEvent_t ServoFsm_CheckConditions(ServoFsm_t* fsm, int16_t position_error, uint32_t current_time) {
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	460b      	mov	r3, r1
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	817b      	strh	r3, [r7, #10]
    uint16_t abs_error = (position_error < 0) ? -position_error : position_error;
 80015f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfb8      	it	lt
 80015fe:	425b      	neglt	r3, r3
 8001600:	82fb      	strh	r3, [r7, #22]
    
    switch (fsm->current_state) {
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d029      	beq.n	800165e <ServoFsm_CheckConditions+0x76>
 800160a:	2b03      	cmp	r3, #3
 800160c:	dc2f      	bgt.n	800166e <ServoFsm_CheckConditions+0x86>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d002      	beq.n	8001618 <ServoFsm_CheckConditions+0x30>
 8001612:	2b02      	cmp	r3, #2
 8001614:	d00f      	beq.n	8001636 <ServoFsm_CheckConditions+0x4e>
                return SERVO_EVENT_POSITION_DRIFT;
            }
            break;
            
        default:
            break;
 8001616:	e02a      	b.n	800166e <ServoFsm_CheckConditions+0x86>
            if (abs_error <= fsm->position_tolerance) {
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	89db      	ldrh	r3, [r3, #14]
 800161c:	8afa      	ldrh	r2, [r7, #22]
 800161e:	429a      	cmp	r2, r3
 8001620:	d801      	bhi.n	8001626 <ServoFsm_CheckConditions+0x3e>
                return SERVO_EVENT_NEAR_TARGET;
 8001622:	2302      	movs	r3, #2
 8001624:	e02b      	b.n	800167e <ServoFsm_CheckConditions+0x96>
            if (fsm->state_duration > fsm->timeout_ms) {
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	429a      	cmp	r2, r3
 8001630:	d91f      	bls.n	8001672 <ServoFsm_CheckConditions+0x8a>
                return SERVO_EVENT_TIMEOUT;
 8001632:	2305      	movs	r3, #5
 8001634:	e023      	b.n	800167e <ServoFsm_CheckConditions+0x96>
            if (abs_error > fsm->position_tolerance) {
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	89db      	ldrh	r3, [r3, #14]
 800163a:	8afa      	ldrh	r2, [r7, #22]
 800163c:	429a      	cmp	r2, r3
 800163e:	d901      	bls.n	8001644 <ServoFsm_CheckConditions+0x5c>
                return SERVO_EVENT_POSITION_DRIFT;
 8001640:	2304      	movs	r3, #4
 8001642:	e01c      	b.n	800167e <ServoFsm_CheckConditions+0x96>
            if (abs_error <= fsm->position_tolerance && 
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	89db      	ldrh	r3, [r3, #14]
 8001648:	8afa      	ldrh	r2, [r7, #22]
 800164a:	429a      	cmp	r2, r3
 800164c:	d813      	bhi.n	8001676 <ServoFsm_CheckConditions+0x8e>
                fsm->state_duration >= fsm->settle_time_ms) {
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	691b      	ldr	r3, [r3, #16]
            if (abs_error <= fsm->position_tolerance && 
 8001656:	429a      	cmp	r2, r3
 8001658:	d30d      	bcc.n	8001676 <ServoFsm_CheckConditions+0x8e>
                return SERVO_EVENT_AT_TARGET;
 800165a:	2303      	movs	r3, #3
 800165c:	e00f      	b.n	800167e <ServoFsm_CheckConditions+0x96>
            if (abs_error > fsm->position_tolerance * 2) {
 800165e:	8afa      	ldrh	r2, [r7, #22]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	89db      	ldrh	r3, [r3, #14]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	429a      	cmp	r2, r3
 8001668:	dd07      	ble.n	800167a <ServoFsm_CheckConditions+0x92>
                return SERVO_EVENT_POSITION_DRIFT;
 800166a:	2304      	movs	r3, #4
 800166c:	e007      	b.n	800167e <ServoFsm_CheckConditions+0x96>
            break;
 800166e:	bf00      	nop
 8001670:	e004      	b.n	800167c <ServoFsm_CheckConditions+0x94>
            break;
 8001672:	bf00      	nop
 8001674:	e002      	b.n	800167c <ServoFsm_CheckConditions+0x94>
            break;
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <ServoFsm_CheckConditions+0x94>
            break;
 800167a:	bf00      	nop
    }
    
    return SERVO_EVENT_NONE;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <ServoFsm_Update>:

/**
 * @brief 更新状态机时间
 */
void ServoFsm_Update(ServoFsm_t* fsm, uint32_t current_time) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    fsm->state_duration = current_time - fsm->state_enter_time;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	609a      	str	r2, [r3, #8]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <ServoFsm_IsInState>:

/**
 * @brief 检查是否在指定状态
 */
uint8_t ServoFsm_IsInState(ServoFsm_t* fsm, ServoFsmState_t state) {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
    return (fsm->current_state == state);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	bf0c      	ite	eq
 80016be:	2301      	moveq	r3, #1
 80016c0:	2300      	movne	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e4:	4b40      	ldr	r3, [pc, #256]	@ (80017e8 <MX_GPIO_Init+0x118>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a3f      	ldr	r2, [pc, #252]	@ (80017e8 <MX_GPIO_Init+0x118>)
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <MX_GPIO_Init+0x118>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b3a      	ldr	r3, [pc, #232]	@ (80017e8 <MX_GPIO_Init+0x118>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a39      	ldr	r2, [pc, #228]	@ (80017e8 <MX_GPIO_Init+0x118>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <MX_GPIO_Init+0x118>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <MX_GPIO_Init+0x118>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a33      	ldr	r2, [pc, #204]	@ (80017e8 <MX_GPIO_Init+0x118>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <MX_GPIO_Init+0x118>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2102      	movs	r1, #2
 8001730:	482e      	ldr	r0, [pc, #184]	@ (80017ec <MX_GPIO_Init+0x11c>)
 8001732:	f000 ff0d 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800173c:	482b      	ldr	r0, [pc, #172]	@ (80017ec <MX_GPIO_Init+0x11c>)
 800173e:	f000 ff07 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2120      	movs	r1, #32
 8001746:	482a      	ldr	r0, [pc, #168]	@ (80017f0 <MX_GPIO_Init+0x120>)
 8001748:	f000 ff02 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800174c:	2302      	movs	r3, #2
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	4822      	ldr	r0, [pc, #136]	@ (80017ec <MX_GPIO_Init+0x11c>)
 8001764:	f000 fd70 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA12 (Keyboard columns - output) */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12;
 8001768:	f241 1330 	movw	r3, #4400	@ 0x1130
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2302      	movs	r3, #2
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4619      	mov	r1, r3
 8001780:	481a      	ldr	r0, [pc, #104]	@ (80017ec <MX_GPIO_Init+0x11c>)
 8001782:	f000 fd61 	bl	8002248 <HAL_GPIO_Init>
  
  /* Set all columns to HIGH initially */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f241 1130 	movw	r1, #4400	@ 0x1130
 800178c:	4817      	ldr	r0, [pc, #92]	@ (80017ec <MX_GPIO_Init+0x11c>)
 800178e:	f000 fedf 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 (Keyboard row r4 - input) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179c:	2301      	movs	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4619      	mov	r1, r3
 80017a6:	4811      	ldr	r0, [pc, #68]	@ (80017ec <MX_GPIO_Init+0x11c>)
 80017a8:	f000 fd4e 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_GPIO_Init+0x120>)
 80017c0:	f000 fd42 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017c4:	2320      	movs	r3, #32
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_GPIO_Init+0x120>)
 80017dc:	f000 fd34 	bl	8002248 <HAL_GPIO_Init>

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b091      	sub	sp, #68	@ 0x44
 80017f8:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fa:	f000 fbbb 	bl	8001f74 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80017fe:	f000 f96d 	bl	8001adc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001802:	f7ff ff65 	bl	80016d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();  // Initialize USART1 for debug output
 8001806:	f000 fb4f 	bl	8001ea8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();  // Initialize USART3 for servo
 800180a:	f000 fa9b 	bl	8001d44 <MX_USART3_UART_Init>
  
  /* USER CODE BEGIN 2 */
  // Initialize LED
  LED_Init();
 800180e:	f7fe ff97 	bl	8000740 <LED_Init>
  LED_Flash(3);  // Flash 3 times to indicate system start
 8001812:	2003      	movs	r0, #3
 8001814:	f7fe ffe8 	bl	80007e8 <LED_Flash>
  
  printf("\r\n========================================\r\n");
 8001818:	4898      	ldr	r0, [pc, #608]	@ (8001a7c <main+0x288>)
 800181a:	f001 fec1 	bl	80035a0 <puts>
  printf("SERVO 270-DEGREE ROTATION TEST\r\n");
 800181e:	4898      	ldr	r0, [pc, #608]	@ (8001a80 <main+0x28c>)
 8001820:	f001 febe 	bl	80035a0 <puts>
  printf("========================================\r\n\r\n");
 8001824:	4897      	ldr	r0, [pc, #604]	@ (8001a84 <main+0x290>)
 8001826:	f001 febb 	bl	80035a0 <puts>
  
  // Initialize servo communication
  printf("Initializing servo...\r\n");
 800182a:	4897      	ldr	r0, [pc, #604]	@ (8001a88 <main+0x294>)
 800182c:	f001 feb8 	bl	80035a0 <puts>
  servo_init(&huart3);
 8001830:	4896      	ldr	r0, [pc, #600]	@ (8001a8c <main+0x298>)
 8001832:	f7ff f851 	bl	80008d8 <servo_init>
  HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	@ 0x64
 8001838:	f000 fbfe 	bl	8002038 <HAL_Delay>
  
  // Verify connection
  if (servo_ping(servo_id)) {
 800183c:	4b94      	ldr	r3, [pc, #592]	@ (8001a90 <main+0x29c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f859 	bl	80008f8 <servo_ping>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01e      	beq.n	800188a <main+0x96>
      printf("[OK] Servo connected\r\n");
 800184c:	4891      	ldr	r0, [pc, #580]	@ (8001a94 <main+0x2a0>)
 800184e:	f001 fea7 	bl	80035a0 <puts>
      printf("[ERROR] Servo not responding\r\n");
      while(1) { HAL_Delay(1000); }
  }
  
  // Initialize servo controller
  ServoControl_Init(&servo_ctrl, servo_id);
 8001852:	4b8f      	ldr	r3, [pc, #572]	@ (8001a90 <main+0x29c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	488f      	ldr	r0, [pc, #572]	@ (8001a98 <main+0x2a4>)
 800185a:	f7ff fa65 	bl	8000d28 <ServoControl_Init>
  
  // Set custom PID parameters
  PIDParams_t pid = {
 800185e:	4b8f      	ldr	r3, [pc, #572]	@ (8001a9c <main+0x2a8>)
 8001860:	463c      	mov	r4, r7
 8001862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .ki = 0.2f,
      .kd = 1.0f,
      .max_output = 2000,
      .min_output = 150
  };
  ServoControl_SetPID(&pid);
 8001868:	463b      	mov	r3, r7
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff faa0 	bl	8000db0 <ServoControl_SetPID>
  
  // Enable controller
  ServoControl_Enable(&servo_ctrl);
 8001870:	4889      	ldr	r0, [pc, #548]	@ (8001a98 <main+0x2a4>)
 8001872:	f7ff fb0f 	bl	8000e94 <ServoControl_Enable>
  HAL_Delay(100);
 8001876:	2064      	movs	r0, #100	@ 0x64
 8001878:	f000 fbde 	bl	8002038 <HAL_Delay>
  
  // Move to home position first
  printf("\r\nMoving to home position...\r\n");
 800187c:	4888      	ldr	r0, [pc, #544]	@ (8001aa0 <main+0x2ac>)
 800187e:	f001 fe8f 	bl	80035a0 <puts>
  ServoControl_Home(&servo_ctrl);
 8001882:	4885      	ldr	r0, [pc, #532]	@ (8001a98 <main+0x2a4>)
 8001884:	f7ff fd3c 	bl	8001300 <ServoControl_Home>
  
  // Wait for home position
  while (!ServoControl_IsAtTarget(&servo_ctrl)) {
 8001888:	e00d      	b.n	80018a6 <main+0xb2>
      printf("[ERROR] Servo not responding\r\n");
 800188a:	4886      	ldr	r0, [pc, #536]	@ (8001aa4 <main+0x2b0>)
 800188c:	f001 fe88 	bl	80035a0 <puts>
      while(1) { HAL_Delay(1000); }
 8001890:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001894:	f000 fbd0 	bl	8002038 <HAL_Delay>
 8001898:	e7fa      	b.n	8001890 <main+0x9c>
      ServoControl_Update(&servo_ctrl);
 800189a:	487f      	ldr	r0, [pc, #508]	@ (8001a98 <main+0x2a4>)
 800189c:	f7ff fc14 	bl	80010c8 <ServoControl_Update>
      HAL_Delay(SERVO_CONTROL_PERIOD_MS);
 80018a0:	2032      	movs	r0, #50	@ 0x32
 80018a2:	f000 fbc9 	bl	8002038 <HAL_Delay>
  while (!ServoControl_IsAtTarget(&servo_ctrl)) {
 80018a6:	487c      	ldr	r0, [pc, #496]	@ (8001a98 <main+0x2a4>)
 80018a8:	f7ff fcb8 	bl	800121c <ServoControl_IsAtTarget>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f3      	beq.n	800189a <main+0xa6>
  }
  printf("Home position reached: %d\r\n", servo_ctrl.current_position);
 80018b2:	4b79      	ldr	r3, [pc, #484]	@ (8001a98 <main+0x2a4>)
 80018b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018b8:	4619      	mov	r1, r3
 80018ba:	487b      	ldr	r0, [pc, #492]	@ (8001aa8 <main+0x2b4>)
 80018bc:	f001 fe08 	bl	80034d0 <iprintf>
  HAL_Delay(1000);
 80018c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c4:	f000 fbb8 	bl	8002038 <HAL_Delay>
  
  // Start 270-degree rotation
  printf("\r\n========================================\r\n");
 80018c8:	486c      	ldr	r0, [pc, #432]	@ (8001a7c <main+0x288>)
 80018ca:	f001 fe69 	bl	80035a0 <puts>
  printf("Starting 270-degree clockwise rotation\r\n");
 80018ce:	4877      	ldr	r0, [pc, #476]	@ (8001aac <main+0x2b8>)
 80018d0:	f001 fe66 	bl	80035a0 <puts>
  printf("Angle(deg) | Position | Target | Error\r\n");
 80018d4:	4876      	ldr	r0, [pc, #472]	@ (8001ab0 <main+0x2bc>)
 80018d6:	f001 fe63 	bl	80035a0 <puts>
  printf("----------------------------------------\r\n");
 80018da:	4876      	ldr	r0, [pc, #472]	@ (8001ab4 <main+0x2c0>)
 80018dc:	f001 fe60 	bl	80035a0 <puts>
  
  ServoControl_RotateContinuous(&servo_ctrl, 270.0f);
 80018e0:	4975      	ldr	r1, [pc, #468]	@ (8001ab8 <main+0x2c4>)
 80018e2:	486d      	ldr	r0, [pc, #436]	@ (8001a98 <main+0x2a4>)
 80018e4:	f7ff fcea 	bl	80012bc <ServoControl_RotateContinuous>
  uint32_t start_time = HAL_GetTick();
 80018e8:	f000 fb9c 	bl	8002024 <HAL_GetTick>
 80018ec:	62b8      	str	r0, [r7, #40]	@ 0x28
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_update_time = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t last_print_time = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t rotation_complete = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 80018fc:	f000 fb92 	bl	8002024 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // Update control loop at 50ms intervals
    if (current_time - last_update_time >= SERVO_CONTROL_PERIOD_MS) {
 8001902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b31      	cmp	r3, #49	@ 0x31
 800190a:	d952      	bls.n	80019b2 <main+0x1be>
        ServoControl_Update(&servo_ctrl);
 800190c:	4862      	ldr	r0, [pc, #392]	@ (8001a98 <main+0x2a4>)
 800190e:	f7ff fbdb 	bl	80010c8 <ServoControl_Update>
        last_update_time = current_time;
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	637b      	str	r3, [r7, #52]	@ 0x34
        
        // LED indication based on state
        if (servo_ctrl.fsm.current_state == SERVO_FSM_MOVING) {
 8001916:	4b60      	ldr	r3, [pc, #384]	@ (8001a98 <main+0x2a4>)
 8001918:	7c1b      	ldrb	r3, [r3, #16]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <main+0x130>
            LED_Toggle();
 800191e:	f7fe ff59 	bl	80007d4 <LED_Toggle>
 8001922:	e046      	b.n	80019b2 <main+0x1be>
        } else if (servo_ctrl.fsm.current_state == SERVO_FSM_REACHED) {
 8001924:	4b5c      	ldr	r3, [pc, #368]	@ (8001a98 <main+0x2a4>)
 8001926:	7c1b      	ldrb	r3, [r3, #16]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d140      	bne.n	80019ae <main+0x1ba>
            LED_On();
 800192c:	f7fe ff3a 	bl	80007a4 <LED_On>
            if (!rotation_complete) {
 8001930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001934:	2b00      	cmp	r3, #0
 8001936:	d13c      	bne.n	80019b2 <main+0x1be>
                rotation_complete = 1;
 8001938:	2301      	movs	r3, #1
 800193a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                uint32_t total_time = HAL_GetTick() - start_time;
 800193e:	f000 fb71 	bl	8002024 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	623b      	str	r3, [r7, #32]
                printf("----------------------------------------\r\n");
 800194a:	485a      	ldr	r0, [pc, #360]	@ (8001ab4 <main+0x2c0>)
 800194c:	f001 fe28 	bl	80035a0 <puts>
                printf("Rotation completed in %d.%d seconds\r\n", 
                       (int)(total_time / 1000), 
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	4a5a      	ldr	r2, [pc, #360]	@ (8001abc <main+0x2c8>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
                printf("Rotation completed in %d.%d seconds\r\n", 
 800195a:	4618      	mov	r0, r3
                       (int)((total_time % 1000) / 100));
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	4b57      	ldr	r3, [pc, #348]	@ (8001abc <main+0x2c8>)
 8001960:	fba3 1302 	umull	r1, r3, r3, r2
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a53      	ldr	r2, [pc, #332]	@ (8001ac0 <main+0x2cc>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	095b      	lsrs	r3, r3, #5
                printf("Rotation completed in %d.%d seconds\r\n", 
 8001978:	461a      	mov	r2, r3
 800197a:	4601      	mov	r1, r0
 800197c:	4851      	ldr	r0, [pc, #324]	@ (8001ac4 <main+0x2d0>)
 800197e:	f001 fda7 	bl	80034d0 <iprintf>
                printf("Final position: %d (target: %d)\r\n", 
                       servo_ctrl.current_position, 
 8001982:	4b45      	ldr	r3, [pc, #276]	@ (8001a98 <main+0x2a4>)
 8001984:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                printf("Final position: %d (target: %d)\r\n", 
 8001988:	4619      	mov	r1, r3
                       servo_ctrl.target_position);
 800198a:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <main+0x2a4>)
 800198c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                printf("Final position: %d (target: %d)\r\n", 
 8001990:	461a      	mov	r2, r3
 8001992:	484d      	ldr	r0, [pc, #308]	@ (8001ac8 <main+0x2d4>)
 8001994:	f001 fd9c 	bl	80034d0 <iprintf>
                printf("Final error: %d steps\r\n", servo_ctrl.position_error);
 8001998:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <main+0x2a4>)
 800199a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800199e:	4619      	mov	r1, r3
 80019a0:	484a      	ldr	r0, [pc, #296]	@ (8001acc <main+0x2d8>)
 80019a2:	f001 fd95 	bl	80034d0 <iprintf>
                printf("========================================\r\n\r\n");
 80019a6:	4837      	ldr	r0, [pc, #220]	@ (8001a84 <main+0x290>)
 80019a8:	f001 fdfa 	bl	80035a0 <puts>
 80019ac:	e001      	b.n	80019b2 <main+0x1be>
            }
        } else {
            LED_Off();
 80019ae:	f7fe ff05 	bl	80007bc <LED_Off>
        }
    }
    
    // Print angle and error tracking every 200ms during movement
    if (!rotation_complete && current_time - last_print_time >= 200) {
 80019b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1a0      	bne.n	80018fc <main+0x108>
 80019ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80019c2:	d99b      	bls.n	80018fc <main+0x108>
        if (servo_ctrl.fsm.current_state == SERVO_FSM_MOVING || 
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <main+0x2a4>)
 80019c6:	7c1b      	ldrb	r3, [r3, #16]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d003      	beq.n	80019d4 <main+0x1e0>
            servo_ctrl.fsm.current_state == SERVO_FSM_SETTLING) {
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <main+0x2a4>)
 80019ce:	7c1b      	ldrb	r3, [r3, #16]
        if (servo_ctrl.fsm.current_state == SERVO_FSM_MOVING || 
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d150      	bne.n	8001a76 <main+0x282>
            
            // Calculate angle in degrees (4096 steps = 360 degrees)
            float current_angle = (servo_ctrl.current_position * 360.0f) / 4096.0f;
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <main+0x2a4>)
 80019d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc70 	bl	80002c0 <__aeabi_i2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	493b      	ldr	r1, [pc, #236]	@ (8001ad0 <main+0x2dc>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fcbf 	bl	8000368 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd6d 	bl	80004d0 <__aeabi_fdiv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	61fb      	str	r3, [r7, #28]
            float target_angle = (servo_ctrl.target_position * 360.0f) / 4096.0f;
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <main+0x2a4>)
 80019fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fc5d 	bl	80002c0 <__aeabi_i2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4931      	ldr	r1, [pc, #196]	@ (8001ad0 <main+0x2dc>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fcac 	bl	8000368 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd5a 	bl	80004d0 <__aeabi_fdiv>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61bb      	str	r3, [r7, #24]
            
            // Print with integer representation to avoid printf float issues
            int curr_angle_int = (int)current_angle;
 8001a20:	69f8      	ldr	r0, [r7, #28]
 8001a22:	f7fe fe67 	bl	80006f4 <__aeabi_f2iz>
 8001a26:	4603      	mov	r3, r0
 8001a28:	617b      	str	r3, [r7, #20]
            int curr_angle_dec = (int)((current_angle - curr_angle_int) * 10);
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7fe fc48 	bl	80002c0 <__aeabi_i2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4619      	mov	r1, r3
 8001a34:	69f8      	ldr	r0, [r7, #28]
 8001a36:	f7fe fb8d 	bl	8000154 <__aeabi_fsub>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4925      	ldr	r1, [pc, #148]	@ (8001ad4 <main+0x2e0>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fc92 	bl	8000368 <__aeabi_fmul>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fe54 	bl	80006f4 <__aeabi_f2iz>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	613b      	str	r3, [r7, #16]
            
            printf("%3d.%d° | %5d | %5d | %+5d\r\n",
                   curr_angle_int, curr_angle_dec,
                   servo_ctrl.current_position,
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <main+0x2a4>)
 8001a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            printf("%3d.%d° | %5d | %5d | %+5d\r\n",
 8001a56:	4619      	mov	r1, r3
                   servo_ctrl.target_position,
 8001a58:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <main+0x2a4>)
 8001a5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            printf("%3d.%d° | %5d | %5d | %+5d\r\n",
 8001a5e:	461a      	mov	r2, r3
                   servo_ctrl.position_error);
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <main+0x2a4>)
 8001a62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
            printf("%3d.%d° | %5d | %5d | %+5d\r\n",
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	6979      	ldr	r1, [r7, #20]
 8001a70:	4819      	ldr	r0, [pc, #100]	@ (8001ad8 <main+0x2e4>)
 8001a72:	f001 fd2d 	bl	80034d0 <iprintf>
        }
        last_print_time = current_time;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	633b      	str	r3, [r7, #48]	@ 0x30
  {
 8001a7a:	e73f      	b.n	80018fc <main+0x108>
 8001a7c:	080045ac 	.word	0x080045ac
 8001a80:	080045d8 	.word	0x080045d8
 8001a84:	080045f8 	.word	0x080045f8
 8001a88:	08004624 	.word	0x08004624
 8001a8c:	2000012c 	.word	0x2000012c
 8001a90:	20000024 	.word	0x20000024
 8001a94:	0800463c 	.word	0x0800463c
 8001a98:	200000b0 	.word	0x200000b0
 8001a9c:	080047b0 	.word	0x080047b0
 8001aa0:	08004674 	.word	0x08004674
 8001aa4:	08004654 	.word	0x08004654
 8001aa8:	08004694 	.word	0x08004694
 8001aac:	080046b0 	.word	0x080046b0
 8001ab0:	080046d8 	.word	0x080046d8
 8001ab4:	08004700 	.word	0x08004700
 8001ab8:	43870000 	.word	0x43870000
 8001abc:	10624dd3 	.word	0x10624dd3
 8001ac0:	51eb851f 	.word	0x51eb851f
 8001ac4:	0800472c 	.word	0x0800472c
 8001ac8:	08004754 	.word	0x08004754
 8001acc:	08004778 	.word	0x08004778
 8001ad0:	43b40000 	.word	0x43b40000
 8001ad4:	41200000 	.word	0x41200000
 8001ad8:	08004790 	.word	0x08004790

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b090      	sub	sp, #64	@ 0x40
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	2228      	movs	r2, #40	@ 0x28
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fe38 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b10:	2302      	movs	r3, #2
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 fd45 	bl	80025b4 <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b30:	f000 f819 	bl	8001b66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	230f      	movs	r3, #15
 8001b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 ffb2 	bl	8002ab8 <HAL_RCC_ClockConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b5a:	f000 f804 	bl	8001b66 <Error_Handler>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3740      	adds	r7, #64	@ 0x40
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6a:	b672      	cpsid	i
}
 8001b6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6e:	bf00      	nop
 8001b70:	e7fd      	b.n	8001b6e <Error_Handler+0x8>
	...

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_MspInit+0x60>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_MspInit+0x60>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <NMI_Handler+0x4>

08001be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <MemManage_Handler+0x4>

08001bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <UsageFault_Handler+0x4>

08001c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c28:	f000 f9ea 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e00a      	b.n	8001c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c42:	f3af 8000 	nop.w
 8001c46:	4601      	mov	r1, r0
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf0      	blt.n	8001c42 <_read+0x12>
  }

  return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c90:	605a      	str	r2, [r3, #4]
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <_isatty>:

int _isatty(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f001 fd7e 	bl	80037fc <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20005000 	.word	0x20005000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	200000e0 	.word	0x200000e0
 8001d34:	200002c8 	.word	0x200002c8

08001d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d4a:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d50:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <MX_USART3_UART_Init+0x50>)
 8001d52:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d54:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d68:	220c      	movs	r2, #12
 8001d6a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_USART3_UART_Init+0x48>)
 8001d7a:	f001 f82b 	bl	8002dd4 <HAL_UART_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001d84:	f7ff feef 	bl	8001b66 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000012c 	.word	0x2000012c
 8001d90:	40004800 	.word	0x40004800
 8001d94:	000f4240 	.word	0x000f4240

08001d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <HAL_UART_MspInit+0xfc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d132      	bne.n	8001e1e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db8:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a36      	ldr	r2, [pc, #216]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b34      	ldr	r3, [pc, #208]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b31      	ldr	r3, [pc, #196]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a30      	ldr	r2, [pc, #192]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10    ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4827      	ldr	r0, [pc, #156]	@ (8001e9c <HAL_UART_MspInit+0x104>)
 8001dfe:	f000 fa23 	bl	8002248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4619      	mov	r1, r3
 8001e16:	4821      	ldr	r0, [pc, #132]	@ (8001e9c <HAL_UART_MspInit+0x104>)
 8001e18:	f000 fa16 	bl	8002248 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e1c:	e036      	b.n	8001e8c <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_UART_MspInit+0x108>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d131      	bne.n	8001e8c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001e2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e32:	61d3      	str	r3, [r2, #28]
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_UART_MspInit+0x100>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <HAL_UART_MspInit+0x10c>)
 8001e6e:	f000 f9eb 	bl	8002248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 0318 	add.w	r3, r7, #24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4807      	ldr	r0, [pc, #28]	@ (8001ea4 <HAL_UART_MspInit+0x10c>)
 8001e88:	f000 f9de 	bl	8002248 <HAL_GPIO_Init>
}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	@ 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40004800 	.word	0x40004800
 8001ea4:	40010c00 	.word	0x40010c00

08001ea8 <MX_USART1_UART_Init>:

/* USER CODE BEGIN 1 */

/* USART1 init function for debug output */
void MX_USART1_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <MX_USART1_UART_Init+0x50>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;  // Standard debug baud rate
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	f000 ff78 	bl	8002dd4 <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eea:	f7ff fe3c 	bl	8001b66 <Error_Handler>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200000e4 	.word	0x200000e4
 8001ef8:	40013800 	.word	0x40013800

08001efc <_write>:

/* Redirect printf to USART1 for debug output */
int _write(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	4804      	ldr	r0, [pc, #16]	@ (8001f24 <_write+0x28>)
 8001f14:	f000 ffae 	bl	8002e74 <HAL_UART_Transmit>
  return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200000e4 	.word	0x200000e4

08001f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f28:	f7ff ff06 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480b      	ldr	r0, [pc, #44]	@ (8001f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f2e:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f30:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f44:	4c09      	ldr	r4, [pc, #36]	@ (8001f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f52:	f001 fc59 	bl	8003808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f56:	f7ff fc4d 	bl	80017f4 <main>
  bx lr
 8001f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001f64:	08004828 	.word	0x08004828
  ldr r2, =_sbss
 8001f68:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001f6c:	200002c4 	.word	0x200002c4

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_Init+0x28>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <HAL_Init+0x28>)
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f92b 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f000 f808 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff fdf0 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f935 	bl	800222e <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 f90b 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000028 	.word	0x20000028
 8001ff8:	20000030 	.word	0x20000030
 8001ffc:	2000002c 	.word	0x2000002c

08002000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_IncTick+0x1c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_IncTick+0x20>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a03      	ldr	r2, [pc, #12]	@ (8002020 <HAL_IncTick+0x20>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000030 	.word	0x20000030
 8002020:	20000174 	.word	0x20000174

08002024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b02      	ldr	r3, [pc, #8]	@ (8002034 <HAL_GetTick+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000174 	.word	0x20000174

08002038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff fff0 	bl	8002024 <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d005      	beq.n	800205e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_Delay+0x44>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205e:	bf00      	nop
 8002060:	f7ff ffe0 	bl	8002024 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d8f7      	bhi.n	8002060 <HAL_Delay+0x28>
  {
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000030 	.word	0x20000030

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	@ (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	@ (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	@ 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	@ 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff90 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff49 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff5e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff90 	bl	8002138 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5f 	bl	80020e4 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffb0 	bl	800219c <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b08b      	sub	sp, #44	@ 0x2c
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225a:	e169      	b.n	8002530 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800225c:	2201      	movs	r2, #1
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 8158 	bne.w	800252a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a9a      	ldr	r2, [pc, #616]	@ (80024e8 <HAL_GPIO_Init+0x2a0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d05e      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 8002284:	4a98      	ldr	r2, [pc, #608]	@ (80024e8 <HAL_GPIO_Init+0x2a0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d875      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 800228a:	4a98      	ldr	r2, [pc, #608]	@ (80024ec <HAL_GPIO_Init+0x2a4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d058      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 8002290:	4a96      	ldr	r2, [pc, #600]	@ (80024ec <HAL_GPIO_Init+0x2a4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d86f      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 8002296:	4a96      	ldr	r2, [pc, #600]	@ (80024f0 <HAL_GPIO_Init+0x2a8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d052      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 800229c:	4a94      	ldr	r2, [pc, #592]	@ (80024f0 <HAL_GPIO_Init+0x2a8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d869      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022a2:	4a94      	ldr	r2, [pc, #592]	@ (80024f4 <HAL_GPIO_Init+0x2ac>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d04c      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 80022a8:	4a92      	ldr	r2, [pc, #584]	@ (80024f4 <HAL_GPIO_Init+0x2ac>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d863      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022ae:	4a92      	ldr	r2, [pc, #584]	@ (80024f8 <HAL_GPIO_Init+0x2b0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d046      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 80022b4:	4a90      	ldr	r2, [pc, #576]	@ (80024f8 <HAL_GPIO_Init+0x2b0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d85d      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022ba:	2b12      	cmp	r3, #18
 80022bc:	d82a      	bhi.n	8002314 <HAL_GPIO_Init+0xcc>
 80022be:	2b12      	cmp	r3, #18
 80022c0:	d859      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022c2:	a201      	add	r2, pc, #4	@ (adr r2, 80022c8 <HAL_GPIO_Init+0x80>)
 80022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c8:	08002343 	.word	0x08002343
 80022cc:	0800231d 	.word	0x0800231d
 80022d0:	0800232f 	.word	0x0800232f
 80022d4:	08002371 	.word	0x08002371
 80022d8:	08002377 	.word	0x08002377
 80022dc:	08002377 	.word	0x08002377
 80022e0:	08002377 	.word	0x08002377
 80022e4:	08002377 	.word	0x08002377
 80022e8:	08002377 	.word	0x08002377
 80022ec:	08002377 	.word	0x08002377
 80022f0:	08002377 	.word	0x08002377
 80022f4:	08002377 	.word	0x08002377
 80022f8:	08002377 	.word	0x08002377
 80022fc:	08002377 	.word	0x08002377
 8002300:	08002377 	.word	0x08002377
 8002304:	08002377 	.word	0x08002377
 8002308:	08002377 	.word	0x08002377
 800230c:	08002325 	.word	0x08002325
 8002310:	08002339 	.word	0x08002339
 8002314:	4a79      	ldr	r2, [pc, #484]	@ (80024fc <HAL_GPIO_Init+0x2b4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800231a:	e02c      	b.n	8002376 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	623b      	str	r3, [r7, #32]
          break;
 8002322:	e029      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	3304      	adds	r3, #4
 800232a:	623b      	str	r3, [r7, #32]
          break;
 800232c:	e024      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	3308      	adds	r3, #8
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e01f      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	330c      	adds	r3, #12
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e01a      	b.n	8002378 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800234a:	2304      	movs	r3, #4
 800234c:	623b      	str	r3, [r7, #32]
          break;
 800234e:	e013      	b.n	8002378 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d105      	bne.n	8002364 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002358:	2308      	movs	r3, #8
 800235a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	611a      	str	r2, [r3, #16]
          break;
 8002362:	e009      	b.n	8002378 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002364:	2308      	movs	r3, #8
 8002366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	615a      	str	r2, [r3, #20]
          break;
 800236e:	e003      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
          break;
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x130>
          break;
 8002376:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2bff      	cmp	r3, #255	@ 0xff
 800237c:	d801      	bhi.n	8002382 <HAL_GPIO_Init+0x13a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	e001      	b.n	8002386 <HAL_GPIO_Init+0x13e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2bff      	cmp	r3, #255	@ 0xff
 800238c:	d802      	bhi.n	8002394 <HAL_GPIO_Init+0x14c>
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x152>
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	3b08      	subs	r3, #8
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	210f      	movs	r1, #15
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	401a      	ands	r2, r3
 80023ac:	6a39      	ldr	r1, [r7, #32]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80b1 	beq.w	800252a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002500 <HAL_GPIO_Init+0x2b8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002500 <HAL_GPIO_Init+0x2b8>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002500 <HAL_GPIO_Init+0x2b8>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e0:	4a48      	ldr	r2, [pc, #288]	@ (8002504 <HAL_GPIO_Init+0x2bc>)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a40      	ldr	r2, [pc, #256]	@ (8002508 <HAL_GPIO_Init+0x2c0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x1ec>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3f      	ldr	r2, [pc, #252]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1e8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3e      	ldr	r2, [pc, #248]	@ (8002510 <HAL_GPIO_Init+0x2c8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1e4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3d      	ldr	r2, [pc, #244]	@ (8002514 <HAL_GPIO_Init+0x2cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1e0>
 8002424:	2303      	movs	r3, #3
 8002426:	e006      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002428:	2304      	movs	r3, #4
 800242a:	e004      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 800242c:	2302      	movs	r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002434:	2300      	movs	r3, #0
 8002436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002446:	492f      	ldr	r1, [pc, #188]	@ (8002504 <HAL_GPIO_Init+0x2bc>)
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	492c      	ldr	r1, [pc, #176]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800246e:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4928      	ldr	r1, [pc, #160]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4922      	ldr	r1, [pc, #136]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002496:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	491e      	ldr	r1, [pc, #120]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4918      	ldr	r1, [pc, #96]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024be:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4914      	ldr	r1, [pc, #80]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d021      	beq.n	800251c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	490e      	ldr	r1, [pc, #56]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e021      	b.n	800252a <HAL_GPIO_Init+0x2e2>
 80024e6:	bf00      	nop
 80024e8:	10320000 	.word	0x10320000
 80024ec:	10310000 	.word	0x10310000
 80024f0:	10220000 	.word	0x10220000
 80024f4:	10210000 	.word	0x10210000
 80024f8:	10120000 	.word	0x10120000
 80024fc:	10110000 	.word	0x10110000
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	40010800 	.word	0x40010800
 800250c:	40010c00 	.word	0x40010c00
 8002510:	40011000 	.word	0x40011000
 8002514:	40011400 	.word	0x40011400
 8002518:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_GPIO_Init+0x304>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	43db      	mvns	r3, r3
 8002524:	4909      	ldr	r1, [pc, #36]	@ (800254c <HAL_GPIO_Init+0x304>)
 8002526:	4013      	ands	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	3301      	adds	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	f47f ae8e 	bne.w	800225c <HAL_GPIO_Init+0x14>
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	372c      	adds	r7, #44	@ 0x2c
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4013      	ands	r3, r2
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43d9      	mvns	r1, r3
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	400b      	ands	r3, r1
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e272      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8087 	beq.w	80026e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d4:	4b92      	ldr	r3, [pc, #584]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d00c      	beq.n	80025fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d112      	bne.n	8002612 <HAL_RCC_OscConfig+0x5e>
 80025ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f8:	d10b      	bne.n	8002612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fa:	4b89      	ldr	r3, [pc, #548]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d06c      	beq.n	80026e0 <HAL_RCC_OscConfig+0x12c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d168      	bne.n	80026e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e24c      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x76>
 800261c:	4b80      	ldr	r3, [pc, #512]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7f      	ldr	r2, [pc, #508]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	e02e      	b.n	8002688 <HAL_RCC_OscConfig+0xd4>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x98>
 8002632:	4b7b      	ldr	r3, [pc, #492]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7a      	ldr	r2, [pc, #488]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b78      	ldr	r3, [pc, #480]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a77      	ldr	r2, [pc, #476]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002644:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <HAL_RCC_OscConfig+0xd4>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0xbc>
 8002656:	4b72      	ldr	r3, [pc, #456]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a71      	ldr	r2, [pc, #452]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b6f      	ldr	r3, [pc, #444]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6e      	ldr	r2, [pc, #440]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0xd4>
 8002670:	4b6b      	ldr	r3, [pc, #428]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6a      	ldr	r2, [pc, #424]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b68      	ldr	r3, [pc, #416]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a67      	ldr	r2, [pc, #412]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fcc8 	bl	8002024 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff fcc4 	bl	8002024 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e200      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0xe4>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fcb4 	bl	8002024 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff fcb0 	bl	8002024 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1ec      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	4b53      	ldr	r3, [pc, #332]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x10c>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026fa:	4b49      	ldr	r3, [pc, #292]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b08      	cmp	r3, #8
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x18c>
 8002706:	4b46      	ldr	r3, [pc, #280]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	4b43      	ldr	r3, [pc, #268]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x176>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1c0      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4939      	ldr	r1, [pc, #228]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e03a      	b.n	80027b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4b36      	ldr	r3, [pc, #216]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7ff fc69 	bl	8002024 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002756:	f7ff fc65 	bl	8002024 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1a1      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b2a      	ldr	r3, [pc, #168]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4927      	ldr	r1, [pc, #156]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b26      	ldr	r3, [pc, #152]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff fc48 	bl	8002024 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7ff fc44 	bl	8002024 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e180      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d03a      	beq.n	8002838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d019      	beq.n	80027fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <HAL_RCC_OscConfig+0x274>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7ff fc28 	bl	8002024 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7ff fc24 	bl	8002024 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e160      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f000 face 	bl	8002d98 <RCC_Delay>
 80027fc:	e01c      	b.n	8002838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_RCC_OscConfig+0x274>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7ff fc0e 	bl	8002024 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280a:	e00f      	b.n	800282c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7ff fc0a 	bl	8002024 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d908      	bls.n	800282c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e146      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	42420000 	.word	0x42420000
 8002828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	4b92      	ldr	r3, [pc, #584]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e9      	bne.n	800280c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a6 	beq.w	8002992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	4b88      	ldr	r3, [pc, #544]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a87      	ldr	r2, [pc, #540]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002860:	61d3      	str	r3, [r2, #28]
 8002862:	4b85      	ldr	r3, [pc, #532]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b82      	ldr	r3, [pc, #520]	@ (8002a7c <HAL_RCC_OscConfig+0x4c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d118      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a7c <HAL_RCC_OscConfig+0x4c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7e      	ldr	r2, [pc, #504]	@ (8002a7c <HAL_RCC_OscConfig+0x4c8>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7ff fbcb 	bl	8002024 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7ff fbc7 	bl	8002024 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b64      	cmp	r3, #100	@ 0x64
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e103      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b75      	ldr	r3, [pc, #468]	@ (8002a7c <HAL_RCC_OscConfig+0x4c8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x312>
 80028b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6213      	str	r3, [r2, #32]
 80028c4:	e02d      	b.n	8002922 <HAL_RCC_OscConfig+0x36e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x334>
 80028ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a69      	ldr	r2, [pc, #420]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	4b67      	ldr	r3, [pc, #412]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a66      	ldr	r2, [pc, #408]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 0304 	bic.w	r3, r3, #4
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	e01c      	b.n	8002922 <HAL_RCC_OscConfig+0x36e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d10c      	bne.n	800290a <HAL_RCC_OscConfig+0x356>
 80028f0:	4b61      	ldr	r3, [pc, #388]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a60      	ldr	r2, [pc, #384]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a5d      	ldr	r2, [pc, #372]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	e00b      	b.n	8002922 <HAL_RCC_OscConfig+0x36e>
 800290a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a5a      	ldr	r2, [pc, #360]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	6213      	str	r3, [r2, #32]
 8002916:	4b58      	ldr	r3, [pc, #352]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a57      	ldr	r2, [pc, #348]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d015      	beq.n	8002956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7ff fb7b 	bl	8002024 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7ff fb77 	bl	8002024 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e0b1      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	4b4b      	ldr	r3, [pc, #300]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ee      	beq.n	8002932 <HAL_RCC_OscConfig+0x37e>
 8002954:	e014      	b.n	8002980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7ff fb65 	bl	8002024 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7ff fb61 	bl	8002024 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e09b      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ee      	bne.n	800295e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b3c      	ldr	r3, [pc, #240]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8087 	beq.w	8002aaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299c:	4b36      	ldr	r3, [pc, #216]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d061      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d146      	bne.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <HAL_RCC_OscConfig+0x4cc>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7ff fb35 	bl	8002024 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7ff fb31 	bl	8002024 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e06d      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d0:	4b29      	ldr	r3, [pc, #164]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e4:	d108      	bne.n	80029f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029e6:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4921      	ldr	r1, [pc, #132]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a19      	ldr	r1, [r3, #32]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	491b      	ldr	r1, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7ff fb05 	bl	8002024 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7ff fb01 	bl	8002024 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e03d      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x46a>
 8002a3c:	e035      	b.n	8002aaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCC_OscConfig+0x4cc>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff faee 	bl	8002024 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7ff faea 	bl	8002024 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e026      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x498>
 8002a6a:	e01e      	b.n	8002aaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e019      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a84:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x500>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0d0      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d910      	bls.n	8002afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b67      	ldr	r3, [pc, #412]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4965      	ldr	r1, [pc, #404]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b63      	ldr	r3, [pc, #396]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0b8      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b14:	4b59      	ldr	r3, [pc, #356]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a58      	ldr	r2, [pc, #352]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b2c:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a52      	ldr	r2, [pc, #328]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b50      	ldr	r3, [pc, #320]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	494d      	ldr	r1, [pc, #308]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d040      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d115      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e07f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e073      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b3d      	ldr	r3, [pc, #244]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06b      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4936      	ldr	r1, [pc, #216]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7ff fa3c 	bl	8002024 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7ff fa38 	bl	8002024 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e053      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 020c 	and.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1eb      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d210      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	4922      	ldr	r1, [pc, #136]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e032      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4916      	ldr	r1, [pc, #88]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	490e      	ldr	r1, [pc, #56]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c46:	f000 f821 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	490a      	ldr	r1, [pc, #40]	@ (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	5ccb      	ldrb	r3, [r1, r3]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <HAL_RCC_ClockConfig+0x1cc>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <HAL_RCC_ClockConfig+0x1d0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f99a 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	080047c0 	.word	0x080047c0
 8002c84:	20000028 	.word	0x20000028
 8002c88:	2000002c 	.word	0x2000002c

08002c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x30>
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cba:	e027      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cbc:	4b19      	ldr	r3, [pc, #100]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cbe:	613b      	str	r3, [r7, #16]
      break;
 8002cc0:	e027      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0c9b      	lsrs	r3, r3, #18
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	4a17      	ldr	r2, [pc, #92]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0c5b      	lsrs	r3, r3, #17
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e004      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d00:	fb02 f303 	mul.w	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	613b      	str	r3, [r7, #16]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d12:	693b      	ldr	r3, [r7, #16]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	080047d8 	.word	0x080047d8
 8002d2c:	080047e8 	.word	0x080047e8
 8002d30:	003d0900 	.word	0x003d0900

08002d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d38:	4b02      	ldr	r3, [pc, #8]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000028 	.word	0x20000028

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff2 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	@ (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	080047d0 	.word	0x080047d0

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff ffde 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0adb      	lsrs	r3, r3, #11
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	080047d0 	.word	0x080047d0

08002d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <RCC_Delay+0x34>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <RCC_Delay+0x38>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002db4:	bf00      	nop
  }
  while (Delay --);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e5a      	subs	r2, r3, #1
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <RCC_Delay+0x1c>
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000028 	.word	0x20000028
 8002dd0:	10624dd3 	.word	0x10624dd3

08002dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e042      	b.n	8002e6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe ffcc 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	@ 0x24
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fa09 	bl	8003230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	@ 0x28
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d175      	bne.n	8002f80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_UART_Transmit+0x2c>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e06e      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2221      	movs	r2, #33	@ 0x21
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb2:	f7ff f8b7 	bl	8002024 <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ecc:	d108      	bne.n	8002ee0 <HAL_UART_Transmit+0x6c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e003      	b.n	8002ee8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee8:	e02e      	b.n	8002f48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2180      	movs	r1, #128	@ 0x80
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f8df 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e03a      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	3302      	adds	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e007      	b.n	8002f3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1cb      	bne.n	8002eea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2140      	movs	r1, #64	@ 0x40
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f8ab 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e006      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b08a      	sub	sp, #40	@ 0x28
 8002f8e:	af02      	add	r7, sp, #8
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	f040 8081 	bne.w	80030ae <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_UART_Receive+0x2e>
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e079      	b.n	80030b0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2222      	movs	r2, #34	@ 0x22
 8002fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd0:	f7ff f828 	bl	8002024 <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fea:	d108      	bne.n	8002ffe <HAL_UART_Receive+0x74>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e003      	b.n	8003006 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003006:	e047      	b.n	8003098 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	2120      	movs	r1, #32
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f850 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e042      	b.n	80030b0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10c      	bne.n	800304a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303c:	b29a      	uxth	r2, r3
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3302      	adds	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e01f      	b.n	800308a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003052:	d007      	beq.n	8003064 <HAL_UART_Receive+0xda>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <HAL_UART_Receive+0xe8>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e008      	b.n	8003084 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800307e:	b2da      	uxtb	r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3301      	adds	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1b2      	bne.n	8003008 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c8:	e03b      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d037      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d2:	f7fe ffa7 	bl	8002024 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e03a      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d023      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b80      	cmp	r3, #128	@ 0x80
 80030fe:	d020      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d01d      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b08      	cmp	r3, #8
 8003112:	d116      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f81d 	bl	800316a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2208      	movs	r2, #8
 8003134:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d0b4      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b095      	sub	sp, #84	@ 0x54
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003192:	643a      	str	r2, [r7, #64]	@ 0x40
 8003194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003198:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e5      	bne.n	80031a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d119      	bne.n	8003216 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f023 0310 	bic.w	r3, r3, #16
 80031f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003202:	61ba      	str	r2, [r7, #24]
 8003204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6979      	ldr	r1, [r7, #20]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	613b      	str	r3, [r7, #16]
   return(result);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003224:	bf00      	nop
 8003226:	3754      	adds	r7, #84	@ 0x54
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800326a:	f023 030c 	bic.w	r3, r3, #12
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	430b      	orrs	r3, r1
 8003276:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2c      	ldr	r2, [pc, #176]	@ (8003344 <UART_SetConfig+0x114>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d103      	bne.n	80032a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003298:	f7ff fd6a 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	e002      	b.n	80032a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7ff fd52 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 80032a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <UART_SetConfig+0x118>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	0119      	lsls	r1, r3, #4
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009a      	lsls	r2, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003348 <UART_SetConfig+0x118>)
 80032de:	fba3 0302 	umull	r0, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2064      	movs	r0, #100	@ 0x64
 80032e6:	fb00 f303 	mul.w	r3, r0, r3
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	3332      	adds	r3, #50	@ 0x32
 80032f0:	4a15      	ldr	r2, [pc, #84]	@ (8003348 <UART_SetConfig+0x118>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032fc:	4419      	add	r1, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009a      	lsls	r2, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fbb2 f2f3 	udiv	r2, r2, r3
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <UART_SetConfig+0x118>)
 8003316:	fba3 0302 	umull	r0, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2064      	movs	r0, #100	@ 0x64
 800331e:	fb00 f303 	mul.w	r3, r0, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	3332      	adds	r3, #50	@ 0x32
 8003328:	4a07      	ldr	r2, [pc, #28]	@ (8003348 <UART_SetConfig+0x118>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	f003 020f 	and.w	r2, r3, #15
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	440a      	add	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40013800 	.word	0x40013800
 8003348:	51eb851f 	.word	0x51eb851f

0800334c <std>:
 800334c:	2300      	movs	r3, #0
 800334e:	b510      	push	{r4, lr}
 8003350:	4604      	mov	r4, r0
 8003352:	e9c0 3300 	strd	r3, r3, [r0]
 8003356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800335a:	6083      	str	r3, [r0, #8]
 800335c:	8181      	strh	r1, [r0, #12]
 800335e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003360:	81c2      	strh	r2, [r0, #14]
 8003362:	6183      	str	r3, [r0, #24]
 8003364:	4619      	mov	r1, r3
 8003366:	2208      	movs	r2, #8
 8003368:	305c      	adds	r0, #92	@ 0x5c
 800336a:	f000 f9f9 	bl	8003760 <memset>
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <std+0x58>)
 8003370:	6224      	str	r4, [r4, #32]
 8003372:	6263      	str	r3, [r4, #36]	@ 0x24
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <std+0x5c>)
 8003376:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003378:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <std+0x60>)
 800337a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <std+0x64>)
 800337e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003380:	4b0c      	ldr	r3, [pc, #48]	@ (80033b4 <std+0x68>)
 8003382:	429c      	cmp	r4, r3
 8003384:	d006      	beq.n	8003394 <std+0x48>
 8003386:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800338a:	4294      	cmp	r4, r2
 800338c:	d002      	beq.n	8003394 <std+0x48>
 800338e:	33d0      	adds	r3, #208	@ 0xd0
 8003390:	429c      	cmp	r4, r3
 8003392:	d105      	bne.n	80033a0 <std+0x54>
 8003394:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f000 ba58 	b.w	8003850 <__retarget_lock_init_recursive>
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	bf00      	nop
 80033a4:	080035b1 	.word	0x080035b1
 80033a8:	080035d3 	.word	0x080035d3
 80033ac:	0800360b 	.word	0x0800360b
 80033b0:	0800362f 	.word	0x0800362f
 80033b4:	20000178 	.word	0x20000178

080033b8 <stdio_exit_handler>:
 80033b8:	4a02      	ldr	r2, [pc, #8]	@ (80033c4 <stdio_exit_handler+0xc>)
 80033ba:	4903      	ldr	r1, [pc, #12]	@ (80033c8 <stdio_exit_handler+0x10>)
 80033bc:	4803      	ldr	r0, [pc, #12]	@ (80033cc <stdio_exit_handler+0x14>)
 80033be:	f000 b869 	b.w	8003494 <_fwalk_sglue>
 80033c2:	bf00      	nop
 80033c4:	20000034 	.word	0x20000034
 80033c8:	08004101 	.word	0x08004101
 80033cc:	20000044 	.word	0x20000044

080033d0 <cleanup_stdio>:
 80033d0:	6841      	ldr	r1, [r0, #4]
 80033d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <cleanup_stdio+0x34>)
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4299      	cmp	r1, r3
 80033d8:	4604      	mov	r4, r0
 80033da:	d001      	beq.n	80033e0 <cleanup_stdio+0x10>
 80033dc:	f000 fe90 	bl	8004100 <_fflush_r>
 80033e0:	68a1      	ldr	r1, [r4, #8]
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <cleanup_stdio+0x38>)
 80033e4:	4299      	cmp	r1, r3
 80033e6:	d002      	beq.n	80033ee <cleanup_stdio+0x1e>
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 fe89 	bl	8004100 <_fflush_r>
 80033ee:	68e1      	ldr	r1, [r4, #12]
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <cleanup_stdio+0x3c>)
 80033f2:	4299      	cmp	r1, r3
 80033f4:	d004      	beq.n	8003400 <cleanup_stdio+0x30>
 80033f6:	4620      	mov	r0, r4
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fc:	f000 be80 	b.w	8004100 <_fflush_r>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	bf00      	nop
 8003404:	20000178 	.word	0x20000178
 8003408:	200001e0 	.word	0x200001e0
 800340c:	20000248 	.word	0x20000248

08003410 <global_stdio_init.part.0>:
 8003410:	b510      	push	{r4, lr}
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <global_stdio_init.part.0+0x30>)
 8003414:	4c0b      	ldr	r4, [pc, #44]	@ (8003444 <global_stdio_init.part.0+0x34>)
 8003416:	4a0c      	ldr	r2, [pc, #48]	@ (8003448 <global_stdio_init.part.0+0x38>)
 8003418:	4620      	mov	r0, r4
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	2104      	movs	r1, #4
 800341e:	2200      	movs	r2, #0
 8003420:	f7ff ff94 	bl	800334c <std>
 8003424:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003428:	2201      	movs	r2, #1
 800342a:	2109      	movs	r1, #9
 800342c:	f7ff ff8e 	bl	800334c <std>
 8003430:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003434:	2202      	movs	r2, #2
 8003436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800343a:	2112      	movs	r1, #18
 800343c:	f7ff bf86 	b.w	800334c <std>
 8003440:	200002b0 	.word	0x200002b0
 8003444:	20000178 	.word	0x20000178
 8003448:	080033b9 	.word	0x080033b9

0800344c <__sfp_lock_acquire>:
 800344c:	4801      	ldr	r0, [pc, #4]	@ (8003454 <__sfp_lock_acquire+0x8>)
 800344e:	f000 ba00 	b.w	8003852 <__retarget_lock_acquire_recursive>
 8003452:	bf00      	nop
 8003454:	200002b9 	.word	0x200002b9

08003458 <__sfp_lock_release>:
 8003458:	4801      	ldr	r0, [pc, #4]	@ (8003460 <__sfp_lock_release+0x8>)
 800345a:	f000 b9fb 	b.w	8003854 <__retarget_lock_release_recursive>
 800345e:	bf00      	nop
 8003460:	200002b9 	.word	0x200002b9

08003464 <__sinit>:
 8003464:	b510      	push	{r4, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	f7ff fff0 	bl	800344c <__sfp_lock_acquire>
 800346c:	6a23      	ldr	r3, [r4, #32]
 800346e:	b11b      	cbz	r3, 8003478 <__sinit+0x14>
 8003470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003474:	f7ff bff0 	b.w	8003458 <__sfp_lock_release>
 8003478:	4b04      	ldr	r3, [pc, #16]	@ (800348c <__sinit+0x28>)
 800347a:	6223      	str	r3, [r4, #32]
 800347c:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <__sinit+0x2c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f5      	bne.n	8003470 <__sinit+0xc>
 8003484:	f7ff ffc4 	bl	8003410 <global_stdio_init.part.0>
 8003488:	e7f2      	b.n	8003470 <__sinit+0xc>
 800348a:	bf00      	nop
 800348c:	080033d1 	.word	0x080033d1
 8003490:	200002b0 	.word	0x200002b0

08003494 <_fwalk_sglue>:
 8003494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003498:	4607      	mov	r7, r0
 800349a:	4688      	mov	r8, r1
 800349c:	4614      	mov	r4, r2
 800349e:	2600      	movs	r6, #0
 80034a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034a4:	f1b9 0901 	subs.w	r9, r9, #1
 80034a8:	d505      	bpl.n	80034b6 <_fwalk_sglue+0x22>
 80034aa:	6824      	ldr	r4, [r4, #0]
 80034ac:	2c00      	cmp	r4, #0
 80034ae:	d1f7      	bne.n	80034a0 <_fwalk_sglue+0xc>
 80034b0:	4630      	mov	r0, r6
 80034b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034b6:	89ab      	ldrh	r3, [r5, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d907      	bls.n	80034cc <_fwalk_sglue+0x38>
 80034bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034c0:	3301      	adds	r3, #1
 80034c2:	d003      	beq.n	80034cc <_fwalk_sglue+0x38>
 80034c4:	4629      	mov	r1, r5
 80034c6:	4638      	mov	r0, r7
 80034c8:	47c0      	blx	r8
 80034ca:	4306      	orrs	r6, r0
 80034cc:	3568      	adds	r5, #104	@ 0x68
 80034ce:	e7e9      	b.n	80034a4 <_fwalk_sglue+0x10>

080034d0 <iprintf>:
 80034d0:	b40f      	push	{r0, r1, r2, r3}
 80034d2:	b507      	push	{r0, r1, r2, lr}
 80034d4:	4906      	ldr	r1, [pc, #24]	@ (80034f0 <iprintf+0x20>)
 80034d6:	ab04      	add	r3, sp, #16
 80034d8:	6808      	ldr	r0, [r1, #0]
 80034da:	f853 2b04 	ldr.w	r2, [r3], #4
 80034de:	6881      	ldr	r1, [r0, #8]
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	f000 fae5 	bl	8003ab0 <_vfiprintf_r>
 80034e6:	b003      	add	sp, #12
 80034e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80034ec:	b004      	add	sp, #16
 80034ee:	4770      	bx	lr
 80034f0:	20000040 	.word	0x20000040

080034f4 <_puts_r>:
 80034f4:	6a03      	ldr	r3, [r0, #32]
 80034f6:	b570      	push	{r4, r5, r6, lr}
 80034f8:	4605      	mov	r5, r0
 80034fa:	460e      	mov	r6, r1
 80034fc:	6884      	ldr	r4, [r0, #8]
 80034fe:	b90b      	cbnz	r3, 8003504 <_puts_r+0x10>
 8003500:	f7ff ffb0 	bl	8003464 <__sinit>
 8003504:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003506:	07db      	lsls	r3, r3, #31
 8003508:	d405      	bmi.n	8003516 <_puts_r+0x22>
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	0598      	lsls	r0, r3, #22
 800350e:	d402      	bmi.n	8003516 <_puts_r+0x22>
 8003510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003512:	f000 f99e 	bl	8003852 <__retarget_lock_acquire_recursive>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	0719      	lsls	r1, r3, #28
 800351a:	d502      	bpl.n	8003522 <_puts_r+0x2e>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d135      	bne.n	800358e <_puts_r+0x9a>
 8003522:	4621      	mov	r1, r4
 8003524:	4628      	mov	r0, r5
 8003526:	f000 f8c5 	bl	80036b4 <__swsetup_r>
 800352a:	b380      	cbz	r0, 800358e <_puts_r+0x9a>
 800352c:	f04f 35ff 	mov.w	r5, #4294967295
 8003530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003532:	07da      	lsls	r2, r3, #31
 8003534:	d405      	bmi.n	8003542 <_puts_r+0x4e>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	059b      	lsls	r3, r3, #22
 800353a:	d402      	bmi.n	8003542 <_puts_r+0x4e>
 800353c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800353e:	f000 f989 	bl	8003854 <__retarget_lock_release_recursive>
 8003542:	4628      	mov	r0, r5
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	2b00      	cmp	r3, #0
 8003548:	da04      	bge.n	8003554 <_puts_r+0x60>
 800354a:	69a2      	ldr	r2, [r4, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	dc17      	bgt.n	8003580 <_puts_r+0x8c>
 8003550:	290a      	cmp	r1, #10
 8003552:	d015      	beq.n	8003580 <_puts_r+0x8c>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	6022      	str	r2, [r4, #0]
 800355a:	7019      	strb	r1, [r3, #0]
 800355c:	68a3      	ldr	r3, [r4, #8]
 800355e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003562:	3b01      	subs	r3, #1
 8003564:	60a3      	str	r3, [r4, #8]
 8003566:	2900      	cmp	r1, #0
 8003568:	d1ed      	bne.n	8003546 <_puts_r+0x52>
 800356a:	2b00      	cmp	r3, #0
 800356c:	da11      	bge.n	8003592 <_puts_r+0x9e>
 800356e:	4622      	mov	r2, r4
 8003570:	210a      	movs	r1, #10
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f85f 	bl	8003636 <__swbuf_r>
 8003578:	3001      	adds	r0, #1
 800357a:	d0d7      	beq.n	800352c <_puts_r+0x38>
 800357c:	250a      	movs	r5, #10
 800357e:	e7d7      	b.n	8003530 <_puts_r+0x3c>
 8003580:	4622      	mov	r2, r4
 8003582:	4628      	mov	r0, r5
 8003584:	f000 f857 	bl	8003636 <__swbuf_r>
 8003588:	3001      	adds	r0, #1
 800358a:	d1e7      	bne.n	800355c <_puts_r+0x68>
 800358c:	e7ce      	b.n	800352c <_puts_r+0x38>
 800358e:	3e01      	subs	r6, #1
 8003590:	e7e4      	b.n	800355c <_puts_r+0x68>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	6022      	str	r2, [r4, #0]
 8003598:	220a      	movs	r2, #10
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e7ee      	b.n	800357c <_puts_r+0x88>
	...

080035a0 <puts>:
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <puts+0xc>)
 80035a2:	4601      	mov	r1, r0
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	f7ff bfa5 	b.w	80034f4 <_puts_r>
 80035aa:	bf00      	nop
 80035ac:	20000040 	.word	0x20000040

080035b0 <__sread>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	460c      	mov	r4, r1
 80035b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b8:	f000 f8fc 	bl	80037b4 <_read_r>
 80035bc:	2800      	cmp	r0, #0
 80035be:	bfab      	itete	ge
 80035c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80035c2:	89a3      	ldrhlt	r3, [r4, #12]
 80035c4:	181b      	addge	r3, r3, r0
 80035c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80035ca:	bfac      	ite	ge
 80035cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035ce:	81a3      	strhlt	r3, [r4, #12]
 80035d0:	bd10      	pop	{r4, pc}

080035d2 <__swrite>:
 80035d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d6:	461f      	mov	r7, r3
 80035d8:	898b      	ldrh	r3, [r1, #12]
 80035da:	4605      	mov	r5, r0
 80035dc:	05db      	lsls	r3, r3, #23
 80035de:	460c      	mov	r4, r1
 80035e0:	4616      	mov	r6, r2
 80035e2:	d505      	bpl.n	80035f0 <__swrite+0x1e>
 80035e4:	2302      	movs	r3, #2
 80035e6:	2200      	movs	r2, #0
 80035e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ec:	f000 f8d0 	bl	8003790 <_lseek_r>
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	4632      	mov	r2, r6
 80035f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035f8:	81a3      	strh	r3, [r4, #12]
 80035fa:	4628      	mov	r0, r5
 80035fc:	463b      	mov	r3, r7
 80035fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003606:	f000 b8e7 	b.w	80037d8 <_write_r>

0800360a <__sseek>:
 800360a:	b510      	push	{r4, lr}
 800360c:	460c      	mov	r4, r1
 800360e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003612:	f000 f8bd 	bl	8003790 <_lseek_r>
 8003616:	1c43      	adds	r3, r0, #1
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	bf15      	itete	ne
 800361c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800361e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003626:	81a3      	strheq	r3, [r4, #12]
 8003628:	bf18      	it	ne
 800362a:	81a3      	strhne	r3, [r4, #12]
 800362c:	bd10      	pop	{r4, pc}

0800362e <__sclose>:
 800362e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003632:	f000 b89d 	b.w	8003770 <_close_r>

08003636 <__swbuf_r>:
 8003636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003638:	460e      	mov	r6, r1
 800363a:	4614      	mov	r4, r2
 800363c:	4605      	mov	r5, r0
 800363e:	b118      	cbz	r0, 8003648 <__swbuf_r+0x12>
 8003640:	6a03      	ldr	r3, [r0, #32]
 8003642:	b90b      	cbnz	r3, 8003648 <__swbuf_r+0x12>
 8003644:	f7ff ff0e 	bl	8003464 <__sinit>
 8003648:	69a3      	ldr	r3, [r4, #24]
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	071a      	lsls	r2, r3, #28
 8003650:	d501      	bpl.n	8003656 <__swbuf_r+0x20>
 8003652:	6923      	ldr	r3, [r4, #16]
 8003654:	b943      	cbnz	r3, 8003668 <__swbuf_r+0x32>
 8003656:	4621      	mov	r1, r4
 8003658:	4628      	mov	r0, r5
 800365a:	f000 f82b 	bl	80036b4 <__swsetup_r>
 800365e:	b118      	cbz	r0, 8003668 <__swbuf_r+0x32>
 8003660:	f04f 37ff 	mov.w	r7, #4294967295
 8003664:	4638      	mov	r0, r7
 8003666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	6922      	ldr	r2, [r4, #16]
 800366c:	b2f6      	uxtb	r6, r6
 800366e:	1a98      	subs	r0, r3, r2
 8003670:	6963      	ldr	r3, [r4, #20]
 8003672:	4637      	mov	r7, r6
 8003674:	4283      	cmp	r3, r0
 8003676:	dc05      	bgt.n	8003684 <__swbuf_r+0x4e>
 8003678:	4621      	mov	r1, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f000 fd40 	bl	8004100 <_fflush_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	d1ed      	bne.n	8003660 <__swbuf_r+0x2a>
 8003684:	68a3      	ldr	r3, [r4, #8]
 8003686:	3b01      	subs	r3, #1
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	6022      	str	r2, [r4, #0]
 8003690:	701e      	strb	r6, [r3, #0]
 8003692:	6962      	ldr	r2, [r4, #20]
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	429a      	cmp	r2, r3
 8003698:	d004      	beq.n	80036a4 <__swbuf_r+0x6e>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	07db      	lsls	r3, r3, #31
 800369e:	d5e1      	bpl.n	8003664 <__swbuf_r+0x2e>
 80036a0:	2e0a      	cmp	r6, #10
 80036a2:	d1df      	bne.n	8003664 <__swbuf_r+0x2e>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	f000 fd2a 	bl	8004100 <_fflush_r>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d0d9      	beq.n	8003664 <__swbuf_r+0x2e>
 80036b0:	e7d6      	b.n	8003660 <__swbuf_r+0x2a>
	...

080036b4 <__swsetup_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4b29      	ldr	r3, [pc, #164]	@ (800375c <__swsetup_r+0xa8>)
 80036b8:	4605      	mov	r5, r0
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	460c      	mov	r4, r1
 80036be:	b118      	cbz	r0, 80036c8 <__swsetup_r+0x14>
 80036c0:	6a03      	ldr	r3, [r0, #32]
 80036c2:	b90b      	cbnz	r3, 80036c8 <__swsetup_r+0x14>
 80036c4:	f7ff fece 	bl	8003464 <__sinit>
 80036c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036cc:	0719      	lsls	r1, r3, #28
 80036ce:	d422      	bmi.n	8003716 <__swsetup_r+0x62>
 80036d0:	06da      	lsls	r2, r3, #27
 80036d2:	d407      	bmi.n	80036e4 <__swsetup_r+0x30>
 80036d4:	2209      	movs	r2, #9
 80036d6:	602a      	str	r2, [r5, #0]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	e033      	b.n	800374c <__swsetup_r+0x98>
 80036e4:	0758      	lsls	r0, r3, #29
 80036e6:	d512      	bpl.n	800370e <__swsetup_r+0x5a>
 80036e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036ea:	b141      	cbz	r1, 80036fe <__swsetup_r+0x4a>
 80036ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036f0:	4299      	cmp	r1, r3
 80036f2:	d002      	beq.n	80036fa <__swsetup_r+0x46>
 80036f4:	4628      	mov	r0, r5
 80036f6:	f000 f8bd 	bl	8003874 <_free_r>
 80036fa:	2300      	movs	r3, #0
 80036fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	6063      	str	r3, [r4, #4]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	81a3      	strh	r3, [r4, #12]
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	b94b      	cbnz	r3, 800372e <__swsetup_r+0x7a>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003724:	d003      	beq.n	800372e <__swsetup_r+0x7a>
 8003726:	4621      	mov	r1, r4
 8003728:	4628      	mov	r0, r5
 800372a:	f000 fd36 	bl	800419a <__smakebuf_r>
 800372e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003732:	f013 0201 	ands.w	r2, r3, #1
 8003736:	d00a      	beq.n	800374e <__swsetup_r+0x9a>
 8003738:	2200      	movs	r2, #0
 800373a:	60a2      	str	r2, [r4, #8]
 800373c:	6962      	ldr	r2, [r4, #20]
 800373e:	4252      	negs	r2, r2
 8003740:	61a2      	str	r2, [r4, #24]
 8003742:	6922      	ldr	r2, [r4, #16]
 8003744:	b942      	cbnz	r2, 8003758 <__swsetup_r+0xa4>
 8003746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800374a:	d1c5      	bne.n	80036d8 <__swsetup_r+0x24>
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	0799      	lsls	r1, r3, #30
 8003750:	bf58      	it	pl
 8003752:	6962      	ldrpl	r2, [r4, #20]
 8003754:	60a2      	str	r2, [r4, #8]
 8003756:	e7f4      	b.n	8003742 <__swsetup_r+0x8e>
 8003758:	2000      	movs	r0, #0
 800375a:	e7f7      	b.n	800374c <__swsetup_r+0x98>
 800375c:	20000040 	.word	0x20000040

08003760 <memset>:
 8003760:	4603      	mov	r3, r0
 8003762:	4402      	add	r2, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <_close_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	2300      	movs	r3, #0
 8003774:	4d05      	ldr	r5, [pc, #20]	@ (800378c <_close_r+0x1c>)
 8003776:	4604      	mov	r4, r0
 8003778:	4608      	mov	r0, r1
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	f7fe fa75 	bl	8001c6a <_close>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	d102      	bne.n	800378a <_close_r+0x1a>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	b103      	cbz	r3, 800378a <_close_r+0x1a>
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	bd38      	pop	{r3, r4, r5, pc}
 800378c:	200002b4 	.word	0x200002b4

08003790 <_lseek_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	2200      	movs	r2, #0
 800379a:	4d05      	ldr	r5, [pc, #20]	@ (80037b0 <_lseek_r+0x20>)
 800379c:	602a      	str	r2, [r5, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7fe fa87 	bl	8001cb2 <_lseek>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d102      	bne.n	80037ae <_lseek_r+0x1e>
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	b103      	cbz	r3, 80037ae <_lseek_r+0x1e>
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	200002b4 	.word	0x200002b4

080037b4 <_read_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4604      	mov	r4, r0
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	2200      	movs	r2, #0
 80037be:	4d05      	ldr	r5, [pc, #20]	@ (80037d4 <_read_r+0x20>)
 80037c0:	602a      	str	r2, [r5, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f7fe fa34 	bl	8001c30 <_read>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_read_r+0x1e>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_read_r+0x1e>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	200002b4 	.word	0x200002b4

080037d8 <_write_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4604      	mov	r4, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	2200      	movs	r2, #0
 80037e2:	4d05      	ldr	r5, [pc, #20]	@ (80037f8 <_write_r+0x20>)
 80037e4:	602a      	str	r2, [r5, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f7fe fb88 	bl	8001efc <_write>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_write_r+0x1e>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_write_r+0x1e>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	200002b4 	.word	0x200002b4

080037fc <__errno>:
 80037fc:	4b01      	ldr	r3, [pc, #4]	@ (8003804 <__errno+0x8>)
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000040 	.word	0x20000040

08003808 <__libc_init_array>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	2600      	movs	r6, #0
 800380c:	4d0c      	ldr	r5, [pc, #48]	@ (8003840 <__libc_init_array+0x38>)
 800380e:	4c0d      	ldr	r4, [pc, #52]	@ (8003844 <__libc_init_array+0x3c>)
 8003810:	1b64      	subs	r4, r4, r5
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	42a6      	cmp	r6, r4
 8003816:	d109      	bne.n	800382c <__libc_init_array+0x24>
 8003818:	f000 fd3c 	bl	8004294 <_init>
 800381c:	2600      	movs	r6, #0
 800381e:	4d0a      	ldr	r5, [pc, #40]	@ (8003848 <__libc_init_array+0x40>)
 8003820:	4c0a      	ldr	r4, [pc, #40]	@ (800384c <__libc_init_array+0x44>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	42a6      	cmp	r6, r4
 8003828:	d105      	bne.n	8003836 <__libc_init_array+0x2e>
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003830:	4798      	blx	r3
 8003832:	3601      	adds	r6, #1
 8003834:	e7ee      	b.n	8003814 <__libc_init_array+0xc>
 8003836:	f855 3b04 	ldr.w	r3, [r5], #4
 800383a:	4798      	blx	r3
 800383c:	3601      	adds	r6, #1
 800383e:	e7f2      	b.n	8003826 <__libc_init_array+0x1e>
 8003840:	08004820 	.word	0x08004820
 8003844:	08004820 	.word	0x08004820
 8003848:	08004820 	.word	0x08004820
 800384c:	08004824 	.word	0x08004824

08003850 <__retarget_lock_init_recursive>:
 8003850:	4770      	bx	lr

08003852 <__retarget_lock_acquire_recursive>:
 8003852:	4770      	bx	lr

08003854 <__retarget_lock_release_recursive>:
 8003854:	4770      	bx	lr

08003856 <memcpy>:
 8003856:	440a      	add	r2, r1
 8003858:	4291      	cmp	r1, r2
 800385a:	f100 33ff 	add.w	r3, r0, #4294967295
 800385e:	d100      	bne.n	8003862 <memcpy+0xc>
 8003860:	4770      	bx	lr
 8003862:	b510      	push	{r4, lr}
 8003864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003868:	4291      	cmp	r1, r2
 800386a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800386e:	d1f9      	bne.n	8003864 <memcpy+0xe>
 8003870:	bd10      	pop	{r4, pc}
	...

08003874 <_free_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4605      	mov	r5, r0
 8003878:	2900      	cmp	r1, #0
 800387a:	d040      	beq.n	80038fe <_free_r+0x8a>
 800387c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003880:	1f0c      	subs	r4, r1, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfb8      	it	lt
 8003886:	18e4      	addlt	r4, r4, r3
 8003888:	f000 f8de 	bl	8003a48 <__malloc_lock>
 800388c:	4a1c      	ldr	r2, [pc, #112]	@ (8003900 <_free_r+0x8c>)
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x2c>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	4628      	mov	r0, r5
 8003898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800389c:	f000 b8da 	b.w	8003a54 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x42>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x1e>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x4c>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x42>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1850      	adds	r0, r2, r1
 80038c4:	42a0      	cmp	r0, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x6c>
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	4401      	add	r1, r0
 80038cc:	1850      	adds	r0, r2, r1
 80038ce:	4283      	cmp	r3, r0
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x22>
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4408      	add	r0, r1
 80038da:	6010      	str	r0, [r2, #0]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	e7da      	b.n	8003896 <_free_r+0x22>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x74>
 80038e2:	230c      	movs	r3, #12
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x22>
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	1821      	adds	r1, r4, r0
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf01      	itttt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	1809      	addeq	r1, r1, r0
 80038f6:	6021      	streq	r1, [r4, #0]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	6054      	str	r4, [r2, #4]
 80038fc:	e7cb      	b.n	8003896 <_free_r+0x22>
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	200002c0 	.word	0x200002c0

08003904 <sbrk_aligned>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4e0f      	ldr	r6, [pc, #60]	@ (8003944 <sbrk_aligned+0x40>)
 8003908:	460c      	mov	r4, r1
 800390a:	6831      	ldr	r1, [r6, #0]
 800390c:	4605      	mov	r5, r0
 800390e:	b911      	cbnz	r1, 8003916 <sbrk_aligned+0x12>
 8003910:	f000 fca2 	bl	8004258 <_sbrk_r>
 8003914:	6030      	str	r0, [r6, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 fc9d 	bl	8004258 <_sbrk_r>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d103      	bne.n	800392a <sbrk_aligned+0x26>
 8003922:	f04f 34ff 	mov.w	r4, #4294967295
 8003926:	4620      	mov	r0, r4
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	1cc4      	adds	r4, r0, #3
 800392c:	f024 0403 	bic.w	r4, r4, #3
 8003930:	42a0      	cmp	r0, r4
 8003932:	d0f8      	beq.n	8003926 <sbrk_aligned+0x22>
 8003934:	1a21      	subs	r1, r4, r0
 8003936:	4628      	mov	r0, r5
 8003938:	f000 fc8e 	bl	8004258 <_sbrk_r>
 800393c:	3001      	adds	r0, #1
 800393e:	d1f2      	bne.n	8003926 <sbrk_aligned+0x22>
 8003940:	e7ef      	b.n	8003922 <sbrk_aligned+0x1e>
 8003942:	bf00      	nop
 8003944:	200002bc 	.word	0x200002bc

08003948 <_malloc_r>:
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394c:	1ccd      	adds	r5, r1, #3
 800394e:	f025 0503 	bic.w	r5, r5, #3
 8003952:	3508      	adds	r5, #8
 8003954:	2d0c      	cmp	r5, #12
 8003956:	bf38      	it	cc
 8003958:	250c      	movcc	r5, #12
 800395a:	2d00      	cmp	r5, #0
 800395c:	4606      	mov	r6, r0
 800395e:	db01      	blt.n	8003964 <_malloc_r+0x1c>
 8003960:	42a9      	cmp	r1, r5
 8003962:	d904      	bls.n	800396e <_malloc_r+0x26>
 8003964:	230c      	movs	r3, #12
 8003966:	6033      	str	r3, [r6, #0]
 8003968:	2000      	movs	r0, #0
 800396a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800396e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a44 <_malloc_r+0xfc>
 8003972:	f000 f869 	bl	8003a48 <__malloc_lock>
 8003976:	f8d8 3000 	ldr.w	r3, [r8]
 800397a:	461c      	mov	r4, r3
 800397c:	bb44      	cbnz	r4, 80039d0 <_malloc_r+0x88>
 800397e:	4629      	mov	r1, r5
 8003980:	4630      	mov	r0, r6
 8003982:	f7ff ffbf 	bl	8003904 <sbrk_aligned>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	4604      	mov	r4, r0
 800398a:	d158      	bne.n	8003a3e <_malloc_r+0xf6>
 800398c:	f8d8 4000 	ldr.w	r4, [r8]
 8003990:	4627      	mov	r7, r4
 8003992:	2f00      	cmp	r7, #0
 8003994:	d143      	bne.n	8003a1e <_malloc_r+0xd6>
 8003996:	2c00      	cmp	r4, #0
 8003998:	d04b      	beq.n	8003a32 <_malloc_r+0xea>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4639      	mov	r1, r7
 800399e:	4630      	mov	r0, r6
 80039a0:	eb04 0903 	add.w	r9, r4, r3
 80039a4:	f000 fc58 	bl	8004258 <_sbrk_r>
 80039a8:	4581      	cmp	r9, r0
 80039aa:	d142      	bne.n	8003a32 <_malloc_r+0xea>
 80039ac:	6821      	ldr	r1, [r4, #0]
 80039ae:	4630      	mov	r0, r6
 80039b0:	1a6d      	subs	r5, r5, r1
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7ff ffa6 	bl	8003904 <sbrk_aligned>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d03a      	beq.n	8003a32 <_malloc_r+0xea>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	442b      	add	r3, r5
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	f8d8 3000 	ldr.w	r3, [r8]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	bb62      	cbnz	r2, 8003a24 <_malloc_r+0xdc>
 80039ca:	f8c8 7000 	str.w	r7, [r8]
 80039ce:	e00f      	b.n	80039f0 <_malloc_r+0xa8>
 80039d0:	6822      	ldr	r2, [r4, #0]
 80039d2:	1b52      	subs	r2, r2, r5
 80039d4:	d420      	bmi.n	8003a18 <_malloc_r+0xd0>
 80039d6:	2a0b      	cmp	r2, #11
 80039d8:	d917      	bls.n	8003a0a <_malloc_r+0xc2>
 80039da:	1961      	adds	r1, r4, r5
 80039dc:	42a3      	cmp	r3, r4
 80039de:	6025      	str	r5, [r4, #0]
 80039e0:	bf18      	it	ne
 80039e2:	6059      	strne	r1, [r3, #4]
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	bf08      	it	eq
 80039e8:	f8c8 1000 	streq.w	r1, [r8]
 80039ec:	5162      	str	r2, [r4, r5]
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	4630      	mov	r0, r6
 80039f2:	f000 f82f 	bl	8003a54 <__malloc_unlock>
 80039f6:	f104 000b 	add.w	r0, r4, #11
 80039fa:	1d23      	adds	r3, r4, #4
 80039fc:	f020 0007 	bic.w	r0, r0, #7
 8003a00:	1ac2      	subs	r2, r0, r3
 8003a02:	bf1c      	itt	ne
 8003a04:	1a1b      	subne	r3, r3, r0
 8003a06:	50a3      	strne	r3, [r4, r2]
 8003a08:	e7af      	b.n	800396a <_malloc_r+0x22>
 8003a0a:	6862      	ldr	r2, [r4, #4]
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	bf0c      	ite	eq
 8003a10:	f8c8 2000 	streq.w	r2, [r8]
 8003a14:	605a      	strne	r2, [r3, #4]
 8003a16:	e7eb      	b.n	80039f0 <_malloc_r+0xa8>
 8003a18:	4623      	mov	r3, r4
 8003a1a:	6864      	ldr	r4, [r4, #4]
 8003a1c:	e7ae      	b.n	800397c <_malloc_r+0x34>
 8003a1e:	463c      	mov	r4, r7
 8003a20:	687f      	ldr	r7, [r7, #4]
 8003a22:	e7b6      	b.n	8003992 <_malloc_r+0x4a>
 8003a24:	461a      	mov	r2, r3
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	d1fb      	bne.n	8003a24 <_malloc_r+0xdc>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6053      	str	r3, [r2, #4]
 8003a30:	e7de      	b.n	80039f0 <_malloc_r+0xa8>
 8003a32:	230c      	movs	r3, #12
 8003a34:	4630      	mov	r0, r6
 8003a36:	6033      	str	r3, [r6, #0]
 8003a38:	f000 f80c 	bl	8003a54 <__malloc_unlock>
 8003a3c:	e794      	b.n	8003968 <_malloc_r+0x20>
 8003a3e:	6005      	str	r5, [r0, #0]
 8003a40:	e7d6      	b.n	80039f0 <_malloc_r+0xa8>
 8003a42:	bf00      	nop
 8003a44:	200002c0 	.word	0x200002c0

08003a48 <__malloc_lock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	@ (8003a50 <__malloc_lock+0x8>)
 8003a4a:	f7ff bf02 	b.w	8003852 <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	200002b8 	.word	0x200002b8

08003a54 <__malloc_unlock>:
 8003a54:	4801      	ldr	r0, [pc, #4]	@ (8003a5c <__malloc_unlock+0x8>)
 8003a56:	f7ff befd 	b.w	8003854 <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	200002b8 	.word	0x200002b8

08003a60 <__sfputc_r>:
 8003a60:	6893      	ldr	r3, [r2, #8]
 8003a62:	b410      	push	{r4}
 8003a64:	3b01      	subs	r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	da07      	bge.n	8003a7c <__sfputc_r+0x1c>
 8003a6c:	6994      	ldr	r4, [r2, #24]
 8003a6e:	42a3      	cmp	r3, r4
 8003a70:	db01      	blt.n	8003a76 <__sfputc_r+0x16>
 8003a72:	290a      	cmp	r1, #10
 8003a74:	d102      	bne.n	8003a7c <__sfputc_r+0x1c>
 8003a76:	bc10      	pop	{r4}
 8003a78:	f7ff bddd 	b.w	8003636 <__swbuf_r>
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	1c58      	adds	r0, r3, #1
 8003a80:	6010      	str	r0, [r2, #0]
 8003a82:	7019      	strb	r1, [r3, #0]
 8003a84:	4608      	mov	r0, r1
 8003a86:	bc10      	pop	{r4}
 8003a88:	4770      	bx	lr

08003a8a <__sfputs_r>:
 8003a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	460f      	mov	r7, r1
 8003a90:	4614      	mov	r4, r2
 8003a92:	18d5      	adds	r5, r2, r3
 8003a94:	42ac      	cmp	r4, r5
 8003a96:	d101      	bne.n	8003a9c <__sfputs_r+0x12>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	e007      	b.n	8003aac <__sfputs_r+0x22>
 8003a9c:	463a      	mov	r2, r7
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa4:	f7ff ffdc 	bl	8003a60 <__sfputc_r>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d1f3      	bne.n	8003a94 <__sfputs_r+0xa>
 8003aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ab0 <_vfiprintf_r>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	4614      	mov	r4, r2
 8003ab8:	4698      	mov	r8, r3
 8003aba:	4606      	mov	r6, r0
 8003abc:	b09d      	sub	sp, #116	@ 0x74
 8003abe:	b118      	cbz	r0, 8003ac8 <_vfiprintf_r+0x18>
 8003ac0:	6a03      	ldr	r3, [r0, #32]
 8003ac2:	b90b      	cbnz	r3, 8003ac8 <_vfiprintf_r+0x18>
 8003ac4:	f7ff fcce 	bl	8003464 <__sinit>
 8003ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003aca:	07d9      	lsls	r1, r3, #31
 8003acc:	d405      	bmi.n	8003ada <_vfiprintf_r+0x2a>
 8003ace:	89ab      	ldrh	r3, [r5, #12]
 8003ad0:	059a      	lsls	r2, r3, #22
 8003ad2:	d402      	bmi.n	8003ada <_vfiprintf_r+0x2a>
 8003ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ad6:	f7ff febc 	bl	8003852 <__retarget_lock_acquire_recursive>
 8003ada:	89ab      	ldrh	r3, [r5, #12]
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	d501      	bpl.n	8003ae4 <_vfiprintf_r+0x34>
 8003ae0:	692b      	ldr	r3, [r5, #16]
 8003ae2:	b99b      	cbnz	r3, 8003b0c <_vfiprintf_r+0x5c>
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f7ff fde4 	bl	80036b4 <__swsetup_r>
 8003aec:	b170      	cbz	r0, 8003b0c <_vfiprintf_r+0x5c>
 8003aee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003af0:	07dc      	lsls	r4, r3, #31
 8003af2:	d504      	bpl.n	8003afe <_vfiprintf_r+0x4e>
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	b01d      	add	sp, #116	@ 0x74
 8003afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afe:	89ab      	ldrh	r3, [r5, #12]
 8003b00:	0598      	lsls	r0, r3, #22
 8003b02:	d4f7      	bmi.n	8003af4 <_vfiprintf_r+0x44>
 8003b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b06:	f7ff fea5 	bl	8003854 <__retarget_lock_release_recursive>
 8003b0a:	e7f3      	b.n	8003af4 <_vfiprintf_r+0x44>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b10:	2320      	movs	r3, #32
 8003b12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b16:	2330      	movs	r3, #48	@ 0x30
 8003b18:	f04f 0901 	mov.w	r9, #1
 8003b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b20:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003ccc <_vfiprintf_r+0x21c>
 8003b24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b28:	4623      	mov	r3, r4
 8003b2a:	469a      	mov	sl, r3
 8003b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b30:	b10a      	cbz	r2, 8003b36 <_vfiprintf_r+0x86>
 8003b32:	2a25      	cmp	r2, #37	@ 0x25
 8003b34:	d1f9      	bne.n	8003b2a <_vfiprintf_r+0x7a>
 8003b36:	ebba 0b04 	subs.w	fp, sl, r4
 8003b3a:	d00b      	beq.n	8003b54 <_vfiprintf_r+0xa4>
 8003b3c:	465b      	mov	r3, fp
 8003b3e:	4622      	mov	r2, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	4630      	mov	r0, r6
 8003b44:	f7ff ffa1 	bl	8003a8a <__sfputs_r>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	f000 80a7 	beq.w	8003c9c <_vfiprintf_r+0x1ec>
 8003b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b50:	445a      	add	r2, fp
 8003b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b54:	f89a 3000 	ldrb.w	r3, [sl]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 809f 	beq.w	8003c9c <_vfiprintf_r+0x1ec>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b68:	f10a 0a01 	add.w	sl, sl, #1
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	9307      	str	r3, [sp, #28]
 8003b70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b74:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b76:	4654      	mov	r4, sl
 8003b78:	2205      	movs	r2, #5
 8003b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7e:	4853      	ldr	r0, [pc, #332]	@ (8003ccc <_vfiprintf_r+0x21c>)
 8003b80:	f000 fb7a 	bl	8004278 <memchr>
 8003b84:	9a04      	ldr	r2, [sp, #16]
 8003b86:	b9d8      	cbnz	r0, 8003bc0 <_vfiprintf_r+0x110>
 8003b88:	06d1      	lsls	r1, r2, #27
 8003b8a:	bf44      	itt	mi
 8003b8c:	2320      	movmi	r3, #32
 8003b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b92:	0713      	lsls	r3, r2, #28
 8003b94:	bf44      	itt	mi
 8003b96:	232b      	movmi	r3, #43	@ 0x2b
 8003b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba2:	d015      	beq.n	8003bd0 <_vfiprintf_r+0x120>
 8003ba4:	4654      	mov	r4, sl
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f04f 0c0a 	mov.w	ip, #10
 8003bac:	9a07      	ldr	r2, [sp, #28]
 8003bae:	4621      	mov	r1, r4
 8003bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb4:	3b30      	subs	r3, #48	@ 0x30
 8003bb6:	2b09      	cmp	r3, #9
 8003bb8:	d94b      	bls.n	8003c52 <_vfiprintf_r+0x1a2>
 8003bba:	b1b0      	cbz	r0, 8003bea <_vfiprintf_r+0x13a>
 8003bbc:	9207      	str	r2, [sp, #28]
 8003bbe:	e014      	b.n	8003bea <_vfiprintf_r+0x13a>
 8003bc0:	eba0 0308 	sub.w	r3, r0, r8
 8003bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	46a2      	mov	sl, r4
 8003bcc:	9304      	str	r3, [sp, #16]
 8003bce:	e7d2      	b.n	8003b76 <_vfiprintf_r+0xc6>
 8003bd0:	9b03      	ldr	r3, [sp, #12]
 8003bd2:	1d19      	adds	r1, r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	9103      	str	r1, [sp, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bfbb      	ittet	lt
 8003bdc:	425b      	neglt	r3, r3
 8003bde:	f042 0202 	orrlt.w	r2, r2, #2
 8003be2:	9307      	strge	r3, [sp, #28]
 8003be4:	9307      	strlt	r3, [sp, #28]
 8003be6:	bfb8      	it	lt
 8003be8:	9204      	strlt	r2, [sp, #16]
 8003bea:	7823      	ldrb	r3, [r4, #0]
 8003bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bee:	d10a      	bne.n	8003c06 <_vfiprintf_r+0x156>
 8003bf0:	7863      	ldrb	r3, [r4, #1]
 8003bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf4:	d132      	bne.n	8003c5c <_vfiprintf_r+0x1ac>
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	3402      	adds	r4, #2
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	9203      	str	r2, [sp, #12]
 8003c00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c04:	9305      	str	r3, [sp, #20]
 8003c06:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003cd0 <_vfiprintf_r+0x220>
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	4650      	mov	r0, sl
 8003c0e:	7821      	ldrb	r1, [r4, #0]
 8003c10:	f000 fb32 	bl	8004278 <memchr>
 8003c14:	b138      	cbz	r0, 8003c26 <_vfiprintf_r+0x176>
 8003c16:	2240      	movs	r2, #64	@ 0x40
 8003c18:	9b04      	ldr	r3, [sp, #16]
 8003c1a:	eba0 000a 	sub.w	r0, r0, sl
 8003c1e:	4082      	lsls	r2, r0
 8003c20:	4313      	orrs	r3, r2
 8003c22:	3401      	adds	r4, #1
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2a:	2206      	movs	r2, #6
 8003c2c:	4829      	ldr	r0, [pc, #164]	@ (8003cd4 <_vfiprintf_r+0x224>)
 8003c2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c32:	f000 fb21 	bl	8004278 <memchr>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d03f      	beq.n	8003cba <_vfiprintf_r+0x20a>
 8003c3a:	4b27      	ldr	r3, [pc, #156]	@ (8003cd8 <_vfiprintf_r+0x228>)
 8003c3c:	bb1b      	cbnz	r3, 8003c86 <_vfiprintf_r+0x1d6>
 8003c3e:	9b03      	ldr	r3, [sp, #12]
 8003c40:	3307      	adds	r3, #7
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	3308      	adds	r3, #8
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c4c:	443b      	add	r3, r7
 8003c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c50:	e76a      	b.n	8003b28 <_vfiprintf_r+0x78>
 8003c52:	460c      	mov	r4, r1
 8003c54:	2001      	movs	r0, #1
 8003c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c5a:	e7a8      	b.n	8003bae <_vfiprintf_r+0xfe>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f04f 0c0a 	mov.w	ip, #10
 8003c62:	4619      	mov	r1, r3
 8003c64:	3401      	adds	r4, #1
 8003c66:	9305      	str	r3, [sp, #20]
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c6e:	3a30      	subs	r2, #48	@ 0x30
 8003c70:	2a09      	cmp	r2, #9
 8003c72:	d903      	bls.n	8003c7c <_vfiprintf_r+0x1cc>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0c6      	beq.n	8003c06 <_vfiprintf_r+0x156>
 8003c78:	9105      	str	r1, [sp, #20]
 8003c7a:	e7c4      	b.n	8003c06 <_vfiprintf_r+0x156>
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	2301      	movs	r3, #1
 8003c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c84:	e7f0      	b.n	8003c68 <_vfiprintf_r+0x1b8>
 8003c86:	ab03      	add	r3, sp, #12
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	462a      	mov	r2, r5
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	4b13      	ldr	r3, [pc, #76]	@ (8003cdc <_vfiprintf_r+0x22c>)
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	f3af 8000 	nop.w
 8003c96:	4607      	mov	r7, r0
 8003c98:	1c78      	adds	r0, r7, #1
 8003c9a:	d1d6      	bne.n	8003c4a <_vfiprintf_r+0x19a>
 8003c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c9e:	07d9      	lsls	r1, r3, #31
 8003ca0:	d405      	bmi.n	8003cae <_vfiprintf_r+0x1fe>
 8003ca2:	89ab      	ldrh	r3, [r5, #12]
 8003ca4:	059a      	lsls	r2, r3, #22
 8003ca6:	d402      	bmi.n	8003cae <_vfiprintf_r+0x1fe>
 8003ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003caa:	f7ff fdd3 	bl	8003854 <__retarget_lock_release_recursive>
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	065b      	lsls	r3, r3, #25
 8003cb2:	f53f af1f 	bmi.w	8003af4 <_vfiprintf_r+0x44>
 8003cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cb8:	e71e      	b.n	8003af8 <_vfiprintf_r+0x48>
 8003cba:	ab03      	add	r3, sp, #12
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	462a      	mov	r2, r5
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <_vfiprintf_r+0x22c>)
 8003cc4:	a904      	add	r1, sp, #16
 8003cc6:	f000 f87d 	bl	8003dc4 <_printf_i>
 8003cca:	e7e4      	b.n	8003c96 <_vfiprintf_r+0x1e6>
 8003ccc:	080047ea 	.word	0x080047ea
 8003cd0:	080047f0 	.word	0x080047f0
 8003cd4:	080047f4 	.word	0x080047f4
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	08003a8b 	.word	0x08003a8b

08003ce0 <_printf_common>:
 8003ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	4698      	mov	r8, r3
 8003ce8:	688a      	ldr	r2, [r1, #8]
 8003cea:	690b      	ldr	r3, [r1, #16]
 8003cec:	4607      	mov	r7, r0
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	bfb8      	it	lt
 8003cf2:	4613      	movlt	r3, r2
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d00:	b10a      	cbz	r2, 8003d06 <_printf_common+0x26>
 8003d02:	3301      	adds	r3, #1
 8003d04:	6033      	str	r3, [r6, #0]
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	0699      	lsls	r1, r3, #26
 8003d0a:	bf42      	ittt	mi
 8003d0c:	6833      	ldrmi	r3, [r6, #0]
 8003d0e:	3302      	addmi	r3, #2
 8003d10:	6033      	strmi	r3, [r6, #0]
 8003d12:	6825      	ldr	r5, [r4, #0]
 8003d14:	f015 0506 	ands.w	r5, r5, #6
 8003d18:	d106      	bne.n	8003d28 <_printf_common+0x48>
 8003d1a:	f104 0a19 	add.w	sl, r4, #25
 8003d1e:	68e3      	ldr	r3, [r4, #12]
 8003d20:	6832      	ldr	r2, [r6, #0]
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	42ab      	cmp	r3, r5
 8003d26:	dc2b      	bgt.n	8003d80 <_printf_common+0xa0>
 8003d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	3b00      	subs	r3, #0
 8003d30:	bf18      	it	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	0692      	lsls	r2, r2, #26
 8003d36:	d430      	bmi.n	8003d9a <_printf_common+0xba>
 8003d38:	4641      	mov	r1, r8
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d40:	47c8      	blx	r9
 8003d42:	3001      	adds	r0, #1
 8003d44:	d023      	beq.n	8003d8e <_printf_common+0xae>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	f003 0306 	and.w	r3, r3, #6
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	bf14      	ite	ne
 8003d52:	2500      	movne	r5, #0
 8003d54:	6833      	ldreq	r3, [r6, #0]
 8003d56:	f04f 0600 	mov.w	r6, #0
 8003d5a:	bf08      	it	eq
 8003d5c:	68e5      	ldreq	r5, [r4, #12]
 8003d5e:	f104 041a 	add.w	r4, r4, #26
 8003d62:	bf08      	it	eq
 8003d64:	1aed      	subeq	r5, r5, r3
 8003d66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d6a:	bf08      	it	eq
 8003d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bfc4      	itt	gt
 8003d74:	1a9b      	subgt	r3, r3, r2
 8003d76:	18ed      	addgt	r5, r5, r3
 8003d78:	42b5      	cmp	r5, r6
 8003d7a:	d11a      	bne.n	8003db2 <_printf_common+0xd2>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e008      	b.n	8003d92 <_printf_common+0xb2>
 8003d80:	2301      	movs	r3, #1
 8003d82:	4652      	mov	r2, sl
 8003d84:	4641      	mov	r1, r8
 8003d86:	4638      	mov	r0, r7
 8003d88:	47c8      	blx	r9
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d103      	bne.n	8003d96 <_printf_common+0xb6>
 8003d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d96:	3501      	adds	r5, #1
 8003d98:	e7c1      	b.n	8003d1e <_printf_common+0x3e>
 8003d9a:	2030      	movs	r0, #48	@ 0x30
 8003d9c:	18e1      	adds	r1, r4, r3
 8003d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003da8:	4422      	add	r2, r4
 8003daa:	3302      	adds	r3, #2
 8003dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003db0:	e7c2      	b.n	8003d38 <_printf_common+0x58>
 8003db2:	2301      	movs	r3, #1
 8003db4:	4622      	mov	r2, r4
 8003db6:	4641      	mov	r1, r8
 8003db8:	4638      	mov	r0, r7
 8003dba:	47c8      	blx	r9
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d0e6      	beq.n	8003d8e <_printf_common+0xae>
 8003dc0:	3601      	adds	r6, #1
 8003dc2:	e7d9      	b.n	8003d78 <_printf_common+0x98>

08003dc4 <_printf_i>:
 8003dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	7e0f      	ldrb	r7, [r1, #24]
 8003dca:	4691      	mov	r9, r2
 8003dcc:	2f78      	cmp	r7, #120	@ 0x78
 8003dce:	4680      	mov	r8, r0
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	469a      	mov	sl, r3
 8003dd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dda:	d807      	bhi.n	8003dec <_printf_i+0x28>
 8003ddc:	2f62      	cmp	r7, #98	@ 0x62
 8003dde:	d80a      	bhi.n	8003df6 <_printf_i+0x32>
 8003de0:	2f00      	cmp	r7, #0
 8003de2:	f000 80d1 	beq.w	8003f88 <_printf_i+0x1c4>
 8003de6:	2f58      	cmp	r7, #88	@ 0x58
 8003de8:	f000 80b8 	beq.w	8003f5c <_printf_i+0x198>
 8003dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003df4:	e03a      	b.n	8003e6c <_printf_i+0xa8>
 8003df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dfa:	2b15      	cmp	r3, #21
 8003dfc:	d8f6      	bhi.n	8003dec <_printf_i+0x28>
 8003dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8003e04 <_printf_i+0x40>)
 8003e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e04:	08003e5d 	.word	0x08003e5d
 8003e08:	08003e71 	.word	0x08003e71
 8003e0c:	08003ded 	.word	0x08003ded
 8003e10:	08003ded 	.word	0x08003ded
 8003e14:	08003ded 	.word	0x08003ded
 8003e18:	08003ded 	.word	0x08003ded
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003ded 	.word	0x08003ded
 8003e24:	08003ded 	.word	0x08003ded
 8003e28:	08003ded 	.word	0x08003ded
 8003e2c:	08003ded 	.word	0x08003ded
 8003e30:	08003f6f 	.word	0x08003f6f
 8003e34:	08003e9b 	.word	0x08003e9b
 8003e38:	08003f29 	.word	0x08003f29
 8003e3c:	08003ded 	.word	0x08003ded
 8003e40:	08003ded 	.word	0x08003ded
 8003e44:	08003f91 	.word	0x08003f91
 8003e48:	08003ded 	.word	0x08003ded
 8003e4c:	08003e9b 	.word	0x08003e9b
 8003e50:	08003ded 	.word	0x08003ded
 8003e54:	08003ded 	.word	0x08003ded
 8003e58:	08003f31 	.word	0x08003f31
 8003e5c:	6833      	ldr	r3, [r6, #0]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6032      	str	r2, [r6, #0]
 8003e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e09c      	b.n	8003faa <_printf_i+0x1e6>
 8003e70:	6833      	ldr	r3, [r6, #0]
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	1d19      	adds	r1, r3, #4
 8003e76:	6031      	str	r1, [r6, #0]
 8003e78:	0606      	lsls	r6, r0, #24
 8003e7a:	d501      	bpl.n	8003e80 <_printf_i+0xbc>
 8003e7c:	681d      	ldr	r5, [r3, #0]
 8003e7e:	e003      	b.n	8003e88 <_printf_i+0xc4>
 8003e80:	0645      	lsls	r5, r0, #25
 8003e82:	d5fb      	bpl.n	8003e7c <_printf_i+0xb8>
 8003e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	da03      	bge.n	8003e94 <_printf_i+0xd0>
 8003e8c:	232d      	movs	r3, #45	@ 0x2d
 8003e8e:	426d      	negs	r5, r5
 8003e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e94:	230a      	movs	r3, #10
 8003e96:	4858      	ldr	r0, [pc, #352]	@ (8003ff8 <_printf_i+0x234>)
 8003e98:	e011      	b.n	8003ebe <_printf_i+0xfa>
 8003e9a:	6821      	ldr	r1, [r4, #0]
 8003e9c:	6833      	ldr	r3, [r6, #0]
 8003e9e:	0608      	lsls	r0, r1, #24
 8003ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ea4:	d402      	bmi.n	8003eac <_printf_i+0xe8>
 8003ea6:	0649      	lsls	r1, r1, #25
 8003ea8:	bf48      	it	mi
 8003eaa:	b2ad      	uxthmi	r5, r5
 8003eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eae:	6033      	str	r3, [r6, #0]
 8003eb0:	bf14      	ite	ne
 8003eb2:	230a      	movne	r3, #10
 8003eb4:	2308      	moveq	r3, #8
 8003eb6:	4850      	ldr	r0, [pc, #320]	@ (8003ff8 <_printf_i+0x234>)
 8003eb8:	2100      	movs	r1, #0
 8003eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ebe:	6866      	ldr	r6, [r4, #4]
 8003ec0:	2e00      	cmp	r6, #0
 8003ec2:	60a6      	str	r6, [r4, #8]
 8003ec4:	db05      	blt.n	8003ed2 <_printf_i+0x10e>
 8003ec6:	6821      	ldr	r1, [r4, #0]
 8003ec8:	432e      	orrs	r6, r5
 8003eca:	f021 0104 	bic.w	r1, r1, #4
 8003ece:	6021      	str	r1, [r4, #0]
 8003ed0:	d04b      	beq.n	8003f6a <_printf_i+0x1a6>
 8003ed2:	4616      	mov	r6, r2
 8003ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8003edc:	5dc7      	ldrb	r7, [r0, r7]
 8003ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ee2:	462f      	mov	r7, r5
 8003ee4:	42bb      	cmp	r3, r7
 8003ee6:	460d      	mov	r5, r1
 8003ee8:	d9f4      	bls.n	8003ed4 <_printf_i+0x110>
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d10b      	bne.n	8003f06 <_printf_i+0x142>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	07df      	lsls	r7, r3, #31
 8003ef2:	d508      	bpl.n	8003f06 <_printf_i+0x142>
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	6861      	ldr	r1, [r4, #4]
 8003ef8:	4299      	cmp	r1, r3
 8003efa:	bfde      	ittt	le
 8003efc:	2330      	movle	r3, #48	@ 0x30
 8003efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f06:	1b92      	subs	r2, r2, r6
 8003f08:	6122      	str	r2, [r4, #16]
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4640      	mov	r0, r8
 8003f10:	f8cd a000 	str.w	sl, [sp]
 8003f14:	aa03      	add	r2, sp, #12
 8003f16:	f7ff fee3 	bl	8003ce0 <_printf_common>
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d14a      	bne.n	8003fb4 <_printf_i+0x1f0>
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f22:	b004      	add	sp, #16
 8003f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	f043 0320 	orr.w	r3, r3, #32
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	2778      	movs	r7, #120	@ 0x78
 8003f32:	4832      	ldr	r0, [pc, #200]	@ (8003ffc <_printf_i+0x238>)
 8003f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	6831      	ldr	r1, [r6, #0]
 8003f3c:	061f      	lsls	r7, r3, #24
 8003f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f42:	d402      	bmi.n	8003f4a <_printf_i+0x186>
 8003f44:	065f      	lsls	r7, r3, #25
 8003f46:	bf48      	it	mi
 8003f48:	b2ad      	uxthmi	r5, r5
 8003f4a:	6031      	str	r1, [r6, #0]
 8003f4c:	07d9      	lsls	r1, r3, #31
 8003f4e:	bf44      	itt	mi
 8003f50:	f043 0320 	orrmi.w	r3, r3, #32
 8003f54:	6023      	strmi	r3, [r4, #0]
 8003f56:	b11d      	cbz	r5, 8003f60 <_printf_i+0x19c>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	e7ad      	b.n	8003eb8 <_printf_i+0xf4>
 8003f5c:	4826      	ldr	r0, [pc, #152]	@ (8003ff8 <_printf_i+0x234>)
 8003f5e:	e7e9      	b.n	8003f34 <_printf_i+0x170>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	f023 0320 	bic.w	r3, r3, #32
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	e7f6      	b.n	8003f58 <_printf_i+0x194>
 8003f6a:	4616      	mov	r6, r2
 8003f6c:	e7bd      	b.n	8003eea <_printf_i+0x126>
 8003f6e:	6833      	ldr	r3, [r6, #0]
 8003f70:	6825      	ldr	r5, [r4, #0]
 8003f72:	1d18      	adds	r0, r3, #4
 8003f74:	6961      	ldr	r1, [r4, #20]
 8003f76:	6030      	str	r0, [r6, #0]
 8003f78:	062e      	lsls	r6, r5, #24
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	d501      	bpl.n	8003f82 <_printf_i+0x1be>
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	e002      	b.n	8003f88 <_printf_i+0x1c4>
 8003f82:	0668      	lsls	r0, r5, #25
 8003f84:	d5fb      	bpl.n	8003f7e <_printf_i+0x1ba>
 8003f86:	8019      	strh	r1, [r3, #0]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4616      	mov	r6, r2
 8003f8c:	6123      	str	r3, [r4, #16]
 8003f8e:	e7bc      	b.n	8003f0a <_printf_i+0x146>
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	2100      	movs	r1, #0
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	6032      	str	r2, [r6, #0]
 8003f98:	681e      	ldr	r6, [r3, #0]
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f000 f96b 	bl	8004278 <memchr>
 8003fa2:	b108      	cbz	r0, 8003fa8 <_printf_i+0x1e4>
 8003fa4:	1b80      	subs	r0, r0, r6
 8003fa6:	6060      	str	r0, [r4, #4]
 8003fa8:	6863      	ldr	r3, [r4, #4]
 8003faa:	6123      	str	r3, [r4, #16]
 8003fac:	2300      	movs	r3, #0
 8003fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb2:	e7aa      	b.n	8003f0a <_printf_i+0x146>
 8003fb4:	4632      	mov	r2, r6
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	4640      	mov	r0, r8
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	47d0      	blx	sl
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d0ad      	beq.n	8003f1e <_printf_i+0x15a>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	079b      	lsls	r3, r3, #30
 8003fc6:	d413      	bmi.n	8003ff0 <_printf_i+0x22c>
 8003fc8:	68e0      	ldr	r0, [r4, #12]
 8003fca:	9b03      	ldr	r3, [sp, #12]
 8003fcc:	4298      	cmp	r0, r3
 8003fce:	bfb8      	it	lt
 8003fd0:	4618      	movlt	r0, r3
 8003fd2:	e7a6      	b.n	8003f22 <_printf_i+0x15e>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	4649      	mov	r1, r9
 8003fda:	4640      	mov	r0, r8
 8003fdc:	47d0      	blx	sl
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d09d      	beq.n	8003f1e <_printf_i+0x15a>
 8003fe2:	3501      	adds	r5, #1
 8003fe4:	68e3      	ldr	r3, [r4, #12]
 8003fe6:	9903      	ldr	r1, [sp, #12]
 8003fe8:	1a5b      	subs	r3, r3, r1
 8003fea:	42ab      	cmp	r3, r5
 8003fec:	dcf2      	bgt.n	8003fd4 <_printf_i+0x210>
 8003fee:	e7eb      	b.n	8003fc8 <_printf_i+0x204>
 8003ff0:	2500      	movs	r5, #0
 8003ff2:	f104 0619 	add.w	r6, r4, #25
 8003ff6:	e7f5      	b.n	8003fe4 <_printf_i+0x220>
 8003ff8:	080047fb 	.word	0x080047fb
 8003ffc:	0800480c 	.word	0x0800480c

08004000 <__sflush_r>:
 8004000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	0716      	lsls	r6, r2, #28
 8004008:	4605      	mov	r5, r0
 800400a:	460c      	mov	r4, r1
 800400c:	d454      	bmi.n	80040b8 <__sflush_r+0xb8>
 800400e:	684b      	ldr	r3, [r1, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	dc02      	bgt.n	800401a <__sflush_r+0x1a>
 8004014:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	dd48      	ble.n	80040ac <__sflush_r+0xac>
 800401a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800401c:	2e00      	cmp	r6, #0
 800401e:	d045      	beq.n	80040ac <__sflush_r+0xac>
 8004020:	2300      	movs	r3, #0
 8004022:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004026:	682f      	ldr	r7, [r5, #0]
 8004028:	6a21      	ldr	r1, [r4, #32]
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	d030      	beq.n	8004090 <__sflush_r+0x90>
 800402e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	0759      	lsls	r1, r3, #29
 8004034:	d505      	bpl.n	8004042 <__sflush_r+0x42>
 8004036:	6863      	ldr	r3, [r4, #4]
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800403c:	b10b      	cbz	r3, 8004042 <__sflush_r+0x42>
 800403e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004040:	1ad2      	subs	r2, r2, r3
 8004042:	2300      	movs	r3, #0
 8004044:	4628      	mov	r0, r5
 8004046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004048:	6a21      	ldr	r1, [r4, #32]
 800404a:	47b0      	blx	r6
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	d106      	bne.n	8004060 <__sflush_r+0x60>
 8004052:	6829      	ldr	r1, [r5, #0]
 8004054:	291d      	cmp	r1, #29
 8004056:	d82b      	bhi.n	80040b0 <__sflush_r+0xb0>
 8004058:	4a28      	ldr	r2, [pc, #160]	@ (80040fc <__sflush_r+0xfc>)
 800405a:	40ca      	lsrs	r2, r1
 800405c:	07d6      	lsls	r6, r2, #31
 800405e:	d527      	bpl.n	80040b0 <__sflush_r+0xb0>
 8004060:	2200      	movs	r2, #0
 8004062:	6062      	str	r2, [r4, #4]
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	04d9      	lsls	r1, r3, #19
 8004068:	6022      	str	r2, [r4, #0]
 800406a:	d504      	bpl.n	8004076 <__sflush_r+0x76>
 800406c:	1c42      	adds	r2, r0, #1
 800406e:	d101      	bne.n	8004074 <__sflush_r+0x74>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b903      	cbnz	r3, 8004076 <__sflush_r+0x76>
 8004074:	6560      	str	r0, [r4, #84]	@ 0x54
 8004076:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004078:	602f      	str	r7, [r5, #0]
 800407a:	b1b9      	cbz	r1, 80040ac <__sflush_r+0xac>
 800407c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004080:	4299      	cmp	r1, r3
 8004082:	d002      	beq.n	800408a <__sflush_r+0x8a>
 8004084:	4628      	mov	r0, r5
 8004086:	f7ff fbf5 	bl	8003874 <_free_r>
 800408a:	2300      	movs	r3, #0
 800408c:	6363      	str	r3, [r4, #52]	@ 0x34
 800408e:	e00d      	b.n	80040ac <__sflush_r+0xac>
 8004090:	2301      	movs	r3, #1
 8004092:	4628      	mov	r0, r5
 8004094:	47b0      	blx	r6
 8004096:	4602      	mov	r2, r0
 8004098:	1c50      	adds	r0, r2, #1
 800409a:	d1c9      	bne.n	8004030 <__sflush_r+0x30>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0c6      	beq.n	8004030 <__sflush_r+0x30>
 80040a2:	2b1d      	cmp	r3, #29
 80040a4:	d001      	beq.n	80040aa <__sflush_r+0xaa>
 80040a6:	2b16      	cmp	r3, #22
 80040a8:	d11d      	bne.n	80040e6 <__sflush_r+0xe6>
 80040aa:	602f      	str	r7, [r5, #0]
 80040ac:	2000      	movs	r0, #0
 80040ae:	e021      	b.n	80040f4 <__sflush_r+0xf4>
 80040b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040b4:	b21b      	sxth	r3, r3
 80040b6:	e01a      	b.n	80040ee <__sflush_r+0xee>
 80040b8:	690f      	ldr	r7, [r1, #16]
 80040ba:	2f00      	cmp	r7, #0
 80040bc:	d0f6      	beq.n	80040ac <__sflush_r+0xac>
 80040be:	0793      	lsls	r3, r2, #30
 80040c0:	bf18      	it	ne
 80040c2:	2300      	movne	r3, #0
 80040c4:	680e      	ldr	r6, [r1, #0]
 80040c6:	bf08      	it	eq
 80040c8:	694b      	ldreq	r3, [r1, #20]
 80040ca:	1bf6      	subs	r6, r6, r7
 80040cc:	600f      	str	r7, [r1, #0]
 80040ce:	608b      	str	r3, [r1, #8]
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	ddeb      	ble.n	80040ac <__sflush_r+0xac>
 80040d4:	4633      	mov	r3, r6
 80040d6:	463a      	mov	r2, r7
 80040d8:	4628      	mov	r0, r5
 80040da:	6a21      	ldr	r1, [r4, #32]
 80040dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80040e0:	47e0      	blx	ip
 80040e2:	2800      	cmp	r0, #0
 80040e4:	dc07      	bgt.n	80040f6 <__sflush_r+0xf6>
 80040e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ee:	f04f 30ff 	mov.w	r0, #4294967295
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f6:	4407      	add	r7, r0
 80040f8:	1a36      	subs	r6, r6, r0
 80040fa:	e7e9      	b.n	80040d0 <__sflush_r+0xd0>
 80040fc:	20400001 	.word	0x20400001

08004100 <_fflush_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	4605      	mov	r5, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b913      	cbnz	r3, 8004110 <_fflush_r+0x10>
 800410a:	2500      	movs	r5, #0
 800410c:	4628      	mov	r0, r5
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	b118      	cbz	r0, 800411a <_fflush_r+0x1a>
 8004112:	6a03      	ldr	r3, [r0, #32]
 8004114:	b90b      	cbnz	r3, 800411a <_fflush_r+0x1a>
 8004116:	f7ff f9a5 	bl	8003464 <__sinit>
 800411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f3      	beq.n	800410a <_fflush_r+0xa>
 8004122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004124:	07d0      	lsls	r0, r2, #31
 8004126:	d404      	bmi.n	8004132 <_fflush_r+0x32>
 8004128:	0599      	lsls	r1, r3, #22
 800412a:	d402      	bmi.n	8004132 <_fflush_r+0x32>
 800412c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800412e:	f7ff fb90 	bl	8003852 <__retarget_lock_acquire_recursive>
 8004132:	4628      	mov	r0, r5
 8004134:	4621      	mov	r1, r4
 8004136:	f7ff ff63 	bl	8004000 <__sflush_r>
 800413a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800413c:	4605      	mov	r5, r0
 800413e:	07da      	lsls	r2, r3, #31
 8004140:	d4e4      	bmi.n	800410c <_fflush_r+0xc>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	059b      	lsls	r3, r3, #22
 8004146:	d4e1      	bmi.n	800410c <_fflush_r+0xc>
 8004148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800414a:	f7ff fb83 	bl	8003854 <__retarget_lock_release_recursive>
 800414e:	e7dd      	b.n	800410c <_fflush_r+0xc>

08004150 <__swhatbuf_r>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	460c      	mov	r4, r1
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	4615      	mov	r5, r2
 800415a:	2900      	cmp	r1, #0
 800415c:	461e      	mov	r6, r3
 800415e:	b096      	sub	sp, #88	@ 0x58
 8004160:	da0c      	bge.n	800417c <__swhatbuf_r+0x2c>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	2100      	movs	r1, #0
 8004166:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800416a:	bf14      	ite	ne
 800416c:	2340      	movne	r3, #64	@ 0x40
 800416e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004172:	2000      	movs	r0, #0
 8004174:	6031      	str	r1, [r6, #0]
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	b016      	add	sp, #88	@ 0x58
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	466a      	mov	r2, sp
 800417e:	f000 f849 	bl	8004214 <_fstat_r>
 8004182:	2800      	cmp	r0, #0
 8004184:	dbed      	blt.n	8004162 <__swhatbuf_r+0x12>
 8004186:	9901      	ldr	r1, [sp, #4]
 8004188:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800418c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004190:	4259      	negs	r1, r3
 8004192:	4159      	adcs	r1, r3
 8004194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004198:	e7eb      	b.n	8004172 <__swhatbuf_r+0x22>

0800419a <__smakebuf_r>:
 800419a:	898b      	ldrh	r3, [r1, #12]
 800419c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800419e:	079d      	lsls	r5, r3, #30
 80041a0:	4606      	mov	r6, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	d507      	bpl.n	80041b6 <__smakebuf_r+0x1c>
 80041a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80041aa:	6023      	str	r3, [r4, #0]
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	2301      	movs	r3, #1
 80041b0:	6163      	str	r3, [r4, #20]
 80041b2:	b003      	add	sp, #12
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b6:	466a      	mov	r2, sp
 80041b8:	ab01      	add	r3, sp, #4
 80041ba:	f7ff ffc9 	bl	8004150 <__swhatbuf_r>
 80041be:	9f00      	ldr	r7, [sp, #0]
 80041c0:	4605      	mov	r5, r0
 80041c2:	4639      	mov	r1, r7
 80041c4:	4630      	mov	r0, r6
 80041c6:	f7ff fbbf 	bl	8003948 <_malloc_r>
 80041ca:	b948      	cbnz	r0, 80041e0 <__smakebuf_r+0x46>
 80041cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d0:	059a      	lsls	r2, r3, #22
 80041d2:	d4ee      	bmi.n	80041b2 <__smakebuf_r+0x18>
 80041d4:	f023 0303 	bic.w	r3, r3, #3
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	81a3      	strh	r3, [r4, #12]
 80041de:	e7e2      	b.n	80041a6 <__smakebuf_r+0xc>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80041e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	9b01      	ldr	r3, [sp, #4]
 80041ee:	6020      	str	r0, [r4, #0]
 80041f0:	b15b      	cbz	r3, 800420a <__smakebuf_r+0x70>
 80041f2:	4630      	mov	r0, r6
 80041f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041f8:	f000 f81e 	bl	8004238 <_isatty_r>
 80041fc:	b128      	cbz	r0, 800420a <__smakebuf_r+0x70>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f023 0303 	bic.w	r3, r3, #3
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	81a3      	strh	r3, [r4, #12]
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	431d      	orrs	r5, r3
 800420e:	81a5      	strh	r5, [r4, #12]
 8004210:	e7cf      	b.n	80041b2 <__smakebuf_r+0x18>
	...

08004214 <_fstat_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	2300      	movs	r3, #0
 8004218:	4d06      	ldr	r5, [pc, #24]	@ (8004234 <_fstat_r+0x20>)
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	f7fd fd2d 	bl	8001c80 <_fstat>
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	d102      	bne.n	8004230 <_fstat_r+0x1c>
 800422a:	682b      	ldr	r3, [r5, #0]
 800422c:	b103      	cbz	r3, 8004230 <_fstat_r+0x1c>
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	200002b4 	.word	0x200002b4

08004238 <_isatty_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	2300      	movs	r3, #0
 800423c:	4d05      	ldr	r5, [pc, #20]	@ (8004254 <_isatty_r+0x1c>)
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	f7fd fd2b 	bl	8001c9e <_isatty>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_isatty_r+0x1a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_isatty_r+0x1a>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	200002b4 	.word	0x200002b4

08004258 <_sbrk_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	2300      	movs	r3, #0
 800425c:	4d05      	ldr	r5, [pc, #20]	@ (8004274 <_sbrk_r+0x1c>)
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fd fd32 	bl	8001ccc <_sbrk>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_sbrk_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_sbrk_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	200002b4 	.word	0x200002b4

08004278 <memchr>:
 8004278:	4603      	mov	r3, r0
 800427a:	b510      	push	{r4, lr}
 800427c:	b2c9      	uxtb	r1, r1
 800427e:	4402      	add	r2, r0
 8004280:	4293      	cmp	r3, r2
 8004282:	4618      	mov	r0, r3
 8004284:	d101      	bne.n	800428a <memchr+0x12>
 8004286:	2000      	movs	r0, #0
 8004288:	e003      	b.n	8004292 <memchr+0x1a>
 800428a:	7804      	ldrb	r4, [r0, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	428c      	cmp	r4, r1
 8004290:	d1f6      	bne.n	8004280 <memchr+0x8>
 8004292:	bd10      	pop	{r4, pc}

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
