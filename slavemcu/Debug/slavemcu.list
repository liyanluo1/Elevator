
slavemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  08006fe0  08006fe0  00007fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  0000a08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008318  08008318  0000a08c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008318  08008318  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008318  08008318  00009318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800831c  0800831c  0000931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008320  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  2000008c  080083ac  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  080083ac  0000a9c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5d3  00000000  00000000  0000a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b81  00000000  00000000  00015688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00018210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085b  00000000  00000000  00018d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044c9  00000000  00000000  00019583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed9d  00000000  00000000  0001da4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a51  00000000  00000000  0002c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b223a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000b2280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b56e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006fc8 	.word	0x08006fc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08006fc8 	.word	0x08006fc8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	@ 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000732:	2afd      	cmp	r2, #253	@ 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	@ 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	@ 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	@ 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <LocalBB_Init>:
/* 门控命令缓存 */
static LocalBB_DoorCommand_t pending_door_cmd = DOOR_CMD_NONE;

/* ==================== 初始化函数 ==================== */

void LocalBB_Init(void) {
 8000980:	b598      	push	{r3, r4, r7, lr}
 8000982:	af00      	add	r7, sp, #0
    memset(&g_local_bb, 0, sizeof(LocalBlackboard_t));
 8000984:	22c8      	movs	r2, #200	@ 0xc8
 8000986:	2100      	movs	r1, #0
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <LocalBB_Init+0x5c>)
 800098a:	f005 fbdb 	bl	8006144 <memset>
    
    /* 初始状态 */
    g_local_bb.current_floor = 1;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <LocalBB_Init+0x5c>)
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    g_local_bb.expected_next_floor = 1;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <LocalBB_Init+0x5c>)
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    g_local_bb.direction = DIR_STOP;
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <LocalBB_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
    g_local_bb.door_state = LOCAL_DOOR_CLOSED;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <LocalBB_Init+0x5c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    
    /* 事件队列 */
    g_local_bb.event_head = 0;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <LocalBB_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_tail = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <LocalBB_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count = 0;
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <LocalBB_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    strcpy(g_local_bb.debug_msg, "LocalBB Init");
 80009c6:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <LocalBB_Init+0x60>)
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <LocalBB_Init+0x64>)
 80009ca:	4614      	mov	r4, r2
 80009cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ce:	c407      	stmia	r4!, {r0, r1, r2}
 80009d0:	7023      	strb	r3, [r4, #0]
    printf("[LocalBB] Initialized\r\n");
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <LocalBB_Init+0x68>)
 80009d4:	f005 fab4 	bl	8005f40 <puts>
}
 80009d8:	bf00      	nop
 80009da:	bd98      	pop	{r3, r4, r7, pc}
 80009dc:	200000a8 	.word	0x200000a8
 80009e0:	20000150 	.word	0x20000150
 80009e4:	08006fe0 	.word	0x08006fe0
 80009e8:	08006ff0 	.word	0x08006ff0

080009ec <PushEvent>:
    LocalBB_Init();
}

/* ==================== 事件队列管理 ==================== */

static bool PushEvent(LocalEventType_t type, uint8_t data1, uint8_t data2, uint8_t data3) {
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4603      	mov	r3, r0
 8000a00:	71bb      	strb	r3, [r7, #6]
 8000a02:	460b      	mov	r3, r1
 8000a04:	717b      	strb	r3, [r7, #5]
 8000a06:	4613      	mov	r3, r2
 8000a08:	713b      	strb	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8000a0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /* 临界区保护 */
    uint32_t primask = __get_PRIMASK();
 8000a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
    __disable_irq();
    
    if (g_local_bb.event_count >= MAX_EVENT_QUEUE) {
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <PushEvent+0xec>)
 8000a1a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d91b      	bls.n	8000a5c <PushEvent+0x70>
        /* 队列满时丢弃最旧事件 */
        printf("[LocalBB] Event queue full! Dropping oldest\r\n");
 8000a24:	482d      	ldr	r0, [pc, #180]	@ (8000adc <PushEvent+0xf0>)
 8000a26:	f005 fa8b 	bl	8005f40 <puts>
        g_local_bb.event_head = (g_local_bb.event_head + 1) % MAX_EVENT_QUEUE;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <PushEvent+0xec>)
 8000a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3301      	adds	r3, #1
 8000a34:	425a      	negs	r2, r3
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	f002 020f 	and.w	r2, r2, #15
 8000a3e:	bf58      	it	pl
 8000a40:	4253      	negpl	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <PushEvent+0xec>)
 8000a46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        g_local_bb.event_count--;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <PushEvent+0xec>)
 8000a4c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <PushEvent+0xec>)
 8000a58:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    }
    
    LocalEvent_t* event = &g_local_bb.event_queue[g_local_bb.event_tail];
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <PushEvent+0xec>)
 8000a5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <PushEvent+0xec>)
 8000a68:	4413      	add	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
    event->type = type;
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	701a      	strb	r2, [r3, #0]
    event->data1 = data1;
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	79ba      	ldrb	r2, [r7, #6]
 8000a76:	705a      	strb	r2, [r3, #1]
    event->data2 = data2;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	797a      	ldrb	r2, [r7, #5]
 8000a7c:	709a      	strb	r2, [r3, #2]
    event->data3 = data3;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	793a      	ldrb	r2, [r7, #4]
 8000a82:	70da      	strb	r2, [r3, #3]
    event->timestamp = HAL_GetTick();
 8000a84:	f002 fe1c 	bl	80036c0 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	605a      	str	r2, [r3, #4]
    
    g_local_bb.event_tail = (g_local_bb.event_tail + 1) % MAX_EVENT_QUEUE;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <PushEvent+0xec>)
 8000a90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	425a      	negs	r2, r3
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	f002 020f 	and.w	r2, r2, #15
 8000aa2:	bf58      	it	pl
 8000aa4:	4253      	negpl	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <PushEvent+0xec>)
 8000aaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count++;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <PushEvent+0xec>)
 8000ab0:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <PushEvent+0xec>)
 8000abc:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f383 8810 	msr	PRIMASK, r3
}
 8000aca:	bf00      	nop
    
    __set_PRIMASK(primask);
    return true;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	08007008 	.word	0x08007008

08000ae0 <PopEvent>:

static bool PopEvent(LocalEvent_t* event) {
 8000ae0:	b490      	push	{r4, r7}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8000aec:	613b      	str	r3, [r7, #16]
  return(result);
 8000aee:	693b      	ldr	r3, [r7, #16]
    /* 临界区保护 */
    uint32_t primask = __get_PRIMASK();
 8000af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	bf00      	nop
    __disable_irq();
    
    if (g_local_bb.event_count == 0) {
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <PopEvent+0x98>)
 8000af8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <PopEvent+0x32>
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f383 8810 	msr	PRIMASK, r3
}
 8000b0c:	bf00      	nop
        __set_PRIMASK(primask);
        return false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e02c      	b.n	8000b6c <PopEvent+0x8c>
    }
    
    *event = g_local_bb.event_queue[g_local_bb.event_head];
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <PopEvent+0x98>)
 8000b14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	@ (8000b78 <PopEvent+0x98>)
 8000b1e:	460c      	mov	r4, r1
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	4413      	add	r3, r2
 8000b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b28:	e884 0003 	stmia.w	r4, {r0, r1}
    g_local_bb.event_head = (g_local_bb.event_head + 1) % MAX_EVENT_QUEUE;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <PopEvent+0x98>)
 8000b2e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3301      	adds	r3, #1
 8000b36:	425a      	negs	r2, r3
 8000b38:	f003 030f 	and.w	r3, r3, #15
 8000b3c:	f002 020f 	and.w	r2, r2, #15
 8000b40:	bf58      	it	pl
 8000b42:	4253      	negpl	r3, r2
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <PopEvent+0x98>)
 8000b48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_count--;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <PopEvent+0x98>)
 8000b4e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <PopEvent+0x98>)
 8000b5a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	f383 8810 	msr	PRIMASK, r3
}
 8000b68:	bf00      	nop
    
    __set_PRIMASK(primask);
    return true;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc90      	pop	{r4, r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200000a8 	.word	0x200000a8

08000b7c <LocalBB_AddCabinCall>:

/* ==================== 事件输入接口 ==================== */

void LocalBB_AddCabinCall(uint8_t floor) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d02f      	beq.n	8000bec <LocalBB_AddCabinCall+0x70>
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d82c      	bhi.n	8000bec <LocalBB_AddCabinCall+0x70>
    
    /* 防抖：如果短时间内重复按同一楼层，忽略 */
    uint32_t current_time = HAL_GetTick();
 8000b92:	f002 fd95 	bl	80036c0 <HAL_GetTick>
 8000b96:	60f8      	str	r0, [r7, #12]
    if (floor == g_local_bb.last_sent_cabin_call && 
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <LocalBB_AddCabinCall+0x78>)
 8000b9a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d10c      	bne.n	8000bbe <LocalBB_AddCabinCall+0x42>
        (current_time - g_local_bb.last_cabin_call_time) < DEBOUNCE_TIME_MS) {
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <LocalBB_AddCabinCall+0x78>)
 8000ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	1ad3      	subs	r3, r2, r3
    if (floor == g_local_bb.last_sent_cabin_call && 
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d805      	bhi.n	8000bbe <LocalBB_AddCabinCall+0x42>
        printf("[LocalBB] Cabin call %d debounced\r\n", floor);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4810      	ldr	r0, [pc, #64]	@ (8000bf8 <LocalBB_AddCabinCall+0x7c>)
 8000bb8:	f005 f95a 	bl	8005e70 <iprintf>
        return;
 8000bbc:	e017      	b.n	8000bee <LocalBB_AddCabinCall+0x72>
    
    /* 关键修复：同层按钮特殊处理 */
    /* 每次都发送给Master，让Master决定是否开门 */
    /* 但要确保不会重复发送同一个呼叫 */
    
    PushEvent(LOCAL_EVENT_CABIN_CALL, floor, 0, 0);
 8000bbe:	79f9      	ldrb	r1, [r7, #7]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff ff11 	bl	80009ec <PushEvent>
    g_local_bb.cabin_call_count++;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <LocalBB_AddCabinCall+0x78>)
 8000bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <LocalBB_AddCabinCall+0x78>)
 8000bd4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    printf("[LocalBB] Cabin call queued: floor %d (current: %d)\r\n", floor, g_local_bb.current_floor);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <LocalBB_AddCabinCall+0x78>)
 8000bdc:	f892 2083 	ldrb.w	r2, [r2, #131]	@ 0x83
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <LocalBB_AddCabinCall+0x80>)
 8000be6:	f005 f943 	bl	8005e70 <iprintf>
 8000bea:	e000      	b.n	8000bee <LocalBB_AddCabinCall+0x72>
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000bec:	bf00      	nop
}
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	08007038 	.word	0x08007038
 8000bfc:	0800705c 	.word	0x0800705c

08000c00 <LocalBB_AddPhotoSensor>:

void LocalBB_AddPhotoSensor(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
    /* 使用预期楼层 */
    uint8_t floor = g_local_bb.expected_next_floor;
 8000c06:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c08:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000c0c:	71fb      	strb	r3, [r7, #7]
    
    PushEvent(LOCAL_EVENT_PHOTO_SENSOR, floor, 0, 0);
 8000c0e:	79f9      	ldrb	r1, [r7, #7]
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff fee9 	bl	80009ec <PushEvent>
    g_local_bb.photo_trigger_count++;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a1d      	ldr	r2, [pc, #116]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c24:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    printf("[LocalBB] Photo sensor queued: floor %d\r\n", floor);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481b      	ldr	r0, [pc, #108]	@ (8000c9c <LocalBB_AddPhotoSensor+0x9c>)
 8000c2e:	f005 f91f 	bl	8005e70 <iprintf>
    
    /* 更新当前楼层 */
    g_local_bb.current_floor = floor;
 8000c32:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    
    /* 根据方向更新预期楼层 */
    if (g_local_bb.direction == DIR_UP) {
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c3c:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d110      	bne.n	8000c68 <LocalBB_AddPhotoSensor+0x68>
        g_local_bb.expected_next_floor = floor + 1;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c4e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        if (g_local_bb.expected_next_floor > MAX_FLOORS) {
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c54:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d918      	bls.n	8000c90 <LocalBB_AddPhotoSensor+0x90>
            g_local_bb.expected_next_floor = MAX_FLOORS;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c60:	2203      	movs	r2, #3
 8000c62:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
            g_local_bb.expected_next_floor = floor - 1;
        } else {
            g_local_bb.expected_next_floor = 1;
        }
    }
}
 8000c66:	e013      	b.n	8000c90 <LocalBB_AddPhotoSensor+0x90>
    } else if (g_local_bb.direction == DIR_DOWN) {
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c6a:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d10d      	bne.n	8000c90 <LocalBB_AddPhotoSensor+0x90>
        if (floor > 1) {
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d906      	bls.n	8000c88 <LocalBB_AddPhotoSensor+0x88>
            g_local_bb.expected_next_floor = floor - 1;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c82:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 8000c86:	e003      	b.n	8000c90 <LocalBB_AddPhotoSensor+0x90>
            g_local_bb.expected_next_floor = 1;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <LocalBB_AddPhotoSensor+0x98>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000a8 	.word	0x200000a8
 8000c9c:	08007094 	.word	0x08007094

08000ca0 <LocalBB_SetDirection>:

void LocalBB_SetDirection(uint8_t dir, uint8_t current, uint8_t target) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	460b      	mov	r3, r1
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	717b      	strb	r3, [r7, #5]
    g_local_bb.direction = dir;
 8000cb2:	4a23      	ldr	r2, [pc, #140]	@ (8000d40 <LocalBB_SetDirection+0xa0>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f882 3085 	strb.w	r3, [r2, #133]	@ 0x85
    g_local_bb.current_floor = current;
 8000cba:	4a21      	ldr	r2, [pc, #132]	@ (8000d40 <LocalBB_SetDirection+0xa0>)
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    g_local_bb.target_floor = target;
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d40 <LocalBB_SetDirection+0xa0>)
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
    
    /* 设置预期楼层 */
    if (dir == DIR_UP) {
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d106      	bne.n	8000cde <LocalBB_SetDirection+0x3e>
        g_local_bb.expected_next_floor = current + 1;
 8000cd0:	79bb      	ldrb	r3, [r7, #6]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <LocalBB_SetDirection+0xa0>)
 8000cd8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000cdc:	e010      	b.n	8000d00 <LocalBB_SetDirection+0x60>
    } else if (dir == DIR_DOWN && current > 1) {
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d109      	bne.n	8000cf8 <LocalBB_SetDirection+0x58>
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d906      	bls.n	8000cf8 <LocalBB_SetDirection+0x58>
        g_local_bb.expected_next_floor = current - 1;
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <LocalBB_SetDirection+0xa0>)
 8000cf2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000cf6:	e003      	b.n	8000d00 <LocalBB_SetDirection+0x60>
    } else {
        g_local_bb.expected_next_floor = current;
 8000cf8:	4a11      	ldr	r2, [pc, #68]	@ (8000d40 <LocalBB_SetDirection+0xa0>)
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
    }
    
    PushEvent(LOCAL_EVENT_DIRECTION_SET, dir, current, target);
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	79f9      	ldrb	r1, [r7, #7]
 8000d06:	2003      	movs	r0, #3
 8000d08:	f7ff fe70 	bl	80009ec <PushEvent>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d006      	beq.n	8000d20 <LocalBB_SetDirection+0x80>
           dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DOWN" : "STOP",
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d101      	bne.n	8000d1c <LocalBB_SetDirection+0x7c>
 8000d18:	490a      	ldr	r1, [pc, #40]	@ (8000d44 <LocalBB_SetDirection+0xa4>)
 8000d1a:	e002      	b.n	8000d22 <LocalBB_SetDirection+0x82>
 8000d1c:	490a      	ldr	r1, [pc, #40]	@ (8000d48 <LocalBB_SetDirection+0xa8>)
 8000d1e:	e000      	b.n	8000d22 <LocalBB_SetDirection+0x82>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000d20:	490a      	ldr	r1, [pc, #40]	@ (8000d4c <LocalBB_SetDirection+0xac>)
 8000d22:	79ba      	ldrb	r2, [r7, #6]
 8000d24:	797b      	ldrb	r3, [r7, #5]
           current, target, g_local_bb.expected_next_floor);
 8000d26:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <LocalBB_SetDirection+0xa0>)
 8000d28:	f890 0086 	ldrb.w	r0, [r0, #134]	@ 0x86
 8000d2c:	b2c0      	uxtb	r0, r0
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000d2e:	9000      	str	r0, [sp, #0]
 8000d30:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <LocalBB_SetDirection+0xb0>)
 8000d32:	f005 f89d 	bl	8005e70 <iprintf>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000a8 	.word	0x200000a8
 8000d44:	080070c0 	.word	0x080070c0
 8000d48:	080070c8 	.word	0x080070c8
 8000d4c:	080070d0 	.word	0x080070d0
 8000d50:	080070d4 	.word	0x080070d4

08000d54 <LocalBB_AddDoorCommand>:

void LocalBB_AddDoorCommand(bool open) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    PushEvent(LOCAL_EVENT_DOOR_CMD, open ? 1 : 0, 0, 0);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4619      	mov	r1, r3
 8000d62:	2300      	movs	r3, #0
 8000d64:	2200      	movs	r2, #0
 8000d66:	2004      	movs	r0, #4
 8000d68:	f7ff fe40 	bl	80009ec <PushEvent>
    g_local_bb.door_state = open ? LOCAL_DOOR_OPENING : LOCAL_DOOR_CLOSING;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <LocalBB_AddDoorCommand+0x22>
 8000d72:	2201      	movs	r2, #1
 8000d74:	e000      	b.n	8000d78 <LocalBB_AddDoorCommand+0x24>
 8000d76:	2203      	movs	r2, #3
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <LocalBB_AddDoorCommand+0x54>)
 8000d7a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    g_local_bb.door_cmd_time = HAL_GetTick();
 8000d7e:	f002 fc9f 	bl	80036c0 <HAL_GetTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a08      	ldr	r2, [pc, #32]	@ (8000da8 <LocalBB_AddDoorCommand+0x54>)
 8000d86:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    printf("[LocalBB] Door command queued: %s\r\n", open ? "OPEN" : "CLOSE");
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <LocalBB_AddDoorCommand+0x40>
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <LocalBB_AddDoorCommand+0x58>)
 8000d92:	e000      	b.n	8000d96 <LocalBB_AddDoorCommand+0x42>
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <LocalBB_AddDoorCommand+0x5c>)
 8000d96:	4619      	mov	r1, r3
 8000d98:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <LocalBB_AddDoorCommand+0x60>)
 8000d9a:	f005 f869 	bl	8005e70 <iprintf>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000a8 	.word	0x200000a8
 8000dac:	08007108 	.word	0x08007108
 8000db0:	08007110 	.word	0x08007110
 8000db4:	08007118 	.word	0x08007118

08000db8 <LocalBB_Process>:

/* ==================== 事件处理主函数 ==================== */

void LocalBB_Process(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af02      	add	r7, sp, #8
    LocalEvent_t event;
    uint32_t current_time = HAL_GetTick();
 8000dbe:	f002 fc7f 	bl	80036c0 <HAL_GetTick>
 8000dc2:	6178      	str	r0, [r7, #20]
    
    while (PopEvent(&event)) {
 8000dc4:	e08e      	b.n	8000ee4 <LocalBB_Process+0x12c>
        switch (event.type) {
 8000dc6:	7b3b      	ldrb	r3, [r7, #12]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	f200 8087 	bhi.w	8000ede <LocalBB_Process+0x126>
 8000dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd8 <LocalBB_Process+0x20>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000e2f 	.word	0x08000e2f
 8000de0:	08000e8d 	.word	0x08000e8d
 8000de4:	08000eb7 	.word	0x08000eb7
                /* 内呼总是发送，让Master决定如何处理 */
                /* 同层按钮需要立即响应，不能被防重复机制阻止 */
                {
                    /* 发送内呼命令 */
                    uint8_t tx_buffer[4];
                    tx_buffer[0] = CMD_CABIN_CALL;
 8000de8:	2331      	movs	r3, #49	@ 0x31
 8000dea:	723b      	strb	r3, [r7, #8]
                    tx_buffer[1] = event.data1;  // 楼层
 8000dec:	7b7b      	ldrb	r3, [r7, #13]
 8000dee:	727b      	strb	r3, [r7, #9]
                    tx_buffer[2] = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	72bb      	strb	r3, [r7, #10]
                    tx_buffer[3] = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	72fb      	strb	r3, [r7, #11]
                    
                    rs485_send_packet_dma(tx_buffer, 4);
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f956 	bl	80010b0 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 8000e04:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e0e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    
                    g_local_bb.last_sent_cabin_call = event.data1;
 8000e12:	7b7a      	ldrb	r2, [r7, #13]
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e16:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
                    g_local_bb.last_cabin_call_time = current_time;
 8000e1a:	4a39      	ldr	r2, [pc, #228]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                    
                    printf("[LocalBB] RS485 TX: Cabin call floor %d\r\n", event.data1);
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4837      	ldr	r0, [pc, #220]	@ (8000f04 <LocalBB_Process+0x14c>)
 8000e28:	f005 f822 	bl	8005e70 <iprintf>
                }
                break;
 8000e2c:	e05a      	b.n	8000ee4 <LocalBB_Process+0x12c>
                
            case LOCAL_EVENT_PHOTO_SENSOR:
                /* 智能判断是否需要发送 */
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000e2e:	7b7a      	ldrb	r2, [r7, #13]
 8000e30:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e32:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d106      	bne.n	8000e48 <LocalBB_Process+0x90>
                    (current_time - g_local_bb.last_photo_send_time) > 200) {  // 光电允许更快
 8000e3a:	4b31      	ldr	r3, [pc, #196]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000e44:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e46:	d94c      	bls.n	8000ee2 <LocalBB_Process+0x12a>
                    
                    /* 发送光电传感器触发 */
                    uint8_t tx_buffer[4];
                    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	713b      	strb	r3, [r7, #4]
                    tx_buffer[1] = event.data1;  // 楼层
 8000e4c:	7b7b      	ldrb	r3, [r7, #13]
 8000e4e:	717b      	strb	r3, [r7, #5]
                    tx_buffer[2] = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71bb      	strb	r3, [r7, #6]
                    tx_buffer[3] = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
                    
                    rs485_send_packet_dma(tx_buffer, 4);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f927 	bl	80010b0 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a25      	ldr	r2, [pc, #148]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e6c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    
                    g_local_bb.last_sent_photo_floor = event.data1;
 8000e70:	7b7a      	ldrb	r2, [r7, #13]
 8000e72:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e74:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
                    g_local_bb.last_photo_send_time = current_time;
 8000e78:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <LocalBB_Process+0x148>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
                    
                    printf("[LocalBB] RS485 TX: Photo sensor floor %d\r\n", event.data1);
 8000e80:	7b7b      	ldrb	r3, [r7, #13]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4820      	ldr	r0, [pc, #128]	@ (8000f08 <LocalBB_Process+0x150>)
 8000e86:	f004 fff3 	bl	8005e70 <iprintf>
                }
                break;
 8000e8a:	e02a      	b.n	8000ee2 <LocalBB_Process+0x12a>
                
            case LOCAL_EVENT_DIRECTION_SET:
                /* 方向设置只更新内部状态，不需要回传 */
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
                        event.data1 == DIR_UP ? "UP" : 
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d006      	beq.n	8000ea0 <LocalBB_Process+0xe8>
                        event.data1 == DIR_DOWN ? "DN" : "ST",
 8000e92:	7b7b      	ldrb	r3, [r7, #13]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d101      	bne.n	8000e9c <LocalBB_Process+0xe4>
 8000e98:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <LocalBB_Process+0x154>)
 8000e9a:	e002      	b.n	8000ea2 <LocalBB_Process+0xea>
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f10 <LocalBB_Process+0x158>)
 8000e9e:	e000      	b.n	8000ea2 <LocalBB_Process+0xea>
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f14 <LocalBB_Process+0x15c>)
                        event.data2, event.data3);
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000ea4:	4619      	mov	r1, r3
                        event.data2, event.data3);
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	491a      	ldr	r1, [pc, #104]	@ (8000f18 <LocalBB_Process+0x160>)
 8000eae:	481b      	ldr	r0, [pc, #108]	@ (8000f1c <LocalBB_Process+0x164>)
 8000eb0:	f005 f84e 	bl	8005f50 <siprintf>
                break;
 8000eb4:	e016      	b.n	8000ee4 <LocalBB_Process+0x12c>
                
            case LOCAL_EVENT_DOOR_CMD:
                /* 设置门控命令 */
                pending_door_cmd = event.data1 ? DOOR_CMD_OPEN : DOOR_CMD_CLOSE;
 8000eb6:	7b7b      	ldrb	r3, [r7, #13]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <LocalBB_Process+0x108>
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	e000      	b.n	8000ec2 <LocalBB_Process+0x10a>
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <LocalBB_Process+0x168>)
 8000ec4:	701a      	strb	r2, [r3, #0]
                printf("[LocalBB] Door command ready: %s\r\n", 
                       pending_door_cmd == DOOR_CMD_OPEN ? "OPEN" : "CLOSE");
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <LocalBB_Process+0x168>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
                printf("[LocalBB] Door command ready: %s\r\n", 
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <LocalBB_Process+0x11a>
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <LocalBB_Process+0x16c>)
 8000ed0:	e000      	b.n	8000ed4 <LocalBB_Process+0x11c>
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <LocalBB_Process+0x170>)
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4815      	ldr	r0, [pc, #84]	@ (8000f2c <LocalBB_Process+0x174>)
 8000ed8:	f004 ffca 	bl	8005e70 <iprintf>
                break;
 8000edc:	e002      	b.n	8000ee4 <LocalBB_Process+0x12c>
                
            default:
                break;
 8000ede:	bf00      	nop
 8000ee0:	e000      	b.n	8000ee4 <LocalBB_Process+0x12c>
                break;
 8000ee2:	bf00      	nop
    while (PopEvent(&event)) {
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fdf9 	bl	8000ae0 <PopEvent>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f af68 	bne.w	8000dc6 <LocalBB_Process+0xe>
        }
    }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000a8 	.word	0x200000a8
 8000f04:	0800713c 	.word	0x0800713c
 8000f08:	08007168 	.word	0x08007168
 8000f0c:	08007194 	.word	0x08007194
 8000f10:	08007198 	.word	0x08007198
 8000f14:	080070d0 	.word	0x080070d0
 8000f18:	0800719c 	.word	0x0800719c
 8000f1c:	20000150 	.word	0x20000150
 8000f20:	20000170 	.word	0x20000170
 8000f24:	08007108 	.word	0x08007108
 8000f28:	08007110 	.word	0x08007110
 8000f2c:	080071ac 	.word	0x080071ac

08000f30 <LocalBB_PrintStatus>:
    return g_local_bb.direction;
}

/* ==================== 调试输出 ==================== */

void LocalBB_PrintStatus(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    printf("\r\n=== LocalBB Status ===\r\n");
 8000f34:	4822      	ldr	r0, [pc, #136]	@ (8000fc0 <LocalBB_PrintStatus+0x90>)
 8000f36:	f005 f803 	bl	8005f40 <puts>
    printf("Floor: %d (expect: %d)\r\n", 
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000f3a:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f3c:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8000f40:	b2db      	uxtb	r3, r3
    printf("Floor: %d (expect: %d)\r\n", 
 8000f42:	4619      	mov	r1, r3
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f46:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000f4a:	b2db      	uxtb	r3, r3
    printf("Floor: %d (expect: %d)\r\n", 
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	481e      	ldr	r0, [pc, #120]	@ (8000fc8 <LocalBB_PrintStatus+0x98>)
 8000f50:	f004 ff8e 	bl	8005e70 <iprintf>
    printf("Direction: %s, Target: %d\r\n",
           g_local_bb.direction == DIR_UP ? "UP" : 
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f56:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000f5a:	b2db      	uxtb	r3, r3
    printf("Direction: %s, Target: %d\r\n",
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d009      	beq.n	8000f74 <LocalBB_PrintStatus+0x44>
           g_local_bb.direction == DIR_DOWN ? "DOWN" : "STOP",
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f62:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d101      	bne.n	8000f70 <LocalBB_PrintStatus+0x40>
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <LocalBB_PrintStatus+0x9c>)
 8000f6e:	e002      	b.n	8000f76 <LocalBB_PrintStatus+0x46>
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <LocalBB_PrintStatus+0xa0>)
 8000f72:	e000      	b.n	8000f76 <LocalBB_PrintStatus+0x46>
    printf("Direction: %s, Target: %d\r\n",
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <LocalBB_PrintStatus+0xa4>)
           g_local_bb.target_floor);
 8000f76:	4a13      	ldr	r2, [pc, #76]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f78:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8000f7c:	b2d2      	uxtb	r2, r2
    printf("Direction: %s, Target: %d\r\n",
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4815      	ldr	r0, [pc, #84]	@ (8000fd8 <LocalBB_PrintStatus+0xa8>)
 8000f82:	f004 ff75 	bl	8005e70 <iprintf>
    printf("Events: %d in queue\r\n", g_local_bb.event_count);
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f88:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <LocalBB_PrintStatus+0xac>)
 8000f92:	f004 ff6d 	bl	8005e70 <iprintf>
    printf("Stats: Cabin=%lu, Photo=%lu, RS485=%lu\r\n",
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f98:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000f9e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <LocalBB_PrintStatus+0x94>)
 8000fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <LocalBB_PrintStatus+0xb0>)
 8000faa:	f004 ff61 	bl	8005e70 <iprintf>
           g_local_bb.cabin_call_count,
           g_local_bb.photo_trigger_count,
           g_local_bb.rs485_send_count);
    printf("Debug: %s\r\n", g_local_bb.debug_msg);
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LocalBB_PrintStatus+0xb4>)
 8000fb0:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <LocalBB_PrintStatus+0xb8>)
 8000fb2:	f004 ff5d 	bl	8005e70 <iprintf>
    printf("======================\r\n");
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <LocalBB_PrintStatus+0xbc>)
 8000fb8:	f004 ffc2 	bl	8005f40 <puts>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	080071d0 	.word	0x080071d0
 8000fc4:	200000a8 	.word	0x200000a8
 8000fc8:	080071ec 	.word	0x080071ec
 8000fcc:	080070c0 	.word	0x080070c0
 8000fd0:	080070c8 	.word	0x080070c8
 8000fd4:	080070d0 	.word	0x080070d0
 8000fd8:	08007208 	.word	0x08007208
 8000fdc:	08007224 	.word	0x08007224
 8000fe0:	0800723c 	.word	0x0800723c
 8000fe4:	20000150 	.word	0x20000150
 8000fe8:	08007268 	.word	0x08007268
 8000fec:	08007274 	.word	0x08007274

08000ff0 <LocalBB_GetDoorCommand>:

/* ==================== 门控命令接口 ==================== */

LocalBB_DoorCommand_t LocalBB_GetDoorCommand(void) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
    return pending_door_cmd;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	@ (8001000 <LocalBB_GetDoorCommand+0x10>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	20000170 	.word	0x20000170

08001004 <LocalBB_ClearDoorCommand>:

void LocalBB_ClearDoorCommand(void) {
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
    pending_door_cmd = DOOR_CMD_NONE;
 8001008:	4b03      	ldr	r3, [pc, #12]	@ (8001018 <LocalBB_ClearDoorCommand+0x14>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000170 	.word	0x20000170

0800101c <rs485_init>:

/**
 * @brief Initialize RS485 driver
 */
rs485_status_t rs485_init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    /* Clear driver structure */
    memset(&rs485_driver, 0, sizeof(rs485_driver));
 8001020:	2248      	movs	r2, #72	@ 0x48
 8001022:	2100      	movs	r1, #0
 8001024:	481b      	ldr	r0, [pc, #108]	@ (8001094 <rs485_init+0x78>)
 8001026:	f005 f88d 	bl	8006144 <memset>
    
    /* Set buffer pointers */
    rs485_driver.dma_rx_buffer = rs485_dma_rx_buffer;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <rs485_init+0x78>)
 800102c:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <rs485_init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
    rs485_driver.rx_buffer = rs485_rx_ring_buffer;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <rs485_init+0x78>)
 8001032:	4a1a      	ldr	r2, [pc, #104]	@ (800109c <rs485_init+0x80>)
 8001034:	609a      	str	r2, [r3, #8]
    rs485_driver.tx_buffer = rs485_tx_ring_buffer;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <rs485_init+0x78>)
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <rs485_init+0x84>)
 800103a:	60da      	str	r2, [r3, #12]
    
    /* Initialize ring buffers */
    ring_buffer_init(&rs485_driver.rx_ring, rs485_rx_ring_buffer, RS485_RX_BUFFER_SIZE);
 800103c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001040:	4916      	ldr	r1, [pc, #88]	@ (800109c <rs485_init+0x80>)
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <rs485_init+0x88>)
 8001044:	f000 f90a 	bl	800125c <ring_buffer_init>
    ring_buffer_init(&rs485_driver.tx_ring, rs485_tx_ring_buffer, RS485_TX_BUFFER_SIZE);
 8001048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800104c:	4914      	ldr	r1, [pc, #80]	@ (80010a0 <rs485_init+0x84>)
 800104e:	4816      	ldr	r0, [pc, #88]	@ (80010a8 <rs485_init+0x8c>)
 8001050:	f000 f904 	bl	800125c <ring_buffer_init>
    
    /* Set UART handle */
    rs485_driver.huart = &huart2;  /* slavemcu uses USART2 */
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <rs485_init+0x78>)
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <rs485_init+0x90>)
 8001058:	601a      	str	r2, [r3, #0]
    
    /* Clear DMA buffer */
    memset(rs485_dma_rx_buffer, 0, RS485_DMA_RX_BUFFER_SIZE);
 800105a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800105e:	2100      	movs	r1, #0
 8001060:	480d      	ldr	r0, [pc, #52]	@ (8001098 <rs485_init+0x7c>)
 8001062:	f005 f86f 	bl	8006144 <memset>
    
    /* Start DMA reception (already configured as circular in HAL_MspInit) */
    HAL_UART_Receive_DMA(rs485_driver.huart, rs485_dma_rx_buffer, RS485_DMA_RX_BUFFER_SIZE);
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <rs485_init+0x78>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800106e:	490a      	ldr	r1, [pc, #40]	@ (8001098 <rs485_init+0x7c>)
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fec1 	bl	8004df8 <HAL_UART_Receive_DMA>
    
    /* Enable IDLE interrupt */
     __HAL_UART_ENABLE_IT(rs485_driver.huart, UART_IT_IDLE);
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <rs485_init+0x78>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <rs485_init+0x78>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0210 	orr.w	r2, r2, #16
 8001088:	60da      	str	r2, [r3, #12]
    
    /* Reset statistics */
    rs485_reset_stats();
 800108a:	f000 f8db 	bl	8001244 <rs485_reset_stats>
    
    return RS485_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000174 	.word	0x20000174
 8001098:	200001bc 	.word	0x200001bc
 800109c:	200002bc 	.word	0x200002bc
 80010a0:	200004bc 	.word	0x200004bc
 80010a4:	20000184 	.word	0x20000184
 80010a8:	20000190 	.word	0x20000190
 80010ac:	2000075c 	.word	0x2000075c

080010b0 <rs485_send_packet_dma>:

/**
 * @brief Send packet via RS485 using DMA (non-blocking)
 */
rs485_status_t rs485_send_packet_dma(const uint8_t *data, uint16_t length)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    
    if (data == NULL || length == 0 || length > RS485_TX_BUFFER_SIZE) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <rs485_send_packet_dma+0x20>
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <rs485_send_packet_dma+0x20>
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010ce:	d901      	bls.n	80010d4 <rs485_send_packet_dma+0x24>
        return RS485_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e036      	b.n	8001142 <rs485_send_packet_dma+0x92>
    }
    
    if (rs485_driver.tx_pending) {
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <rs485_send_packet_dma+0x9c>)
 80010d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <rs485_send_packet_dma+0x34>
        return RS485_BUSY;
 80010e0:	2302      	movs	r3, #2
 80010e2:	e02e      	b.n	8001142 <rs485_send_packet_dma+0x92>
    }
    
    /* Set pending flag */
    rs485_driver.tx_pending = 1;
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <rs485_send_packet_dma+0x9c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    
    /* Copy data to TX buffer */
    memcpy(rs485_driver.tx_buffer, data, length);
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <rs485_send_packet_dma+0x9c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	887a      	ldrh	r2, [r7, #2]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 f8a0 	bl	800623a <memcpy>
    
    /* Send data via DMA */
    status = HAL_UART_Transmit_DMA(rs485_driver.huart, rs485_driver.tx_buffer, length);
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <rs485_send_packet_dma+0x9c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <rs485_send_packet_dma+0x9c>)
 8001100:	68d1      	ldr	r1, [r2, #12]
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fe07 	bl	8004d18 <HAL_UART_Transmit_DMA>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
    
    if (status == HAL_OK) {
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10c      	bne.n	800112e <rs485_send_packet_dma+0x7e>
        rs485_driver.stats.tx_packets++;
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <rs485_send_packet_dma+0x9c>)
 8001116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001118:	3301      	adds	r3, #1
 800111a:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <rs485_send_packet_dma+0x9c>)
 800111c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        rs485_driver.stats.tx_bytes += length;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <rs485_send_packet_dma+0x9c>)
 8001120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	4413      	add	r3, r2
 8001126:	4a09      	ldr	r2, [pc, #36]	@ (800114c <rs485_send_packet_dma+0x9c>)
 8001128:	6353      	str	r3, [r2, #52]	@ 0x34
        return RS485_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e009      	b.n	8001142 <rs485_send_packet_dma+0x92>
    } else {
        rs485_driver.stats.tx_errors++;
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <rs485_send_packet_dma+0x9c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	3301      	adds	r3, #1
 8001134:	4a05      	ldr	r2, [pc, #20]	@ (800114c <rs485_send_packet_dma+0x9c>)
 8001136:	6413      	str	r3, [r2, #64]	@ 0x40
        rs485_driver.tx_pending = 0;
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <rs485_send_packet_dma+0x9c>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        return RS485_ERROR;
 8001140:	2301      	movs	r3, #1
    }
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000174 	.word	0x20000174

08001150 <rs485_receive_packet>:

/**
 * @brief Receive packet from RS485
 */
uint16_t rs485_receive_packet(uint8_t *buffer, uint16_t max_length)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
    if (buffer == NULL || max_length == 0) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <rs485_receive_packet+0x18>
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <rs485_receive_packet+0x1c>
        return 0;
 8001168:	2300      	movs	r3, #0
 800116a:	e013      	b.n	8001194 <rs485_receive_packet+0x44>
    }
    
    /* Process any pending DMA data */
    rs485_process_dma_rx();
 800116c:	f000 f926 	bl	80013bc <rs485_process_dma_rx>
    
    /* Read from ring buffer */
    uint16_t received = ring_buffer_read(&rs485_driver.rx_ring, buffer, max_length);
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	461a      	mov	r2, r3
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4809      	ldr	r0, [pc, #36]	@ (800119c <rs485_receive_packet+0x4c>)
 8001178:	f000 f8c1 	bl	80012fe <ring_buffer_read>
 800117c:	4603      	mov	r3, r0
 800117e:	81fb      	strh	r3, [r7, #14]
    
    if (received > 0) {
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <rs485_receive_packet+0x42>
        rs485_driver.stats.rx_bytes += received;
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <rs485_receive_packet+0x50>)
 8001188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	4413      	add	r3, r2
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <rs485_receive_packet+0x50>)
 8001190:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    
    return received;
 8001192:	89fb      	ldrh	r3, [r7, #14]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000184 	.word	0x20000184
 80011a0:	20000174 	.word	0x20000174

080011a4 <rs485_idle_interrupt_handler>:

/**
 * @brief Handle IDLE interrupt for RS485
 */
void rs485_idle_interrupt_handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80011aa:	af00      	add	r7, sp, #0
    /* Clear IDLE flag */
    __HAL_UART_CLEAR_IDLEFLAG(rs485_driver.huart);
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <rs485_idle_interrupt_handler+0x80>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <rs485_idle_interrupt_handler+0x80>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80011ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
    
    /* Process received data */
    rs485_process_dma_rx();
 80011ce:	f000 f8f5 	bl	80013bc <rs485_process_dma_rx>
    
    rs485_driver.stats.rx_packets++;
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <rs485_idle_interrupt_handler+0x80>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <rs485_idle_interrupt_handler+0x80>)
 80011da:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Call packet callback if set */
    if (rs485_driver.packet_received_callback != NULL) {
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <rs485_idle_interrupt_handler+0x80>)
 80011de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d01a      	beq.n	800121a <rs485_idle_interrupt_handler+0x76>
        uint16_t available = ring_buffer_available(&rs485_driver.rx_ring);
 80011e4:	4810      	ldr	r0, [pc, #64]	@ (8001228 <rs485_idle_interrupt_handler+0x84>)
 80011e6:	f000 f8c2 	bl	800136e <ring_buffer_available>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        if (available > 0) {
 80011f0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d010      	beq.n	800121a <rs485_idle_interrupt_handler+0x76>
            uint8_t temp_buffer[RS485_RX_BUFFER_SIZE];
            uint16_t length = ring_buffer_read(&rs485_driver.rx_ring, temp_buffer, available);
 80011f8:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <rs485_idle_interrupt_handler+0x84>)
 8001202:	f000 f87c 	bl	80012fe <ring_buffer_read>
 8001206:	4603      	mov	r3, r0
 8001208:	f8a7 3204 	strh.w	r3, [r7, #516]	@ 0x204
            rs485_driver.packet_received_callback(temp_buffer, length);
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <rs485_idle_interrupt_handler+0x80>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001210:	f8b7 1204 	ldrh.w	r1, [r7, #516]	@ 0x204
 8001214:	463a      	mov	r2, r7
 8001216:	4610      	mov	r0, r2
 8001218:	4798      	blx	r3
        }
    }
}
 800121a:	bf00      	nop
 800121c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000174 	.word	0x20000174
 8001228:	20000184 	.word	0x20000184

0800122c <rs485_tx_complete_callback>:

/**
 * @brief TX complete callback
 */
void rs485_tx_complete_callback(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
    /* Clear pending flag */
    rs485_driver.tx_pending = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <rs485_tx_complete_callback+0x14>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	20000174 	.word	0x20000174

08001244 <rs485_reset_stats>:

/**
 * @brief Reset RS485 statistics
 */
void rs485_reset_stats(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    memset(&rs485_driver.stats, 0, sizeof(rs485_stats_t));
 8001248:	2218      	movs	r2, #24
 800124a:	2100      	movs	r1, #0
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <rs485_reset_stats+0x14>)
 800124e:	f004 ff79 	bl	8006144 <memset>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001a0 	.word	0x200001a0

0800125c <ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
static void ring_buffer_init(ring_buffer_t *rb, uint8_t *buffer, uint16_t size)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]
    rb->buffer = buffer;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	601a      	str	r2, [r3, #0]
    rb->size = size;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	809a      	strh	r2, [r3, #4]
    rb->head = 0;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	80da      	strh	r2, [r3, #6]
    rb->tail = 0;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	811a      	strh	r2, [r3, #8]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <ring_buffer_write>:

/**
 * @brief Write data to ring buffer
 */
static uint16_t ring_buffer_write(ring_buffer_t *rb, const uint8_t *data, uint16_t length)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]
    uint16_t written = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	82fb      	strh	r3, [r7, #22]
    
    while (written < length) {
 800129e:	e022      	b.n	80012e6 <ring_buffer_write+0x5a>
        uint16_t next_head = (rb->head + 1) % rb->size;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	88db      	ldrh	r3, [r3, #6]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	8892      	ldrh	r2, [r2, #4]
 80012ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80012b0:	fb01 f202 	mul.w	r2, r1, r2
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	82bb      	strh	r3, [r7, #20]
        
        /* Check if buffer is full */
        if (next_head == rb->tail) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	891b      	ldrh	r3, [r3, #8]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	8aba      	ldrh	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d015      	beq.n	80012f0 <ring_buffer_write+0x64>
            break;  /* Buffer full */
        }
        
        rb->buffer[rb->head] = data[written];
 80012c4:	8afb      	ldrh	r3, [r7, #22]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	441a      	add	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68f9      	ldr	r1, [r7, #12]
 80012d0:	88c9      	ldrh	r1, [r1, #6]
 80012d2:	b289      	uxth	r1, r1
 80012d4:	440b      	add	r3, r1
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	701a      	strb	r2, [r3, #0]
        rb->head = next_head;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8aba      	ldrh	r2, [r7, #20]
 80012de:	80da      	strh	r2, [r3, #6]
        written++;
 80012e0:	8afb      	ldrh	r3, [r7, #22]
 80012e2:	3301      	adds	r3, #1
 80012e4:	82fb      	strh	r3, [r7, #22]
    while (written < length) {
 80012e6:	8afa      	ldrh	r2, [r7, #22]
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3d8      	bcc.n	80012a0 <ring_buffer_write+0x14>
 80012ee:	e000      	b.n	80012f2 <ring_buffer_write+0x66>
            break;  /* Buffer full */
 80012f0:	bf00      	nop
    }
    
    return written;
 80012f2:	8afb      	ldrh	r3, [r7, #22]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <ring_buffer_read>:

/**
 * @brief Read data from ring buffer
 */
static uint16_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data, uint16_t length)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	4613      	mov	r3, r2
 800130a:	80fb      	strh	r3, [r7, #6]
    uint16_t read = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	82fb      	strh	r3, [r7, #22]
    
    while (read < length && rb->tail != rb->head) {
 8001310:	e01b      	b.n	800134a <ring_buffer_read+0x4c>
        data[read] = rb->buffer[rb->tail];
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	8912      	ldrh	r2, [r2, #8]
 800131a:	b292      	uxth	r2, r2
 800131c:	441a      	add	r2, r3
 800131e:	8afb      	ldrh	r3, [r7, #22]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	440b      	add	r3, r1
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	701a      	strb	r2, [r3, #0]
        rb->tail = (rb->tail + 1) % rb->size;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	891b      	ldrh	r3, [r3, #8]
 800132c:	b29b      	uxth	r3, r3
 800132e:	3301      	adds	r3, #1
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	8892      	ldrh	r2, [r2, #4]
 8001334:	fb93 f1f2 	sdiv	r1, r3, r2
 8001338:	fb01 f202 	mul.w	r2, r1, r2
 800133c:	1a9b      	subs	r3, r3, r2
 800133e:	b29a      	uxth	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	811a      	strh	r2, [r3, #8]
        read++;
 8001344:	8afb      	ldrh	r3, [r7, #22]
 8001346:	3301      	adds	r3, #1
 8001348:	82fb      	strh	r3, [r7, #22]
    while (read < length && rb->tail != rb->head) {
 800134a:	8afa      	ldrh	r2, [r7, #22]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	429a      	cmp	r2, r3
 8001350:	d207      	bcs.n	8001362 <ring_buffer_read+0x64>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	891b      	ldrh	r3, [r3, #8]
 8001356:	b29a      	uxth	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	88db      	ldrh	r3, [r3, #6]
 800135c:	b29b      	uxth	r3, r3
 800135e:	429a      	cmp	r2, r3
 8001360:	d1d7      	bne.n	8001312 <ring_buffer_read+0x14>
    }
    
    return read;
 8001362:	8afb      	ldrh	r3, [r7, #22]
}
 8001364:	4618      	mov	r0, r3
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <ring_buffer_available>:

/**
 * @brief Get available data in ring buffer
 */
static uint16_t ring_buffer_available(ring_buffer_t *rb)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
    if (rb->head >= rb->tail) {
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	88db      	ldrh	r3, [r3, #6]
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	891b      	ldrh	r3, [r3, #8]
 8001380:	b29b      	uxth	r3, r3
 8001382:	429a      	cmp	r2, r3
 8001384:	d308      	bcc.n	8001398 <ring_buffer_available+0x2a>
        return rb->head - rb->tail;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	88db      	ldrh	r3, [r3, #6]
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	891b      	ldrh	r3, [r3, #8]
 8001390:	b29b      	uxth	r3, r3
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	e00b      	b.n	80013b0 <ring_buffer_available+0x42>
    } else {
        return rb->size - rb->tail + rb->head;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	889a      	ldrh	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	88db      	ldrh	r3, [r3, #6]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
    }
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
	...

080013bc <rs485_process_dma_rx>:

/**
 * @brief Process DMA received data
 */
static void rs485_process_dma_rx(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
    /* Get current DMA position */
    uint16_t dma_pos = RS485_DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(rs485_driver.huart->hdmarx);
 80013c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80013d2:	80bb      	strh	r3, [r7, #4]
    
    /* Calculate received bytes */
    uint16_t length;
    if (dma_pos >= rs485_driver.last_dma_pos) {
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 80013d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d8:	b29b      	uxth	r3, r3
 80013da:	88ba      	ldrh	r2, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d306      	bcc.n	80013ee <rs485_process_dma_rx+0x32>
        length = dma_pos - rs485_driver.last_dma_pos;
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	88ba      	ldrh	r2, [r7, #4]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	80fb      	strh	r3, [r7, #6]
 80013ec:	e008      	b.n	8001400 <rs485_process_dma_rx+0x44>
    } else {
        /* DMA wrapped around */
        length = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos + dma_pos;
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 80013f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	88ba      	ldrh	r2, [r7, #4]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80013fe:	80fb      	strh	r3, [r7, #6]
    }
    
    if (length > 0) {
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d031      	beq.n	800146a <rs485_process_dma_rx+0xae>
        /* Copy data to ring buffer */
        if (rs485_driver.last_dma_pos + length <= RS485_DMA_RX_BUFFER_SIZE) {
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 8001408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4413      	add	r3, r2
 8001412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001416:	dc0b      	bgt.n	8001430 <rs485_process_dma_rx+0x74>
            /* Simple copy */
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 8001418:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 800141a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <rs485_process_dma_rx+0xbc>)
 8001422:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	4619      	mov	r1, r3
 8001428:	4814      	ldr	r0, [pc, #80]	@ (800147c <rs485_process_dma_rx+0xc0>)
 800142a:	f7ff ff2f 	bl	800128c <ring_buffer_write>
 800142e:	e019      	b.n	8001464 <rs485_process_dma_rx+0xa8>
                            length);
        } else {
            /* Wrapped copy */
            uint16_t first_part = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 8001432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800143a:	807b      	strh	r3, [r7, #2]
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 800143e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <rs485_process_dma_rx+0xbc>)
 8001446:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8001448:	887a      	ldrh	r2, [r7, #2]
 800144a:	4619      	mov	r1, r3
 800144c:	480b      	ldr	r0, [pc, #44]	@ (800147c <rs485_process_dma_rx+0xc0>)
 800144e:	f7ff ff1d 	bl	800128c <ring_buffer_write>
                            first_part);
            ring_buffer_write(&rs485_driver.rx_ring, 
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4906      	ldr	r1, [pc, #24]	@ (8001478 <rs485_process_dma_rx+0xbc>)
 800145e:	4807      	ldr	r0, [pc, #28]	@ (800147c <rs485_process_dma_rx+0xc0>)
 8001460:	f7ff ff14 	bl	800128c <ring_buffer_write>
                            &rs485_dma_rx_buffer[0], 
                            length - first_part);
        }
        
        /* Update last position */
        rs485_driver.last_dma_pos = dma_pos;
 8001464:	4a03      	ldr	r2, [pc, #12]	@ (8001474 <rs485_process_dma_rx+0xb8>)
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	8553      	strh	r3, [r2, #42]	@ 0x2a
    }
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000174 	.word	0x20000174
 8001478:	200001bc 	.word	0x200001bc
 800147c:	20000184 	.word	0x20000184

08001480 <Keyboard_Init>:

// 全局键盘实例
Keyboard_t g_keyboard;

// 初始化键盘模块
void Keyboard_Init(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    // 清零结构体
    memset(&g_keyboard, 0, sizeof(Keyboard_t));
 8001484:	2228      	movs	r2, #40	@ 0x28
 8001486:	2100      	movs	r1, #0
 8001488:	4811      	ldr	r0, [pc, #68]	@ (80014d0 <Keyboard_Init+0x50>)
 800148a:	f004 fe5b 	bl	8006144 <memset>
    
    // 初始化变量
    g_keyboard.current_key = KEY_NONE;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <Keyboard_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    g_keyboard.last_key = KEY_NONE;
 8001494:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <Keyboard_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	705a      	strb	r2, [r3, #1]
    g_keyboard.last_scan_time = HAL_GetTick();
 800149a:	f002 f911 	bl	80036c0 <HAL_GetTick>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <Keyboard_Init+0x50>)
 80014a2:	6053      	str	r3, [r2, #4]
    g_keyboard.key_stable = false;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <Keyboard_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	735a      	strb	r2, [r3, #13]
    g_keyboard.buffer_head = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <Keyboard_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <Keyboard_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <Keyboard_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	761a      	strb	r2, [r3, #24]
    g_keyboard.interrupt_flag = false;
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <Keyboard_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = 0;
 80014c2:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <Keyboard_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
    
    // 初始化GPIO
    Keyboard_GPIO_Init();
 80014c8:	f000 fa44 	bl	8001954 <Keyboard_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200006bc 	.word	0x200006bc

080014d4 <Keyboard_Handler>:

// 主处理函数 - 中断模式
void Keyboard_Handler(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
    // 检查中断标志
    if (g_keyboard.interrupt_flag) {
 80014da:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <Keyboard_Handler+0xa4>)
 80014dc:	7e5b      	ldrb	r3, [r3, #25]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d034      	beq.n	800154e <Keyboard_Handler+0x7a>
        g_keyboard.interrupt_flag = false;
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <Keyboard_Handler+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	765a      	strb	r2, [r3, #25]
        
        uint32_t current_time = HAL_GetTick();
 80014ea:	f002 f8e9 	bl	80036c0 <HAL_GetTick>
 80014ee:	60f8      	str	r0, [r7, #12]
        
        // 去抖处理 - 两次按键间隔至少 KEYBOARD_DEBOUNCE_TIME
        if (current_time - g_keyboard.last_scan_time >= KEYBOARD_DEBOUNCE_TIME) {
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <Keyboard_Handler+0xa4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d928      	bls.n	800154e <Keyboard_Handler+0x7a>
            g_keyboard.last_scan_time = current_time;
 80014fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <Keyboard_Handler+0xa4>)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6053      	str	r3, [r2, #4]
            
            // 不使用HAL_Delay，用极短的延时
            for(volatile int d = 0; d < 500; d++);
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	e002      	b.n	800150e <Keyboard_Handler+0x3a>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001514:	dbf8      	blt.n	8001508 <Keyboard_Handler+0x34>
            
            // 扫描键盘确定哪个按键被按下
            uint8_t key = Keyboard_ScanInterrupt();
 8001516:	f000 f831 	bl	800157c <Keyboard_ScanInterrupt>
 800151a:	4603      	mov	r3, r0
 800151c:	72fb      	strb	r3, [r7, #11]
            
            // 处理按键 - 允许重复按键
            if (key != KEY_NONE) {
 800151e:	7afb      	ldrb	r3, [r7, #11]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d011      	beq.n	8001548 <Keyboard_Handler+0x74>
                // 只在按键不同或超过释放时间后才处理
                if (key != g_keyboard.last_key || 
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <Keyboard_Handler+0xa4>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	7afa      	ldrb	r2, [r7, #11]
 800152a:	429a      	cmp	r2, r3
 800152c:	d105      	bne.n	800153a <Keyboard_Handler+0x66>
                    (current_time - g_keyboard.key_press_time) > KEYBOARD_RELEASE_TIME) {
 800152e:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <Keyboard_Handler+0xa4>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
                if (key != g_keyboard.last_key || 
 8001536:	2b0a      	cmp	r3, #10
 8001538:	d906      	bls.n	8001548 <Keyboard_Handler+0x74>
                    Keyboard_ProcessKey(key);
 800153a:	7afb      	ldrb	r3, [r7, #11]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f9e1 	bl	8001904 <Keyboard_ProcessKey>
                    g_keyboard.last_key = key;
 8001542:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <Keyboard_Handler+0xa4>)
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	7053      	strb	r3, [r2, #1]
                }
            }
            
            // 设置按键释放超时
            g_keyboard.key_press_time = current_time;
 8001548:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <Keyboard_Handler+0xa4>)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6093      	str	r3, [r2, #8]
        }
    }
    
    // 检查按键释放
    uint32_t current_time = HAL_GetTick();
 800154e:	f002 f8b7 	bl	80036c0 <HAL_GetTick>
 8001552:	6078      	str	r0, [r7, #4]
    if (g_keyboard.last_key != KEY_NONE) {
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <Keyboard_Handler+0xa4>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <Keyboard_Handler+0x9a>
        if (current_time - g_keyboard.key_press_time > KEYBOARD_RELEASE_TIME) {
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <Keyboard_Handler+0xa4>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b0a      	cmp	r3, #10
 8001566:	d902      	bls.n	800156e <Keyboard_Handler+0x9a>
            g_keyboard.last_key = KEY_NONE;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <Keyboard_Handler+0xa4>)
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
        }
    }
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200006bc 	.word	0x200006bc

0800157c <Keyboard_ScanInterrupt>:
    
    return KEY_NONE;
}

// Scan keyboard when interrupt triggered
uint8_t Keyboard_ScanInterrupt(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b090      	sub	sp, #64	@ 0x40
 8001580:	af00      	add	r7, sp, #0
    uint8_t key = KEY_NONE;
 8001582:	2300      	movs	r3, #0
 8001584:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t confirm_count = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    // First set all columns HIGH to prepare for scanning
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 800158e:	2201      	movs	r2, #1
 8001590:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001594:	48a3      	ldr	r0, [pc, #652]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 8001596:	f002 fe0c 	bl	80041b2 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_SET);
    
    // 等待电平稳定 - 使用循环代替HAL_Delay（中断中不能用HAL_Delay）
    for(volatile int delay = 0; delay < 1000; delay++);
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
 800159e:	e002      	b.n	80015a6 <Keyboard_ScanInterrupt+0x2a>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ac:	dbf8      	blt.n	80015a0 <Keyboard_ScanInterrupt+0x24>
    // S13 -> PA12 -> Not used
    
    // Test each column one by one with confirmation
    
    // Test PA4 (COL4_PIN) for S16 -> Floor 1
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_RESET);  // PA4
 80015ae:	2200      	movs	r2, #0
 80015b0:	2110      	movs	r1, #16
 80015b2:	489c      	ldr	r0, [pc, #624]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80015b4:	f002 fdfd 	bl	80041b2 <HAL_GPIO_WritePin>
    for(volatile int delay = 0; delay < 1000; delay++);  // 等待电平稳定
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	e002      	b.n	80015c4 <Keyboard_ScanInterrupt+0x48>
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	3301      	adds	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ca:	dbf8      	blt.n	80015be <Keyboard_ScanInterrupt+0x42>
    // 连续读取3次确认
    confirm_count = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    for (int i = 0; i < 3; i++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015d6:	e018      	b.n	800160a <Keyboard_ScanInterrupt+0x8e>
        if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 80015d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015dc:	4891      	ldr	r0, [pc, #580]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80015de:	f002 fdd1 	bl	8004184 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d104      	bne.n	80015f2 <Keyboard_ScanInterrupt+0x76>
            confirm_count++;
 80015e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80015ec:	3301      	adds	r3, #1
 80015ee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        }
        for(volatile int j = 0; j < 100; j++);
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e002      	b.n	80015fe <Keyboard_ScanInterrupt+0x82>
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	2b63      	cmp	r3, #99	@ 0x63
 8001602:	ddf9      	ble.n	80015f8 <Keyboard_ScanInterrupt+0x7c>
    for (int i = 0; i < 3; i++) {
 8001604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001606:	3301      	adds	r3, #1
 8001608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800160a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800160c:	2b02      	cmp	r3, #2
 800160e:	dde3      	ble.n	80015d8 <Keyboard_ScanInterrupt+0x5c>
    }
    if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 8001610:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <Keyboard_ScanInterrupt+0xa2>
        key = KEY_S16;  // Floor 1
 8001618:	2310      	movs	r3, #16
 800161a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2110      	movs	r1, #16
 8001622:	4880      	ldr	r0, [pc, #512]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 8001624:	f002 fdc5 	bl	80041b2 <HAL_GPIO_WritePin>
    
    if (key == KEY_NONE) {
 8001628:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800162c:	2b00      	cmp	r3, #0
 800162e:	d13e      	bne.n	80016ae <Keyboard_ScanInterrupt+0x132>
        // Test PA8 (COL1_PIN) for S15 -> Floor 2
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_RESET);  // PA8
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001636:	487b      	ldr	r0, [pc, #492]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 8001638:	f002 fdbb 	bl	80041b2 <HAL_GPIO_WritePin>
        for(volatile int delay = 0; delay < 1000; delay++);
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	e002      	b.n	8001648 <Keyboard_ScanInterrupt+0xcc>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	3301      	adds	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800164e:	dbf8      	blt.n	8001642 <Keyboard_ScanInterrupt+0xc6>
        confirm_count = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        for (int i = 0; i < 3; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	637b      	str	r3, [r7, #52]	@ 0x34
 800165a:	e018      	b.n	800168e <Keyboard_ScanInterrupt+0x112>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 800165c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001660:	4870      	ldr	r0, [pc, #448]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 8001662:	f002 fd8f 	bl	8004184 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d104      	bne.n	8001676 <Keyboard_ScanInterrupt+0xfa>
                confirm_count++;
 800166c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001670:	3301      	adds	r3, #1
 8001672:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            }
            for(volatile int j = 0; j < 100; j++);
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e002      	b.n	8001682 <Keyboard_ScanInterrupt+0x106>
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b63      	cmp	r3, #99	@ 0x63
 8001686:	ddf9      	ble.n	800167c <Keyboard_ScanInterrupt+0x100>
        for (int i = 0; i < 3; i++) {
 8001688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168a:	3301      	adds	r3, #1
 800168c:	637b      	str	r3, [r7, #52]	@ 0x34
 800168e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001690:	2b02      	cmp	r3, #2
 8001692:	dde3      	ble.n	800165c <Keyboard_ScanInterrupt+0xe0>
        }
        if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 8001694:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <Keyboard_ScanInterrupt+0x126>
            key = KEY_S15;  // Floor 2
 800169c:	230f      	movs	r3, #15
 800169e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016a8:	485e      	ldr	r0, [pc, #376]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80016aa:	f002 fd82 	bl	80041b2 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 80016ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d13c      	bne.n	8001730 <Keyboard_ScanInterrupt+0x1b4>
        // Test PA5 (COL3_PIN) for S14 -> Floor 3
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_RESET);  // PA5
 80016b6:	2200      	movs	r2, #0
 80016b8:	2120      	movs	r1, #32
 80016ba:	485a      	ldr	r0, [pc, #360]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80016bc:	f002 fd79 	bl	80041b2 <HAL_GPIO_WritePin>
        for(volatile int delay = 0; delay < 1000; delay++);
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	e002      	b.n	80016cc <Keyboard_ScanInterrupt+0x150>
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	3301      	adds	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016d2:	dbf8      	blt.n	80016c6 <Keyboard_ScanInterrupt+0x14a>
        confirm_count = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        for (int i = 0; i < 3; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80016de:	e018      	b.n	8001712 <Keyboard_ScanInterrupt+0x196>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 80016e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016e4:	484f      	ldr	r0, [pc, #316]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80016e6:	f002 fd4d 	bl	8004184 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d104      	bne.n	80016fa <Keyboard_ScanInterrupt+0x17e>
                confirm_count++;
 80016f0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80016f4:	3301      	adds	r3, #1
 80016f6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            }
            for(volatile int j = 0; j < 100; j++);
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e002      	b.n	8001706 <Keyboard_ScanInterrupt+0x18a>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b63      	cmp	r3, #99	@ 0x63
 800170a:	ddf9      	ble.n	8001700 <Keyboard_ScanInterrupt+0x184>
        for (int i = 0; i < 3; i++) {
 800170c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170e:	3301      	adds	r3, #1
 8001710:	633b      	str	r3, [r7, #48]	@ 0x30
 8001712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001714:	2b02      	cmp	r3, #2
 8001716:	dde3      	ble.n	80016e0 <Keyboard_ScanInterrupt+0x164>
        }
        if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 8001718:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <Keyboard_ScanInterrupt+0x1aa>
            key = KEY_S14;  // Floor 3
 8001720:	230e      	movs	r3, #14
 8001722:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2120      	movs	r1, #32
 800172a:	483e      	ldr	r0, [pc, #248]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 800172c:	f002 fd41 	bl	80041b2 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 8001730:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13e      	bne.n	80017b6 <Keyboard_ScanInterrupt+0x23a>
        // Test PA12 (COL2_PIN) for S13 -> Not used
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_RESET);  // PA12
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800173e:	4839      	ldr	r0, [pc, #228]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 8001740:	f002 fd37 	bl	80041b2 <HAL_GPIO_WritePin>
        for(volatile int delay = 0; delay < 1000; delay++);
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	e002      	b.n	8001750 <Keyboard_ScanInterrupt+0x1d4>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001756:	dbf8      	blt.n	800174a <Keyboard_ScanInterrupt+0x1ce>
        confirm_count = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        for (int i = 0; i < 3; i++) {
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001762:	e018      	b.n	8001796 <Keyboard_ScanInterrupt+0x21a>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8001764:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001768:	482e      	ldr	r0, [pc, #184]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 800176a:	f002 fd0b 	bl	8004184 <HAL_GPIO_ReadPin>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d104      	bne.n	800177e <Keyboard_ScanInterrupt+0x202>
                confirm_count++;
 8001774:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001778:	3301      	adds	r3, #1
 800177a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            }
            for(volatile int j = 0; j < 100; j++);
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	e002      	b.n	800178a <Keyboard_ScanInterrupt+0x20e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3301      	adds	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b63      	cmp	r3, #99	@ 0x63
 800178e:	ddf9      	ble.n	8001784 <Keyboard_ScanInterrupt+0x208>
        for (int i = 0; i < 3; i++) {
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	3301      	adds	r3, #1
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001798:	2b02      	cmp	r3, #2
 800179a:	dde3      	ble.n	8001764 <Keyboard_ScanInterrupt+0x1e8>
        }
        if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 800179c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <Keyboard_ScanInterrupt+0x22e>
            key = KEY_S13;  // S13 detected but not used in elevator logic
 80017a4:	230d      	movs	r3, #13
 80017a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b0:	481c      	ldr	r0, [pc, #112]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80017b2:	f002 fcfe 	bl	80041b2 <HAL_GPIO_WritePin>
    }
    
    // 等待按键释放
    if (key != KEY_NONE) {
 80017b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d025      	beq.n	800180a <Keyboard_ScanInterrupt+0x28e>
        // 等待按键释放（最多等20ms）- 大幅缩短
        uint32_t wait_start = HAL_GetTick();
 80017be:	f001 ff7f 	bl	80036c0 <HAL_GetTick>
 80017c2:	62b8      	str	r0, [r7, #40]	@ 0x28
        while ((HAL_GetTick() - wait_start) < 20) {
 80017c4:	e01a      	b.n	80017fc <Keyboard_ScanInterrupt+0x280>
            // 设置所有列为HIGH
            HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 80017c6:	2201      	movs	r2, #1
 80017c8:	f241 1130 	movw	r1, #4400	@ 0x1130
 80017cc:	4815      	ldr	r0, [pc, #84]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80017ce:	f002 fcf0 	bl	80041b2 <HAL_GPIO_WritePin>
                              KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                              KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                              GPIO_PIN_SET);
            // 不延时或使用极小延时
            for(volatile int d = 0; d < 100; d++);
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	e002      	b.n	80017de <Keyboard_ScanInterrupt+0x262>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b63      	cmp	r3, #99	@ 0x63
 80017e2:	ddf9      	ble.n	80017d8 <Keyboard_ScanInterrupt+0x25c>
            
            // 检查是否释放
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_SET) {
 80017e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017e8:	480e      	ldr	r0, [pc, #56]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 80017ea:	f002 fccb 	bl	8004184 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d103      	bne.n	80017fc <Keyboard_ScanInterrupt+0x280>
                // 按键已释放
                HAL_Delay(1);  // 极小额外延时
 80017f4:	2001      	movs	r0, #1
 80017f6:	f001 ff6d 	bl	80036d4 <HAL_Delay>
                break;
 80017fa:	e006      	b.n	800180a <Keyboard_ScanInterrupt+0x28e>
        while ((HAL_GetTick() - wait_start) < 20) {
 80017fc:	f001 ff60 	bl	80036c0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b13      	cmp	r3, #19
 8001808:	d9dd      	bls.n	80017c6 <Keyboard_ScanInterrupt+0x24a>
            }
        }
    }
    
    // After scanning, set all columns LOW again for next interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 800180a:	2200      	movs	r2, #0
 800180c:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <Keyboard_ScanInterrupt+0x2a8>)
 8001812:	f002 fcce 	bl	80041b2 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
    
    return key;
 8001816:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800181a:	4618      	mov	r0, r3
 800181c:	3740      	adds	r7, #64	@ 0x40
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40010800 	.word	0x40010800

08001828 <Keyboard_PushKey>:
bool Keyboard_IsKeyPressed(uint8_t key) {
    return (g_keyboard.current_key == key && g_keyboard.key_stable);
}

// 将按键推入缓冲区
bool Keyboard_PushKey(uint8_t key) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
    if (g_keyboard.buffer_count >= KEYBOARD_BUFFER_SIZE) {
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <Keyboard_PushKey+0x58>)
 8001834:	7e1b      	ldrb	r3, [r3, #24]
 8001836:	2b07      	cmp	r3, #7
 8001838:	d901      	bls.n	800183e <Keyboard_PushKey+0x16>
        return false;  // 缓冲区满
 800183a:	2300      	movs	r3, #0
 800183c:	e01a      	b.n	8001874 <Keyboard_PushKey+0x4c>
    }
    
    g_keyboard.key_buffer[g_keyboard.buffer_tail] = key;
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <Keyboard_PushKey+0x58>)
 8001840:	7ddb      	ldrb	r3, [r3, #23]
 8001842:	461a      	mov	r2, r3
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <Keyboard_PushKey+0x58>)
 8001846:	4413      	add	r3, r2
 8001848:	79fa      	ldrb	r2, [r7, #7]
 800184a:	739a      	strb	r2, [r3, #14]
    g_keyboard.buffer_tail = (g_keyboard.buffer_tail + 1) % KEYBOARD_BUFFER_SIZE;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <Keyboard_PushKey+0x58>)
 800184e:	7ddb      	ldrb	r3, [r3, #23]
 8001850:	3301      	adds	r3, #1
 8001852:	425a      	negs	r2, r3
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	f002 0207 	and.w	r2, r2, #7
 800185c:	bf58      	it	pl
 800185e:	4253      	negpl	r3, r2
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <Keyboard_PushKey+0x58>)
 8001864:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count++;
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <Keyboard_PushKey+0x58>)
 8001868:	7e1b      	ldrb	r3, [r3, #24]
 800186a:	3301      	adds	r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <Keyboard_PushKey+0x58>)
 8001870:	761a      	strb	r2, [r3, #24]
    
    return true;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200006bc 	.word	0x200006bc

08001884 <Keyboard_PopKey>:

// 从缓冲区弹出按键
bool Keyboard_PopKey(uint8_t* key) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    if (g_keyboard.buffer_count == 0) {
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <Keyboard_PopKey+0x58>)
 800188e:	7e1b      	ldrb	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <Keyboard_PopKey+0x14>
        return false;  // 缓冲区空
 8001894:	2300      	movs	r3, #0
 8001896:	e01b      	b.n	80018d0 <Keyboard_PopKey+0x4c>
    }
    
    *key = g_keyboard.key_buffer[g_keyboard.buffer_head];
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <Keyboard_PopKey+0x58>)
 800189a:	7d9b      	ldrb	r3, [r3, #22]
 800189c:	461a      	mov	r2, r3
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <Keyboard_PopKey+0x58>)
 80018a0:	4413      	add	r3, r2
 80018a2:	7b9a      	ldrb	r2, [r3, #14]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	701a      	strb	r2, [r3, #0]
    g_keyboard.buffer_head = (g_keyboard.buffer_head + 1) % KEYBOARD_BUFFER_SIZE;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <Keyboard_PopKey+0x58>)
 80018aa:	7d9b      	ldrb	r3, [r3, #22]
 80018ac:	3301      	adds	r3, #1
 80018ae:	425a      	negs	r2, r3
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	f002 0207 	and.w	r2, r2, #7
 80018b8:	bf58      	it	pl
 80018ba:	4253      	negpl	r3, r2
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <Keyboard_PopKey+0x58>)
 80018c0:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_count--;
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <Keyboard_PopKey+0x58>)
 80018c4:	7e1b      	ldrb	r3, [r3, #24]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <Keyboard_PopKey+0x58>)
 80018cc:	761a      	strb	r2, [r3, #24]
    
    return true;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200006bc 	.word	0x200006bc

080018e0 <Keyboard_ClearBuffer>:
bool Keyboard_HasKey(void) {
    return g_keyboard.buffer_count > 0;
}

// 清空缓冲区
void Keyboard_ClearBuffer(void) {
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
    g_keyboard.buffer_head = 0;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <Keyboard_ClearBuffer+0x20>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <Keyboard_ClearBuffer+0x20>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <Keyboard_ClearBuffer+0x20>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	761a      	strb	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200006bc 	.word	0x200006bc

08001904 <Keyboard_ProcessKey>:

// 处理按键
void Keyboard_ProcessKey(uint8_t key) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    if (key != KEY_NONE) {
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d019      	beq.n	8001948 <Keyboard_ProcessKey+0x44>
        g_keyboard.total_key_presses++;
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <Keyboard_ProcessKey+0x4c>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	3301      	adds	r3, #1
 800191a:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <Keyboard_ProcessKey+0x4c>)
 800191c:	6213      	str	r3, [r2, #32]
        g_keyboard.key_press_time = HAL_GetTick();
 800191e:	f001 fecf 	bl	80036c0 <HAL_GetTick>
 8001922:	4603      	mov	r3, r0
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <Keyboard_ProcessKey+0x4c>)
 8001926:	6093      	str	r3, [r2, #8]
        
        // 推入缓冲区
        if (!Keyboard_PushKey(key)) {
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff7c 	bl	8001828 <Keyboard_PushKey>
 8001930:	4603      	mov	r3, r0
 8001932:	f083 0301 	eor.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <Keyboard_ProcessKey+0x44>
            // 缓冲区满，清空后再推入
            Keyboard_ClearBuffer();
 800193c:	f7ff ffd0 	bl	80018e0 <Keyboard_ClearBuffer>
            Keyboard_PushKey(key);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff70 	bl	8001828 <Keyboard_PushKey>
        }
        
    }
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200006bc 	.word	0x200006bc

08001954 <Keyboard_GPIO_Init>:


// GPIO Init
void Keyboard_GPIO_Init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    // GPIO is already initialized in gpio.c
    // Set all columns LOW initially for interrupt mode
    // When any button is pressed, it will pull PA11 LOW and trigger interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8001958:	2200      	movs	r2, #0
 800195a:	f241 1130 	movw	r1, #4400	@ 0x1130
 800195e:	4802      	ldr	r0, [pc, #8]	@ (8001968 <Keyboard_GPIO_Init+0x14>)
 8001960:	f002 fc27 	bl	80041b2 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010800 	.word	0x40010800

0800196c <Keyboard_IRQHandler>:


// 中断处理函数
void Keyboard_IRQHandler(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    // 设置中断标志
    g_keyboard.interrupt_flag = true;
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <Keyboard_IRQHandler+0x18>)
 8001972:	2201      	movs	r2, #1
 8001974:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = HAL_GetTick();
 8001976:	f001 fea3 	bl	80036c0 <HAL_GetTick>
 800197a:	4603      	mov	r3, r0
 800197c:	4a01      	ldr	r2, [pc, #4]	@ (8001984 <Keyboard_IRQHandler+0x18>)
 800197e:	61d3      	str	r3, [r2, #28]
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200006bc 	.word	0x200006bc

08001988 <PhotoSensor_Init>:

/**
 * @brief Initialize photo sensor on PB5 with interrupt
 */
void PhotoSensor_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
    
    /* Enable GPIOB clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <PhotoSensor_Init+0x68>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <PhotoSensor_Init+0x68>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <PhotoSensor_Init+0x68>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
    
    /* Configure PB5 as input with pull-up */
    GPIO_InitStruct.Pin = PHOTO_SENSOR_GPIO_PIN;  // GPIO_PIN_5
 80019b4:	2320      	movs	r3, #32
 80019b6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;   /* Interrupt on rising edge only */
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <PhotoSensor_Init+0x6c>)
 80019ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;           /* Internal pull-up resistor */
 80019bc:	2301      	movs	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PHOTO_SENSOR_GPIO_PORT, &GPIO_InitStruct);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <PhotoSensor_Init+0x70>)
 80019c8:	f002 fa58 	bl	8003e7c <HAL_GPIO_Init>
    
    /* Enable and set EXTI9_5 interrupt priority (PB5 uses this) */
    HAL_NVIC_SetPriority(PHOTO_SENSOR_IRQn, 2, 0);  // EXTI9_5_IRQn
 80019cc:	2200      	movs	r2, #0
 80019ce:	2102      	movs	r1, #2
 80019d0:	2017      	movs	r0, #23
 80019d2:	f001 ff7a 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PHOTO_SENSOR_IRQn);
 80019d6:	2017      	movs	r0, #23
 80019d8:	f001 ff93 	bl	8003902 <HAL_NVIC_EnableIRQ>
    
    /* Reset counter */
    trigger_count = 0;
 80019dc:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <PhotoSensor_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
    last_trigger_time = 0;
 80019e2:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <PhotoSensor_Init+0x78>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	bf00      	nop
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	10110000 	.word	0x10110000
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	200006e4 	.word	0x200006e4
 8001a00:	200006e8 	.word	0x200006e8

08001a04 <PhotoSensor_GetState>:
/**
 * @brief Get current state of photo sensor
 * @return PHOTO_SENSOR_BLOCKED if object detected, PHOTO_SENSOR_CLEAR if no object
 */
photo_sensor_state_t PhotoSensor_GetState(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
    /* Read GPIO pin state */
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(PHOTO_SENSOR_GPIO_PORT, PHOTO_SENSOR_GPIO_PIN);
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	4807      	ldr	r0, [pc, #28]	@ (8001a2c <PhotoSensor_GetState+0x28>)
 8001a0e:	f002 fbb9 	bl	8004184 <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
    
    /* White line (Dark-ON): LOW = object detected, HIGH = no object */
    if (pin_state == GPIO_PIN_RESET) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <PhotoSensor_GetState+0x1c>
        return PHOTO_SENSOR_BLOCKED;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <PhotoSensor_GetState+0x1e>
    } else {
        return PHOTO_SENSOR_CLEAR;
 8001a20:	2301      	movs	r3, #1
    }
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40010c00 	.word	0x40010c00

08001a30 <PhotoSensor_IRQHandler>:
/**
 * @brief Photo sensor interrupt handler
 * @note Called from HAL_GPIO_EXTI_Callback
 */
void PhotoSensor_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
    /* Simple debounce: ignore triggers within 50ms */
    uint32_t current_time = HAL_GetTick();
 8001a36:	f001 fe43 	bl	80036c0 <HAL_GetTick>
 8001a3a:	6078      	str	r0, [r7, #4]
    if (current_time - last_trigger_time > 50) {
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <PhotoSensor_IRQHandler+0x34>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b32      	cmp	r3, #50	@ 0x32
 8001a46:	d909      	bls.n	8001a5c <PhotoSensor_IRQHandler+0x2c>
        trigger_count++;
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <PhotoSensor_IRQHandler+0x38>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <PhotoSensor_IRQHandler+0x38>)
 8001a50:	6013      	str	r3, [r2, #0]
        last_trigger_time = current_time;
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <PhotoSensor_IRQHandler+0x34>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6013      	str	r3, [r2, #0]
        
        /* Call user callback */
        PhotoSensor_TriggerCallback();
 8001a58:	f001 faa4 	bl	8002fa4 <PhotoSensor_TriggerCallback>
    }
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200006e8 	.word	0x200006e8
 8001a68:	200006e4 	.word	0x200006e4

08001a6c <DoorControl_Init>:
static uint32_t update_count = 0;

/**
 * @brief 初始化门控系统 - 4状态机版本
 */
void DoorControl_Init(DoorControl_t *door, uint8_t servo_id) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
    printf("[DOOR] Initializing door control system (4-State FSM)...\r\n");
 8001a78:	4845      	ldr	r0, [pc, #276]	@ (8001b90 <DoorControl_Init+0x124>)
 8001a7a:	f004 fa61 	bl	8005f40 <puts>
    
    door->servo_id = servo_id;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	701a      	strb	r2, [r3, #0]
    
    /* 初始化舵机 */
    servo_set_speed(servo_id, 500);
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fd57 	bl	800253e <servo_set_speed>
    servo_set_torque_enable(servo_id, 1);
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fd3d 	bl	8002514 <servo_set_torque_enable>
    // 初始化时使用HAL_Delay可以接受（不在中断中）
    HAL_Delay(100);
 8001a9a:	2064      	movs	r0, #100	@ 0x64
 8001a9c:	f001 fe1a 	bl	80036d4 <HAL_Delay>
    
    /* 读取当前位置 */
    uint8_t rx_data[2];
    servo_read_reg(servo_id, 0x38, 2, rx_data);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	78f8      	ldrb	r0, [r7, #3]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	2138      	movs	r1, #56	@ 0x38
 8001aaa:	f000 fc86 	bl	80023ba <servo_read_reg>
    door->current_pos = rx_data[0] | (rx_data[1] << 8);
 8001aae:	7b3b      	ldrb	r3, [r7, #12]
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	805a      	strh	r2, [r3, #2]
    
    /* 读取移动标志 */
    uint8_t moving_flag;
    servo_read_reg(servo_id, 0x42, 1, &moving_flag);
 8001ac4:	f107 030b 	add.w	r3, r7, #11
 8001ac8:	78f8      	ldrb	r0, [r7, #3]
 8001aca:	2201      	movs	r2, #1
 8001acc:	2142      	movs	r1, #66	@ 0x42
 8001ace:	f000 fc74 	bl	80023ba <servo_read_reg>
    
    printf("[DOOR] Initial position: %u (target OPEN=%u, CLOSED=%u)\r\n", 
           door->current_pos, DOOR_POS_OPEN, DOOR_POS_CLOSED);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR] Initial position: %u (target OPEN=%u, CLOSED=%u)\r\n", 
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f640 13de 	movw	r3, #2526	@ 0x9de
 8001adc:	2200      	movs	r2, #0
 8001ade:	482d      	ldr	r0, [pc, #180]	@ (8001b94 <DoorControl_Init+0x128>)
 8001ae0:	f004 f9c6 	bl	8005e70 <iprintf>
    printf("[DOOR] Moving flag: %u\r\n", moving_flag);
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	482b      	ldr	r0, [pc, #172]	@ (8001b98 <DoorControl_Init+0x12c>)
 8001aea:	f004 f9c1 	bl	8005e70 <iprintf>
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
           abs((int)door->current_pos - DOOR_POS_OPEN),
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
 8001af2:	4619      	mov	r1, r3
           abs((int)door->current_pos - DOOR_POS_CLOSED));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	885b      	ldrh	r3, [r3, #2]
 8001af8:	f6a3 13de 	subw	r3, r3, #2526	@ 0x9de
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bfb8      	it	lt
 8001b00:	425b      	neglt	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	4825      	ldr	r0, [pc, #148]	@ (8001b9c <DoorControl_Init+0x130>)
 8001b06:	f004 f9b3 	bl	8005e70 <iprintf>
    
    /* 处理位置环绕：4093-4095接近0 */
    if (door->current_pos > 4090) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	885b      	ldrh	r3, [r3, #2]
 8001b0e:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d908      	bls.n	8001b28 <DoorControl_Init+0xbc>
        printf("[DOOR] Position wrap-around detected (%u -> 0)\r\n", door->current_pos);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	885b      	ldrh	r3, [r3, #2]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4820      	ldr	r0, [pc, #128]	@ (8001ba0 <DoorControl_Init+0x134>)
 8001b1e:	f004 f9a7 	bl	8005e70 <iprintf>
        door->current_pos = 0;  // 修正为0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	805a      	strh	r2, [r3, #2]
    }
    
    /* 判断初始状态 */
    if (moving_flag) {
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <DoorControl_Init+0xd8>
        /* 正在移动，无法确定方向，默认认为在关门 */
        printf("[DOOR] Motor is moving at startup, assuming closing...\r\n");
 8001b2e:	481d      	ldr	r0, [pc, #116]	@ (8001ba4 <DoorControl_Init+0x138>)
 8001b30:	f004 fa06 	bl	8005f40 <puts>
        door->state = DOOR_STATE_CLOSING;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	705a      	strb	r2, [r3, #1]
        door->target_pos = DOOR_POS_CLOSED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001b40:	809a      	strh	r2, [r3, #4]
 8001b42:	e00f      	b.n	8001b64 <DoorControl_Init+0xf8>
    } else {
        /* 静止状态，默认认为是关闭的 */
        door->state = DOOR_STATE_CLOSED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]
        door->target_pos = DOOR_POS_CLOSED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001b50:	809a      	strh	r2, [r3, #4]
        printf("[DOOR] Motor is stopped, assuming door is closed\r\n");
 8001b52:	4815      	ldr	r0, [pc, #84]	@ (8001ba8 <DoorControl_Init+0x13c>)
 8001b54:	f004 f9f4 	bl	8005f40 <puts>
        
        /* 为了安全，发送一次关门命令确保门关闭 */
        servo_set_position(servo_id, DOOR_POS_CLOSED);
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fd09 	bl	8002576 <servo_set_position>
    }
    
    door->last_update_time = HAL_GetTick();
 8001b64:	f001 fdac 	bl	80036c0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
    printf("[DOOR] Initial state: %s\r\n", DoorControl_GetStateName(door->state));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fa94 	bl	80020a0 <DoorControl_GetStateName>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480b      	ldr	r0, [pc, #44]	@ (8001bac <DoorControl_Init+0x140>)
 8001b7e:	f004 f977 	bl	8005e70 <iprintf>
    printf("[DOOR] Initialization complete\r\n");
 8001b82:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <DoorControl_Init+0x144>)
 8001b84:	f004 f9dc 	bl	8005f40 <puts>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	0800728c 	.word	0x0800728c
 8001b94:	080072c8 	.word	0x080072c8
 8001b98:	08007304 	.word	0x08007304
 8001b9c:	08007320 	.word	0x08007320
 8001ba0:	08007358 	.word	0x08007358
 8001ba4:	0800738c 	.word	0x0800738c
 8001ba8:	080073c4 	.word	0x080073c4
 8001bac:	080073f8 	.word	0x080073f8
 8001bb0:	08007414 	.word	0x08007414

08001bb4 <DoorControl_Open>:

/**
 * @brief 开门命令
 */
void DoorControl_Open(DoorControl_t *door) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    printf("\r\n[DOOR_DEBUG] ===== OPEN COMMAND =====\r\n");
 8001bbc:	482e      	ldr	r0, [pc, #184]	@ (8001c78 <DoorControl_Open+0xc4>)
 8001bbe:	f004 f9bf 	bl	8005f40 <puts>
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	785b      	ldrb	r3, [r3, #1]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fa6a 	bl	80020a0 <DoorControl_GetStateName>
 8001bcc:	4601      	mov	r1, r0
           DoorControl_GetStateName(door->state), door->current_pos);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4829      	ldr	r0, [pc, #164]	@ (8001c7c <DoorControl_Open+0xc8>)
 8001bd6:	f004 f94b 	bl	8005e70 <iprintf>
    
    if (door->state == DOOR_STATE_CLOSED || door->state == DOOR_STATE_CLOSING) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <DoorControl_Open+0x36>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	785b      	ldrb	r3, [r3, #1]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d137      	bne.n	8001c5a <DoorControl_Open+0xa6>
        printf("[CMD] Sending OPEN command (target: %u)\r\n", DOOR_POS_OPEN);
 8001bea:	2100      	movs	r1, #0
 8001bec:	4824      	ldr	r0, [pc, #144]	@ (8001c80 <DoorControl_Open+0xcc>)
 8001bee:	f004 f93f 	bl	8005e70 <iprintf>
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
               door->current_pos, DOOR_POS_OPEN, 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001bf6:	4619      	mov	r1, r3
               (int)DOOR_POS_OPEN - (int)door->current_pos);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4820      	ldr	r0, [pc, #128]	@ (8001c84 <DoorControl_Open+0xd0>)
 8001c02:	f004 f935 	bl	8005e70 <iprintf>
        
        /* 使用循环延时避免阻塞 */
        for(volatile int i = 0; i < 50000; i++);  // 短延时
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e002      	b.n	8001c12 <DoorControl_Open+0x5e>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	ddf7      	ble.n	8001c0c <DoorControl_Open+0x58>
        servo_set_position(door->servo_id, DOOR_POS_OPEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fca7 	bl	8002576 <servo_set_position>
        for(volatile int i = 0; i < 50000; i++);  // 给舵机时间处理命令
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	e002      	b.n	8001c34 <DoorControl_Open+0x80>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3301      	adds	r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	ddf7      	ble.n	8001c2e <DoorControl_Open+0x7a>
        
        door->target_pos = DOOR_POS_OPEN;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	809a      	strh	r2, [r3, #4]
        door->state = DOOR_STATE_OPENING;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	705a      	strb	r2, [r3, #1]
        
        printf("[DOOR_DEBUG] State changed to OPENING at tick %lu\r\n", HAL_GetTick());
 8001c4a:	f001 fd39 	bl	80036c0 <HAL_GetTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	@ (8001c88 <DoorControl_Open+0xd4>)
 8001c54:	f004 f90c 	bl	8005e70 <iprintf>
 8001c58:	e00a      	b.n	8001c70 <DoorControl_Open+0xbc>
    } else {
        printf("[CMD] Cannot open - current state: %s\r\n", 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fa1e 	bl	80020a0 <DoorControl_GetStateName>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	4808      	ldr	r0, [pc, #32]	@ (8001c8c <DoorControl_Open+0xd8>)
 8001c6a:	f004 f901 	bl	8005e70 <iprintf>
               DoorControl_GetStateName(door->state));
    }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08007434 	.word	0x08007434
 8001c7c:	08007460 	.word	0x08007460
 8001c80:	08007494 	.word	0x08007494
 8001c84:	080074c0 	.word	0x080074c0
 8001c88:	080074f8 	.word	0x080074f8
 8001c8c:	0800752c 	.word	0x0800752c

08001c90 <DoorControl_Close>:

/**
 * @brief 关门命令
 */
void DoorControl_Close(DoorControl_t *door) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
    printf("\r\n[DOOR_DEBUG] ===== CLOSE COMMAND =====\r\n");
 8001c98:	4831      	ldr	r0, [pc, #196]	@ (8001d60 <DoorControl_Close+0xd0>)
 8001c9a:	f004 f951 	bl	8005f40 <puts>
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	785b      	ldrb	r3, [r3, #1]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f9fc 	bl	80020a0 <DoorControl_GetStateName>
 8001ca8:	4601      	mov	r1, r0
           DoorControl_GetStateName(door->state), door->current_pos);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001cae:	461a      	mov	r2, r3
 8001cb0:	482c      	ldr	r0, [pc, #176]	@ (8001d64 <DoorControl_Close+0xd4>)
 8001cb2:	f004 f8dd 	bl	8005e70 <iprintf>
    
    if (door->state == DOOR_STATE_OPEN || door->state == DOOR_STATE_OPENING) {
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <DoorControl_Close+0x36>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d13d      	bne.n	8001d42 <DoorControl_Close+0xb2>
        printf("[CMD] Sending CLOSE command (target: %u)\r\n", DOOR_POS_CLOSED);
 8001cc6:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001cca:	4827      	ldr	r0, [pc, #156]	@ (8001d68 <DoorControl_Close+0xd8>)
 8001ccc:	f004 f8d0 	bl	8005e70 <iprintf>
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
               door->current_pos, DOOR_POS_CLOSED, 
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001cd4:	4619      	mov	r1, r3
               (int)DOOR_POS_CLOSED - (int)door->current_pos);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001cda:	f5c3 631d 	rsb	r3, r3, #2512	@ 0x9d0
 8001cde:	330e      	adds	r3, #14
 8001ce0:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001ce4:	4821      	ldr	r0, [pc, #132]	@ (8001d6c <DoorControl_Close+0xdc>)
 8001ce6:	f004 f8c3 	bl	8005e70 <iprintf>
        
        /* 使用循环延时避免阻塞 */
        for(volatile int i = 0; i < 50000; i++);  // 短延时
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e002      	b.n	8001cf6 <DoorControl_Close+0x66>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	ddf7      	ble.n	8001cf0 <DoorControl_Close+0x60>
        servo_set_position(door->servo_id, DOOR_POS_CLOSED);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fc34 	bl	8002576 <servo_set_position>
        for(volatile int i = 0; i < 50000; i++);  // 给舵机时间处理命令
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	e002      	b.n	8001d1a <DoorControl_Close+0x8a>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001d20:	4293      	cmp	r3, r2
 8001d22:	ddf7      	ble.n	8001d14 <DoorControl_Close+0x84>
        
        door->target_pos = DOOR_POS_CLOSED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001d2a:	809a      	strh	r2, [r3, #4]
        door->state = DOOR_STATE_CLOSING;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	705a      	strb	r2, [r3, #1]
        
        printf("[DOOR_DEBUG] State changed to CLOSING at tick %lu\r\n", HAL_GetTick());
 8001d32:	f001 fcc5 	bl	80036c0 <HAL_GetTick>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <DoorControl_Close+0xe0>)
 8001d3c:	f004 f898 	bl	8005e70 <iprintf>
 8001d40:	e00a      	b.n	8001d58 <DoorControl_Close+0xc8>
    } else {
        printf("[CMD] Cannot close - current state: %s\r\n", 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f9aa 	bl	80020a0 <DoorControl_GetStateName>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4808      	ldr	r0, [pc, #32]	@ (8001d74 <DoorControl_Close+0xe4>)
 8001d52:	f004 f88d 	bl	8005e70 <iprintf>
               DoorControl_GetStateName(door->state));
    }
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	08007554 	.word	0x08007554
 8001d64:	08007460 	.word	0x08007460
 8001d68:	08007580 	.word	0x08007580
 8001d6c:	080074c0 	.word	0x080074c0
 8001d70:	080075ac 	.word	0x080075ac
 8001d74:	080075e0 	.word	0x080075e0

08001d78 <DoorControl_Update>:

/**
 * @brief 更新门控状态（核心状态机 - 使用移动标志）
 */
void DoorControl_Update(DoorControl_t *door) {
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b091      	sub	sp, #68	@ 0x44
 8001d7c:	af04      	add	r7, sp, #16
 8001d7e:	6078      	str	r0, [r7, #4]
    update_count++;
 8001d80:	4ba3      	ldr	r3, [pc, #652]	@ (8002010 <DoorControl_Update+0x298>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4aa2      	ldr	r2, [pc, #648]	@ (8002010 <DoorControl_Update+0x298>)
 8001d88:	6013      	str	r3, [r2, #0]
    
    /* 读取当前位置 - 带重试和验证 */
    uint8_t rx_data[2];
    uint16_t new_pos = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    bool pos_valid = false;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    for (int retry = 0; retry < 3; retry++) {
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d98:	e029      	b.n	8001dee <DoorControl_Update+0x76>
        if (servo_read_reg(door->servo_id, 0x38, 2, rx_data) == 1) {  /* 返回1表示成功 */
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7818      	ldrb	r0, [r3, #0]
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	2202      	movs	r2, #2
 8001da4:	2138      	movs	r1, #56	@ 0x38
 8001da6:	f000 fb08 	bl	80023ba <servo_read_reg>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d110      	bne.n	8001dd2 <DoorControl_Update+0x5a>
            new_pos = rx_data[0] | (rx_data[1] << 8);
 8001db0:	7d3b      	ldrb	r3, [r7, #20]
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	7d7b      	ldrb	r3, [r7, #21]
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            
            /* 验证位置值是否合理（0-4095范围） */
            if (new_pos <= 4095) {
 8001dc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dc8:	d203      	bcs.n	8001dd2 <DoorControl_Update+0x5a>
                pos_valid = true;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                break;
 8001dd0:	e010      	b.n	8001df4 <DoorControl_Update+0x7c>
            }
        }
        for(volatile int i = 0; i < 20000; i++);  /* 短暂延时后重试 */
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e002      	b.n	8001dde <DoorControl_Update+0x66>
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001de4:	4293      	cmp	r3, r2
 8001de6:	ddf7      	ble.n	8001dd8 <DoorControl_Update+0x60>
    for (int retry = 0; retry < 3; retry++) {
 8001de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dea:	3301      	adds	r3, #1
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	ddd2      	ble.n	8001d9a <DoorControl_Update+0x22>
    }
    
    uint16_t old_pos = door->current_pos;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	885b      	ldrh	r3, [r3, #2]
 8001df8:	83fb      	strh	r3, [r7, #30]
    if (pos_valid) {
 8001dfa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00c      	beq.n	8001e1c <DoorControl_Update+0xa4>
        door->current_pos = new_pos;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001e06:	805a      	strh	r2, [r3, #2]
        
        /* 处理位置环绕 */
        if (door->current_pos > 4090) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d908      	bls.n	8001e26 <DoorControl_Update+0xae>
            door->current_pos = 0;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	805a      	strh	r2, [r3, #2]
 8001e1a:	e004      	b.n	8001e26 <DoorControl_Update+0xae>
        }
    } else {
        printf("[DOOR] Warning: Failed to read position, keeping old value %u\r\n", old_pos);
 8001e1c:	8bfb      	ldrh	r3, [r7, #30]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	487c      	ldr	r0, [pc, #496]	@ (8002014 <DoorControl_Update+0x29c>)
 8001e22:	f004 f825 	bl	8005e70 <iprintf>
    }
    
    /* 读取移动标志 - 带重试和验证 */
    uint8_t moving_flag = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool flag_valid = false;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    for (int retry = 0; retry < 3; retry++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	e036      	b.n	8001ea6 <DoorControl_Update+0x12e>
        uint8_t temp_flag;
        if (servo_read_reg(door->servo_id, 0x42, 1, &temp_flag) == 1) {  /* 返回1表示成功 */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7818      	ldrb	r0, [r3, #0]
 8001e3c:	f107 030f 	add.w	r3, r7, #15
 8001e40:	2201      	movs	r2, #1
 8001e42:	2142      	movs	r1, #66	@ 0x42
 8001e44:	f000 fab9 	bl	80023ba <servo_read_reg>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d11d      	bne.n	8001e8a <DoorControl_Update+0x112>
            /* 验证标志值（应该是0或1） */
            if (temp_flag <= 1) {
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d806      	bhi.n	8001e62 <DoorControl_Update+0xea>
                moving_flag = temp_flag;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                flag_valid = true;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                break;
 8001e60:	e024      	b.n	8001eac <DoorControl_Update+0x134>
            } else if (temp_flag & 0x01) {
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <DoorControl_Update+0x112>
                /* 如果是其他位被设置，只看最低位 */
                moving_flag = 1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                flag_valid = true;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                printf("[DOOR] Moving flag raw value: 0x%02X, using bit 0: %d\r\n", temp_flag, moving_flag);
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e80:	461a      	mov	r2, r3
 8001e82:	4865      	ldr	r0, [pc, #404]	@ (8002018 <DoorControl_Update+0x2a0>)
 8001e84:	f003 fff4 	bl	8005e70 <iprintf>
                break;
 8001e88:	e010      	b.n	8001eac <DoorControl_Update+0x134>
            }
        }
        for(volatile int i = 0; i < 20000; i++);  /* 短暂延时后重试 */
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	e002      	b.n	8001e96 <DoorControl_Update+0x11e>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	ddf7      	ble.n	8001e90 <DoorControl_Update+0x118>
    for (int retry = 0; retry < 3; retry++) {
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	ddc5      	ble.n	8001e38 <DoorControl_Update+0xc0>
    }
    
    if (!flag_valid) {
 8001eac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001eb0:	f083 0301 	eor.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <DoorControl_Update+0x14e>
        printf("[DOOR] Warning: Failed to read moving flag, assuming stopped\r\n");
 8001eba:	4858      	ldr	r0, [pc, #352]	@ (800201c <DoorControl_Update+0x2a4>)
 8001ebc:	f004 f840 	bl	8005f40 <puts>
        moving_flag = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    /* 调试输出 - 每500ms或状态变化时 */
    static uint32_t last_debug_time = 0;
    static uint8_t last_moving_flag = 0xFF;
    uint32_t now = HAL_GetTick();
 8001ec6:	f001 fbfb 	bl	80036c0 <HAL_GetTick>
 8001eca:	61b8      	str	r0, [r7, #24]
    
    if ((now - last_debug_time >= 500) || 
 8001ecc:	4b54      	ldr	r3, [pc, #336]	@ (8002020 <DoorControl_Update+0x2a8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ed8:	d20f      	bcs.n	8001efa <DoorControl_Update+0x182>
        (moving_flag != last_moving_flag) ||
 8001eda:	4b52      	ldr	r3, [pc, #328]	@ (8002024 <DoorControl_Update+0x2ac>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
    if ((now - last_debug_time >= 500) || 
 8001ede:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d109      	bne.n	8001efa <DoorControl_Update+0x182>
        (abs((int)door->current_pos - (int)old_pos) > 100)) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	885b      	ldrh	r3, [r3, #2]
 8001eea:	461a      	mov	r2, r3
 8001eec:	8bfb      	ldrh	r3, [r7, #30]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bfb8      	it	lt
 8001ef4:	425b      	neglt	r3, r3
        (moving_flag != last_moving_flag) ||
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	dd22      	ble.n	8001f40 <DoorControl_Update+0x1c8>
        
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f8ce 	bl	80020a0 <DoorControl_GetStateName>
 8001f04:	4601      	mov	r1, r0
               now, DoorControl_GetStateName(door->state),
               door->current_pos, door->target_pos, 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	885b      	ldrh	r3, [r3, #2]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001f0a:	461d      	mov	r5, r3
               door->current_pos, door->target_pos, 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	889b      	ldrh	r3, [r3, #4]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001f10:	4618      	mov	r0, r3
 8001f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
               moving_flag, (int)door->current_pos - (int)old_pos);
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	8852      	ldrh	r2, [r2, #2]
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	8bfa      	ldrh	r2, [r7, #30]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001f1e:	1aa2      	subs	r2, r4, r2
 8001f20:	9202      	str	r2, [sp, #8]
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	9000      	str	r0, [sp, #0]
 8001f26:	462b      	mov	r3, r5
 8001f28:	460a      	mov	r2, r1
 8001f2a:	69b9      	ldr	r1, [r7, #24]
 8001f2c:	483e      	ldr	r0, [pc, #248]	@ (8002028 <DoorControl_Update+0x2b0>)
 8001f2e:	f003 ff9f 	bl	8005e70 <iprintf>
        
        last_debug_time = now;
 8001f32:	4a3b      	ldr	r2, [pc, #236]	@ (8002020 <DoorControl_Update+0x2a8>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6013      	str	r3, [r2, #0]
        last_moving_flag = moving_flag;
 8001f38:	4a3a      	ldr	r2, [pc, #232]	@ (8002024 <DoorControl_Update+0x2ac>)
 8001f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f3e:	7013      	strb	r3, [r2, #0]
    }
    
    /* 保存旧状态 */
    DoorState_t old_state = door->state;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	75fb      	strb	r3, [r7, #23]
    
    /* 状态机逻辑 */
    switch (door->state) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d87b      	bhi.n	8002046 <DoorControl_Update+0x2ce>
 8001f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <DoorControl_Update+0x1dc>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08002047 	.word	0x08002047
 8001f58:	08001f65 	.word	0x08001f65
 8001f5c:	08002047 	.word	0x08002047
 8001f60:	08001fb9 	.word	0x08001fb9
            // 命令在外部发送
            break;
            
        case DOOR_STATE_OPENING:
            /* 正在开门 - 检查是否停止 */
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f64:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
                   moving_flag, door->current_pos, door->target_pos,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	885b      	ldrh	r3, [r3, #2]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f6c:	461d      	mov	r5, r3
                   moving_flag, door->current_pos, door->target_pos,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	889b      	ldrh	r3, [r3, #4]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f72:	461e      	mov	r6, r3
                   HAL_GetTick() - door->last_update_time);
 8001f74:	f001 fba4 	bl	80036c0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4633      	mov	r3, r6
 8001f84:	462a      	mov	r2, r5
 8001f86:	4621      	mov	r1, r4
 8001f88:	4828      	ldr	r0, [pc, #160]	@ (800202c <DoorControl_Update+0x2b4>)
 8001f8a:	f003 ff71 	bl	8005e70 <iprintf>
            
            if (!moving_flag) {
 8001f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d13a      	bne.n	800200c <DoorControl_Update+0x294>
                /* 舵机停止了，假设门已开 */
                door->state = DOOR_STATE_OPEN;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	705a      	strb	r2, [r3, #1]
                printf("[STATE] OPENING -> OPEN (motor stopped at pos %u)\r\n", door->current_pos);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	885b      	ldrh	r3, [r3, #2]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4823      	ldr	r0, [pc, #140]	@ (8002030 <DoorControl_Update+0x2b8>)
 8001fa4:	f003 ff64 	bl	8005e70 <iprintf>
                printf("[DOOR_DEBUG] Door OPEN detected at tick %lu\r\n", HAL_GetTick());
 8001fa8:	f001 fb8a 	bl	80036c0 <HAL_GetTick>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4820      	ldr	r0, [pc, #128]	@ (8002034 <DoorControl_Update+0x2bc>)
 8001fb2:	f003 ff5d 	bl	8005e70 <iprintf>
            }
            break;
 8001fb6:	e029      	b.n	800200c <DoorControl_Update+0x294>
            // 命令在外部发送
            break;
            
        case DOOR_STATE_CLOSING:
            /* 正在关门 - 检查是否停止 */
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001fb8:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
                   moving_flag, door->current_pos, door->target_pos,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	885b      	ldrh	r3, [r3, #2]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001fc0:	461d      	mov	r5, r3
                   moving_flag, door->current_pos, door->target_pos,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	889b      	ldrh	r3, [r3, #4]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001fc6:	461e      	mov	r6, r3
                   HAL_GetTick() - door->last_update_time);
 8001fc8:	f001 fb7a 	bl	80036c0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4633      	mov	r3, r6
 8001fd8:	462a      	mov	r2, r5
 8001fda:	4621      	mov	r1, r4
 8001fdc:	4816      	ldr	r0, [pc, #88]	@ (8002038 <DoorControl_Update+0x2c0>)
 8001fde:	f003 ff47 	bl	8005e70 <iprintf>
            
            if (!moving_flag) {
 8001fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12c      	bne.n	8002044 <DoorControl_Update+0x2cc>
                /* 舵机停止了，假设门已关 */
                door->state = DOOR_STATE_CLOSED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	705a      	strb	r2, [r3, #1]
                printf("[STATE] CLOSING -> CLOSED (motor stopped at pos %u)\r\n", door->current_pos);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	885b      	ldrh	r3, [r3, #2]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4811      	ldr	r0, [pc, #68]	@ (800203c <DoorControl_Update+0x2c4>)
 8001ff8:	f003 ff3a 	bl	8005e70 <iprintf>
                printf("[DOOR_DEBUG] Door CLOSED detected at tick %lu\r\n", HAL_GetTick());
 8001ffc:	f001 fb60 	bl	80036c0 <HAL_GetTick>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	480e      	ldr	r0, [pc, #56]	@ (8002040 <DoorControl_Update+0x2c8>)
 8002006:	f003 ff33 	bl	8005e70 <iprintf>
            }
            break;
 800200a:	e01b      	b.n	8002044 <DoorControl_Update+0x2cc>
            break;
 800200c:	bf00      	nop
 800200e:	e01a      	b.n	8002046 <DoorControl_Update+0x2ce>
 8002010:	200006ec 	.word	0x200006ec
 8002014:	0800760c 	.word	0x0800760c
 8002018:	0800764c 	.word	0x0800764c
 800201c:	08007684 	.word	0x08007684
 8002020:	200006f0 	.word	0x200006f0
 8002024:	20000000 	.word	0x20000000
 8002028:	080076c4 	.word	0x080076c4
 800202c:	08007708 	.word	0x08007708
 8002030:	08007750 	.word	0x08007750
 8002034:	08007784 	.word	0x08007784
 8002038:	080077b4 	.word	0x080077b4
 800203c:	080077fc 	.word	0x080077fc
 8002040:	08007834 	.word	0x08007834
            break;
 8002044:	bf00      	nop
    }
    
    /* 状态变化时输出 */
    if (door->state != old_state) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	7dfa      	ldrb	r2, [r7, #23]
 800204c:	429a      	cmp	r2, r3
 800204e:	d00f      	beq.n	8002070 <DoorControl_Update+0x2f8>
        printf("\r\n[TRANSITION] %s -> %s\r\n", 
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f824 	bl	80020a0 <DoorControl_GetStateName>
 8002058:	4604      	mov	r4, r0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f81e 	bl	80020a0 <DoorControl_GetStateName>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	4621      	mov	r1, r4
 800206a:	4806      	ldr	r0, [pc, #24]	@ (8002084 <DoorControl_Update+0x30c>)
 800206c:	f003 ff00 	bl	8005e70 <iprintf>
               DoorControl_GetStateName(old_state),
               DoorControl_GetStateName(door->state));
    }
    
    door->last_update_time = HAL_GetTick();
 8002070:	f001 fb26 	bl	80036c0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	609a      	str	r2, [r3, #8]
}
 800207a:	bf00      	nop
 800207c:	3734      	adds	r7, #52	@ 0x34
 800207e:	46bd      	mov	sp, r7
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	bf00      	nop
 8002084:	08007864 	.word	0x08007864

08002088 <DoorControl_GetState>:

/**
 * @brief 获取当前状态
 */
DoorState_t DoorControl_GetState(DoorControl_t *door) {
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    return door->state;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	785b      	ldrb	r3, [r3, #1]
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <DoorControl_GetStateName>:

/**
 * @brief 获取状态名称字符串
 */
const char* DoorControl_GetStateName(DoorState_t state) {
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d813      	bhi.n	80020d8 <DoorControl_GetStateName+0x38>
 80020b0:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <DoorControl_GetStateName+0x18>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020d5 	.word	0x080020d5
        case DOOR_STATE_CLOSED:  return "CLOSED";
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <DoorControl_GetStateName+0x44>)
 80020ca:	e006      	b.n	80020da <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_OPENING: return "OPENING";
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <DoorControl_GetStateName+0x48>)
 80020ce:	e004      	b.n	80020da <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_OPEN:    return "OPEN";
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <DoorControl_GetStateName+0x4c>)
 80020d2:	e002      	b.n	80020da <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_CLOSING: return "CLOSING";
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <DoorControl_GetStateName+0x50>)
 80020d6:	e000      	b.n	80020da <DoorControl_GetStateName+0x3a>
        default: return "UNKNOWN";
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <DoorControl_GetStateName+0x54>)
    }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	08007880 	.word	0x08007880
 80020e8:	08007888 	.word	0x08007888
 80020ec:	08007890 	.word	0x08007890
 80020f0:	08007898 	.word	0x08007898
 80020f4:	080078a0 	.word	0x080078a0

080020f8 <calculate_checksum>:
#include <stdio.h>   // 用于printf调试

static UART_HandleTypeDef *servo_uart;  // USART句柄

// 函数：计算校验和
static uint8_t calculate_checksum(uint8_t *packet, uint8_t len) {
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 8002108:	2302      	movs	r3, #2
 800210a:	73bb      	strb	r3, [r7, #14]
 800210c:	e009      	b.n	8002122 <calculate_checksum+0x2a>
        sum += packet[i];
 800210e:	7bbb      	ldrb	r3, [r7, #14]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	4413      	add	r3, r2
 800211a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 800211c:	7bbb      	ldrb	r3, [r7, #14]
 800211e:	3301      	adds	r3, #1
 8002120:	73bb      	strb	r3, [r7, #14]
 8002122:	7bba      	ldrb	r2, [r7, #14]
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	3b01      	subs	r3, #1
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf0      	blt.n	800210e <calculate_checksum+0x16>
    }
    return ~sum;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	43db      	mvns	r3, r3
 8002130:	b2db      	uxtb	r3, r3
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <send_packet>:

// 函数：发送包
static void send_packet(uint8_t *packet, uint8_t len) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(servo_uart, packet, len, 50);  // 50ms超时，避免永久阻塞
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <send_packet+0x24>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	b29a      	uxth	r2, r3
 8002150:	2332      	movs	r3, #50	@ 0x32
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f002 fcbe 	bl	8004ad4 <HAL_UART_Transmit>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200006f4 	.word	0x200006f4

08002164 <receive_packet>:

// 函数：接收包（简单阻塞式，假设响应快速；实际可加超时/DMA）
static HAL_StatusTypeDef receive_packet(uint8_t *rx_packet, uint8_t expected_len) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Receive(servo_uart, rx_packet, expected_len, 100);  // 返回状态，超时100ms
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <receive_packet+0x28>)
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	b29a      	uxth	r2, r3
 8002178:	2364      	movs	r3, #100	@ 0x64
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f002 fd35 	bl	8004bea <HAL_UART_Receive>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200006f4 	.word	0x200006f4

08002190 <servo_init>:

// 初始化（默认波特率1M，无需设置寄存器0x06，因为初始值0=1M）
void servo_init(UART_HandleTypeDef *huart) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    servo_uart = huart;
 8002198:	4a07      	ldr	r2, [pc, #28]	@ (80021b8 <servo_init+0x28>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
    // 可在此PING舵机确认连接
    servo_ping(SERVO_DEFAULT_ID);
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 f80c 	bl	80021bc <servo_ping>
    
    // 设置默认最大速度
    servo_set_speed(SERVO_DEFAULT_ID, 4095);  // 最大速度
 80021a4:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80021a8:	2001      	movs	r0, #1
 80021aa:	f000 f9c8 	bl	800253e <servo_set_speed>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200006f4 	.word	0x200006f4

080021bc <servo_ping>:

// PING
uint8_t servo_ping(uint8_t id) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
    uint8_t packet[6] = {0xFF, 0xFF, id, 0x02, SERVO_INST_PING, 0x00};
 80021c6:	23ff      	movs	r3, #255	@ 0xff
 80021c8:	743b      	strb	r3, [r7, #16]
 80021ca:	23ff      	movs	r3, #255	@ 0xff
 80021cc:	747b      	strb	r3, [r7, #17]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	74bb      	strb	r3, [r7, #18]
 80021d2:	2302      	movs	r3, #2
 80021d4:	74fb      	strb	r3, [r7, #19]
 80021d6:	2301      	movs	r3, #1
 80021d8:	753b      	strb	r3, [r7, #20]
 80021da:	2300      	movs	r3, #0
 80021dc:	757b      	strb	r3, [r7, #21]
    packet[5] = calculate_checksum(packet, 6);
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	2106      	movs	r1, #6
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff87 	bl	80020f8 <calculate_checksum>
 80021ea:	4603      	mov	r3, r0
 80021ec:	757b      	strb	r3, [r7, #21]
    send_packet(packet, 6);
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	2106      	movs	r1, #6
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ffa1 	bl	800213c <send_packet>

    uint8_t rx_packet[6];
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 80021fa:	f107 0308 	add.w	r3, r7, #8
 80021fe:	2106      	movs	r1, #6
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ffaf 	bl	8002164 <receive_packet>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d111      	bne.n	8002230 <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 800220c:	7a3b      	ldrb	r3, [r7, #8]
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 800220e:	2bff      	cmp	r3, #255	@ 0xff
 8002210:	d10e      	bne.n	8002230 <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8002212:	7a7b      	ldrb	r3, [r7, #9]
 8002214:	2bff      	cmp	r3, #255	@ 0xff
 8002216:	d10b      	bne.n	8002230 <servo_ping+0x74>
 8002218:	7abb      	ldrb	r3, [r7, #10]
 800221a:	79fa      	ldrb	r2, [r7, #7]
 800221c:	429a      	cmp	r2, r3
 800221e:	d107      	bne.n	8002230 <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 8002220:	7afb      	ldrb	r3, [r7, #11]
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8002222:	2b02      	cmp	r3, #2
 8002224:	d104      	bne.n	8002230 <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 8002226:	7b3b      	ldrb	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <servo_ping+0x74>
        return 1;  // 成功
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <servo_ping+0x76>
    }
    return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <servo_write_reg>:

// 写寄存器（低字节在前）
void servo_write_reg(uint8_t id, uint8_t reg_addr, uint8_t *data, uint8_t data_len) {
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b0c7      	sub	sp, #284	@ 0x11c
 800223e:	af00      	add	r7, sp, #0
 8002240:	4604      	mov	r4, r0
 8002242:	4608      	mov	r0, r1
 8002244:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002248:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 800224c:	600a      	str	r2, [r1, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002254:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002258:	4622      	mov	r2, r4
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002260:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002264:	4602      	mov	r2, r0
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800226c:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002270:	460a      	mov	r2, r1
 8002272:	701a      	strb	r2, [r3, #0]
    uint8_t packet[256];
    uint8_t idx = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx++] = 0xFF;
 800227a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002284:	461a      	mov	r2, r3
 8002286:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800228a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800228e:	21ff      	movs	r1, #255	@ 0xff
 8002290:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0xFF;
 8002292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800229c:	461a      	mov	r2, r3
 800229e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022a6:	21ff      	movs	r1, #255	@ 0xff
 80022a8:	5499      	strb	r1, [r3, r2]
    packet[idx++] = id;
 80022aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80022b4:	4619      	mov	r1, r3
 80022b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022be:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80022c2:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	545a      	strb	r2, [r3, r1]
    packet[idx++] = data_len + 3;  // Length = Instr + Addr + Data
 80022ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80022d4:	461a      	mov	r2, r3
 80022d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022da:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3303      	adds	r3, #3
 80022e2:	b2d9      	uxtb	r1, r3
 80022e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022ec:	5499      	strb	r1, [r3, r2]
    packet[idx++] = SERVO_INST_WRITE;
 80022ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80022f8:	461a      	mov	r2, r3
 80022fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002302:	2103      	movs	r1, #3
 8002304:	5499      	strb	r1, [r3, r2]
    packet[idx++] = reg_addr;
 8002306:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002310:	4619      	mov	r1, r3
 8002312:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800231a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800231e:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	545a      	strb	r2, [r3, r1]
    memcpy(&packet[idx], data, data_len);
 8002326:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800232a:	f107 0214 	add.w	r2, r7, #20
 800232e:	18d0      	adds	r0, r2, r3
 8002330:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002334:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800233e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	f003 ff79 	bl	800623a <memcpy>
    idx += data_len;
 8002348:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800234c:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002350:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx] = calculate_checksum(packet, idx + 1);
 800235c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002360:	3301      	adds	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	f897 4117 	ldrb.w	r4, [r7, #279]	@ 0x117
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fec2 	bl	80020f8 <calculate_checksum>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800237c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002380:	551a      	strb	r2, [r3, r4]
    send_packet(packet, idx + 1);
 8002382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002386:	3301      	adds	r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fed3 	bl	800213c <send_packet>

    // 忽略响应（若非广播），实际可检查
    if (id != SERVO_BROADCAST_ID) {
 8002396:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800239a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80023a2:	d005      	beq.n	80023b0 <servo_write_reg+0x176>
        uint8_t rx_packet[6];
        receive_packet(rx_packet, 6);  // 预期响应Length=2, Error+Checksum
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2106      	movs	r1, #6
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff feda 	bl	8002164 <receive_packet>
    }
}
 80023b0:	bf00      	nop
 80023b2:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}

080023ba <servo_read_reg>:

// 读寄存器  
uint8_t servo_read_reg(uint8_t id, uint8_t reg_addr, uint8_t data_len, uint8_t *rx_data) {
 80023ba:	b590      	push	{r4, r7, lr}
 80023bc:	b0c7      	sub	sp, #284	@ 0x11c
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4604      	mov	r4, r0
 80023c2:	4608      	mov	r0, r1
 80023c4:	4611      	mov	r1, r2
 80023c6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80023ca:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023d4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80023d8:	4622      	mov	r2, r4
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023e0:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80023e4:	4602      	mov	r2, r0
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023ec:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80023f0:	460a      	mov	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
    uint8_t packet[8] = {0xFF, 0xFF, id, 0x04, SERVO_INST_READ, reg_addr, data_len, 0x00};
 80023f4:	23ff      	movs	r3, #255	@ 0xff
 80023f6:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80023fa:	23ff      	movs	r3, #255	@ 0xff
 80023fc:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002400:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002404:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800240e:	2304      	movs	r3, #4
 8002410:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002414:	2302      	movs	r3, #2
 8002416:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
 800241a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800241e:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
 8002428:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800242c:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 8002436:	2300      	movs	r3, #0
 8002438:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    packet[7] = calculate_checksum(packet, 8);
 800243c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002440:	2108      	movs	r1, #8
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fe58 	bl	80020f8 <calculate_checksum>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    send_packet(packet, 8);
 800244e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002452:	2108      	movs	r1, #8
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe71 	bl	800213c <send_packet>

    uint8_t expected_len = data_len + 6;  // FF FF ID Len Error Params... Checksum
 800245a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800245e:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3306      	adds	r3, #6
 8002466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t rx_packet[256];
    
    HAL_StatusTypeDef status = receive_packet(rx_packet, expected_len);
 800246a:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe75 	bl	8002164 <receive_packet>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    if (status == HAL_OK) {
 8002480:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002484:	2b00      	cmp	r3, #0
 8002486:	d13f      	bne.n	8002508 <servo_read_reg+0x14e>
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8002488:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800248c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2bff      	cmp	r3, #255	@ 0xff
 8002494:	d138      	bne.n	8002508 <servo_read_reg+0x14e>
 8002496:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800249a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	2bff      	cmp	r3, #255	@ 0xff
 80024a2:	d131      	bne.n	8002508 <servo_read_reg+0x14e>
 80024a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024ac:	789b      	ldrb	r3, [r3, #2]
 80024ae:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80024b2:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d125      	bne.n	8002508 <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 80024bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024c4:	78db      	ldrb	r3, [r3, #3]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024cc:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	3302      	adds	r3, #2
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d117      	bne.n	8002508 <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 80024d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024e0:	791b      	ldrb	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d110      	bne.n	8002508 <servo_read_reg+0x14e>
            memcpy(rx_data, &rx_packet[5], data_len);
 80024e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024ea:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	1d59      	adds	r1, r3, #5
 80024f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024fa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f003 fe9b 	bl	800623a <memcpy>
            return 1;  // 成功
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <servo_read_reg+0x150>
        }
    }
    return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002510:	46bd      	mov	sp, r7
 8002512:	bd90      	pop	{r4, r7, pc}

08002514 <servo_set_torque_enable>:

// 扭矩开关
void servo_set_torque_enable(uint8_t id, uint8_t enable) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	460a      	mov	r2, r1
 800251e:	71fb      	strb	r3, [r7, #7]
 8002520:	4613      	mov	r3, r2
 8002522:	71bb      	strb	r3, [r7, #6]
    uint8_t data = enable;
 8002524:	79bb      	ldrb	r3, [r7, #6]
 8002526:	73fb      	strb	r3, [r7, #15]
    servo_write_reg(id, SERVO_REG_TORQUE_ENABLE, &data, 1);
 8002528:	f107 020f 	add.w	r2, r7, #15
 800252c:	79f8      	ldrb	r0, [r7, #7]
 800252e:	2301      	movs	r3, #1
 8002530:	2128      	movs	r1, #40	@ 0x28
 8002532:	f7ff fe82 	bl	800223a <servo_write_reg>
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <servo_set_speed>:

// 设置速度 (2字节，低在前)
void servo_set_speed(uint8_t id, int16_t speed) {
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	460a      	mov	r2, r1
 8002548:	71fb      	strb	r3, [r7, #7]
 800254a:	4613      	mov	r3, r2
 800254c:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = speed & 0xFF;  // 低
 800254e:	88bb      	ldrh	r3, [r7, #4]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	733b      	strb	r3, [r7, #12]
    data[1] = (speed >> 8) & 0xFF;  // 高
 8002554:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002558:	121b      	asrs	r3, r3, #8
 800255a:	b21b      	sxth	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_SPEED, data, 2);
 8002560:	f107 020c 	add.w	r2, r7, #12
 8002564:	79f8      	ldrb	r0, [r7, #7]
 8002566:	2302      	movs	r3, #2
 8002568:	212e      	movs	r1, #46	@ 0x2e
 800256a:	f7ff fe66 	bl	800223a <servo_write_reg>
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <servo_set_position>:

// 设置位置 (2字节，低在前)
void servo_set_position(uint8_t id, int16_t position) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	460a      	mov	r2, r1
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	4613      	mov	r3, r2
 8002584:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = position & 0xFF;
 8002586:	88bb      	ldrh	r3, [r7, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	733b      	strb	r3, [r7, #12]
    data[1] = (position >> 8) & 0xFF;
 800258c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002590:	121b      	asrs	r3, r3, #8
 8002592:	b21b      	sxth	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_TARGET_POS, data, 2);
 8002598:	f107 020c 	add.w	r2, r7, #12
 800259c:	79f8      	ldrb	r0, [r7, #7]
 800259e:	2302      	movs	r3, #2
 80025a0:	212a      	movs	r1, #42	@ 0x2a
 80025a2:	f7ff fe4a 	bl	800223a <servo_write_reg>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <MX_DMA_Init+0x48>)
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4a0f      	ldr	r2, [pc, #60]	@ (80025f8 <MX_DMA_Init+0x48>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6153      	str	r3, [r2, #20]
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <MX_DMA_Init+0x48>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2010      	movs	r0, #16
 80025d4:	f001 f979 	bl	80038ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80025d8:	2010      	movs	r0, #16
 80025da:	f001 f992 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	2011      	movs	r0, #17
 80025e4:	f001 f971 	bl	80038ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80025e8:	2011      	movs	r0, #17
 80025ea:	f001 f98a 	bl	8003902 <HAL_NVIC_EnableIRQ>

}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002610:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a37      	ldr	r2, [pc, #220]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 8002616:	f043 0320 	orr.w	r3, r3, #32
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b35      	ldr	r3, [pc, #212]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a31      	ldr	r2, [pc, #196]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002640:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a2b      	ldr	r2, [pc, #172]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 8002646:	f043 0308 	orr.w	r3, r3, #8
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <MX_GPIO_Init+0xf8>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	2102      	movs	r1, #2
 800265c:	4826      	ldr	r0, [pc, #152]	@ (80026f8 <MX_GPIO_Init+0xfc>)
 800265e:	f001 fda8 	bl	80041b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	f241 1130 	movw	r1, #4400	@ 0x1130
 8002668:	4823      	ldr	r0, [pc, #140]	@ (80026f8 <MX_GPIO_Init+0xfc>)
 800266a:	f001 fda2 	bl	80041b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800266e:	2302      	movs	r3, #2
 8002670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002672:	2301      	movs	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2302      	movs	r3, #2
 800267c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	4619      	mov	r1, r3
 8002684:	481c      	ldr	r0, [pc, #112]	@ (80026f8 <MX_GPIO_Init+0xfc>)
 8002686:	f001 fbf9 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA12 (Keyboard columns - output) */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12;
 800268a:	f241 1330 	movw	r3, #4400	@ 0x1130
 800268e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2302      	movs	r3, #2
 800269a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4619      	mov	r1, r3
 80026a2:	4815      	ldr	r0, [pc, #84]	@ (80026f8 <MX_GPIO_Init+0xfc>)
 80026a4:	f001 fbea 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 (Keyboard row r4 - input with interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 80026ae:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <MX_GPIO_Init+0x100>)
 80026b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4619      	mov	r1, r3
 80026bc:	480e      	ldr	r0, [pc, #56]	@ (80026f8 <MX_GPIO_Init+0xfc>)
 80026be:	f001 fbdd 	bl	8003e7c <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2102      	movs	r1, #2
 80026c6:	2028      	movs	r0, #40	@ 0x28
 80026c8:	f001 f8ff 	bl	80038ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026cc:	2028      	movs	r0, #40	@ 0x28
 80026ce:	f001 f918 	bl	8003902 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d2:	2301      	movs	r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2302      	movs	r3, #2
 80026dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0310 	add.w	r3, r7, #16
 80026e2:	4619      	mov	r1, r3
 80026e4:	4806      	ldr	r0, [pc, #24]	@ (8002700 <MX_GPIO_Init+0x104>)
 80026e6:	f001 fbc9 	bl	8003e7c <HAL_GPIO_Init>
  
  /* PB5 is configured by PhotoSensor_Init() as input with interrupt */

}
 80026ea:	bf00      	nop
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010800 	.word	0x40010800
 80026fc:	10210000 	.word	0x10210000
 8002700:	40010c00 	.word	0x40010c00

08002704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b08b      	sub	sp, #44	@ 0x2c
 8002708:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800270a:	f000 ff81 	bl	8003610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270e:	f000 f9a7 	bl	8002a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002712:	f7ff ff73 	bl	80025fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002716:	f7ff ff4b 	bl	80025b0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800271a:	f000 fdf5 	bl	8003308 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800271e:	f000 fd9f 	bl	8003260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002722:	f000 fdc7 	bl	80032b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  printf("\r\n=== SLAVE MCU - ELEVATOR CONTROL SYSTEM ===\r\n");
 8002726:	48a1      	ldr	r0, [pc, #644]	@ (80029ac <main+0x2a8>)
 8002728:	f003 fc0a 	bl	8005f40 <puts>
  printf("Full Control with Door Module Enabled\r\n");
 800272c:	48a0      	ldr	r0, [pc, #640]	@ (80029b0 <main+0x2ac>)
 800272e:	f003 fc07 	bl	8005f40 <puts>
  printf("Features: Cabin Calls + Photo Sensor + RS485 + Door Control\r\n\r\n");
 8002732:	48a0      	ldr	r0, [pc, #640]	@ (80029b4 <main+0x2b0>)
 8002734:	f003 fc04 	bl	8005f40 <puts>
  
  /* 初始化RS485通信 */
  rs485_init();
 8002738:	f7fe fc70 	bl	800101c <rs485_init>
  printf("[RS485] Initialized on USART2\r\n");
 800273c:	489e      	ldr	r0, [pc, #632]	@ (80029b8 <main+0x2b4>)
 800273e:	f003 fbff 	bl	8005f40 <puts>
  
  /* 初始化键盘 - 中断模式 */
  Keyboard_Init();
 8002742:	f7fe fe9d 	bl	8001480 <Keyboard_Init>
  printf("[KEYBOARD] Initialized (PA11 EXTI)\r\n");
 8002746:	489d      	ldr	r0, [pc, #628]	@ (80029bc <main+0x2b8>)
 8002748:	f003 fbfa 	bl	8005f40 <puts>
  printf("  S16 (PA4)  -> Floor 1 (Cabin Call)\r\n");
 800274c:	489c      	ldr	r0, [pc, #624]	@ (80029c0 <main+0x2bc>)
 800274e:	f003 fbf7 	bl	8005f40 <puts>
  printf("  S15 (PA8)  -> Floor 2 (Cabin Call)\r\n");
 8002752:	489c      	ldr	r0, [pc, #624]	@ (80029c4 <main+0x2c0>)
 8002754:	f003 fbf4 	bl	8005f40 <puts>
  printf("  S14 (PA5)  -> Floor 3 (Cabin Call)\r\n");
 8002758:	489b      	ldr	r0, [pc, #620]	@ (80029c8 <main+0x2c4>)
 800275a:	f003 fbf1 	bl	8005f40 <puts>
  printf("  S13 (PA12) -> Not Used\r\n\r\n");
 800275e:	489b      	ldr	r0, [pc, #620]	@ (80029cc <main+0x2c8>)
 8002760:	f003 fbee 	bl	8005f40 <puts>
  
  /* 初始化光电传感器 - 中断模式 */
  PhotoSensor_Init();
 8002764:	f7ff f910 	bl	8001988 <PhotoSensor_Init>
  photo_sensor_state_t initial_state = PhotoSensor_GetState();
 8002768:	f7ff f94c 	bl	8001a04 <PhotoSensor_GetState>
 800276c:	4603      	mov	r3, r0
 800276e:	74fb      	strb	r3, [r7, #19]
  last_sensor_state = initial_state;
 8002770:	4a97      	ldr	r2, [pc, #604]	@ (80029d0 <main+0x2cc>)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	7013      	strb	r3, [r2, #0]
  printf("[PHOTO] Initialized (PB5 EXTI) - State: %s\r\n", 
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <main+0x7c>
 800277c:	4b95      	ldr	r3, [pc, #596]	@ (80029d4 <main+0x2d0>)
 800277e:	e000      	b.n	8002782 <main+0x7e>
 8002780:	4b95      	ldr	r3, [pc, #596]	@ (80029d8 <main+0x2d4>)
 8002782:	4619      	mov	r1, r3
 8002784:	4895      	ldr	r0, [pc, #596]	@ (80029dc <main+0x2d8>)
 8002786:	f003 fb73 	bl	8005e70 <iprintf>
         initial_state == PHOTO_SENSOR_BLOCKED ? "BLOCKED" : "CLEAR");
  
  /* 验证初始状态 */
  if (initial_state != PHOTO_SENSOR_BLOCKED) {
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <main+0x98>
      printf("[WARNING] Photo sensor should be BLOCKED at floor 1!\r\n");
 8002790:	4893      	ldr	r0, [pc, #588]	@ (80029e0 <main+0x2dc>)
 8002792:	f003 fbd5 	bl	8005f40 <puts>
      printf("         Please check elevator position.\r\n");
 8002796:	4893      	ldr	r0, [pc, #588]	@ (80029e4 <main+0x2e0>)
 8002798:	f003 fbd2 	bl	8005f40 <puts>
  }
  
  /* 初始化舵机门控系统 */
  printf("[SERVO] Initializing servo communication...\r\n");
 800279c:	4892      	ldr	r0, [pc, #584]	@ (80029e8 <main+0x2e4>)
 800279e:	f003 fbcf 	bl	8005f40 <puts>
  servo_init(&huart3);
 80027a2:	4892      	ldr	r0, [pc, #584]	@ (80029ec <main+0x2e8>)
 80027a4:	f7ff fcf4 	bl	8002190 <servo_init>
  HAL_Delay(100);
 80027a8:	2064      	movs	r0, #100	@ 0x64
 80027aa:	f000 ff93 	bl	80036d4 <HAL_Delay>
  
  /* 舵机通信测试 */
  printf("\r\n=== SERVO COMMUNICATION TEST ===\r\n");
 80027ae:	4890      	ldr	r0, [pc, #576]	@ (80029f0 <main+0x2ec>)
 80027b0:	f003 fbc6 	bl	8005f40 <puts>
  
  /* 测试1: PING */
  printf("1. Testing PING...\r\n");
 80027b4:	488f      	ldr	r0, [pc, #572]	@ (80029f4 <main+0x2f0>)
 80027b6:	f003 fbc3 	bl	8005f40 <puts>
  if (servo_ping(1)) {
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7ff fcfe 	bl	80021bc <servo_ping>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <main+0xca>
      printf("   SUCCESS: Servo responded to PING\r\n");
 80027c6:	488c      	ldr	r0, [pc, #560]	@ (80029f8 <main+0x2f4>)
 80027c8:	f003 fbba 	bl	8005f40 <puts>
 80027cc:	e002      	b.n	80027d4 <main+0xd0>
  } else {
      printf("   FAILED: No response to PING\r\n");
 80027ce:	488b      	ldr	r0, [pc, #556]	@ (80029fc <main+0x2f8>)
 80027d0:	f003 fbb6 	bl	8005f40 <puts>
  }
  
  /* 测试2: 读取位置 */
  printf("2. Reading position (0x38)...\r\n");
 80027d4:	488a      	ldr	r0, [pc, #552]	@ (8002a00 <main+0x2fc>)
 80027d6:	f003 fbb3 	bl	8005f40 <puts>
  uint8_t pos_data[2];
  for(int i = 0; i < 3; i++) {
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e026      	b.n	800282e <main+0x12a>
      if (servo_read_reg(1, 0x38, 2, pos_data) == 1) {
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	2202      	movs	r2, #2
 80027e6:	2138      	movs	r1, #56	@ 0x38
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7ff fde6 	bl	80023ba <servo_read_reg>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d110      	bne.n	8002816 <main+0x112>
          uint16_t pos = pos_data[0] | (pos_data[1] << 8);
 80027f4:	7a3b      	ldrb	r3, [r7, #8]
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	7a7b      	ldrb	r3, [r7, #9]
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	b21b      	sxth	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b21b      	sxth	r3, r3
 8002804:	817b      	strh	r3, [r7, #10]
          printf("   Try %d: SUCCESS, Position = %u\r\n", i+1, pos);
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	897a      	ldrh	r2, [r7, #10]
 800280c:	4619      	mov	r1, r3
 800280e:	487d      	ldr	r0, [pc, #500]	@ (8002a04 <main+0x300>)
 8002810:	f003 fb2e 	bl	8005e70 <iprintf>
 8002814:	e005      	b.n	8002822 <main+0x11e>
      } else {
          printf("   Try %d: FAILED\r\n", i+1);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	4619      	mov	r1, r3
 800281c:	487a      	ldr	r0, [pc, #488]	@ (8002a08 <main+0x304>)
 800281e:	f003 fb27 	bl	8005e70 <iprintf>
      }
      HAL_Delay(50);
 8002822:	2032      	movs	r0, #50	@ 0x32
 8002824:	f000 ff56 	bl	80036d4 <HAL_Delay>
  for(int i = 0; i < 3; i++) {
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2b02      	cmp	r3, #2
 8002832:	ddd5      	ble.n	80027e0 <main+0xdc>
  }
  
  /* 测试3: 读取移动标志 */
  printf("3. Reading moving flag (0x42)...\r\n");
 8002834:	4875      	ldr	r0, [pc, #468]	@ (8002a0c <main+0x308>)
 8002836:	f003 fb83 	bl	8005f40 <puts>
  uint8_t moving_flag;
  for(int i = 0; i < 3; i++) {
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e01c      	b.n	800287a <main+0x176>
      if (servo_read_reg(1, 0x42, 1, &moving_flag) == 1) {
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	2201      	movs	r2, #1
 8002844:	2142      	movs	r1, #66	@ 0x42
 8002846:	2001      	movs	r0, #1
 8002848:	f7ff fdb7 	bl	80023ba <servo_read_reg>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <main+0x15e>
          printf("   Try %d: SUCCESS, Moving = %d\r\n", i+1, moving_flag);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3301      	adds	r3, #1
 8002856:	79fa      	ldrb	r2, [r7, #7]
 8002858:	4619      	mov	r1, r3
 800285a:	486d      	ldr	r0, [pc, #436]	@ (8002a10 <main+0x30c>)
 800285c:	f003 fb08 	bl	8005e70 <iprintf>
 8002860:	e005      	b.n	800286e <main+0x16a>
      } else {
          printf("   Try %d: FAILED\r\n", i+1);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	3301      	adds	r3, #1
 8002866:	4619      	mov	r1, r3
 8002868:	4867      	ldr	r0, [pc, #412]	@ (8002a08 <main+0x304>)
 800286a:	f003 fb01 	bl	8005e70 <iprintf>
      }
      HAL_Delay(50);
 800286e:	2032      	movs	r0, #50	@ 0x32
 8002870:	f000 ff30 	bl	80036d4 <HAL_Delay>
  for(int i = 0; i < 3; i++) {
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	3301      	adds	r3, #1
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b02      	cmp	r3, #2
 800287e:	dddf      	ble.n	8002840 <main+0x13c>
  }
  
  /* 测试4: 读取电压 */
  printf("4. Reading voltage (0x3E)...\r\n");
 8002880:	4864      	ldr	r0, [pc, #400]	@ (8002a14 <main+0x310>)
 8002882:	f003 fb5d 	bl	8005f40 <puts>
  uint8_t voltage;
  if (servo_read_reg(1, 0x3E, 1, &voltage) == 1) {
 8002886:	1dbb      	adds	r3, r7, #6
 8002888:	2201      	movs	r2, #1
 800288a:	213e      	movs	r1, #62	@ 0x3e
 800288c:	2001      	movs	r0, #1
 800288e:	f7ff fd94 	bl	80023ba <servo_read_reg>
 8002892:	4603      	mov	r3, r0
 8002894:	2b01      	cmp	r3, #1
 8002896:	d112      	bne.n	80028be <main+0x1ba>
      printf("   SUCCESS: Voltage = %.1fV\r\n", voltage * 0.1f);
 8002898:	79bb      	ldrb	r3, [r7, #6]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fecc 	bl	8000638 <__aeabi_i2f>
 80028a0:	4603      	mov	r3, r0
 80028a2:	495d      	ldr	r1, [pc, #372]	@ (8002a18 <main+0x314>)
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd ff1b 	bl	80006e0 <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fdb1 	bl	8000414 <__aeabi_f2d>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4859      	ldr	r0, [pc, #356]	@ (8002a1c <main+0x318>)
 80028b8:	f003 fada 	bl	8005e70 <iprintf>
 80028bc:	e002      	b.n	80028c4 <main+0x1c0>
  } else {
      printf("   FAILED\r\n");
 80028be:	4858      	ldr	r0, [pc, #352]	@ (8002a20 <main+0x31c>)
 80028c0:	f003 fb3e 	bl	8005f40 <puts>
  }
  
  /* 测试5: 读取温度 */
  printf("5. Reading temperature (0x3F)...\r\n");
 80028c4:	4857      	ldr	r0, [pc, #348]	@ (8002a24 <main+0x320>)
 80028c6:	f003 fb3b 	bl	8005f40 <puts>
  uint8_t temp;
  if (servo_read_reg(1, 0x3F, 1, &temp) == 1) {
 80028ca:	1d7b      	adds	r3, r7, #5
 80028cc:	2201      	movs	r2, #1
 80028ce:	213f      	movs	r1, #63	@ 0x3f
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7ff fd72 	bl	80023ba <servo_read_reg>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <main+0x1e4>
      printf("   SUCCESS: Temperature = %d°C\r\n", temp);
 80028dc:	797b      	ldrb	r3, [r7, #5]
 80028de:	4619      	mov	r1, r3
 80028e0:	4851      	ldr	r0, [pc, #324]	@ (8002a28 <main+0x324>)
 80028e2:	f003 fac5 	bl	8005e70 <iprintf>
 80028e6:	e002      	b.n	80028ee <main+0x1ea>
  } else {
      printf("   FAILED\r\n");
 80028e8:	484d      	ldr	r0, [pc, #308]	@ (8002a20 <main+0x31c>)
 80028ea:	f003 fb29 	bl	8005f40 <puts>
  }
  
  printf("=== TEST COMPLETE ===\r\n\r\n");
 80028ee:	484f      	ldr	r0, [pc, #316]	@ (8002a2c <main+0x328>)
 80028f0:	f003 fb26 	bl	8005f40 <puts>
  
  /* 继续正常初始化 */
  DoorControl_Init(&door_controller, 1);  // 使用舵机ID 1
 80028f4:	2101      	movs	r1, #1
 80028f6:	484e      	ldr	r0, [pc, #312]	@ (8002a30 <main+0x32c>)
 80028f8:	f7ff f8b8 	bl	8001a6c <DoorControl_Init>
  
  /* 初始化Local Blackboard - 中央事件管理 */
  LocalBB_Init();
 80028fc:	f7fe f840 	bl	8000980 <LocalBB_Init>
  printf("[LocalBB] Initialized - Event queue ready\r\n");
 8002900:	484c      	ldr	r0, [pc, #304]	@ (8002a34 <main+0x330>)
 8002902:	f003 fb1d 	bl	8005f40 <puts>
  
  printf("\r\nSystem ready. Waiting for commands...\r\n\r\n");
 8002906:	484c      	ldr	r0, [pc, #304]	@ (8002a38 <main+0x334>)
 8002908:	f003 fb1a 	bl	8005f40 <puts>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_status_time = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 8002910:	f000 fed6 	bl	80036c0 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]
    
    /* 测试模式已禁用，使用按键测试 */
    
    /* 处理键盘输入 */
    ProcessKeyboard();
 8002916:	f000 f8e9 	bl	8002aec <ProcessKeyboard>
    
    /* 处理光电传感器 */
    ProcessPhotoSensor();
 800291a:	f000 f949 	bl	8002bb0 <ProcessPhotoSensor>
    
    /* 处理RS485接收 */
    ProcessRS485();
 800291e:	f000 f9cd 	bl	8002cbc <ProcessRS485>
    
    /* 处理门控（每50ms更新） */
    static uint32_t last_door_update = 0;
    if (current_time - last_door_update >= 50) {
 8002922:	4b46      	ldr	r3, [pc, #280]	@ (8002a3c <main+0x338>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b31      	cmp	r3, #49	@ 0x31
 800292c:	d904      	bls.n	8002938 <main+0x234>
        last_door_update = current_time;
 800292e:	4a43      	ldr	r2, [pc, #268]	@ (8002a3c <main+0x338>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6013      	str	r3, [r2, #0]
        ProcessDoorControl();
 8002934:	f000 fa84 	bl	8002e40 <ProcessDoorControl>
    }
    
    /* 处理LocalBB事件队列 */
    LocalBB_Process();
 8002938:	f7fe fa3e 	bl	8000db8 <LocalBB_Process>
    
    /* 每5秒打印一次状态 */
    if (current_time - last_status_time >= 5000) {
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002946:	4293      	cmp	r3, r2
 8002948:	d9e2      	bls.n	8002910 <main+0x20c>
        last_status_time = current_time;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	617b      	str	r3, [r7, #20]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
               system_state.current_floor,
 800294e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a40 <main+0x33c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8002952:	4619      	mov	r1, r3
               system_state.direction == DIR_UP ? "UP" : 
 8002954:	4b3a      	ldr	r3, [pc, #232]	@ (8002a40 <main+0x33c>)
 8002956:	785b      	ldrb	r3, [r3, #1]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8002958:	2b01      	cmp	r3, #1
 800295a:	d007      	beq.n	800296c <main+0x268>
               system_state.direction == DIR_DOWN ? "DN" : "STOP",
 800295c:	4b38      	ldr	r3, [pc, #224]	@ (8002a40 <main+0x33c>)
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d101      	bne.n	8002968 <main+0x264>
 8002964:	4a37      	ldr	r2, [pc, #220]	@ (8002a44 <main+0x340>)
 8002966:	e002      	b.n	800296e <main+0x26a>
 8002968:	4a37      	ldr	r2, [pc, #220]	@ (8002a48 <main+0x344>)
 800296a:	e000      	b.n	800296e <main+0x26a>
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 800296c:	4a37      	ldr	r2, [pc, #220]	@ (8002a4c <main+0x348>)
               system_state.door_is_open ? "OPEN" : "CLOSED");
 800296e:	4b34      	ldr	r3, [pc, #208]	@ (8002a40 <main+0x33c>)
 8002970:	78db      	ldrb	r3, [r3, #3]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <main+0x276>
 8002976:	4b36      	ldr	r3, [pc, #216]	@ (8002a50 <main+0x34c>)
 8002978:	e000      	b.n	800297c <main+0x278>
 800297a:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <main+0x350>)
 800297c:	4836      	ldr	r0, [pc, #216]	@ (8002a58 <main+0x354>)
 800297e:	f003 fa77 	bl	8005e70 <iprintf>
        printf("  Keyboard=%lu, Photo=%lu, RS485_RX=%lu, TX=%lu, DoorCmd=%lu\r\n",
 8002982:	4b2f      	ldr	r3, [pc, #188]	@ (8002a40 <main+0x33c>)
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	4b2e      	ldr	r3, [pc, #184]	@ (8002a40 <main+0x33c>)
 8002988:	6898      	ldr	r0, [r3, #8]
 800298a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a40 <main+0x33c>)
 800298c:	68dc      	ldr	r4, [r3, #12]
 800298e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a40 <main+0x33c>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	4a2b      	ldr	r2, [pc, #172]	@ (8002a40 <main+0x33c>)
 8002994:	6952      	ldr	r2, [r2, #20]
 8002996:	9201      	str	r2, [sp, #4]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4623      	mov	r3, r4
 800299c:	4602      	mov	r2, r0
 800299e:	482f      	ldr	r0, [pc, #188]	@ (8002a5c <main+0x358>)
 80029a0:	f003 fa66 	bl	8005e70 <iprintf>
               system_state.keyboard_count,
               system_state.photo_count,
               system_state.rs485_rx_count,
               system_state.rs485_tx_count,
               system_state.door_cmd_count);
        LocalBB_PrintStatus();
 80029a4:	f7fe fac4 	bl	8000f30 <LocalBB_PrintStatus>
  {
 80029a8:	e7b2      	b.n	8002910 <main+0x20c>
 80029aa:	bf00      	nop
 80029ac:	080078e8 	.word	0x080078e8
 80029b0:	08007918 	.word	0x08007918
 80029b4:	08007940 	.word	0x08007940
 80029b8:	08007980 	.word	0x08007980
 80029bc:	080079a0 	.word	0x080079a0
 80029c0:	080079c4 	.word	0x080079c4
 80029c4:	080079ec 	.word	0x080079ec
 80029c8:	08007a14 	.word	0x08007a14
 80029cc:	08007a3c 	.word	0x08007a3c
 80029d0:	20000020 	.word	0x20000020
 80029d4:	08007a58 	.word	0x08007a58
 80029d8:	08007a60 	.word	0x08007a60
 80029dc:	08007a68 	.word	0x08007a68
 80029e0:	08007a98 	.word	0x08007a98
 80029e4:	08007ad0 	.word	0x08007ad0
 80029e8:	08007afc 	.word	0x08007afc
 80029ec:	200007a4 	.word	0x200007a4
 80029f0:	08007b2c 	.word	0x08007b2c
 80029f4:	08007b50 	.word	0x08007b50
 80029f8:	08007b64 	.word	0x08007b64
 80029fc:	08007b8c 	.word	0x08007b8c
 8002a00:	08007bac 	.word	0x08007bac
 8002a04:	08007bcc 	.word	0x08007bcc
 8002a08:	08007bf0 	.word	0x08007bf0
 8002a0c:	08007c04 	.word	0x08007c04
 8002a10:	08007c28 	.word	0x08007c28
 8002a14:	08007c4c 	.word	0x08007c4c
 8002a18:	3dcccccd 	.word	0x3dcccccd
 8002a1c:	08007c6c 	.word	0x08007c6c
 8002a20:	08007c8c 	.word	0x08007c8c
 8002a24:	08007c98 	.word	0x08007c98
 8002a28:	08007cbc 	.word	0x08007cbc
 8002a2c:	08007ce0 	.word	0x08007ce0
 8002a30:	200006fc 	.word	0x200006fc
 8002a34:	08007cfc 	.word	0x08007cfc
 8002a38:	08007d28 	.word	0x08007d28
 8002a3c:	20000708 	.word	0x20000708
 8002a40:	20000004 	.word	0x20000004
 8002a44:	08007d54 	.word	0x08007d54
 8002a48:	08007d58 	.word	0x08007d58
 8002a4c:	08007d60 	.word	0x08007d60
 8002a50:	08007d64 	.word	0x08007d64
 8002a54:	08007d6c 	.word	0x08007d6c
 8002a58:	08007d74 	.word	0x08007d74
 8002a5c:	08007d9c 	.word	0x08007d9c

08002a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b090      	sub	sp, #64	@ 0x40
 8002a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a66:	f107 0318 	add.w	r3, r7, #24
 8002a6a:	2228      	movs	r2, #40	@ 0x28
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fb68 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a90:	2301      	movs	r3, #1
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a94:	2302      	movs	r3, #2
 8002a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a9e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa4:	f107 0318 	add.w	r3, r7, #24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fbb3 	bl	8004214 <HAL_RCC_OscConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002ab4:	f000 fab1 	bl	800301a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abc:	2302      	movs	r3, #2
 8002abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 fe20 	bl	8004718 <HAL_RCC_ClockConfig>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002ade:	f000 fa9c 	bl	800301a <Error_Handler>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3740      	adds	r7, #64	@ 0x40
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <ProcessKeyboard>:
/* USER CODE BEGIN 4 */

/**
  * @brief  处理键盘输入
  */
void ProcessKeyboard(void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
    Keyboard_Handler();
 8002af2:	f7fe fcef 	bl	80014d4 <Keyboard_Handler>
    
    uint8_t key;
    if (Keyboard_PopKey(&key)) {
 8002af6:	1dfb      	adds	r3, r7, #7
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fec3 	bl	8001884 <Keyboard_PopKey>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03f      	beq.n	8002b84 <ProcessKeyboard+0x98>
        system_state.keyboard_count++;
 8002b04:	4b21      	ldr	r3, [pc, #132]	@ (8002b8c <ProcessKeyboard+0xa0>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	4a20      	ldr	r2, [pc, #128]	@ (8002b8c <ProcessKeyboard+0xa0>)
 8002b0c:	6053      	str	r3, [r2, #4]
        
        printf("\r\n========================================\r\n");
 8002b0e:	4820      	ldr	r0, [pc, #128]	@ (8002b90 <ProcessKeyboard+0xa4>)
 8002b10:	f003 fa16 	bl	8005f40 <puts>
        printf("[KEYBOARD #%lu] Key detected: 0x%02X\r\n", system_state.keyboard_count, key);
 8002b14:	4b1d      	ldr	r3, [pc, #116]	@ (8002b8c <ProcessKeyboard+0xa0>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	79fa      	ldrb	r2, [r7, #7]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	481d      	ldr	r0, [pc, #116]	@ (8002b94 <ProcessKeyboard+0xa8>)
 8002b1e:	f003 f9a7 	bl	8005e70 <iprintf>
        
        switch(key) {
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	3b0d      	subs	r3, #13
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d823      	bhi.n	8002b72 <ProcessKeyboard+0x86>
 8002b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <ProcessKeyboard+0x44>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b6b 	.word	0x08002b6b
 8002b34:	08002b5d 	.word	0x08002b5d
 8002b38:	08002b4f 	.word	0x08002b4f
 8002b3c:	08002b41 	.word	0x08002b41
            case KEY_S16:  // Floor 1
                printf("S16 -> Floor 1 call\r\n");
 8002b40:	4815      	ldr	r0, [pc, #84]	@ (8002b98 <ProcessKeyboard+0xac>)
 8002b42:	f003 f9fd 	bl	8005f40 <puts>
                // 只使用LocalBB处理，避免重复发送
                LocalBB_AddCabinCall(1);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe f818 	bl	8000b7c <LocalBB_AddCabinCall>
                break;
 8002b4c:	e017      	b.n	8002b7e <ProcessKeyboard+0x92>
                
            case KEY_S15:  // Floor 2
                printf("S15 -> Floor 2 call\r\n");
 8002b4e:	4813      	ldr	r0, [pc, #76]	@ (8002b9c <ProcessKeyboard+0xb0>)
 8002b50:	f003 f9f6 	bl	8005f40 <puts>
                // 只使用LocalBB处理，避免重复发送
                LocalBB_AddCabinCall(2);
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7fe f811 	bl	8000b7c <LocalBB_AddCabinCall>
                break;
 8002b5a:	e010      	b.n	8002b7e <ProcessKeyboard+0x92>
                
            case KEY_S14:  // Floor 3
                printf("S14 -> Floor 3 call\r\n");
 8002b5c:	4810      	ldr	r0, [pc, #64]	@ (8002ba0 <ProcessKeyboard+0xb4>)
 8002b5e:	f003 f9ef 	bl	8005f40 <puts>
                // 只使用LocalBB处理，避免重复发送
                LocalBB_AddCabinCall(3);
 8002b62:	2003      	movs	r0, #3
 8002b64:	f7fe f80a 	bl	8000b7c <LocalBB_AddCabinCall>
                break;
 8002b68:	e009      	b.n	8002b7e <ProcessKeyboard+0x92>
                
            case KEY_S13:  // Not used
                printf("S13 pressed (not used)\r\n");
 8002b6a:	480e      	ldr	r0, [pc, #56]	@ (8002ba4 <ProcessKeyboard+0xb8>)
 8002b6c:	f003 f9e8 	bl	8005f40 <puts>
                break;
 8002b70:	e005      	b.n	8002b7e <ProcessKeyboard+0x92>
                
            default:
                printf("Unknown key (0x%02X)\r\n", key);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	4619      	mov	r1, r3
 8002b76:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <ProcessKeyboard+0xbc>)
 8002b78:	f003 f97a 	bl	8005e70 <iprintf>
                break;
 8002b7c:	bf00      	nop
        }
        printf("========================================\r\n");
 8002b7e:	480b      	ldr	r0, [pc, #44]	@ (8002bac <ProcessKeyboard+0xc0>)
 8002b80:	f003 f9de 	bl	8005f40 <puts>
    }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	08007ddc 	.word	0x08007ddc
 8002b94:	08007e08 	.word	0x08007e08
 8002b98:	08007e30 	.word	0x08007e30
 8002b9c:	08007e48 	.word	0x08007e48
 8002ba0:	08007e60 	.word	0x08007e60
 8002ba4:	08007e78 	.word	0x08007e78
 8002ba8:	08007e90 	.word	0x08007e90
 8002bac:	08007ea8 	.word	0x08007ea8

08002bb0 <ProcessPhotoSensor>:

/**
  * @brief  处理光电传感器 - 增强版带防抖和智能楼层检测
  */
void ProcessPhotoSensor(void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
    uint32_t current_time = HAL_GetTick();
 8002bb6:	f000 fd83 	bl	80036c0 <HAL_GetTick>
 8002bba:	60b8      	str	r0, [r7, #8]
    
    if (sensor_triggered) {
 8002bbc:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <ProcessPhotoSensor+0xec>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d067      	beq.n	8002c96 <ProcessPhotoSensor+0xe6>
        sensor_triggered = false;
 8002bc6:	4b35      	ldr	r3, [pc, #212]	@ (8002c9c <ProcessPhotoSensor+0xec>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
        
        /* 防抖处理 */
        if (current_time - system_state.last_photo_time < PHOTO_SENSOR_DEBOUNCE_MS) {
 8002bcc:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bd6:	d95d      	bls.n	8002c94 <ProcessPhotoSensor+0xe4>
            return;  // 忽略抖动
        }
        system_state.last_photo_time = current_time;
 8002bd8:	4a31      	ldr	r2, [pc, #196]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6193      	str	r3, [r2, #24]
        
        photo_sensor_state_t current_state = PhotoSensor_GetState();
 8002bde:	f7fe ff11 	bl	8001a04 <PhotoSensor_GetState>
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
        
        /* 只在状态从CLEAR变为BLOCKED时触发（到达楼层） */
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d14f      	bne.n	8002c8c <ProcessPhotoSensor+0xdc>
            last_sensor_state == PHOTO_SENSOR_CLEAR) {
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <ProcessPhotoSensor+0xf4>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d14b      	bne.n	8002c8c <ProcessPhotoSensor+0xdc>
            
            system_state.photo_count++;
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a29      	ldr	r2, [pc, #164]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002bfc:	6093      	str	r3, [r2, #8]
            
            /* 智能楼层检测 - 基于方向和当前楼层 */
            uint8_t detected_floor = system_state.current_floor;
 8002bfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	73fb      	strb	r3, [r7, #15]
            
            if (system_state.direction == DIR_UP) {
 8002c04:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d109      	bne.n	8002c20 <ProcessPhotoSensor+0x70>
                /* 上行：检测到的是下一个楼层 */
                detected_floor = system_state.current_floor + 1;
 8002c0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
                if (detected_floor > MAX_FLOORS) {
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d90f      	bls.n	8002c3a <ProcessPhotoSensor+0x8a>
                    detected_floor = MAX_FLOORS;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e00c      	b.n	8002c3a <ProcessPhotoSensor+0x8a>
                }
            }
            else if (system_state.direction == DIR_DOWN) {
 8002c20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d108      	bne.n	8002c3a <ProcessPhotoSensor+0x8a>
                /* 下行：检测到的是下一个楼层 */
                detected_floor = system_state.current_floor - 1;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
                if (detected_floor < 1) {
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <ProcessPhotoSensor+0x8a>
                    detected_floor = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
                }
            }
            /* 如果静止，保持当前楼层不变 */
            
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002c3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c3c:	6899      	ldr	r1, [r3, #8]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
                   system_state.photo_count, detected_floor,
                   system_state.direction == DIR_UP ? "UP" :
 8002c40:	4b17      	ldr	r3, [pc, #92]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c42:	785b      	ldrb	r3, [r3, #1]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d007      	beq.n	8002c58 <ProcessPhotoSensor+0xa8>
                   system_state.direction == DIR_DOWN ? "DN" : "STOP",
 8002c48:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d101      	bne.n	8002c54 <ProcessPhotoSensor+0xa4>
 8002c50:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <ProcessPhotoSensor+0xf8>)
 8002c52:	e002      	b.n	8002c5a <ProcessPhotoSensor+0xaa>
 8002c54:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <ProcessPhotoSensor+0xfc>)
 8002c56:	e000      	b.n	8002c5a <ProcessPhotoSensor+0xaa>
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002c58:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <ProcessPhotoSensor+0x100>)
                   system_state.current_floor);
 8002c5a:	4811      	ldr	r0, [pc, #68]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c5c:	7800      	ldrb	r0, [r0, #0]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002c5e:	9000      	str	r0, [sp, #0]
 8002c60:	4814      	ldr	r0, [pc, #80]	@ (8002cb4 <ProcessPhotoSensor+0x104>)
 8002c62:	f003 f905 	bl	8005e70 <iprintf>
            
            /* 立即发送光电传感器事件给Master */
            SendPhotoSensorEvent(detected_floor);
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f975 	bl	8002f58 <SendPhotoSensorEvent>
            
            /* 更新当前楼层 */
            system_state.current_floor = detected_floor;
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	7013      	strb	r3, [r2, #0]
            
            /* 如果到达目标楼层，更新状态 */
            if (detected_floor == system_state.target_floor) {
 8002c74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <ProcessPhotoSensor+0xf0>)
 8002c76:	789b      	ldrb	r3, [r3, #2]
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d104      	bne.n	8002c88 <ProcessPhotoSensor+0xd8>
                printf("[PHOTO] Target floor %d reached!\r\n", detected_floor);
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4619      	mov	r1, r3
 8002c82:	480d      	ldr	r0, [pc, #52]	@ (8002cb8 <ProcessPhotoSensor+0x108>)
 8002c84:	f003 f8f4 	bl	8005e70 <iprintf>
                /* Master会处理停止，Slave只报告 */
            }
            
            /* 通过LocalBB处理 */
            LocalBB_AddPhotoSensor();
 8002c88:	f7fd ffba 	bl	8000c00 <LocalBB_AddPhotoSensor>
        }
        
        last_sensor_state = current_state;
 8002c8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <ProcessPhotoSensor+0xf4>)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	7013      	strb	r3, [r2, #0]
 8002c92:	e000      	b.n	8002c96 <ProcessPhotoSensor+0xe6>
            return;  // 忽略抖动
 8002c94:	bf00      	nop
    }
}
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200006f8 	.word	0x200006f8
 8002ca0:	20000004 	.word	0x20000004
 8002ca4:	20000020 	.word	0x20000020
 8002ca8:	08007d54 	.word	0x08007d54
 8002cac:	08007d58 	.word	0x08007d58
 8002cb0:	08007d60 	.word	0x08007d60
 8002cb4:	08007ed4 	.word	0x08007ed4
 8002cb8:	08007f08 	.word	0x08007f08

08002cbc <ProcessRS485>:

/**
  * @brief  处理RS485接收
  */
void ProcessRS485(void) {
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b098      	sub	sp, #96	@ 0x60
 8002cc0:	af04      	add	r7, sp, #16
    uint8_t rx_buffer[64];
    uint16_t rx_len = rs485_receive_packet(rx_buffer, sizeof(rx_buffer));
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	2140      	movs	r1, #64	@ 0x40
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fa41 	bl	8001150 <rs485_receive_packet>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    
    if (rx_len > 0) {
 8002cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 809b 	beq.w	8002e14 <ProcessRS485+0x158>
        system_state.rs485_rx_count++;
 8002cde:	4b4f      	ldr	r3, [pc, #316]	@ (8002e1c <ProcessRS485+0x160>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <ProcessRS485+0x160>)
 8002ce6:	60d3      	str	r3, [r2, #12]
        
        /* 调试：打印所有接收到的命令 */
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
               rx_buffer[0], rx_len, 
 8002ce8:	7a3b      	ldrb	r3, [r7, #8]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002cea:	461c      	mov	r4, r3
 8002cec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
               rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
 8002cf0:	7a3b      	ldrb	r3, [r7, #8]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002cf2:	461d      	mov	r5, r3
               rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
 8002cf4:	7a7b      	ldrb	r3, [r7, #9]
 8002cf6:	7ab9      	ldrb	r1, [r7, #10]
 8002cf8:	7af8      	ldrb	r0, [r7, #11]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002cfa:	9002      	str	r0, [sp, #8]
 8002cfc:	9101      	str	r1, [sp, #4]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	462b      	mov	r3, r5
 8002d02:	4621      	mov	r1, r4
 8002d04:	4846      	ldr	r0, [pc, #280]	@ (8002e20 <ProcessRS485+0x164>)
 8002d06:	f003 f8b3 	bl	8005e70 <iprintf>
        
        /* 方向设置命令 */
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8002d0a:	7a3b      	ldrb	r3, [r7, #8]
 8002d0c:	2b40      	cmp	r3, #64	@ 0x40
 8002d0e:	d137      	bne.n	8002d80 <ProcessRS485+0xc4>
 8002d10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d933      	bls.n	8002d80 <ProcessRS485+0xc4>
            uint8_t dir = rx_buffer[1];
 8002d18:	7a7b      	ldrb	r3, [r7, #9]
 8002d1a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            uint8_t cur = rx_buffer[2];
 8002d1e:	7abb      	ldrb	r3, [r7, #10]
 8002d20:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            uint8_t target = rx_buffer[3];
 8002d24:	7afb      	ldrb	r3, [r7, #11]
 8002d26:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            
            system_state.direction = dir;
 8002d2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e1c <ProcessRS485+0x160>)
 8002d2c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d30:	7053      	strb	r3, [r2, #1]
            system_state.current_floor = cur;
 8002d32:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <ProcessRS485+0x160>)
 8002d34:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002d38:	7013      	strb	r3, [r2, #0]
            system_state.target_floor = target;
 8002d3a:	4a38      	ldr	r2, [pc, #224]	@ (8002e1c <ProcessRS485+0x160>)
 8002d3c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002d40:	7093      	strb	r3, [r2, #2]
            
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8002d42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d007      	beq.n	8002d5a <ProcessRS485+0x9e>
                   dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DN" : "STOP",
 8002d4a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d101      	bne.n	8002d56 <ProcessRS485+0x9a>
 8002d52:	4934      	ldr	r1, [pc, #208]	@ (8002e24 <ProcessRS485+0x168>)
 8002d54:	e002      	b.n	8002d5c <ProcessRS485+0xa0>
 8002d56:	4934      	ldr	r1, [pc, #208]	@ (8002e28 <ProcessRS485+0x16c>)
 8002d58:	e000      	b.n	8002d5c <ProcessRS485+0xa0>
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8002d5a:	4934      	ldr	r1, [pc, #208]	@ (8002e2c <ProcessRS485+0x170>)
 8002d5c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002d60:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002d64:	4832      	ldr	r0, [pc, #200]	@ (8002e30 <ProcessRS485+0x174>)
 8002d66:	f003 f883 	bl	8005e70 <iprintf>
                   cur, target);
            
            /* 通过LocalBB处理 */
            LocalBB_SetDirection(dir, cur, target);
 8002d6a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002d6e:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8002d72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd ff92 	bl	8000ca0 <LocalBB_SetDirection>
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8002d7c:	bf00      	nop
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
            rs485_send_packet_dma(tx_buffer, 4);
            system_state.rs485_tx_count++;
        }
    }
}
 8002d7e:	e049      	b.n	8002e14 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_DOOR_OPEN) {
 8002d80:	7a3b      	ldrb	r3, [r7, #8]
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d115      	bne.n	8002db2 <ProcessRS485+0xf6>
            printf("\r\n[RS485 RX] Door OPEN command received at tick %lu\r\n", HAL_GetTick());
 8002d86:	f000 fc9b 	bl	80036c0 <HAL_GetTick>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4829      	ldr	r0, [pc, #164]	@ (8002e34 <ProcessRS485+0x178>)
 8002d90:	f003 f86e 	bl	8005e70 <iprintf>
            LocalBB_AddDoorCommand(true);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f7fd ffdd 	bl	8000d54 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 8002d9a:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <ProcessRS485+0x160>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <ProcessRS485+0x160>)
 8002da2:	6153      	str	r3, [r2, #20]
            printf("[RS485 RX] Total door commands: %lu\r\n", system_state.door_cmd_count);
 8002da4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e1c <ProcessRS485+0x160>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	4619      	mov	r1, r3
 8002daa:	4823      	ldr	r0, [pc, #140]	@ (8002e38 <ProcessRS485+0x17c>)
 8002dac:	f003 f860 	bl	8005e70 <iprintf>
}
 8002db0:	e030      	b.n	8002e14 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_DOOR_CLOSE) {
 8002db2:	7a3b      	ldrb	r3, [r7, #8]
 8002db4:	2b21      	cmp	r3, #33	@ 0x21
 8002db6:	d115      	bne.n	8002de4 <ProcessRS485+0x128>
            printf("\r\n[RS485 RX] Door CLOSE command received at tick %lu\r\n", HAL_GetTick());
 8002db8:	f000 fc82 	bl	80036c0 <HAL_GetTick>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	481e      	ldr	r0, [pc, #120]	@ (8002e3c <ProcessRS485+0x180>)
 8002dc2:	f003 f855 	bl	8005e70 <iprintf>
            LocalBB_AddDoorCommand(false);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fd ffc4 	bl	8000d54 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <ProcessRS485+0x160>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <ProcessRS485+0x160>)
 8002dd4:	6153      	str	r3, [r2, #20]
            printf("[RS485 RX] Total door commands: %lu\r\n", system_state.door_cmd_count);
 8002dd6:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <ProcessRS485+0x160>)
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4816      	ldr	r0, [pc, #88]	@ (8002e38 <ProcessRS485+0x17c>)
 8002dde:	f003 f847 	bl	8005e70 <iprintf>
}
 8002de2:	e017      	b.n	8002e14 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_STATUS_REQUEST) {
 8002de4:	7a3b      	ldrb	r3, [r7, #8]
 8002de6:	2b50      	cmp	r3, #80	@ 0x50
 8002de8:	d114      	bne.n	8002e14 <ProcessRS485+0x158>
            tx_buffer[0] = CMD_STATUS_RESPONSE;
 8002dea:	2351      	movs	r3, #81	@ 0x51
 8002dec:	713b      	strb	r3, [r7, #4]
            tx_buffer[1] = system_state.current_floor;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <ProcessRS485+0x160>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	717b      	strb	r3, [r7, #5]
            tx_buffer[2] = system_state.direction;
 8002df4:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <ProcessRS485+0x160>)
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	71bb      	strb	r3, [r7, #6]
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <ProcessRS485+0x160>)
 8002dfc:	78db      	ldrb	r3, [r3, #3]
 8002dfe:	71fb      	strb	r3, [r7, #7]
            rs485_send_packet_dma(tx_buffer, 4);
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2104      	movs	r1, #4
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe f953 	bl	80010b0 <rs485_send_packet_dma>
            system_state.rs485_tx_count++;
 8002e0a:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <ProcessRS485+0x160>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4a02      	ldr	r2, [pc, #8]	@ (8002e1c <ProcessRS485+0x160>)
 8002e12:	6113      	str	r3, [r2, #16]
}
 8002e14:	bf00      	nop
 8002e16:	3750      	adds	r7, #80	@ 0x50
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1c:	20000004 	.word	0x20000004
 8002e20:	08007f2c 	.word	0x08007f2c
 8002e24:	08007d54 	.word	0x08007d54
 8002e28:	08007d58 	.word	0x08007d58
 8002e2c:	08007d60 	.word	0x08007d60
 8002e30:	08007f74 	.word	0x08007f74
 8002e34:	08007f98 	.word	0x08007f98
 8002e38:	08007fd0 	.word	0x08007fd0
 8002e3c:	08007ff8 	.word	0x08007ff8

08002e40 <ProcessDoorControl>:

/**
  * @brief  处理门控制
  */
void ProcessDoorControl(void) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
    /* 更新门控制器状态 */
    DoorControl_Update(&door_controller);
 8002e46:	4836      	ldr	r0, [pc, #216]	@ (8002f20 <ProcessDoorControl+0xe0>)
 8002e48:	f7fe ff96 	bl	8001d78 <DoorControl_Update>
    
    /* 处理来自LocalBB的门控命令 */
    LocalBB_DoorCommand_t door_cmd = LocalBB_GetDoorCommand();
 8002e4c:	f7fe f8d0 	bl	8000ff0 <LocalBB_GetDoorCommand>
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
    if (door_cmd != DOOR_CMD_NONE) {
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d02d      	beq.n	8002eb6 <ProcessDoorControl+0x76>
        printf("\r\n========== DOOR COMMAND RECEIVED ==========\r\n");
 8002e5a:	4832      	ldr	r0, [pc, #200]	@ (8002f24 <ProcessDoorControl+0xe4>)
 8002e5c:	f003 f870 	bl	8005f40 <puts>
        printf("[MAIN] Tick=%lu, Command=%s\r\n", 
 8002e60:	f000 fc2e 	bl	80036c0 <HAL_GetTick>
 8002e64:	4601      	mov	r1, r0
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <ProcessDoorControl+0x30>
 8002e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f28 <ProcessDoorControl+0xe8>)
 8002e6e:	e000      	b.n	8002e72 <ProcessDoorControl+0x32>
 8002e70:	4b2e      	ldr	r3, [pc, #184]	@ (8002f2c <ProcessDoorControl+0xec>)
 8002e72:	461a      	mov	r2, r3
 8002e74:	482e      	ldr	r0, [pc, #184]	@ (8002f30 <ProcessDoorControl+0xf0>)
 8002e76:	f002 fffb 	bl	8005e70 <iprintf>
               HAL_GetTick(), door_cmd == DOOR_CMD_OPEN ? "OPEN" : "CLOSE");
        
        if (door_cmd == DOOR_CMD_OPEN) {
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d109      	bne.n	8002e94 <ProcessDoorControl+0x54>
            printf("[DOOR] Command: OPEN\r\n");
 8002e80:	482c      	ldr	r0, [pc, #176]	@ (8002f34 <ProcessDoorControl+0xf4>)
 8002e82:	f003 f85d 	bl	8005f40 <puts>
            DoorControl_Open(&door_controller);
 8002e86:	4826      	ldr	r0, [pc, #152]	@ (8002f20 <ProcessDoorControl+0xe0>)
 8002e88:	f7fe fe94 	bl	8001bb4 <DoorControl_Open>
            system_state.door_is_open = true;
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <ProcessDoorControl+0xf8>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	70da      	strb	r2, [r3, #3]
 8002e92:	e00b      	b.n	8002eac <ProcessDoorControl+0x6c>
            // TIME BASED模式 - 不发送状态反馈
            // SendDoorStatus(DOOR_STATE_OPENING);
            // printf("[MAIN] Sent OPENING status to Master\r\n");
        } else if (door_cmd == DOOR_CMD_CLOSE) {
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d108      	bne.n	8002eac <ProcessDoorControl+0x6c>
            printf("[DOOR] Command: CLOSE\r\n");
 8002e9a:	4828      	ldr	r0, [pc, #160]	@ (8002f3c <ProcessDoorControl+0xfc>)
 8002e9c:	f003 f850 	bl	8005f40 <puts>
            DoorControl_Close(&door_controller);
 8002ea0:	481f      	ldr	r0, [pc, #124]	@ (8002f20 <ProcessDoorControl+0xe0>)
 8002ea2:	f7fe fef5 	bl	8001c90 <DoorControl_Close>
            system_state.door_is_open = false;
 8002ea6:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <ProcessDoorControl+0xf8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	70da      	strb	r2, [r3, #3]
            // TIME BASED模式 - 不发送状态反馈
            // SendDoorStatus(DOOR_STATE_CLOSING);
            // printf("[MAIN] Sent CLOSING status to Master\r\n");
        }
        LocalBB_ClearDoorCommand();
 8002eac:	f7fe f8aa 	bl	8001004 <LocalBB_ClearDoorCommand>
        printf("============================================\r\n\r\n");
 8002eb0:	4823      	ldr	r0, [pc, #140]	@ (8002f40 <ProcessDoorControl+0x100>)
 8002eb2:	f003 f845 	bl	8005f40 <puts>
    }
    
    /* TIME BASED模式 - 不发送门状态反馈 */
    /* 但仍然更新本地状态用于调试 */
    DoorState_t door_state = DoorControl_GetState(&door_controller);
 8002eb6:	481a      	ldr	r0, [pc, #104]	@ (8002f20 <ProcessDoorControl+0xe0>)
 8002eb8:	f7ff f8e6 	bl	8002088 <DoorControl_GetState>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71bb      	strb	r3, [r7, #6]
    static DoorState_t last_door_state = DOOR_STATE_CLOSED;
    
    if (door_state != last_door_state) {
 8002ec0:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <ProcessDoorControl+0x104>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	79ba      	ldrb	r2, [r7, #6]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d026      	beq.n	8002f18 <ProcessDoorControl+0xd8>
        last_door_state = door_state;
 8002eca:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <ProcessDoorControl+0x104>)
 8002ecc:	79bb      	ldrb	r3, [r7, #6]
 8002ece:	7013      	strb	r3, [r2, #0]
        
        switch (door_state) {
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d820      	bhi.n	8002f18 <ProcessDoorControl+0xd8>
 8002ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <ProcessDoorControl+0x9c>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002efb 	.word	0x08002efb
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	08002eed 	.word	0x08002eed
 8002ee8:	08002f11 	.word	0x08002f11
            case DOOR_STATE_OPEN:
                printf("[DOOR] Fully opened (local state)\r\n");
 8002eec:	4816      	ldr	r0, [pc, #88]	@ (8002f48 <ProcessDoorControl+0x108>)
 8002eee:	f003 f827 	bl	8005f40 <puts>
                system_state.door_is_open = true;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <ProcessDoorControl+0xf8>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	70da      	strb	r2, [r3, #3]
                // SendDoorStatus(DOOR_STATE_OPEN);
                break;
 8002ef8:	e00e      	b.n	8002f18 <ProcessDoorControl+0xd8>
                
            case DOOR_STATE_CLOSED:
                printf("[DOOR] Fully closed (local state)\r\n");
 8002efa:	4814      	ldr	r0, [pc, #80]	@ (8002f4c <ProcessDoorControl+0x10c>)
 8002efc:	f003 f820 	bl	8005f40 <puts>
                system_state.door_is_open = false;
 8002f00:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <ProcessDoorControl+0xf8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	70da      	strb	r2, [r3, #3]
                // SendDoorStatus(DOOR_STATE_CLOSED);
                break;
 8002f06:	e007      	b.n	8002f18 <ProcessDoorControl+0xd8>
                
            case DOOR_STATE_OPENING:
                printf("[DOOR] Opening (local state)\r\n");
 8002f08:	4811      	ldr	r0, [pc, #68]	@ (8002f50 <ProcessDoorControl+0x110>)
 8002f0a:	f003 f819 	bl	8005f40 <puts>
                // SendDoorStatus(DOOR_STATE_OPENING);
                break;
 8002f0e:	e003      	b.n	8002f18 <ProcessDoorControl+0xd8>
            case DOOR_STATE_CLOSING:
                printf("[DOOR] Closing (local state)\r\n");
 8002f10:	4810      	ldr	r0, [pc, #64]	@ (8002f54 <ProcessDoorControl+0x114>)
 8002f12:	f003 f815 	bl	8005f40 <puts>
                // SendDoorStatus(DOOR_STATE_CLOSING);
                break;
 8002f16:	bf00      	nop
        }
    }
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200006fc 	.word	0x200006fc
 8002f24:	08008030 	.word	0x08008030
 8002f28:	08007d64 	.word	0x08007d64
 8002f2c:	08008060 	.word	0x08008060
 8002f30:	08008068 	.word	0x08008068
 8002f34:	08008088 	.word	0x08008088
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	080080a0 	.word	0x080080a0
 8002f40:	080080b8 	.word	0x080080b8
 8002f44:	2000070c 	.word	0x2000070c
 8002f48:	080080e8 	.word	0x080080e8
 8002f4c:	0800810c 	.word	0x0800810c
 8002f50:	08008130 	.word	0x08008130
 8002f54:	08008150 	.word	0x08008150

08002f58 <SendPhotoSensorEvent>:

/**
  * @brief  发送光电传感器事件
  */
void SendPhotoSensorEvent(uint8_t floor) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8002f62:	2310      	movs	r3, #16
 8002f64:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = floor;
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73bb      	strb	r3, [r7, #14]
    tx_buffer[3] = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
    
    rs485_send_packet_dma(tx_buffer, 4);
 8002f72:	f107 030c 	add.w	r3, r7, #12
 8002f76:	2104      	movs	r1, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe f899 	bl	80010b0 <rs485_send_packet_dma>
    system_state.rs485_tx_count++;
 8002f7e:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <SendPhotoSensorEvent+0x44>)
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <SendPhotoSensorEvent+0x44>)
 8002f86:	6113      	str	r3, [r2, #16]
    printf("[RS485 TX] Photo sensor floor %d\r\n", floor);
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4804      	ldr	r0, [pc, #16]	@ (8002fa0 <SendPhotoSensorEvent+0x48>)
 8002f8e:	f002 ff6f 	bl	8005e70 <iprintf>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	08008170 	.word	0x08008170

08002fa4 <PhotoSensor_TriggerCallback>:
/**
  * @brief  光电传感器触发回调
  * @note   在中断中被调用
  */
void PhotoSensor_TriggerCallback(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    sensor_triggered = true;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <PhotoSensor_TriggerCallback+0x14>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	200006f8 	.word	0x200006f8

08002fbc <HAL_GPIO_EXTI_Callback>:
  * @brief  HAL GPIO EXTI回调 - 统一处理所有GPIO中断
  * @param  GPIO_Pin: 触发中断的引脚
  * @note   这个函数覆盖HAL库的weak函数
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fcc:	d102      	bne.n	8002fd4 <HAL_GPIO_EXTI_Callback+0x18>
        // PA11 中断 - 键盘按下
        Keyboard_IRQHandler();
 8002fce:	f7fe fccd 	bl	800196c <Keyboard_IRQHandler>
    }
    else if (GPIO_Pin == GPIO_PIN_5) {
        // PB5 中断 - 光电传感器
        PhotoSensor_IRQHandler();
    }
}
 8002fd2:	e004      	b.n	8002fde <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_Pin == GPIO_PIN_5) {
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d101      	bne.n	8002fde <HAL_GPIO_EXTI_Callback+0x22>
        PhotoSensor_IRQHandler();
 8002fda:	f7fe fd29 	bl	8001a30 <PhotoSensor_IRQHandler>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_UART_TxCpltCallback>:

/**
  * @brief  UART TX DMA完成回调
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    extern void rs485_tx_complete_callback(void);
    if (huart == &huart2) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <HAL_UART_TxCpltCallback+0x1c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_TxCpltCallback+0x14>
        rs485_tx_complete_callback();
 8002ff8:	f7fe f918 	bl	800122c <rs485_tx_complete_callback>
    }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000075c 	.word	0x2000075c

08003008 <HAL_UART_RxCpltCallback>:

/**
  * @brief  UART RX DMA完成回调  
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
    // DMA循环模式下不需要处理
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800301e:	b672      	cpsid	i
}
 8003020:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <Error_Handler+0x8>
	...

08003028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800302e:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <HAL_MspInit+0x5c>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <HAL_MspInit+0x5c>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6193      	str	r3, [r2, #24]
 800303a:	4b12      	ldr	r3, [pc, #72]	@ (8003084 <HAL_MspInit+0x5c>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <HAL_MspInit+0x5c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a0e      	ldr	r2, [pc, #56]	@ (8003084 <HAL_MspInit+0x5c>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003050:	61d3      	str	r3, [r2, #28]
 8003052:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <HAL_MspInit+0x5c>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800305e:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <HAL_MspInit+0x60>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <HAL_MspInit+0x60>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	40010000 	.word	0x40010000

0800308c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <NMI_Handler+0x4>

08003094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <HardFault_Handler+0x4>

0800309c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <MemManage_Handler+0x4>

080030a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <BusFault_Handler+0x4>

080030ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <UsageFault_Handler+0x4>

080030b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030dc:	f000 fade 	bl	800369c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030e8:	4802      	ldr	r0, [pc, #8]	@ (80030f4 <DMA1_Channel6_IRQHandler+0x10>)
 80030ea:	f000 fd93 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200007ec 	.word	0x200007ec

080030f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030fc:	4802      	ldr	r0, [pc, #8]	@ (8003108 <DMA1_Channel7_IRQHandler+0x10>)
 80030fe:	f000 fd89 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000830 	.word	0x20000830

0800310c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* Check for IDLE interrupt */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8003110:	4b06      	ldr	r3, [pc, #24]	@ (800312c <USART2_IRQHandler+0x20>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b10      	cmp	r3, #16
 800311c:	d101      	bne.n	8003122 <USART2_IRQHandler+0x16>
  {
    /* Call RS485 IDLE handler */
    extern void rs485_idle_interrupt_handler(void);
    rs485_idle_interrupt_handler();
 800311e:	f7fe f841 	bl	80011a4 <rs485_idle_interrupt_handler>
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003122:	4802      	ldr	r0, [pc, #8]	@ (800312c <USART2_IRQHandler+0x20>)
 8003124:	f001 fe8e 	bl	8004e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000075c 	.word	0x2000075c

08003130 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts for PB5 (Photo Sensor).
  */
void EXTI9_5_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003134:	2020      	movs	r0, #32
 8003136:	f001 f855 	bl	80041e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}

0800313e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts for PA11 (Keyboard).
  */
void EXTI15_10_IRQHandler(void)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003142:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003146:	f001 f84d 	bl	80041e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}

0800314e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e00a      	b.n	8003176 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003160:	f3af 8000 	nop.w
 8003164:	4601      	mov	r1, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	60ba      	str	r2, [r7, #8]
 800316c:	b2ca      	uxtb	r2, r1
 800316e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3301      	adds	r3, #1
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	dbf0      	blt.n	8003160 <_read+0x12>
  }

  return len;
 800317e:	687b      	ldr	r3, [r7, #4]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031ae:	605a      	str	r2, [r3, #4]
  return 0;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <_isatty>:

int _isatty(int file)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031c4:	2301      	movs	r3, #1
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031f0:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <_sbrk+0x5c>)
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <_sbrk+0x60>)
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031fc:	4b13      	ldr	r3, [pc, #76]	@ (800324c <_sbrk+0x64>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <_sbrk+0x64>)
 8003206:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <_sbrk+0x68>)
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <_sbrk+0x64>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	429a      	cmp	r2, r3
 8003216:	d207      	bcs.n	8003228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003218:	f002 ffe2 	bl	80061e0 <__errno>
 800321c:	4603      	mov	r3, r0
 800321e:	220c      	movs	r2, #12
 8003220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	e009      	b.n	800323c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003228:	4b08      	ldr	r3, [pc, #32]	@ (800324c <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800322e:	4b07      	ldr	r3, [pc, #28]	@ (800324c <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	4a05      	ldr	r2, [pc, #20]	@ (800324c <_sbrk+0x64>)
 8003238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20005000 	.word	0x20005000
 8003248:	00000400 	.word	0x00000400
 800324c:	20000710 	.word	0x20000710
 8003250:	200009c8 	.word	0x200009c8

08003254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 8003266:	4a12      	ldr	r2, [pc, #72]	@ (80032b0 <MX_USART1_UART_Init+0x50>)
 8003268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 800326c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800327e:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003284:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 8003286:	220c      	movs	r2, #12
 8003288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003296:	4805      	ldr	r0, [pc, #20]	@ (80032ac <MX_USART1_UART_Init+0x4c>)
 8003298:	f001 fbcc 	bl	8004a34 <HAL_UART_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032a2:	f7ff feba 	bl	800301a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000714 	.word	0x20000714
 80032b0:	40013800 	.word	0x40013800

080032b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <MX_USART2_UART_Init+0x50>)
 80032bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032da:	220c      	movs	r2, #12
 80032dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032de:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032ea:	4805      	ldr	r0, [pc, #20]	@ (8003300 <MX_USART2_UART_Init+0x4c>)
 80032ec:	f001 fba2 	bl	8004a34 <HAL_UART_Init>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032f6:	f7ff fe90 	bl	800301a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	2000075c 	.word	0x2000075c
 8003304:	40004400 	.word	0x40004400

08003308 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 800330e:	4a11      	ldr	r2, [pc, #68]	@ (8003354 <MX_USART3_UART_Init+0x4c>)
 8003310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8003312:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 8003314:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <MX_USART3_UART_Init+0x50>)
 8003316:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003318:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800331e:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 8003320:	2200      	movs	r2, #0
 8003322:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003324:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 800332c:	220c      	movs	r2, #12
 800332e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003330:	4b07      	ldr	r3, [pc, #28]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 8003332:	2200      	movs	r2, #0
 8003334:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 8003338:	2200      	movs	r2, #0
 800333a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800333c:	4804      	ldr	r0, [pc, #16]	@ (8003350 <MX_USART3_UART_Init+0x48>)
 800333e:	f001 fb79 	bl	8004a34 <HAL_UART_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003348:	f7ff fe67 	bl	800301a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200007a4 	.word	0x200007a4
 8003354:	40004800 	.word	0x40004800
 8003358:	000f4240 	.word	0x000f4240

0800335c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	@ 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 0320 	add.w	r3, r7, #32
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7e      	ldr	r2, [pc, #504]	@ (8003570 <HAL_UART_MspInit+0x214>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d132      	bne.n	80033e2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800337c:	4b7d      	ldr	r3, [pc, #500]	@ (8003574 <HAL_UART_MspInit+0x218>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	4a7c      	ldr	r2, [pc, #496]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003386:	6193      	str	r3, [r2, #24]
 8003388:	4b7a      	ldr	r3, [pc, #488]	@ (8003574 <HAL_UART_MspInit+0x218>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b77      	ldr	r3, [pc, #476]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	4a76      	ldr	r2, [pc, #472]	@ (8003574 <HAL_UART_MspInit+0x218>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6193      	str	r3, [r2, #24]
 80033a0:	4b74      	ldr	r3, [pc, #464]	@ (8003574 <HAL_UART_MspInit+0x218>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ba:	f107 0320 	add.w	r3, r7, #32
 80033be:	4619      	mov	r1, r3
 80033c0:	486d      	ldr	r0, [pc, #436]	@ (8003578 <HAL_UART_MspInit+0x21c>)
 80033c2:	f000 fd5b 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d4:	f107 0320 	add.w	r3, r7, #32
 80033d8:	4619      	mov	r1, r3
 80033da:	4867      	ldr	r0, [pc, #412]	@ (8003578 <HAL_UART_MspInit+0x21c>)
 80033dc:	f000 fd4e 	bl	8003e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80033e0:	e0c1      	b.n	8003566 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a65      	ldr	r2, [pc, #404]	@ (800357c <HAL_UART_MspInit+0x220>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	f040 8085 	bne.w	80034f8 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ee:	4b61      	ldr	r3, [pc, #388]	@ (8003574 <HAL_UART_MspInit+0x218>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a60      	ldr	r2, [pc, #384]	@ (8003574 <HAL_UART_MspInit+0x218>)
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f8:	61d3      	str	r3, [r2, #28]
 80033fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003574 <HAL_UART_MspInit+0x218>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	4b5b      	ldr	r3, [pc, #364]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	4a5a      	ldr	r2, [pc, #360]	@ (8003574 <HAL_UART_MspInit+0x218>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	6193      	str	r3, [r2, #24]
 8003412:	4b58      	ldr	r3, [pc, #352]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800341e:	2304      	movs	r3, #4
 8003420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	f107 0320 	add.w	r3, r7, #32
 800342e:	4619      	mov	r1, r3
 8003430:	4851      	ldr	r0, [pc, #324]	@ (8003578 <HAL_UART_MspInit+0x21c>)
 8003432:	f000 fd23 	bl	8003e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003436:	2308      	movs	r3, #8
 8003438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0320 	add.w	r3, r7, #32
 8003446:	4619      	mov	r1, r3
 8003448:	484b      	ldr	r0, [pc, #300]	@ (8003578 <HAL_UART_MspInit+0x21c>)
 800344a:	f000 fd17 	bl	8003e7c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800344e:	4b4c      	ldr	r3, [pc, #304]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003450:	4a4c      	ldr	r2, [pc, #304]	@ (8003584 <HAL_UART_MspInit+0x228>)
 8003452:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003454:	4b4a      	ldr	r3, [pc, #296]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003456:	2200      	movs	r2, #0
 8003458:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800345a:	4b49      	ldr	r3, [pc, #292]	@ (8003580 <HAL_UART_MspInit+0x224>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003460:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003466:	4b46      	ldr	r3, [pc, #280]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800346c:	4b44      	ldr	r3, [pc, #272]	@ (8003580 <HAL_UART_MspInit+0x224>)
 800346e:	2200      	movs	r2, #0
 8003470:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003472:	4b43      	ldr	r3, [pc, #268]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003474:	2220      	movs	r2, #32
 8003476:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003478:	4b41      	ldr	r3, [pc, #260]	@ (8003580 <HAL_UART_MspInit+0x224>)
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800347e:	4840      	ldr	r0, [pc, #256]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003480:	f000 fa5a 	bl	8003938 <HAL_DMA_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800348a:	f7ff fdc6 	bl	800301a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003492:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003494:	4a3a      	ldr	r2, [pc, #232]	@ (8003580 <HAL_UART_MspInit+0x224>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800349a:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 800349c:	4a3b      	ldr	r2, [pc, #236]	@ (800358c <HAL_UART_MspInit+0x230>)
 800349e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034a0:	4b39      	ldr	r3, [pc, #228]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034a2:	2210      	movs	r2, #16
 80034a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a6:	4b38      	ldr	r3, [pc, #224]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034ae:	2280      	movs	r2, #128	@ 0x80
 80034b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034b2:	4b35      	ldr	r3, [pc, #212]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b8:	4b33      	ldr	r3, [pc, #204]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034be:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034c4:	4b30      	ldr	r3, [pc, #192]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034ca:	482f      	ldr	r0, [pc, #188]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034cc:	f000 fa34 	bl	8003938 <HAL_DMA_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_UART_MspInit+0x17e>
      Error_Handler();
 80034d6:	f7ff fda0 	bl	800301a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38
 80034e0:	4a29      	ldr	r2, [pc, #164]	@ (8003588 <HAL_UART_MspInit+0x22c>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	2026      	movs	r0, #38	@ 0x26
 80034ec:	f000 f9ed 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034f0:	2026      	movs	r0, #38	@ 0x26
 80034f2:	f000 fa06 	bl	8003902 <HAL_NVIC_EnableIRQ>
}
 80034f6:	e036      	b.n	8003566 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a24      	ldr	r2, [pc, #144]	@ (8003590 <HAL_UART_MspInit+0x234>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d131      	bne.n	8003566 <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003502:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800350c:	61d3      	str	r3, [r2, #28]
 800350e:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	4b16      	ldr	r3, [pc, #88]	@ (8003574 <HAL_UART_MspInit+0x218>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	4a15      	ldr	r2, [pc, #84]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	6193      	str	r3, [r2, #24]
 8003526:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <HAL_UART_MspInit+0x218>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	f107 0320 	add.w	r3, r7, #32
 8003544:	4619      	mov	r1, r3
 8003546:	4813      	ldr	r0, [pc, #76]	@ (8003594 <HAL_UART_MspInit+0x238>)
 8003548:	f000 fc98 	bl	8003e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800354c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	4619      	mov	r1, r3
 8003560:	480c      	ldr	r0, [pc, #48]	@ (8003594 <HAL_UART_MspInit+0x238>)
 8003562:	f000 fc8b 	bl	8003e7c <HAL_GPIO_Init>
}
 8003566:	bf00      	nop
 8003568:	3730      	adds	r7, #48	@ 0x30
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40013800 	.word	0x40013800
 8003574:	40021000 	.word	0x40021000
 8003578:	40010800 	.word	0x40010800
 800357c:	40004400 	.word	0x40004400
 8003580:	200007ec 	.word	0x200007ec
 8003584:	4002006c 	.word	0x4002006c
 8003588:	20000830 	.word	0x20000830
 800358c:	40020080 	.word	0x40020080
 8003590:	40004800 	.word	0x40004800
 8003594:	40010c00 	.word	0x40010c00

08003598 <_write>:

/* USER CODE BEGIN 1 */

/* Redirect printf to USART1 for debug output */
int _write(int file, char *ptr, int len)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4804      	ldr	r0, [pc, #16]	@ (80035c0 <_write+0x28>)
 80035b0:	f001 fa90 	bl	8004ad4 <HAL_UART_Transmit>
  return len;
 80035b4:	687b      	ldr	r3, [r7, #4]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000714 	.word	0x20000714

080035c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035c4:	f7ff fe46 	bl	8003254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c8:	480b      	ldr	r0, [pc, #44]	@ (80035f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035ca:	490c      	ldr	r1, [pc, #48]	@ (80035fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003600 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d0:	e002      	b.n	80035d8 <LoopCopyDataInit>

080035d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d6:	3304      	adds	r3, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035dc:	d3f9      	bcc.n	80035d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035de:	4a09      	ldr	r2, [pc, #36]	@ (8003604 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035e0:	4c09      	ldr	r4, [pc, #36]	@ (8003608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e4:	e001      	b.n	80035ea <LoopFillZerobss>

080035e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e8:	3204      	adds	r2, #4

080035ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ec:	d3fb      	bcc.n	80035e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035ee:	f002 fdfd 	bl	80061ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035f2:	f7ff f887 	bl	8002704 <main>
  bx lr
 80035f6:	4770      	bx	lr
  ldr r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035fc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003600:	08008320 	.word	0x08008320
  ldr r2, =_sbss
 8003604:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003608:	200009c4 	.word	0x200009c4

0800360c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800360c:	e7fe      	b.n	800360c <ADC1_2_IRQHandler>
	...

08003610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003614:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <HAL_Init+0x28>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a07      	ldr	r2, [pc, #28]	@ (8003638 <HAL_Init+0x28>)
 800361a:	f043 0310 	orr.w	r3, r3, #16
 800361e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003620:	2003      	movs	r0, #3
 8003622:	f000 f947 	bl	80038b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003626:	200f      	movs	r0, #15
 8003628:	f000 f808 	bl	800363c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800362c:	f7ff fcfc 	bl	8003028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40022000 	.word	0x40022000

0800363c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003644:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_InitTick+0x54>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_InitTick+0x58>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4619      	mov	r1, r3
 800364e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003652:	fbb3 f3f1 	udiv	r3, r3, r1
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f95f 	bl	800391e <HAL_SYSTICK_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00e      	b.n	8003688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d80a      	bhi.n	8003686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003670:	2200      	movs	r2, #0
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f000 f927 	bl	80038ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800367c:	4a06      	ldr	r2, [pc, #24]	@ (8003698 <HAL_InitTick+0x5c>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000024 	.word	0x20000024
 8003694:	2000002c 	.word	0x2000002c
 8003698:	20000028 	.word	0x20000028

0800369c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_IncTick+0x1c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <HAL_IncTick+0x20>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	4a03      	ldr	r2, [pc, #12]	@ (80036bc <HAL_IncTick+0x20>)
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	2000002c 	.word	0x2000002c
 80036bc:	20000874 	.word	0x20000874

080036c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return uwTick;
 80036c4:	4b02      	ldr	r3, [pc, #8]	@ (80036d0 <HAL_GetTick+0x10>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	20000874 	.word	0x20000874

080036d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7ff fff0 	bl	80036c0 <HAL_GetTick>
 80036e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d005      	beq.n	80036fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_Delay+0x44>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036fa:	bf00      	nop
 80036fc:	f7ff ffe0 	bl	80036c0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	429a      	cmp	r2, r3
 800370a:	d8f7      	bhi.n	80036fc <HAL_Delay+0x28>
  {
  }
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000002c 	.word	0x2000002c

0800371c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003738:	4013      	ands	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374e:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	60d3      	str	r3, [r2, #12]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <__NVIC_GetPriorityGrouping+0x18>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f003 0307 	and.w	r3, r3, #7
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	2b00      	cmp	r3, #0
 8003790:	db0b      	blt.n	80037aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	4906      	ldr	r1, [pc, #24]	@ (80037b4 <__NVIC_EnableIRQ+0x34>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2001      	movs	r0, #1
 80037a2:	fa00 f202 	lsl.w	r2, r0, r2
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	@ (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	@ (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	@ 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	@ 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003880:	d301      	bcc.n	8003886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003882:	2301      	movs	r3, #1
 8003884:	e00f      	b.n	80038a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003886:	4a0a      	ldr	r2, [pc, #40]	@ (80038b0 <SysTick_Config+0x40>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388e:	210f      	movs	r1, #15
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	f7ff ff90 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <SysTick_Config+0x40>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389e:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <SysTick_Config+0x40>)
 80038a0:	2207      	movs	r2, #7
 80038a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	e000e010 	.word	0xe000e010

080038b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff2d 	bl	800371c <__NVIC_SetPriorityGrouping>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038dc:	f7ff ff42 	bl	8003764 <__NVIC_GetPriorityGrouping>
 80038e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	f7ff ff90 	bl	800380c <NVIC_EncodePriority>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff5f 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff35 	bl	8003780 <__NVIC_EnableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffa2 	bl	8003870 <SysTick_Config>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e043      	b.n	80039d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	4b22      	ldr	r3, [pc, #136]	@ (80039e0 <HAL_DMA_Init+0xa8>)
 8003956:	4413      	add	r3, r2
 8003958:	4a22      	ldr	r2, [pc, #136]	@ (80039e4 <HAL_DMA_Init+0xac>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	009a      	lsls	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1f      	ldr	r2, [pc, #124]	@ (80039e8 <HAL_DMA_Init+0xb0>)
 800396a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003982:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003986:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	bffdfff8 	.word	0xbffdfff8
 80039e4:	cccccccd 	.word	0xcccccccd
 80039e8:	40020000 	.word	0x40020000

080039ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_DMA_Start_IT+0x20>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e04b      	b.n	8003aa4 <HAL_DMA_Start_IT+0xb8>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d13a      	bne.n	8003a96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f9eb 	bl	8003e20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 020e 	orr.w	r2, r2, #14
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e00f      	b.n	8003a84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 020a 	orr.w	r2, r2, #10
 8003a82:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e005      	b.n	8003aa2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d008      	beq.n	8003ad6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e020      	b.n	8003b18 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 020e 	bic.w	r2, r2, #14
 8003ae4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d005      	beq.n	8003b48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e051      	b.n	8003bec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 020e 	bic.w	r2, r2, #14
 8003b56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a22      	ldr	r2, [pc, #136]	@ (8003bf8 <HAL_DMA_Abort_IT+0xd4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d029      	beq.n	8003bc6 <HAL_DMA_Abort_IT+0xa2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a21      	ldr	r2, [pc, #132]	@ (8003bfc <HAL_DMA_Abort_IT+0xd8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_Abort_IT+0x9e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1f      	ldr	r2, [pc, #124]	@ (8003c00 <HAL_DMA_Abort_IT+0xdc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01a      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x98>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <HAL_DMA_Abort_IT+0xe0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d012      	beq.n	8003bb6 <HAL_DMA_Abort_IT+0x92>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	@ (8003c08 <HAL_DMA_Abort_IT+0xe4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00a      	beq.n	8003bb0 <HAL_DMA_Abort_IT+0x8c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c0c <HAL_DMA_Abort_IT+0xe8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d102      	bne.n	8003baa <HAL_DMA_Abort_IT+0x86>
 8003ba4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003ba8:	e00e      	b.n	8003bc8 <HAL_DMA_Abort_IT+0xa4>
 8003baa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bae:	e00b      	b.n	8003bc8 <HAL_DMA_Abort_IT+0xa4>
 8003bb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bb4:	e008      	b.n	8003bc8 <HAL_DMA_Abort_IT+0xa4>
 8003bb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bba:	e005      	b.n	8003bc8 <HAL_DMA_Abort_IT+0xa4>
 8003bbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bc0:	e002      	b.n	8003bc8 <HAL_DMA_Abort_IT+0xa4>
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	e000      	b.n	8003bc8 <HAL_DMA_Abort_IT+0xa4>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4a11      	ldr	r2, [pc, #68]	@ (8003c10 <HAL_DMA_Abort_IT+0xec>)
 8003bca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
    } 
  }
  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40020008 	.word	0x40020008
 8003bfc:	4002001c 	.word	0x4002001c
 8003c00:	40020030 	.word	0x40020030
 8003c04:	40020044 	.word	0x40020044
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	4002006c 	.word	0x4002006c
 8003c10:	40020000 	.word	0x40020000

08003c14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	2204      	movs	r2, #4
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d04f      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc8>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d04a      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a66      	ldr	r2, [pc, #408]	@ (8003e04 <HAL_DMA_IRQHandler+0x1f0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d029      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xae>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a65      	ldr	r2, [pc, #404]	@ (8003e08 <HAL_DMA_IRQHandler+0x1f4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <HAL_DMA_IRQHandler+0xaa>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a63      	ldr	r2, [pc, #396]	@ (8003e0c <HAL_DMA_IRQHandler+0x1f8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01a      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0xa4>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a62      	ldr	r2, [pc, #392]	@ (8003e10 <HAL_DMA_IRQHandler+0x1fc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d012      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x9e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a60      	ldr	r2, [pc, #384]	@ (8003e14 <HAL_DMA_IRQHandler+0x200>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00a      	beq.n	8003cac <HAL_DMA_IRQHandler+0x98>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003e18 <HAL_DMA_IRQHandler+0x204>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d102      	bne.n	8003ca6 <HAL_DMA_IRQHandler+0x92>
 8003ca0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ca4:	e00e      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xb0>
 8003ca6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003caa:	e00b      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xb0>
 8003cac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003cb0:	e008      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xb0>
 8003cb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cb6:	e005      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xb0>
 8003cb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cbc:	e002      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xb0>
 8003cbe:	2340      	movs	r3, #64	@ 0x40
 8003cc0:	e000      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xb0>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	4a55      	ldr	r2, [pc, #340]	@ (8003e1c <HAL_DMA_IRQHandler+0x208>)
 8003cc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8094 	beq.w	8003dfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cda:	e08e      	b.n	8003dfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d056      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x186>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d051      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10b      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 020a 	bic.w	r2, r2, #10
 8003d12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a38      	ldr	r2, [pc, #224]	@ (8003e04 <HAL_DMA_IRQHandler+0x1f0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d029      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x166>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a37      	ldr	r2, [pc, #220]	@ (8003e08 <HAL_DMA_IRQHandler+0x1f4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x162>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a35      	ldr	r2, [pc, #212]	@ (8003e0c <HAL_DMA_IRQHandler+0x1f8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01a      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x15c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a34      	ldr	r2, [pc, #208]	@ (8003e10 <HAL_DMA_IRQHandler+0x1fc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d012      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x156>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a32      	ldr	r2, [pc, #200]	@ (8003e14 <HAL_DMA_IRQHandler+0x200>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00a      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x150>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a31      	ldr	r2, [pc, #196]	@ (8003e18 <HAL_DMA_IRQHandler+0x204>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d102      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x14a>
 8003d58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d5c:	e00e      	b.n	8003d7c <HAL_DMA_IRQHandler+0x168>
 8003d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d62:	e00b      	b.n	8003d7c <HAL_DMA_IRQHandler+0x168>
 8003d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d68:	e008      	b.n	8003d7c <HAL_DMA_IRQHandler+0x168>
 8003d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d6e:	e005      	b.n	8003d7c <HAL_DMA_IRQHandler+0x168>
 8003d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d74:	e002      	b.n	8003d7c <HAL_DMA_IRQHandler+0x168>
 8003d76:	2320      	movs	r3, #32
 8003d78:	e000      	b.n	8003d7c <HAL_DMA_IRQHandler+0x168>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	4a27      	ldr	r2, [pc, #156]	@ (8003e1c <HAL_DMA_IRQHandler+0x208>)
 8003d7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d034      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d98:	e02f      	b.n	8003dfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2208      	movs	r2, #8
 8003da0:	409a      	lsls	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d028      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x1e8>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d023      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 020e 	bic.w	r2, r2, #14
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
    }
  }
  return;
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
}
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40020008 	.word	0x40020008
 8003e08:	4002001c 	.word	0x4002001c
 8003e0c:	40020030 	.word	0x40020030
 8003e10:	40020044 	.word	0x40020044
 8003e14:	40020058 	.word	0x40020058
 8003e18:	4002006c 	.word	0x4002006c
 8003e1c:	40020000 	.word	0x40020000

08003e20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d108      	bne.n	8003e60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e5e:	e007      	b.n	8003e70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b08b      	sub	sp, #44	@ 0x2c
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8e:	e169      	b.n	8004164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e90:	2201      	movs	r2, #1
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8158 	bne.w	800415e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a9a      	ldr	r2, [pc, #616]	@ (800411c <HAL_GPIO_Init+0x2a0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d05e      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003eb8:	4a98      	ldr	r2, [pc, #608]	@ (800411c <HAL_GPIO_Init+0x2a0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d875      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ebe:	4a98      	ldr	r2, [pc, #608]	@ (8004120 <HAL_GPIO_Init+0x2a4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d058      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003ec4:	4a96      	ldr	r2, [pc, #600]	@ (8004120 <HAL_GPIO_Init+0x2a4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d86f      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003eca:	4a96      	ldr	r2, [pc, #600]	@ (8004124 <HAL_GPIO_Init+0x2a8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d052      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003ed0:	4a94      	ldr	r2, [pc, #592]	@ (8004124 <HAL_GPIO_Init+0x2a8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d869      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ed6:	4a94      	ldr	r2, [pc, #592]	@ (8004128 <HAL_GPIO_Init+0x2ac>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d04c      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003edc:	4a92      	ldr	r2, [pc, #584]	@ (8004128 <HAL_GPIO_Init+0x2ac>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d863      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ee2:	4a92      	ldr	r2, [pc, #584]	@ (800412c <HAL_GPIO_Init+0x2b0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d046      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003ee8:	4a90      	ldr	r2, [pc, #576]	@ (800412c <HAL_GPIO_Init+0x2b0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d85d      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003eee:	2b12      	cmp	r3, #18
 8003ef0:	d82a      	bhi.n	8003f48 <HAL_GPIO_Init+0xcc>
 8003ef2:	2b12      	cmp	r3, #18
 8003ef4:	d859      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <HAL_GPIO_Init+0x80>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f77 	.word	0x08003f77
 8003f00:	08003f51 	.word	0x08003f51
 8003f04:	08003f63 	.word	0x08003f63
 8003f08:	08003fa5 	.word	0x08003fa5
 8003f0c:	08003fab 	.word	0x08003fab
 8003f10:	08003fab 	.word	0x08003fab
 8003f14:	08003fab 	.word	0x08003fab
 8003f18:	08003fab 	.word	0x08003fab
 8003f1c:	08003fab 	.word	0x08003fab
 8003f20:	08003fab 	.word	0x08003fab
 8003f24:	08003fab 	.word	0x08003fab
 8003f28:	08003fab 	.word	0x08003fab
 8003f2c:	08003fab 	.word	0x08003fab
 8003f30:	08003fab 	.word	0x08003fab
 8003f34:	08003fab 	.word	0x08003fab
 8003f38:	08003fab 	.word	0x08003fab
 8003f3c:	08003fab 	.word	0x08003fab
 8003f40:	08003f59 	.word	0x08003f59
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	4a79      	ldr	r2, [pc, #484]	@ (8004130 <HAL_GPIO_Init+0x2b4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f4e:	e02c      	b.n	8003faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	623b      	str	r3, [r7, #32]
          break;
 8003f56:	e029      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	623b      	str	r3, [r7, #32]
          break;
 8003f60:	e024      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	3308      	adds	r3, #8
 8003f68:	623b      	str	r3, [r7, #32]
          break;
 8003f6a:	e01f      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	330c      	adds	r3, #12
 8003f72:	623b      	str	r3, [r7, #32]
          break;
 8003f74:	e01a      	b.n	8003fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f7e:	2304      	movs	r3, #4
 8003f80:	623b      	str	r3, [r7, #32]
          break;
 8003f82:	e013      	b.n	8003fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	611a      	str	r2, [r3, #16]
          break;
 8003f96:	e009      	b.n	8003fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f98:	2308      	movs	r3, #8
 8003f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	615a      	str	r2, [r3, #20]
          break;
 8003fa2:	e003      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	623b      	str	r3, [r7, #32]
          break;
 8003fa8:	e000      	b.n	8003fac <HAL_GPIO_Init+0x130>
          break;
 8003faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2bff      	cmp	r3, #255	@ 0xff
 8003fb0:	d801      	bhi.n	8003fb6 <HAL_GPIO_Init+0x13a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	e001      	b.n	8003fba <HAL_GPIO_Init+0x13e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2bff      	cmp	r3, #255	@ 0xff
 8003fc0:	d802      	bhi.n	8003fc8 <HAL_GPIO_Init+0x14c>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	e002      	b.n	8003fce <HAL_GPIO_Init+0x152>
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	3b08      	subs	r3, #8
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	210f      	movs	r1, #15
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80b1 	beq.w	800415e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8004134 <HAL_GPIO_Init+0x2b8>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	4a4c      	ldr	r2, [pc, #304]	@ (8004134 <HAL_GPIO_Init+0x2b8>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6193      	str	r3, [r2, #24]
 8004008:	4b4a      	ldr	r3, [pc, #296]	@ (8004134 <HAL_GPIO_Init+0x2b8>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004014:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <HAL_GPIO_Init+0x2bc>)
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	220f      	movs	r2, #15
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a40      	ldr	r2, [pc, #256]	@ (800413c <HAL_GPIO_Init+0x2c0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <HAL_GPIO_Init+0x1ec>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3f      	ldr	r2, [pc, #252]	@ (8004140 <HAL_GPIO_Init+0x2c4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00d      	beq.n	8004064 <HAL_GPIO_Init+0x1e8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3e      	ldr	r2, [pc, #248]	@ (8004144 <HAL_GPIO_Init+0x2c8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <HAL_GPIO_Init+0x1e4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3d      	ldr	r2, [pc, #244]	@ (8004148 <HAL_GPIO_Init+0x2cc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_GPIO_Init+0x1e0>
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 800405c:	2304      	movs	r3, #4
 800405e:	e004      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 8004060:	2302      	movs	r3, #2
 8004062:	e002      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 8004068:	2300      	movs	r3, #0
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	f002 0203 	and.w	r2, r2, #3
 8004070:	0092      	lsls	r2, r2, #2
 8004072:	4093      	lsls	r3, r2
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800407a:	492f      	ldr	r1, [pc, #188]	@ (8004138 <HAL_GPIO_Init+0x2bc>)
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	3302      	adds	r3, #2
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004094:	4b2d      	ldr	r3, [pc, #180]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	492c      	ldr	r1, [pc, #176]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	608b      	str	r3, [r1, #8]
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040a2:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	4928      	ldr	r1, [pc, #160]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040bc:	4b23      	ldr	r3, [pc, #140]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	4922      	ldr	r1, [pc, #136]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040ca:	4b20      	ldr	r3, [pc, #128]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	491e      	ldr	r1, [pc, #120]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d006      	beq.n	80040f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040e4:	4b19      	ldr	r3, [pc, #100]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	4918      	ldr	r1, [pc, #96]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
 80040f0:	e006      	b.n	8004100 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040f2:	4b16      	ldr	r3, [pc, #88]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	4914      	ldr	r1, [pc, #80]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d021      	beq.n	8004150 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800410c:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	490e      	ldr	r1, [pc, #56]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	e021      	b.n	800415e <HAL_GPIO_Init+0x2e2>
 800411a:	bf00      	nop
 800411c:	10320000 	.word	0x10320000
 8004120:	10310000 	.word	0x10310000
 8004124:	10220000 	.word	0x10220000
 8004128:	10210000 	.word	0x10210000
 800412c:	10120000 	.word	0x10120000
 8004130:	10110000 	.word	0x10110000
 8004134:	40021000 	.word	0x40021000
 8004138:	40010000 	.word	0x40010000
 800413c:	40010800 	.word	0x40010800
 8004140:	40010c00 	.word	0x40010c00
 8004144:	40011000 	.word	0x40011000
 8004148:	40011400 	.word	0x40011400
 800414c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_GPIO_Init+0x304>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	43db      	mvns	r3, r3
 8004158:	4909      	ldr	r1, [pc, #36]	@ (8004180 <HAL_GPIO_Init+0x304>)
 800415a:	4013      	ands	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	3301      	adds	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	fa22 f303 	lsr.w	r3, r2, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f47f ae8e 	bne.w	8003e90 <HAL_GPIO_Init+0x14>
  }
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	372c      	adds	r7, #44	@ 0x2c
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	40010400 	.word	0x40010400

08004184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e001      	b.n	80041a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	807b      	strh	r3, [r7, #2]
 80041be:	4613      	mov	r3, r2
 80041c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041c2:	787b      	ldrb	r3, [r7, #1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041ce:	e003      	b.n	80041d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	041a      	lsls	r2, r3, #16
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	611a      	str	r2, [r3, #16]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041fa:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe feda 	bl	8002fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40010400 	.word	0x40010400

08004214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e272      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8087 	beq.w	8004342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004234:	4b92      	ldr	r3, [pc, #584]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b04      	cmp	r3, #4
 800423e:	d00c      	beq.n	800425a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004240:	4b8f      	ldr	r3, [pc, #572]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d112      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
 800424c:	4b8c      	ldr	r3, [pc, #560]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004258:	d10b      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425a:	4b89      	ldr	r3, [pc, #548]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d06c      	beq.n	8004340 <HAL_RCC_OscConfig+0x12c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d168      	bne.n	8004340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e24c      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800427a:	d106      	bne.n	800428a <HAL_RCC_OscConfig+0x76>
 800427c:	4b80      	ldr	r3, [pc, #512]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7f      	ldr	r2, [pc, #508]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e02e      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x98>
 8004292:	4b7b      	ldr	r3, [pc, #492]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7a      	ldr	r2, [pc, #488]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b78      	ldr	r3, [pc, #480]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a77      	ldr	r2, [pc, #476]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e01d      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0xbc>
 80042b6:	4b72      	ldr	r3, [pc, #456]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a71      	ldr	r2, [pc, #452]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b68      	ldr	r3, [pc, #416]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a67      	ldr	r2, [pc, #412]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7ff f9e6 	bl	80036c0 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7ff f9e2 	bl	80036c0 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	@ 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e200      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe4>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7ff f9d2 	bl	80036c0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7ff f9ce 	bl	80036c0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1ec      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x10c>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800434e:	4b4c      	ldr	r3, [pc, #304]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800435a:	4b49      	ldr	r3, [pc, #292]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d11c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
 8004366:	4b46      	ldr	r3, [pc, #280]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1c0      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4939      	ldr	r1, [pc, #228]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	e03a      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a8:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <HAL_RCC_OscConfig+0x270>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7ff f987 	bl	80036c0 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7ff f983 	bl	80036c0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e1a1      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4927      	ldr	r1, [pc, #156]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <HAL_RCC_OscConfig+0x270>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7ff f966 	bl	80036c0 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7ff f962 	bl	80036c0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e180      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03a      	beq.n	8004498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d019      	beq.n	800445e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <HAL_RCC_OscConfig+0x274>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7ff f946 	bl	80036c0 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7ff f942 	bl	80036c0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e160      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004456:	2001      	movs	r0, #1
 8004458:	f000 face 	bl	80049f8 <RCC_Delay>
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_RCC_OscConfig+0x274>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004464:	f7ff f92c 	bl	80036c0 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446c:	f7ff f928 	bl	80036c0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d908      	bls.n	800448c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e146      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	42420000 	.word	0x42420000
 8004488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	4b92      	ldr	r3, [pc, #584]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e9      	bne.n	800446c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a6 	beq.w	80045f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044aa:	4b8b      	ldr	r3, [pc, #556]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	4b88      	ldr	r3, [pc, #544]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4a87      	ldr	r2, [pc, #540]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	61d3      	str	r3, [r2, #28]
 80044c2:	4b85      	ldr	r3, [pc, #532]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b82      	ldr	r3, [pc, #520]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b7f      	ldr	r3, [pc, #508]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7e      	ldr	r2, [pc, #504]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7ff f8e9 	bl	80036c0 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7ff f8e5 	bl	80036c0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	@ 0x64
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e103      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	4b75      	ldr	r3, [pc, #468]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x312>
 8004518:	4b6f      	ldr	r3, [pc, #444]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4a6e      	ldr	r2, [pc, #440]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6213      	str	r3, [r2, #32]
 8004524:	e02d      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x334>
 800452e:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a69      	ldr	r2, [pc, #420]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6213      	str	r3, [r2, #32]
 800453a:	4b67      	ldr	r3, [pc, #412]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a66      	ldr	r2, [pc, #408]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0304 	bic.w	r3, r3, #4
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	e01c      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d10c      	bne.n	800456a <HAL_RCC_OscConfig+0x356>
 8004550:	4b61      	ldr	r3, [pc, #388]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4a60      	ldr	r2, [pc, #384]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	4b5e      	ldr	r3, [pc, #376]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a5d      	ldr	r2, [pc, #372]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	e00b      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 800456a:	4b5b      	ldr	r3, [pc, #364]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4a5a      	ldr	r2, [pc, #360]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6213      	str	r3, [r2, #32]
 8004576:	4b58      	ldr	r3, [pc, #352]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a57      	ldr	r2, [pc, #348]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7ff f899 	bl	80036c0 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7ff f895 	bl	80036c0 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0b1      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b4b      	ldr	r3, [pc, #300]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCC_OscConfig+0x37e>
 80045b4:	e014      	b.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7ff f883 	bl	80036c0 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7ff f87f 	bl	80036c0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e09b      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	4b40      	ldr	r3, [pc, #256]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b3c      	ldr	r3, [pc, #240]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4a3b      	ldr	r2, [pc, #236]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8087 	beq.w	800470a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fc:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d061      	beq.n	80046cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d146      	bne.n	800469e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b33      	ldr	r3, [pc, #204]	@ (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7ff f853 	bl	80036c0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7ff f84f 	bl	80036c0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e06d      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004630:	4b29      	ldr	r3, [pc, #164]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d108      	bne.n	8004658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4921      	ldr	r1, [pc, #132]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	4b1f      	ldr	r3, [pc, #124]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a19      	ldr	r1, [r3, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	430b      	orrs	r3, r1
 800466a:	491b      	ldr	r1, [pc, #108]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7ff f823 	bl	80036c0 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7ff f81f 	bl	80036c0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e03d      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004690:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x46a>
 800469c:	e035      	b.n	800470a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7ff f80c 	bl	80036c0 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7ff f808 	bl	80036c0 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e026      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x498>
 80046ca:	e01e      	b.n	800470a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e019      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_RCC_OscConfig+0x500>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0d0      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b6a      	ldr	r3, [pc, #424]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b67      	ldr	r3, [pc, #412]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0207 	bic.w	r2, r3, #7
 8004742:	4965      	ldr	r1, [pc, #404]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a58      	ldr	r2, [pc, #352]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800477e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a52      	ldr	r2, [pc, #328]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d040      	beq.n	8004838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d115      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e073      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b3d      	ldr	r3, [pc, #244]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06b      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4936      	ldr	r1, [pc, #216]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004808:	f7fe ff5a 	bl	80036c0 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fe ff56 	bl	80036c0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e053      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b2d      	ldr	r3, [pc, #180]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b27      	ldr	r3, [pc, #156]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d210      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b24      	ldr	r3, [pc, #144]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4922      	ldr	r1, [pc, #136]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	@ (80048e4 <HAL_RCC_ClockConfig+0x1cc>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <HAL_RCC_ClockConfig+0x1d0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe feb8 	bl	800363c <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40022000 	.word	0x40022000
 80048dc:	40021000 	.word	0x40021000
 80048e0:	080082b8 	.word	0x080082b8
 80048e4:	20000024 	.word	0x20000024
 80048e8:	20000028 	.word	0x20000028

080048ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004906:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x94>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d002      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x30>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d003      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x36>
 800491a:	e027      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800491c:	4b19      	ldr	r3, [pc, #100]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800491e:	613b      	str	r3, [r7, #16]
      break;
 8004920:	e027      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0c9b      	lsrs	r3, r3, #18
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	4a17      	ldr	r2, [pc, #92]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x9c>)
 800492c:	5cd3      	ldrb	r3, [r2, r3]
 800492e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800493a:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x94>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0c5b      	lsrs	r3, r3, #17
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	4a11      	ldr	r2, [pc, #68]	@ (800498c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a0d      	ldr	r2, [pc, #52]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800494e:	fb03 f202 	mul.w	r2, r3, r2
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e004      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a0c      	ldr	r2, [pc, #48]	@ (8004990 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	613b      	str	r3, [r7, #16]
      break;
 800496a:	e002      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004972:	693b      	ldr	r3, [r7, #16]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	007a1200 	.word	0x007a1200
 8004988:	080082d0 	.word	0x080082d0
 800498c:	080082e0 	.word	0x080082e0
 8004990:	003d0900 	.word	0x003d0900

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b02      	ldr	r3, [pc, #8]	@ (80049a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20000024 	.word	0x20000024

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049ac:	f7ff fff2 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	@ (80049cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	080082c8 	.word	0x080082c8

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d4:	f7ff ffde 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	0adb      	lsrs	r3, r3, #11
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	@ (80049f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000
 80049f4:	080082c8 	.word	0x080082c8

080049f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a00:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <RCC_Delay+0x34>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <RCC_Delay+0x38>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	0a5b      	lsrs	r3, r3, #9
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a14:	bf00      	nop
  }
  while (Delay --);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1e5a      	subs	r2, r3, #1
 8004a1a:	60fa      	str	r2, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f9      	bne.n	8004a14 <RCC_Delay+0x1c>
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	20000024 	.word	0x20000024
 8004a30:	10624dd3 	.word	0x10624dd3

08004a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e042      	b.n	8004acc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fe fc7e 	bl	800335c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	@ 0x24
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f001 f8a9 	bl	8005bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d175      	bne.n	8004be0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_UART_Transmit+0x2c>
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e06e      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2221      	movs	r2, #33	@ 0x21
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b12:	f7fe fdd5 	bl	80036c0 <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2c:	d108      	bne.n	8004b40 <HAL_UART_Transmit+0x6c>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	e003      	b.n	8004b48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b48:	e02e      	b.n	8004ba8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2200      	movs	r2, #0
 8004b52:	2180      	movs	r1, #128	@ 0x80
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 fd86 	bl	8005666 <UART_WaitOnFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e03a      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	3302      	adds	r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	e007      	b.n	8004b9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1cb      	bne.n	8004b4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2140      	movs	r1, #64	@ 0x40
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fd52 	bl	8005666 <UART_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e006      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b08a      	sub	sp, #40	@ 0x28
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	f040 8081 	bne.w	8004d0e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_Receive+0x2e>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e079      	b.n	8004d10 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2222      	movs	r2, #34	@ 0x22
 8004c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c30:	f7fe fd46 	bl	80036c0 <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	88fa      	ldrh	r2, [r7, #6]
 8004c3a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	d108      	bne.n	8004c5e <HAL_UART_Receive+0x74>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	e003      	b.n	8004c66 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c66:	e047      	b.n	8004cf8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2120      	movs	r1, #32
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fcf7 	bl	8005666 <UART_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e042      	b.n	8004d10 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10c      	bne.n	8004caa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	e01f      	b.n	8004cea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb2:	d007      	beq.n	8004cc4 <HAL_UART_Receive+0xda>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_UART_Receive+0xe8>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e008      	b.n	8004ce4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1b2      	bne.n	8004c68 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08c      	sub	sp, #48	@ 0x30
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d156      	bne.n	8004de0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_UART_Transmit_DMA+0x26>
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e04f      	b.n	8004de2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2221      	movs	r2, #33	@ 0x21
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d66:	4a21      	ldr	r2, [pc, #132]	@ (8004dec <HAL_UART_Transmit_DMA+0xd4>)
 8004d68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6e:	4a20      	ldr	r2, [pc, #128]	@ (8004df0 <HAL_UART_Transmit_DMA+0xd8>)
 8004d70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d76:	4a1f      	ldr	r2, [pc, #124]	@ (8004df4 <HAL_UART_Transmit_DMA+0xdc>)
 8004d78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	2200      	movs	r2, #0
 8004d80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004d82:	f107 0308 	add.w	r3, r7, #8
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	461a      	mov	r2, r3
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	f7fe fe27 	bl	80039ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3314      	adds	r3, #20
 8004dae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	617b      	str	r3, [r7, #20]
   return(result);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6a39      	ldr	r1, [r7, #32]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3730      	adds	r7, #48	@ 0x30
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	080053b5 	.word	0x080053b5
 8004df0:	0800544f 	.word	0x0800544f
 8004df4:	080055d3 	.word	0x080055d3

08004df8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d112      	bne.n	8004e38 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_UART_Receive_DMA+0x26>
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e00b      	b.n	8004e3a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fc72 	bl	8005718 <UART_Start_Receive_DMA>
 8004e34:	4603      	mov	r3, r0
 8004e36:	e000      	b.n	8004e3a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b0ba      	sub	sp, #232	@ 0xe8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10f      	bne.n	8004eaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_UART_IRQHandler+0x66>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fdd6 	bl	8005a54 <UART_Receive_IT>
      return;
 8004ea8:	e25b      	b.n	8005362 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80de 	beq.w	8005070 <HAL_UART_IRQHandler+0x22c>
 8004eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80d1 	beq.w	8005070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xae>
 8004eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_UART_IRQHandler+0xd2>
 8004efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0e:	f043 0202 	orr.w	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0xf6>
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f043 0204 	orr.w	r2, r3, #4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d011      	beq.n	8004f6a <HAL_UART_IRQHandler+0x126>
 8004f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f043 0208 	orr.w	r2, r3, #8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 81f2 	beq.w	8005358 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_UART_IRQHandler+0x14e>
 8004f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fd61 	bl	8005a54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_UART_IRQHandler+0x17a>
 8004fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d04f      	beq.n	800505e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fc6b 	bl	800589a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d041      	beq.n	8005056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800500a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1d9      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d013      	beq.n	800504e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	4a7e      	ldr	r2, [pc, #504]	@ (8005224 <HAL_UART_IRQHandler+0x3e0>)
 800502c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fd76 	bl	8003b24 <HAL_DMA_Abort_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005048:	4610      	mov	r0, r2
 800504a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e00e      	b.n	800506c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f99c 	bl	800538c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	e00a      	b.n	800506c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f998 	bl	800538c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	e006      	b.n	800506c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f994 	bl	800538c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800506a:	e175      	b.n	8005358 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	bf00      	nop
    return;
 800506e:	e173      	b.n	8005358 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	2b01      	cmp	r3, #1
 8005076:	f040 814f 	bne.w	8005318 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8148 	beq.w	8005318 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8141 	beq.w	8005318 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80b6 	beq.w	8005228 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8145 	beq.w	800535c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050da:	429a      	cmp	r2, r3
 80050dc:	f080 813e 	bcs.w	800535c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	f000 8088 	beq.w	8005204 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800510a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800510e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005112:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005120:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005124:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800512c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1d9      	bne.n	80050f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3314      	adds	r3, #20
 8005146:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005150:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005164:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005168:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800516c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005176:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e1      	bne.n	8005140 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3314      	adds	r3, #20
 8005182:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800518c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800518e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e3      	bne.n	800517c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051d4:	f023 0310 	bic.w	r3, r3, #16
 80051d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	330c      	adds	r3, #12
 80051e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e3      	bne.n	80051c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe fc54 	bl	8003aac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005212:	b29b      	uxth	r3, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	b29b      	uxth	r3, r3
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8bf 	bl	800539e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005220:	e09c      	b.n	800535c <HAL_UART_IRQHandler+0x518>
 8005222:	bf00      	nop
 8005224:	0800595f 	.word	0x0800595f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005230:	b29b      	uxth	r3, r3
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 808e 	beq.w	8005360 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8089 	beq.w	8005360 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800525e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005272:	647a      	str	r2, [r7, #68]	@ 0x44
 8005274:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e3      	bne.n	800524e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3314      	adds	r3, #20
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	623b      	str	r3, [r7, #32]
   return(result);
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3314      	adds	r3, #20
 80052a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e3      	bne.n	8005286 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	60fb      	str	r3, [r7, #12]
   return(result);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0310 	bic.w	r3, r3, #16
 80052e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052f0:	61fa      	str	r2, [r7, #28]
 80052f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	69b9      	ldr	r1, [r7, #24]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	617b      	str	r3, [r7, #20]
   return(result);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e3      	bne.n	80052cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800530a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f844 	bl	800539e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005316:	e023      	b.n	8005360 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <HAL_UART_IRQHandler+0x4f4>
 8005324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb28 	bl	8005986 <UART_Transmit_IT>
    return;
 8005336:	e014      	b.n	8005362 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00e      	beq.n	8005362 <HAL_UART_IRQHandler+0x51e>
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fb67 	bl	8005a24 <UART_EndTransmit_IT>
    return;
 8005356:	e004      	b.n	8005362 <HAL_UART_IRQHandler+0x51e>
    return;
 8005358:	bf00      	nop
 800535a:	e002      	b.n	8005362 <HAL_UART_IRQHandler+0x51e>
      return;
 800535c:	bf00      	nop
 800535e:	e000      	b.n	8005362 <HAL_UART_IRQHandler+0x51e>
      return;
 8005360:	bf00      	nop
  }
}
 8005362:	37e8      	adds	r7, #232	@ 0xe8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b090      	sub	sp, #64	@ 0x40
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d137      	bne.n	8005440 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80053d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d2:	2200      	movs	r2, #0
 80053d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3314      	adds	r3, #20
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	623b      	str	r3, [r7, #32]
   return(result);
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3314      	adds	r3, #20
 80053f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800540a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	60fb      	str	r3, [r7, #12]
   return(result);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
 8005422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800542a:	61fa      	str	r2, [r7, #28]
 800542c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	617b      	str	r3, [r7, #20]
   return(result);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800543e:	e002      	b.n	8005446 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005440:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005442:	f7fd fdd1 	bl	8002fe8 <HAL_UART_TxCpltCallback>
}
 8005446:	bf00      	nop
 8005448:	3740      	adds	r7, #64	@ 0x40
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff ff83 	bl	8005368 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b09c      	sub	sp, #112	@ 0x70
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d172      	bne.n	800556c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005488:	2200      	movs	r2, #0
 800548a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800548c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800549c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800549e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e5      	bne.n	800548c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3314      	adds	r3, #20
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80054d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054e0:	647a      	str	r2, [r7, #68]	@ 0x44
 80054e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3314      	adds	r3, #20
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	623b      	str	r3, [r7, #32]
   return(result);
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800550a:	663b      	str	r3, [r7, #96]	@ 0x60
 800550c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3314      	adds	r3, #20
 8005512:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005514:	633a      	str	r2, [r7, #48]	@ 0x30
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800551a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e5      	bne.n	80054f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005534:	2b01      	cmp	r3, #1
 8005536:	d119      	bne.n	800556c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	60fb      	str	r3, [r7, #12]
   return(result);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0310 	bic.w	r3, r3, #16
 800554e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005558:	61fa      	str	r2, [r7, #28]
 800555a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	617b      	str	r3, [r7, #20]
   return(result);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800556c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556e:	2200      	movs	r2, #0
 8005570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	2b01      	cmp	r3, #1
 8005578:	d106      	bne.n	8005588 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800557a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800557e:	4619      	mov	r1, r3
 8005580:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005582:	f7ff ff0c 	bl	800539e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005586:	e002      	b.n	800558e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005588:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800558a:	f7fd fd3d 	bl	8003008 <HAL_UART_RxCpltCallback>
}
 800558e:	bf00      	nop
 8005590:	3770      	adds	r7, #112	@ 0x70
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d108      	bne.n	80055c4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	4619      	mov	r1, r3
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff feee 	bl	800539e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055c2:	e002      	b.n	80055ca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff fed8 	bl	800537a <HAL_UART_RxHalfCpltCallback>
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b21      	cmp	r3, #33	@ 0x21
 8005604:	d108      	bne.n	8005618 <UART_DMAError+0x46>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005612:	68b8      	ldr	r0, [r7, #8]
 8005614:	f000 f91a 	bl	800584c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b22      	cmp	r3, #34	@ 0x22
 8005638:	d108      	bne.n	800564c <UART_DMAError+0x7a>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005646:	68b8      	ldr	r0, [r7, #8]
 8005648:	f000 f927 	bl	800589a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005650:	f043 0210 	orr.w	r2, r3, #16
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005658:	68b8      	ldr	r0, [r7, #8]
 800565a:	f7ff fe97 	bl	800538c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005676:	e03b      	b.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d037      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005680:	f7fe f81e 	bl	80036c0 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <UART_WaitOnFlagUntilTimeout+0x30>
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e03a      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d023      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b80      	cmp	r3, #128	@ 0x80
 80056ac:	d020      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b40      	cmp	r3, #64	@ 0x40
 80056b2:	d01d      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d116      	bne.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f8de 	bl	800589a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2208      	movs	r2, #8
 80056e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e00f      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	429a      	cmp	r2, r3
 800570c:	d0b4      	beq.n	8005678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b098      	sub	sp, #96	@ 0x60
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2222      	movs	r2, #34	@ 0x22
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	4a3e      	ldr	r2, [pc, #248]	@ (8005840 <UART_Start_Receive_DMA+0x128>)
 8005746:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	4a3d      	ldr	r2, [pc, #244]	@ (8005844 <UART_Start_Receive_DMA+0x12c>)
 800574e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005754:	4a3c      	ldr	r2, [pc, #240]	@ (8005848 <UART_Start_Receive_DMA+0x130>)
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575c:	2200      	movs	r2, #0
 800575e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005760:	f107 0308 	add.w	r3, r7, #8
 8005764:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	f7fe f938 	bl	80039ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d019      	beq.n	80057ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80057bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e5      	bne.n	800579a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3314      	adds	r3, #20
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3314      	adds	r3, #20
 8005808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	617b      	str	r3, [r7, #20]
   return(result);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005818:	653b      	str	r3, [r7, #80]	@ 0x50
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3314      	adds	r3, #20
 8005820:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005822:	627a      	str	r2, [r7, #36]	@ 0x24
 8005824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6a39      	ldr	r1, [r7, #32]
 8005828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e5      	bne.n	8005802 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3760      	adds	r7, #96	@ 0x60
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	0800546b 	.word	0x0800546b
 8005844:	08005597 	.word	0x08005597
 8005848:	080055d3 	.word	0x080055d3

0800584c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b089      	sub	sp, #36	@ 0x24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60bb      	str	r3, [r7, #8]
   return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	61ba      	str	r2, [r7, #24]
 8005876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005890:	bf00      	nop
 8005892:	3724      	adds	r7, #36	@ 0x24
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800589a:	b480      	push	{r7}
 800589c:	b095      	sub	sp, #84	@ 0x54
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e5      	bne.n	80058a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	2b01      	cmp	r3, #1
 8005910:	d119      	bne.n	8005946 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	60bb      	str	r3, [r7, #8]
   return(result);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005932:	61ba      	str	r2, [r7, #24]
 8005934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6979      	ldr	r1, [r7, #20]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	613b      	str	r3, [r7, #16]
   return(result);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005954:	bf00      	nop
 8005956:	3754      	adds	r7, #84	@ 0x54
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff fd07 	bl	800538c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b21      	cmp	r3, #33	@ 0x21
 8005998:	d13e      	bne.n	8005a18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a2:	d114      	bne.n	80059ce <UART_Transmit_IT+0x48>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	621a      	str	r2, [r3, #32]
 80059cc:	e008      	b.n	80059e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6211      	str	r1, [r2, #32]
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4619      	mov	r1, r3
 80059ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10f      	bne.n	8005a14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fd facf 	bl	8002fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08c      	sub	sp, #48	@ 0x30
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b22      	cmp	r3, #34	@ 0x22
 8005a66:	f040 80ae 	bne.w	8005bc6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a72:	d117      	bne.n	8005aa4 <UART_Receive_IT+0x50>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d113      	bne.n	8005aa4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9c:	1c9a      	adds	r2, r3, #2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aa2:	e026      	b.n	8005af2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab6:	d007      	beq.n	8005ac8 <UART_Receive_IT+0x74>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <UART_Receive_IT+0x82>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e008      	b.n	8005ae8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	4619      	mov	r1, r3
 8005b00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d15d      	bne.n	8005bc2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0220 	bic.w	r2, r2, #32
 8005b14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695a      	ldr	r2, [r3, #20]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d135      	bne.n	8005bb8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	613b      	str	r3, [r7, #16]
   return(result);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f023 0310 	bic.w	r3, r3, #16
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b72:	623a      	str	r2, [r7, #32]
 8005b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	69f9      	ldr	r1, [r7, #28]
 8005b78:	6a3a      	ldr	r2, [r7, #32]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d10a      	bne.n	8005baa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff fbf4 	bl	800539e <HAL_UARTEx_RxEventCallback>
 8005bb6:	e002      	b.n	8005bbe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fd fa25 	bl	8003008 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e002      	b.n	8005bc8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e000      	b.n	8005bc8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bc6:	2302      	movs	r3, #2
  }
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3730      	adds	r7, #48	@ 0x30
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c0a:	f023 030c 	bic.w	r3, r3, #12
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	430b      	orrs	r3, r1
 8005c16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce4 <UART_SetConfig+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d103      	bne.n	8005c40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7fe feca 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	e002      	b.n	8005c46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe feb2 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8005c44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009a      	lsls	r2, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	4a22      	ldr	r2, [pc, #136]	@ (8005ce8 <UART_SetConfig+0x118>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	0119      	lsls	r1, r3, #4
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009a      	lsls	r2, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <UART_SetConfig+0x118>)
 8005c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2064      	movs	r0, #100	@ 0x64
 8005c86:	fb00 f303 	mul.w	r3, r0, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	3332      	adds	r3, #50	@ 0x32
 8005c90:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <UART_SetConfig+0x118>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c9c:	4419      	add	r1, r3
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009a      	lsls	r2, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <UART_SetConfig+0x118>)
 8005cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2064      	movs	r0, #100	@ 0x64
 8005cbe:	fb00 f303 	mul.w	r3, r0, r3
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	3332      	adds	r3, #50	@ 0x32
 8005cc8:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <UART_SetConfig+0x118>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	f003 020f 	and.w	r2, r3, #15
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	440a      	add	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40013800 	.word	0x40013800
 8005ce8:	51eb851f 	.word	0x51eb851f

08005cec <std>:
 8005cec:	2300      	movs	r3, #0
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cfa:	6083      	str	r3, [r0, #8]
 8005cfc:	8181      	strh	r1, [r0, #12]
 8005cfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d00:	81c2      	strh	r2, [r0, #14]
 8005d02:	6183      	str	r3, [r0, #24]
 8005d04:	4619      	mov	r1, r3
 8005d06:	2208      	movs	r2, #8
 8005d08:	305c      	adds	r0, #92	@ 0x5c
 8005d0a:	f000 fa1b 	bl	8006144 <memset>
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <std+0x58>)
 8005d10:	6224      	str	r4, [r4, #32]
 8005d12:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d14:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <std+0x5c>)
 8005d16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d18:	4b0c      	ldr	r3, [pc, #48]	@ (8005d4c <std+0x60>)
 8005d1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <std+0x64>)
 8005d1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <std+0x68>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	d006      	beq.n	8005d34 <std+0x48>
 8005d26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d2a:	4294      	cmp	r4, r2
 8005d2c:	d002      	beq.n	8005d34 <std+0x48>
 8005d2e:	33d0      	adds	r3, #208	@ 0xd0
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d105      	bne.n	8005d40 <std+0x54>
 8005d34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d3c:	f000 ba7a 	b.w	8006234 <__retarget_lock_init_recursive>
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	bf00      	nop
 8005d44:	08005f95 	.word	0x08005f95
 8005d48:	08005fb7 	.word	0x08005fb7
 8005d4c:	08005fef 	.word	0x08005fef
 8005d50:	08006013 	.word	0x08006013
 8005d54:	20000878 	.word	0x20000878

08005d58 <stdio_exit_handler>:
 8005d58:	4a02      	ldr	r2, [pc, #8]	@ (8005d64 <stdio_exit_handler+0xc>)
 8005d5a:	4903      	ldr	r1, [pc, #12]	@ (8005d68 <stdio_exit_handler+0x10>)
 8005d5c:	4803      	ldr	r0, [pc, #12]	@ (8005d6c <stdio_exit_handler+0x14>)
 8005d5e:	f000 b869 	b.w	8005e34 <_fwalk_sglue>
 8005d62:	bf00      	nop
 8005d64:	20000030 	.word	0x20000030
 8005d68:	08006d95 	.word	0x08006d95
 8005d6c:	20000040 	.word	0x20000040

08005d70 <cleanup_stdio>:
 8005d70:	6841      	ldr	r1, [r0, #4]
 8005d72:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <cleanup_stdio+0x34>)
 8005d74:	b510      	push	{r4, lr}
 8005d76:	4299      	cmp	r1, r3
 8005d78:	4604      	mov	r4, r0
 8005d7a:	d001      	beq.n	8005d80 <cleanup_stdio+0x10>
 8005d7c:	f001 f80a 	bl	8006d94 <_fflush_r>
 8005d80:	68a1      	ldr	r1, [r4, #8]
 8005d82:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <cleanup_stdio+0x38>)
 8005d84:	4299      	cmp	r1, r3
 8005d86:	d002      	beq.n	8005d8e <cleanup_stdio+0x1e>
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f001 f803 	bl	8006d94 <_fflush_r>
 8005d8e:	68e1      	ldr	r1, [r4, #12]
 8005d90:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <cleanup_stdio+0x3c>)
 8005d92:	4299      	cmp	r1, r3
 8005d94:	d004      	beq.n	8005da0 <cleanup_stdio+0x30>
 8005d96:	4620      	mov	r0, r4
 8005d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d9c:	f000 bffa 	b.w	8006d94 <_fflush_r>
 8005da0:	bd10      	pop	{r4, pc}
 8005da2:	bf00      	nop
 8005da4:	20000878 	.word	0x20000878
 8005da8:	200008e0 	.word	0x200008e0
 8005dac:	20000948 	.word	0x20000948

08005db0 <global_stdio_init.part.0>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <global_stdio_init.part.0+0x30>)
 8005db4:	4c0b      	ldr	r4, [pc, #44]	@ (8005de4 <global_stdio_init.part.0+0x34>)
 8005db6:	4a0c      	ldr	r2, [pc, #48]	@ (8005de8 <global_stdio_init.part.0+0x38>)
 8005db8:	4620      	mov	r0, r4
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	2104      	movs	r1, #4
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f7ff ff94 	bl	8005cec <std>
 8005dc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dc8:	2201      	movs	r2, #1
 8005dca:	2109      	movs	r1, #9
 8005dcc:	f7ff ff8e 	bl	8005cec <std>
 8005dd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dda:	2112      	movs	r1, #18
 8005ddc:	f7ff bf86 	b.w	8005cec <std>
 8005de0:	200009b0 	.word	0x200009b0
 8005de4:	20000878 	.word	0x20000878
 8005de8:	08005d59 	.word	0x08005d59

08005dec <__sfp_lock_acquire>:
 8005dec:	4801      	ldr	r0, [pc, #4]	@ (8005df4 <__sfp_lock_acquire+0x8>)
 8005dee:	f000 ba22 	b.w	8006236 <__retarget_lock_acquire_recursive>
 8005df2:	bf00      	nop
 8005df4:	200009b9 	.word	0x200009b9

08005df8 <__sfp_lock_release>:
 8005df8:	4801      	ldr	r0, [pc, #4]	@ (8005e00 <__sfp_lock_release+0x8>)
 8005dfa:	f000 ba1d 	b.w	8006238 <__retarget_lock_release_recursive>
 8005dfe:	bf00      	nop
 8005e00:	200009b9 	.word	0x200009b9

08005e04 <__sinit>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	4604      	mov	r4, r0
 8005e08:	f7ff fff0 	bl	8005dec <__sfp_lock_acquire>
 8005e0c:	6a23      	ldr	r3, [r4, #32]
 8005e0e:	b11b      	cbz	r3, 8005e18 <__sinit+0x14>
 8005e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e14:	f7ff bff0 	b.w	8005df8 <__sfp_lock_release>
 8005e18:	4b04      	ldr	r3, [pc, #16]	@ (8005e2c <__sinit+0x28>)
 8005e1a:	6223      	str	r3, [r4, #32]
 8005e1c:	4b04      	ldr	r3, [pc, #16]	@ (8005e30 <__sinit+0x2c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f5      	bne.n	8005e10 <__sinit+0xc>
 8005e24:	f7ff ffc4 	bl	8005db0 <global_stdio_init.part.0>
 8005e28:	e7f2      	b.n	8005e10 <__sinit+0xc>
 8005e2a:	bf00      	nop
 8005e2c:	08005d71 	.word	0x08005d71
 8005e30:	200009b0 	.word	0x200009b0

08005e34 <_fwalk_sglue>:
 8005e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e38:	4607      	mov	r7, r0
 8005e3a:	4688      	mov	r8, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	2600      	movs	r6, #0
 8005e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e44:	f1b9 0901 	subs.w	r9, r9, #1
 8005e48:	d505      	bpl.n	8005e56 <_fwalk_sglue+0x22>
 8005e4a:	6824      	ldr	r4, [r4, #0]
 8005e4c:	2c00      	cmp	r4, #0
 8005e4e:	d1f7      	bne.n	8005e40 <_fwalk_sglue+0xc>
 8005e50:	4630      	mov	r0, r6
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d907      	bls.n	8005e6c <_fwalk_sglue+0x38>
 8005e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e60:	3301      	adds	r3, #1
 8005e62:	d003      	beq.n	8005e6c <_fwalk_sglue+0x38>
 8005e64:	4629      	mov	r1, r5
 8005e66:	4638      	mov	r0, r7
 8005e68:	47c0      	blx	r8
 8005e6a:	4306      	orrs	r6, r0
 8005e6c:	3568      	adds	r5, #104	@ 0x68
 8005e6e:	e7e9      	b.n	8005e44 <_fwalk_sglue+0x10>

08005e70 <iprintf>:
 8005e70:	b40f      	push	{r0, r1, r2, r3}
 8005e72:	b507      	push	{r0, r1, r2, lr}
 8005e74:	4906      	ldr	r1, [pc, #24]	@ (8005e90 <iprintf+0x20>)
 8005e76:	ab04      	add	r3, sp, #16
 8005e78:	6808      	ldr	r0, [r1, #0]
 8005e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e7e:	6881      	ldr	r1, [r0, #8]
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	f000 fc5f 	bl	8006744 <_vfiprintf_r>
 8005e86:	b003      	add	sp, #12
 8005e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e8c:	b004      	add	sp, #16
 8005e8e:	4770      	bx	lr
 8005e90:	2000003c 	.word	0x2000003c

08005e94 <_puts_r>:
 8005e94:	6a03      	ldr	r3, [r0, #32]
 8005e96:	b570      	push	{r4, r5, r6, lr}
 8005e98:	4605      	mov	r5, r0
 8005e9a:	460e      	mov	r6, r1
 8005e9c:	6884      	ldr	r4, [r0, #8]
 8005e9e:	b90b      	cbnz	r3, 8005ea4 <_puts_r+0x10>
 8005ea0:	f7ff ffb0 	bl	8005e04 <__sinit>
 8005ea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ea6:	07db      	lsls	r3, r3, #31
 8005ea8:	d405      	bmi.n	8005eb6 <_puts_r+0x22>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	0598      	lsls	r0, r3, #22
 8005eae:	d402      	bmi.n	8005eb6 <_puts_r+0x22>
 8005eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eb2:	f000 f9c0 	bl	8006236 <__retarget_lock_acquire_recursive>
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	0719      	lsls	r1, r3, #28
 8005eba:	d502      	bpl.n	8005ec2 <_puts_r+0x2e>
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d135      	bne.n	8005f2e <_puts_r+0x9a>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 f8e7 	bl	8006098 <__swsetup_r>
 8005eca:	b380      	cbz	r0, 8005f2e <_puts_r+0x9a>
 8005ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ed2:	07da      	lsls	r2, r3, #31
 8005ed4:	d405      	bmi.n	8005ee2 <_puts_r+0x4e>
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	059b      	lsls	r3, r3, #22
 8005eda:	d402      	bmi.n	8005ee2 <_puts_r+0x4e>
 8005edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ede:	f000 f9ab 	bl	8006238 <__retarget_lock_release_recursive>
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da04      	bge.n	8005ef4 <_puts_r+0x60>
 8005eea:	69a2      	ldr	r2, [r4, #24]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	dc17      	bgt.n	8005f20 <_puts_r+0x8c>
 8005ef0:	290a      	cmp	r1, #10
 8005ef2:	d015      	beq.n	8005f20 <_puts_r+0x8c>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	6022      	str	r2, [r4, #0]
 8005efa:	7019      	strb	r1, [r3, #0]
 8005efc:	68a3      	ldr	r3, [r4, #8]
 8005efe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f02:	3b01      	subs	r3, #1
 8005f04:	60a3      	str	r3, [r4, #8]
 8005f06:	2900      	cmp	r1, #0
 8005f08:	d1ed      	bne.n	8005ee6 <_puts_r+0x52>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da11      	bge.n	8005f32 <_puts_r+0x9e>
 8005f0e:	4622      	mov	r2, r4
 8005f10:	210a      	movs	r1, #10
 8005f12:	4628      	mov	r0, r5
 8005f14:	f000 f881 	bl	800601a <__swbuf_r>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d0d7      	beq.n	8005ecc <_puts_r+0x38>
 8005f1c:	250a      	movs	r5, #10
 8005f1e:	e7d7      	b.n	8005ed0 <_puts_r+0x3c>
 8005f20:	4622      	mov	r2, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 f879 	bl	800601a <__swbuf_r>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d1e7      	bne.n	8005efc <_puts_r+0x68>
 8005f2c:	e7ce      	b.n	8005ecc <_puts_r+0x38>
 8005f2e:	3e01      	subs	r6, #1
 8005f30:	e7e4      	b.n	8005efc <_puts_r+0x68>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	220a      	movs	r2, #10
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e7ee      	b.n	8005f1c <_puts_r+0x88>
	...

08005f40 <puts>:
 8005f40:	4b02      	ldr	r3, [pc, #8]	@ (8005f4c <puts+0xc>)
 8005f42:	4601      	mov	r1, r0
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f7ff bfa5 	b.w	8005e94 <_puts_r>
 8005f4a:	bf00      	nop
 8005f4c:	2000003c 	.word	0x2000003c

08005f50 <siprintf>:
 8005f50:	b40e      	push	{r1, r2, r3}
 8005f52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f56:	b510      	push	{r4, lr}
 8005f58:	2400      	movs	r4, #0
 8005f5a:	b09d      	sub	sp, #116	@ 0x74
 8005f5c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005f5e:	9002      	str	r0, [sp, #8]
 8005f60:	9006      	str	r0, [sp, #24]
 8005f62:	9107      	str	r1, [sp, #28]
 8005f64:	9104      	str	r1, [sp, #16]
 8005f66:	4809      	ldr	r0, [pc, #36]	@ (8005f8c <siprintf+0x3c>)
 8005f68:	4909      	ldr	r1, [pc, #36]	@ (8005f90 <siprintf+0x40>)
 8005f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f6e:	9105      	str	r1, [sp, #20]
 8005f70:	6800      	ldr	r0, [r0, #0]
 8005f72:	a902      	add	r1, sp, #8
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005f78:	f000 fac0 	bl	80064fc <_svfiprintf_r>
 8005f7c:	9b02      	ldr	r3, [sp, #8]
 8005f7e:	701c      	strb	r4, [r3, #0]
 8005f80:	b01d      	add	sp, #116	@ 0x74
 8005f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f86:	b003      	add	sp, #12
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000003c 	.word	0x2000003c
 8005f90:	ffff0208 	.word	0xffff0208

08005f94 <__sread>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	460c      	mov	r4, r1
 8005f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9c:	f000 f8fc 	bl	8006198 <_read_r>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	bfab      	itete	ge
 8005fa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fa8:	181b      	addge	r3, r3, r0
 8005faa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fae:	bfac      	ite	ge
 8005fb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fb2:	81a3      	strhlt	r3, [r4, #12]
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <__swrite>:
 8005fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fba:	461f      	mov	r7, r3
 8005fbc:	898b      	ldrh	r3, [r1, #12]
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	05db      	lsls	r3, r3, #23
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	d505      	bpl.n	8005fd4 <__swrite+0x1e>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	f000 f8d0 	bl	8006174 <_lseek_r>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	f000 b8e7 	b.w	80061bc <_write_r>

08005fee <__sseek>:
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff6:	f000 f8bd 	bl	8006174 <_lseek_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	bf15      	itete	ne
 8006000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800600a:	81a3      	strheq	r3, [r4, #12]
 800600c:	bf18      	it	ne
 800600e:	81a3      	strhne	r3, [r4, #12]
 8006010:	bd10      	pop	{r4, pc}

08006012 <__sclose>:
 8006012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006016:	f000 b89d 	b.w	8006154 <_close_r>

0800601a <__swbuf_r>:
 800601a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601c:	460e      	mov	r6, r1
 800601e:	4614      	mov	r4, r2
 8006020:	4605      	mov	r5, r0
 8006022:	b118      	cbz	r0, 800602c <__swbuf_r+0x12>
 8006024:	6a03      	ldr	r3, [r0, #32]
 8006026:	b90b      	cbnz	r3, 800602c <__swbuf_r+0x12>
 8006028:	f7ff feec 	bl	8005e04 <__sinit>
 800602c:	69a3      	ldr	r3, [r4, #24]
 800602e:	60a3      	str	r3, [r4, #8]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	071a      	lsls	r2, r3, #28
 8006034:	d501      	bpl.n	800603a <__swbuf_r+0x20>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	b943      	cbnz	r3, 800604c <__swbuf_r+0x32>
 800603a:	4621      	mov	r1, r4
 800603c:	4628      	mov	r0, r5
 800603e:	f000 f82b 	bl	8006098 <__swsetup_r>
 8006042:	b118      	cbz	r0, 800604c <__swbuf_r+0x32>
 8006044:	f04f 37ff 	mov.w	r7, #4294967295
 8006048:	4638      	mov	r0, r7
 800604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	6922      	ldr	r2, [r4, #16]
 8006050:	b2f6      	uxtb	r6, r6
 8006052:	1a98      	subs	r0, r3, r2
 8006054:	6963      	ldr	r3, [r4, #20]
 8006056:	4637      	mov	r7, r6
 8006058:	4283      	cmp	r3, r0
 800605a:	dc05      	bgt.n	8006068 <__swbuf_r+0x4e>
 800605c:	4621      	mov	r1, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fe98 	bl	8006d94 <_fflush_r>
 8006064:	2800      	cmp	r0, #0
 8006066:	d1ed      	bne.n	8006044 <__swbuf_r+0x2a>
 8006068:	68a3      	ldr	r3, [r4, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	60a3      	str	r3, [r4, #8]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	6022      	str	r2, [r4, #0]
 8006074:	701e      	strb	r6, [r3, #0]
 8006076:	6962      	ldr	r2, [r4, #20]
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	429a      	cmp	r2, r3
 800607c:	d004      	beq.n	8006088 <__swbuf_r+0x6e>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	07db      	lsls	r3, r3, #31
 8006082:	d5e1      	bpl.n	8006048 <__swbuf_r+0x2e>
 8006084:	2e0a      	cmp	r6, #10
 8006086:	d1df      	bne.n	8006048 <__swbuf_r+0x2e>
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 fe82 	bl	8006d94 <_fflush_r>
 8006090:	2800      	cmp	r0, #0
 8006092:	d0d9      	beq.n	8006048 <__swbuf_r+0x2e>
 8006094:	e7d6      	b.n	8006044 <__swbuf_r+0x2a>
	...

08006098 <__swsetup_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4b29      	ldr	r3, [pc, #164]	@ (8006140 <__swsetup_r+0xa8>)
 800609c:	4605      	mov	r5, r0
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	460c      	mov	r4, r1
 80060a2:	b118      	cbz	r0, 80060ac <__swsetup_r+0x14>
 80060a4:	6a03      	ldr	r3, [r0, #32]
 80060a6:	b90b      	cbnz	r3, 80060ac <__swsetup_r+0x14>
 80060a8:	f7ff feac 	bl	8005e04 <__sinit>
 80060ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b0:	0719      	lsls	r1, r3, #28
 80060b2:	d422      	bmi.n	80060fa <__swsetup_r+0x62>
 80060b4:	06da      	lsls	r2, r3, #27
 80060b6:	d407      	bmi.n	80060c8 <__swsetup_r+0x30>
 80060b8:	2209      	movs	r2, #9
 80060ba:	602a      	str	r2, [r5, #0]
 80060bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	e033      	b.n	8006130 <__swsetup_r+0x98>
 80060c8:	0758      	lsls	r0, r3, #29
 80060ca:	d512      	bpl.n	80060f2 <__swsetup_r+0x5a>
 80060cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ce:	b141      	cbz	r1, 80060e2 <__swsetup_r+0x4a>
 80060d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060d4:	4299      	cmp	r1, r3
 80060d6:	d002      	beq.n	80060de <__swsetup_r+0x46>
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 f8bd 	bl	8006258 <_free_r>
 80060de:	2300      	movs	r3, #0
 80060e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060e8:	81a3      	strh	r3, [r4, #12]
 80060ea:	2300      	movs	r3, #0
 80060ec:	6063      	str	r3, [r4, #4]
 80060ee:	6923      	ldr	r3, [r4, #16]
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	f043 0308 	orr.w	r3, r3, #8
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	b94b      	cbnz	r3, 8006112 <__swsetup_r+0x7a>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006108:	d003      	beq.n	8006112 <__swsetup_r+0x7a>
 800610a:	4621      	mov	r1, r4
 800610c:	4628      	mov	r0, r5
 800610e:	f000 fe8e 	bl	8006e2e <__smakebuf_r>
 8006112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006116:	f013 0201 	ands.w	r2, r3, #1
 800611a:	d00a      	beq.n	8006132 <__swsetup_r+0x9a>
 800611c:	2200      	movs	r2, #0
 800611e:	60a2      	str	r2, [r4, #8]
 8006120:	6962      	ldr	r2, [r4, #20]
 8006122:	4252      	negs	r2, r2
 8006124:	61a2      	str	r2, [r4, #24]
 8006126:	6922      	ldr	r2, [r4, #16]
 8006128:	b942      	cbnz	r2, 800613c <__swsetup_r+0xa4>
 800612a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800612e:	d1c5      	bne.n	80060bc <__swsetup_r+0x24>
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	0799      	lsls	r1, r3, #30
 8006134:	bf58      	it	pl
 8006136:	6962      	ldrpl	r2, [r4, #20]
 8006138:	60a2      	str	r2, [r4, #8]
 800613a:	e7f4      	b.n	8006126 <__swsetup_r+0x8e>
 800613c:	2000      	movs	r0, #0
 800613e:	e7f7      	b.n	8006130 <__swsetup_r+0x98>
 8006140:	2000003c 	.word	0x2000003c

08006144 <memset>:
 8006144:	4603      	mov	r3, r0
 8006146:	4402      	add	r2, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <_close_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	2300      	movs	r3, #0
 8006158:	4d05      	ldr	r5, [pc, #20]	@ (8006170 <_close_r+0x1c>)
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fd f812 	bl	8003188 <_close>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_close_r+0x1a>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_close_r+0x1a>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	200009b4 	.word	0x200009b4

08006174 <_lseek_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	4611      	mov	r1, r2
 800617c:	2200      	movs	r2, #0
 800617e:	4d05      	ldr	r5, [pc, #20]	@ (8006194 <_lseek_r+0x20>)
 8006180:	602a      	str	r2, [r5, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	f7fd f824 	bl	80031d0 <_lseek>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_lseek_r+0x1e>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_lseek_r+0x1e>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	200009b4 	.word	0x200009b4

08006198 <_read_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	2200      	movs	r2, #0
 80061a2:	4d05      	ldr	r5, [pc, #20]	@ (80061b8 <_read_r+0x20>)
 80061a4:	602a      	str	r2, [r5, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f7fc ffd1 	bl	800314e <_read>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_read_r+0x1e>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_read_r+0x1e>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	200009b4 	.word	0x200009b4

080061bc <_write_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	4611      	mov	r1, r2
 80061c4:	2200      	movs	r2, #0
 80061c6:	4d05      	ldr	r5, [pc, #20]	@ (80061dc <_write_r+0x20>)
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fd f9e4 	bl	8003598 <_write>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_write_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_write_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	200009b4 	.word	0x200009b4

080061e0 <__errno>:
 80061e0:	4b01      	ldr	r3, [pc, #4]	@ (80061e8 <__errno+0x8>)
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	2000003c 	.word	0x2000003c

080061ec <__libc_init_array>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	2600      	movs	r6, #0
 80061f0:	4d0c      	ldr	r5, [pc, #48]	@ (8006224 <__libc_init_array+0x38>)
 80061f2:	4c0d      	ldr	r4, [pc, #52]	@ (8006228 <__libc_init_array+0x3c>)
 80061f4:	1b64      	subs	r4, r4, r5
 80061f6:	10a4      	asrs	r4, r4, #2
 80061f8:	42a6      	cmp	r6, r4
 80061fa:	d109      	bne.n	8006210 <__libc_init_array+0x24>
 80061fc:	f000 fee4 	bl	8006fc8 <_init>
 8006200:	2600      	movs	r6, #0
 8006202:	4d0a      	ldr	r5, [pc, #40]	@ (800622c <__libc_init_array+0x40>)
 8006204:	4c0a      	ldr	r4, [pc, #40]	@ (8006230 <__libc_init_array+0x44>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	42a6      	cmp	r6, r4
 800620c:	d105      	bne.n	800621a <__libc_init_array+0x2e>
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	f855 3b04 	ldr.w	r3, [r5], #4
 8006214:	4798      	blx	r3
 8006216:	3601      	adds	r6, #1
 8006218:	e7ee      	b.n	80061f8 <__libc_init_array+0xc>
 800621a:	f855 3b04 	ldr.w	r3, [r5], #4
 800621e:	4798      	blx	r3
 8006220:	3601      	adds	r6, #1
 8006222:	e7f2      	b.n	800620a <__libc_init_array+0x1e>
 8006224:	08008318 	.word	0x08008318
 8006228:	08008318 	.word	0x08008318
 800622c:	08008318 	.word	0x08008318
 8006230:	0800831c 	.word	0x0800831c

08006234 <__retarget_lock_init_recursive>:
 8006234:	4770      	bx	lr

08006236 <__retarget_lock_acquire_recursive>:
 8006236:	4770      	bx	lr

08006238 <__retarget_lock_release_recursive>:
 8006238:	4770      	bx	lr

0800623a <memcpy>:
 800623a:	440a      	add	r2, r1
 800623c:	4291      	cmp	r1, r2
 800623e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006242:	d100      	bne.n	8006246 <memcpy+0xc>
 8006244:	4770      	bx	lr
 8006246:	b510      	push	{r4, lr}
 8006248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800624c:	4291      	cmp	r1, r2
 800624e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006252:	d1f9      	bne.n	8006248 <memcpy+0xe>
 8006254:	bd10      	pop	{r4, pc}
	...

08006258 <_free_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	2900      	cmp	r1, #0
 800625e:	d040      	beq.n	80062e2 <_free_r+0x8a>
 8006260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006264:	1f0c      	subs	r4, r1, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfb8      	it	lt
 800626a:	18e4      	addlt	r4, r4, r3
 800626c:	f000 f8de 	bl	800642c <__malloc_lock>
 8006270:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <_free_r+0x8c>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	b933      	cbnz	r3, 8006284 <_free_r+0x2c>
 8006276:	6063      	str	r3, [r4, #4]
 8006278:	6014      	str	r4, [r2, #0]
 800627a:	4628      	mov	r0, r5
 800627c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006280:	f000 b8da 	b.w	8006438 <__malloc_unlock>
 8006284:	42a3      	cmp	r3, r4
 8006286:	d908      	bls.n	800629a <_free_r+0x42>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	1821      	adds	r1, r4, r0
 800628c:	428b      	cmp	r3, r1
 800628e:	bf01      	itttt	eq
 8006290:	6819      	ldreq	r1, [r3, #0]
 8006292:	685b      	ldreq	r3, [r3, #4]
 8006294:	1809      	addeq	r1, r1, r0
 8006296:	6021      	streq	r1, [r4, #0]
 8006298:	e7ed      	b.n	8006276 <_free_r+0x1e>
 800629a:	461a      	mov	r2, r3
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b10b      	cbz	r3, 80062a4 <_free_r+0x4c>
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	d9fa      	bls.n	800629a <_free_r+0x42>
 80062a4:	6811      	ldr	r1, [r2, #0]
 80062a6:	1850      	adds	r0, r2, r1
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d10b      	bne.n	80062c4 <_free_r+0x6c>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	4401      	add	r1, r0
 80062b0:	1850      	adds	r0, r2, r1
 80062b2:	4283      	cmp	r3, r0
 80062b4:	6011      	str	r1, [r2, #0]
 80062b6:	d1e0      	bne.n	800627a <_free_r+0x22>
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	4408      	add	r0, r1
 80062be:	6010      	str	r0, [r2, #0]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	e7da      	b.n	800627a <_free_r+0x22>
 80062c4:	d902      	bls.n	80062cc <_free_r+0x74>
 80062c6:	230c      	movs	r3, #12
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	e7d6      	b.n	800627a <_free_r+0x22>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	1821      	adds	r1, r4, r0
 80062d0:	428b      	cmp	r3, r1
 80062d2:	bf01      	itttt	eq
 80062d4:	6819      	ldreq	r1, [r3, #0]
 80062d6:	685b      	ldreq	r3, [r3, #4]
 80062d8:	1809      	addeq	r1, r1, r0
 80062da:	6021      	streq	r1, [r4, #0]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	6054      	str	r4, [r2, #4]
 80062e0:	e7cb      	b.n	800627a <_free_r+0x22>
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	200009c0 	.word	0x200009c0

080062e8 <sbrk_aligned>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006328 <sbrk_aligned+0x40>)
 80062ec:	460c      	mov	r4, r1
 80062ee:	6831      	ldr	r1, [r6, #0]
 80062f0:	4605      	mov	r5, r0
 80062f2:	b911      	cbnz	r1, 80062fa <sbrk_aligned+0x12>
 80062f4:	f000 fe14 	bl	8006f20 <_sbrk_r>
 80062f8:	6030      	str	r0, [r6, #0]
 80062fa:	4621      	mov	r1, r4
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 fe0f 	bl	8006f20 <_sbrk_r>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d103      	bne.n	800630e <sbrk_aligned+0x26>
 8006306:	f04f 34ff 	mov.w	r4, #4294967295
 800630a:	4620      	mov	r0, r4
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	1cc4      	adds	r4, r0, #3
 8006310:	f024 0403 	bic.w	r4, r4, #3
 8006314:	42a0      	cmp	r0, r4
 8006316:	d0f8      	beq.n	800630a <sbrk_aligned+0x22>
 8006318:	1a21      	subs	r1, r4, r0
 800631a:	4628      	mov	r0, r5
 800631c:	f000 fe00 	bl	8006f20 <_sbrk_r>
 8006320:	3001      	adds	r0, #1
 8006322:	d1f2      	bne.n	800630a <sbrk_aligned+0x22>
 8006324:	e7ef      	b.n	8006306 <sbrk_aligned+0x1e>
 8006326:	bf00      	nop
 8006328:	200009bc 	.word	0x200009bc

0800632c <_malloc_r>:
 800632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006330:	1ccd      	adds	r5, r1, #3
 8006332:	f025 0503 	bic.w	r5, r5, #3
 8006336:	3508      	adds	r5, #8
 8006338:	2d0c      	cmp	r5, #12
 800633a:	bf38      	it	cc
 800633c:	250c      	movcc	r5, #12
 800633e:	2d00      	cmp	r5, #0
 8006340:	4606      	mov	r6, r0
 8006342:	db01      	blt.n	8006348 <_malloc_r+0x1c>
 8006344:	42a9      	cmp	r1, r5
 8006346:	d904      	bls.n	8006352 <_malloc_r+0x26>
 8006348:	230c      	movs	r3, #12
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	2000      	movs	r0, #0
 800634e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006428 <_malloc_r+0xfc>
 8006356:	f000 f869 	bl	800642c <__malloc_lock>
 800635a:	f8d8 3000 	ldr.w	r3, [r8]
 800635e:	461c      	mov	r4, r3
 8006360:	bb44      	cbnz	r4, 80063b4 <_malloc_r+0x88>
 8006362:	4629      	mov	r1, r5
 8006364:	4630      	mov	r0, r6
 8006366:	f7ff ffbf 	bl	80062e8 <sbrk_aligned>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	4604      	mov	r4, r0
 800636e:	d158      	bne.n	8006422 <_malloc_r+0xf6>
 8006370:	f8d8 4000 	ldr.w	r4, [r8]
 8006374:	4627      	mov	r7, r4
 8006376:	2f00      	cmp	r7, #0
 8006378:	d143      	bne.n	8006402 <_malloc_r+0xd6>
 800637a:	2c00      	cmp	r4, #0
 800637c:	d04b      	beq.n	8006416 <_malloc_r+0xea>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	4639      	mov	r1, r7
 8006382:	4630      	mov	r0, r6
 8006384:	eb04 0903 	add.w	r9, r4, r3
 8006388:	f000 fdca 	bl	8006f20 <_sbrk_r>
 800638c:	4581      	cmp	r9, r0
 800638e:	d142      	bne.n	8006416 <_malloc_r+0xea>
 8006390:	6821      	ldr	r1, [r4, #0]
 8006392:	4630      	mov	r0, r6
 8006394:	1a6d      	subs	r5, r5, r1
 8006396:	4629      	mov	r1, r5
 8006398:	f7ff ffa6 	bl	80062e8 <sbrk_aligned>
 800639c:	3001      	adds	r0, #1
 800639e:	d03a      	beq.n	8006416 <_malloc_r+0xea>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	442b      	add	r3, r5
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	f8d8 3000 	ldr.w	r3, [r8]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	bb62      	cbnz	r2, 8006408 <_malloc_r+0xdc>
 80063ae:	f8c8 7000 	str.w	r7, [r8]
 80063b2:	e00f      	b.n	80063d4 <_malloc_r+0xa8>
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	1b52      	subs	r2, r2, r5
 80063b8:	d420      	bmi.n	80063fc <_malloc_r+0xd0>
 80063ba:	2a0b      	cmp	r2, #11
 80063bc:	d917      	bls.n	80063ee <_malloc_r+0xc2>
 80063be:	1961      	adds	r1, r4, r5
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	6025      	str	r5, [r4, #0]
 80063c4:	bf18      	it	ne
 80063c6:	6059      	strne	r1, [r3, #4]
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	bf08      	it	eq
 80063cc:	f8c8 1000 	streq.w	r1, [r8]
 80063d0:	5162      	str	r2, [r4, r5]
 80063d2:	604b      	str	r3, [r1, #4]
 80063d4:	4630      	mov	r0, r6
 80063d6:	f000 f82f 	bl	8006438 <__malloc_unlock>
 80063da:	f104 000b 	add.w	r0, r4, #11
 80063de:	1d23      	adds	r3, r4, #4
 80063e0:	f020 0007 	bic.w	r0, r0, #7
 80063e4:	1ac2      	subs	r2, r0, r3
 80063e6:	bf1c      	itt	ne
 80063e8:	1a1b      	subne	r3, r3, r0
 80063ea:	50a3      	strne	r3, [r4, r2]
 80063ec:	e7af      	b.n	800634e <_malloc_r+0x22>
 80063ee:	6862      	ldr	r2, [r4, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	bf0c      	ite	eq
 80063f4:	f8c8 2000 	streq.w	r2, [r8]
 80063f8:	605a      	strne	r2, [r3, #4]
 80063fa:	e7eb      	b.n	80063d4 <_malloc_r+0xa8>
 80063fc:	4623      	mov	r3, r4
 80063fe:	6864      	ldr	r4, [r4, #4]
 8006400:	e7ae      	b.n	8006360 <_malloc_r+0x34>
 8006402:	463c      	mov	r4, r7
 8006404:	687f      	ldr	r7, [r7, #4]
 8006406:	e7b6      	b.n	8006376 <_malloc_r+0x4a>
 8006408:	461a      	mov	r2, r3
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	42a3      	cmp	r3, r4
 800640e:	d1fb      	bne.n	8006408 <_malloc_r+0xdc>
 8006410:	2300      	movs	r3, #0
 8006412:	6053      	str	r3, [r2, #4]
 8006414:	e7de      	b.n	80063d4 <_malloc_r+0xa8>
 8006416:	230c      	movs	r3, #12
 8006418:	4630      	mov	r0, r6
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f000 f80c 	bl	8006438 <__malloc_unlock>
 8006420:	e794      	b.n	800634c <_malloc_r+0x20>
 8006422:	6005      	str	r5, [r0, #0]
 8006424:	e7d6      	b.n	80063d4 <_malloc_r+0xa8>
 8006426:	bf00      	nop
 8006428:	200009c0 	.word	0x200009c0

0800642c <__malloc_lock>:
 800642c:	4801      	ldr	r0, [pc, #4]	@ (8006434 <__malloc_lock+0x8>)
 800642e:	f7ff bf02 	b.w	8006236 <__retarget_lock_acquire_recursive>
 8006432:	bf00      	nop
 8006434:	200009b8 	.word	0x200009b8

08006438 <__malloc_unlock>:
 8006438:	4801      	ldr	r0, [pc, #4]	@ (8006440 <__malloc_unlock+0x8>)
 800643a:	f7ff befd 	b.w	8006238 <__retarget_lock_release_recursive>
 800643e:	bf00      	nop
 8006440:	200009b8 	.word	0x200009b8

08006444 <__ssputs_r>:
 8006444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	461f      	mov	r7, r3
 800644a:	688e      	ldr	r6, [r1, #8]
 800644c:	4682      	mov	sl, r0
 800644e:	42be      	cmp	r6, r7
 8006450:	460c      	mov	r4, r1
 8006452:	4690      	mov	r8, r2
 8006454:	680b      	ldr	r3, [r1, #0]
 8006456:	d82d      	bhi.n	80064b4 <__ssputs_r+0x70>
 8006458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800645c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006460:	d026      	beq.n	80064b0 <__ssputs_r+0x6c>
 8006462:	6965      	ldr	r5, [r4, #20]
 8006464:	6909      	ldr	r1, [r1, #16]
 8006466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800646a:	eba3 0901 	sub.w	r9, r3, r1
 800646e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006472:	1c7b      	adds	r3, r7, #1
 8006474:	444b      	add	r3, r9
 8006476:	106d      	asrs	r5, r5, #1
 8006478:	429d      	cmp	r5, r3
 800647a:	bf38      	it	cc
 800647c:	461d      	movcc	r5, r3
 800647e:	0553      	lsls	r3, r2, #21
 8006480:	d527      	bpl.n	80064d2 <__ssputs_r+0x8e>
 8006482:	4629      	mov	r1, r5
 8006484:	f7ff ff52 	bl	800632c <_malloc_r>
 8006488:	4606      	mov	r6, r0
 800648a:	b360      	cbz	r0, 80064e6 <__ssputs_r+0xa2>
 800648c:	464a      	mov	r2, r9
 800648e:	6921      	ldr	r1, [r4, #16]
 8006490:	f7ff fed3 	bl	800623a <memcpy>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800649a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649e:	81a3      	strh	r3, [r4, #12]
 80064a0:	6126      	str	r6, [r4, #16]
 80064a2:	444e      	add	r6, r9
 80064a4:	6026      	str	r6, [r4, #0]
 80064a6:	463e      	mov	r6, r7
 80064a8:	6165      	str	r5, [r4, #20]
 80064aa:	eba5 0509 	sub.w	r5, r5, r9
 80064ae:	60a5      	str	r5, [r4, #8]
 80064b0:	42be      	cmp	r6, r7
 80064b2:	d900      	bls.n	80064b6 <__ssputs_r+0x72>
 80064b4:	463e      	mov	r6, r7
 80064b6:	4632      	mov	r2, r6
 80064b8:	4641      	mov	r1, r8
 80064ba:	6820      	ldr	r0, [r4, #0]
 80064bc:	f000 fcf3 	bl	8006ea6 <memmove>
 80064c0:	2000      	movs	r0, #0
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	1b9b      	subs	r3, r3, r6
 80064c6:	60a3      	str	r3, [r4, #8]
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	4433      	add	r3, r6
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	462a      	mov	r2, r5
 80064d4:	f000 fd42 	bl	8006f5c <_realloc_r>
 80064d8:	4606      	mov	r6, r0
 80064da:	2800      	cmp	r0, #0
 80064dc:	d1e0      	bne.n	80064a0 <__ssputs_r+0x5c>
 80064de:	4650      	mov	r0, sl
 80064e0:	6921      	ldr	r1, [r4, #16]
 80064e2:	f7ff feb9 	bl	8006258 <_free_r>
 80064e6:	230c      	movs	r3, #12
 80064e8:	f8ca 3000 	str.w	r3, [sl]
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f04f 30ff 	mov.w	r0, #4294967295
 80064f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	e7e9      	b.n	80064ce <__ssputs_r+0x8a>
	...

080064fc <_svfiprintf_r>:
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	4698      	mov	r8, r3
 8006502:	898b      	ldrh	r3, [r1, #12]
 8006504:	4607      	mov	r7, r0
 8006506:	061b      	lsls	r3, r3, #24
 8006508:	460d      	mov	r5, r1
 800650a:	4614      	mov	r4, r2
 800650c:	b09d      	sub	sp, #116	@ 0x74
 800650e:	d510      	bpl.n	8006532 <_svfiprintf_r+0x36>
 8006510:	690b      	ldr	r3, [r1, #16]
 8006512:	b973      	cbnz	r3, 8006532 <_svfiprintf_r+0x36>
 8006514:	2140      	movs	r1, #64	@ 0x40
 8006516:	f7ff ff09 	bl	800632c <_malloc_r>
 800651a:	6028      	str	r0, [r5, #0]
 800651c:	6128      	str	r0, [r5, #16]
 800651e:	b930      	cbnz	r0, 800652e <_svfiprintf_r+0x32>
 8006520:	230c      	movs	r3, #12
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	b01d      	add	sp, #116	@ 0x74
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	2340      	movs	r3, #64	@ 0x40
 8006530:	616b      	str	r3, [r5, #20]
 8006532:	2300      	movs	r3, #0
 8006534:	9309      	str	r3, [sp, #36]	@ 0x24
 8006536:	2320      	movs	r3, #32
 8006538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800653c:	2330      	movs	r3, #48	@ 0x30
 800653e:	f04f 0901 	mov.w	r9, #1
 8006542:	f8cd 800c 	str.w	r8, [sp, #12]
 8006546:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80066e0 <_svfiprintf_r+0x1e4>
 800654a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800654e:	4623      	mov	r3, r4
 8006550:	469a      	mov	sl, r3
 8006552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006556:	b10a      	cbz	r2, 800655c <_svfiprintf_r+0x60>
 8006558:	2a25      	cmp	r2, #37	@ 0x25
 800655a:	d1f9      	bne.n	8006550 <_svfiprintf_r+0x54>
 800655c:	ebba 0b04 	subs.w	fp, sl, r4
 8006560:	d00b      	beq.n	800657a <_svfiprintf_r+0x7e>
 8006562:	465b      	mov	r3, fp
 8006564:	4622      	mov	r2, r4
 8006566:	4629      	mov	r1, r5
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ff6b 	bl	8006444 <__ssputs_r>
 800656e:	3001      	adds	r0, #1
 8006570:	f000 80a7 	beq.w	80066c2 <_svfiprintf_r+0x1c6>
 8006574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006576:	445a      	add	r2, fp
 8006578:	9209      	str	r2, [sp, #36]	@ 0x24
 800657a:	f89a 3000 	ldrb.w	r3, [sl]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 809f 	beq.w	80066c2 <_svfiprintf_r+0x1c6>
 8006584:	2300      	movs	r3, #0
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800658e:	f10a 0a01 	add.w	sl, sl, #1
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	9307      	str	r3, [sp, #28]
 8006596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800659a:	931a      	str	r3, [sp, #104]	@ 0x68
 800659c:	4654      	mov	r4, sl
 800659e:	2205      	movs	r2, #5
 80065a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a4:	484e      	ldr	r0, [pc, #312]	@ (80066e0 <_svfiprintf_r+0x1e4>)
 80065a6:	f000 fccb 	bl	8006f40 <memchr>
 80065aa:	9a04      	ldr	r2, [sp, #16]
 80065ac:	b9d8      	cbnz	r0, 80065e6 <_svfiprintf_r+0xea>
 80065ae:	06d0      	lsls	r0, r2, #27
 80065b0:	bf44      	itt	mi
 80065b2:	2320      	movmi	r3, #32
 80065b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065b8:	0711      	lsls	r1, r2, #28
 80065ba:	bf44      	itt	mi
 80065bc:	232b      	movmi	r3, #43	@ 0x2b
 80065be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065c2:	f89a 3000 	ldrb.w	r3, [sl]
 80065c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c8:	d015      	beq.n	80065f6 <_svfiprintf_r+0xfa>
 80065ca:	4654      	mov	r4, sl
 80065cc:	2000      	movs	r0, #0
 80065ce:	f04f 0c0a 	mov.w	ip, #10
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	4621      	mov	r1, r4
 80065d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065da:	3b30      	subs	r3, #48	@ 0x30
 80065dc:	2b09      	cmp	r3, #9
 80065de:	d94b      	bls.n	8006678 <_svfiprintf_r+0x17c>
 80065e0:	b1b0      	cbz	r0, 8006610 <_svfiprintf_r+0x114>
 80065e2:	9207      	str	r2, [sp, #28]
 80065e4:	e014      	b.n	8006610 <_svfiprintf_r+0x114>
 80065e6:	eba0 0308 	sub.w	r3, r0, r8
 80065ea:	fa09 f303 	lsl.w	r3, r9, r3
 80065ee:	4313      	orrs	r3, r2
 80065f0:	46a2      	mov	sl, r4
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	e7d2      	b.n	800659c <_svfiprintf_r+0xa0>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	1d19      	adds	r1, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9103      	str	r1, [sp, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfbb      	ittet	lt
 8006602:	425b      	neglt	r3, r3
 8006604:	f042 0202 	orrlt.w	r2, r2, #2
 8006608:	9307      	strge	r3, [sp, #28]
 800660a:	9307      	strlt	r3, [sp, #28]
 800660c:	bfb8      	it	lt
 800660e:	9204      	strlt	r2, [sp, #16]
 8006610:	7823      	ldrb	r3, [r4, #0]
 8006612:	2b2e      	cmp	r3, #46	@ 0x2e
 8006614:	d10a      	bne.n	800662c <_svfiprintf_r+0x130>
 8006616:	7863      	ldrb	r3, [r4, #1]
 8006618:	2b2a      	cmp	r3, #42	@ 0x2a
 800661a:	d132      	bne.n	8006682 <_svfiprintf_r+0x186>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	3402      	adds	r4, #2
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	9203      	str	r2, [sp, #12]
 8006626:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80066e4 <_svfiprintf_r+0x1e8>
 8006630:	2203      	movs	r2, #3
 8006632:	4650      	mov	r0, sl
 8006634:	7821      	ldrb	r1, [r4, #0]
 8006636:	f000 fc83 	bl	8006f40 <memchr>
 800663a:	b138      	cbz	r0, 800664c <_svfiprintf_r+0x150>
 800663c:	2240      	movs	r2, #64	@ 0x40
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	eba0 000a 	sub.w	r0, r0, sl
 8006644:	4082      	lsls	r2, r0
 8006646:	4313      	orrs	r3, r2
 8006648:	3401      	adds	r4, #1
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006650:	2206      	movs	r2, #6
 8006652:	4825      	ldr	r0, [pc, #148]	@ (80066e8 <_svfiprintf_r+0x1ec>)
 8006654:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006658:	f000 fc72 	bl	8006f40 <memchr>
 800665c:	2800      	cmp	r0, #0
 800665e:	d036      	beq.n	80066ce <_svfiprintf_r+0x1d2>
 8006660:	4b22      	ldr	r3, [pc, #136]	@ (80066ec <_svfiprintf_r+0x1f0>)
 8006662:	bb1b      	cbnz	r3, 80066ac <_svfiprintf_r+0x1b0>
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	3307      	adds	r3, #7
 8006668:	f023 0307 	bic.w	r3, r3, #7
 800666c:	3308      	adds	r3, #8
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006672:	4433      	add	r3, r6
 8006674:	9309      	str	r3, [sp, #36]	@ 0x24
 8006676:	e76a      	b.n	800654e <_svfiprintf_r+0x52>
 8006678:	460c      	mov	r4, r1
 800667a:	2001      	movs	r0, #1
 800667c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006680:	e7a8      	b.n	80065d4 <_svfiprintf_r+0xd8>
 8006682:	2300      	movs	r3, #0
 8006684:	f04f 0c0a 	mov.w	ip, #10
 8006688:	4619      	mov	r1, r3
 800668a:	3401      	adds	r4, #1
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	4620      	mov	r0, r4
 8006690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006694:	3a30      	subs	r2, #48	@ 0x30
 8006696:	2a09      	cmp	r2, #9
 8006698:	d903      	bls.n	80066a2 <_svfiprintf_r+0x1a6>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0c6      	beq.n	800662c <_svfiprintf_r+0x130>
 800669e:	9105      	str	r1, [sp, #20]
 80066a0:	e7c4      	b.n	800662c <_svfiprintf_r+0x130>
 80066a2:	4604      	mov	r4, r0
 80066a4:	2301      	movs	r3, #1
 80066a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066aa:	e7f0      	b.n	800668e <_svfiprintf_r+0x192>
 80066ac:	ab03      	add	r3, sp, #12
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	462a      	mov	r2, r5
 80066b2:	4638      	mov	r0, r7
 80066b4:	4b0e      	ldr	r3, [pc, #56]	@ (80066f0 <_svfiprintf_r+0x1f4>)
 80066b6:	a904      	add	r1, sp, #16
 80066b8:	f3af 8000 	nop.w
 80066bc:	1c42      	adds	r2, r0, #1
 80066be:	4606      	mov	r6, r0
 80066c0:	d1d6      	bne.n	8006670 <_svfiprintf_r+0x174>
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	065b      	lsls	r3, r3, #25
 80066c6:	f53f af2d 	bmi.w	8006524 <_svfiprintf_r+0x28>
 80066ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066cc:	e72c      	b.n	8006528 <_svfiprintf_r+0x2c>
 80066ce:	ab03      	add	r3, sp, #12
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	462a      	mov	r2, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <_svfiprintf_r+0x1f4>)
 80066d8:	a904      	add	r1, sp, #16
 80066da:	f000 f9bd 	bl	8006a58 <_printf_i>
 80066de:	e7ed      	b.n	80066bc <_svfiprintf_r+0x1c0>
 80066e0:	080082e2 	.word	0x080082e2
 80066e4:	080082e8 	.word	0x080082e8
 80066e8:	080082ec 	.word	0x080082ec
 80066ec:	00000000 	.word	0x00000000
 80066f0:	08006445 	.word	0x08006445

080066f4 <__sfputc_r>:
 80066f4:	6893      	ldr	r3, [r2, #8]
 80066f6:	b410      	push	{r4}
 80066f8:	3b01      	subs	r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	6093      	str	r3, [r2, #8]
 80066fe:	da07      	bge.n	8006710 <__sfputc_r+0x1c>
 8006700:	6994      	ldr	r4, [r2, #24]
 8006702:	42a3      	cmp	r3, r4
 8006704:	db01      	blt.n	800670a <__sfputc_r+0x16>
 8006706:	290a      	cmp	r1, #10
 8006708:	d102      	bne.n	8006710 <__sfputc_r+0x1c>
 800670a:	bc10      	pop	{r4}
 800670c:	f7ff bc85 	b.w	800601a <__swbuf_r>
 8006710:	6813      	ldr	r3, [r2, #0]
 8006712:	1c58      	adds	r0, r3, #1
 8006714:	6010      	str	r0, [r2, #0]
 8006716:	7019      	strb	r1, [r3, #0]
 8006718:	4608      	mov	r0, r1
 800671a:	bc10      	pop	{r4}
 800671c:	4770      	bx	lr

0800671e <__sfputs_r>:
 800671e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006720:	4606      	mov	r6, r0
 8006722:	460f      	mov	r7, r1
 8006724:	4614      	mov	r4, r2
 8006726:	18d5      	adds	r5, r2, r3
 8006728:	42ac      	cmp	r4, r5
 800672a:	d101      	bne.n	8006730 <__sfputs_r+0x12>
 800672c:	2000      	movs	r0, #0
 800672e:	e007      	b.n	8006740 <__sfputs_r+0x22>
 8006730:	463a      	mov	r2, r7
 8006732:	4630      	mov	r0, r6
 8006734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006738:	f7ff ffdc 	bl	80066f4 <__sfputc_r>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d1f3      	bne.n	8006728 <__sfputs_r+0xa>
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006744 <_vfiprintf_r>:
 8006744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	460d      	mov	r5, r1
 800674a:	4614      	mov	r4, r2
 800674c:	4698      	mov	r8, r3
 800674e:	4606      	mov	r6, r0
 8006750:	b09d      	sub	sp, #116	@ 0x74
 8006752:	b118      	cbz	r0, 800675c <_vfiprintf_r+0x18>
 8006754:	6a03      	ldr	r3, [r0, #32]
 8006756:	b90b      	cbnz	r3, 800675c <_vfiprintf_r+0x18>
 8006758:	f7ff fb54 	bl	8005e04 <__sinit>
 800675c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800675e:	07d9      	lsls	r1, r3, #31
 8006760:	d405      	bmi.n	800676e <_vfiprintf_r+0x2a>
 8006762:	89ab      	ldrh	r3, [r5, #12]
 8006764:	059a      	lsls	r2, r3, #22
 8006766:	d402      	bmi.n	800676e <_vfiprintf_r+0x2a>
 8006768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800676a:	f7ff fd64 	bl	8006236 <__retarget_lock_acquire_recursive>
 800676e:	89ab      	ldrh	r3, [r5, #12]
 8006770:	071b      	lsls	r3, r3, #28
 8006772:	d501      	bpl.n	8006778 <_vfiprintf_r+0x34>
 8006774:	692b      	ldr	r3, [r5, #16]
 8006776:	b99b      	cbnz	r3, 80067a0 <_vfiprintf_r+0x5c>
 8006778:	4629      	mov	r1, r5
 800677a:	4630      	mov	r0, r6
 800677c:	f7ff fc8c 	bl	8006098 <__swsetup_r>
 8006780:	b170      	cbz	r0, 80067a0 <_vfiprintf_r+0x5c>
 8006782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006784:	07dc      	lsls	r4, r3, #31
 8006786:	d504      	bpl.n	8006792 <_vfiprintf_r+0x4e>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	b01d      	add	sp, #116	@ 0x74
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006792:	89ab      	ldrh	r3, [r5, #12]
 8006794:	0598      	lsls	r0, r3, #22
 8006796:	d4f7      	bmi.n	8006788 <_vfiprintf_r+0x44>
 8006798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800679a:	f7ff fd4d 	bl	8006238 <__retarget_lock_release_recursive>
 800679e:	e7f3      	b.n	8006788 <_vfiprintf_r+0x44>
 80067a0:	2300      	movs	r3, #0
 80067a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a4:	2320      	movs	r3, #32
 80067a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067aa:	2330      	movs	r3, #48	@ 0x30
 80067ac:	f04f 0901 	mov.w	r9, #1
 80067b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80067b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006960 <_vfiprintf_r+0x21c>
 80067b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067bc:	4623      	mov	r3, r4
 80067be:	469a      	mov	sl, r3
 80067c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c4:	b10a      	cbz	r2, 80067ca <_vfiprintf_r+0x86>
 80067c6:	2a25      	cmp	r2, #37	@ 0x25
 80067c8:	d1f9      	bne.n	80067be <_vfiprintf_r+0x7a>
 80067ca:	ebba 0b04 	subs.w	fp, sl, r4
 80067ce:	d00b      	beq.n	80067e8 <_vfiprintf_r+0xa4>
 80067d0:	465b      	mov	r3, fp
 80067d2:	4622      	mov	r2, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ffa1 	bl	800671e <__sfputs_r>
 80067dc:	3001      	adds	r0, #1
 80067de:	f000 80a7 	beq.w	8006930 <_vfiprintf_r+0x1ec>
 80067e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067e4:	445a      	add	r2, fp
 80067e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80067e8:	f89a 3000 	ldrb.w	r3, [sl]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 809f 	beq.w	8006930 <_vfiprintf_r+0x1ec>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f04f 32ff 	mov.w	r2, #4294967295
 80067f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067fc:	f10a 0a01 	add.w	sl, sl, #1
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	9307      	str	r3, [sp, #28]
 8006804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006808:	931a      	str	r3, [sp, #104]	@ 0x68
 800680a:	4654      	mov	r4, sl
 800680c:	2205      	movs	r2, #5
 800680e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006812:	4853      	ldr	r0, [pc, #332]	@ (8006960 <_vfiprintf_r+0x21c>)
 8006814:	f000 fb94 	bl	8006f40 <memchr>
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	b9d8      	cbnz	r0, 8006854 <_vfiprintf_r+0x110>
 800681c:	06d1      	lsls	r1, r2, #27
 800681e:	bf44      	itt	mi
 8006820:	2320      	movmi	r3, #32
 8006822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006826:	0713      	lsls	r3, r2, #28
 8006828:	bf44      	itt	mi
 800682a:	232b      	movmi	r3, #43	@ 0x2b
 800682c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006830:	f89a 3000 	ldrb.w	r3, [sl]
 8006834:	2b2a      	cmp	r3, #42	@ 0x2a
 8006836:	d015      	beq.n	8006864 <_vfiprintf_r+0x120>
 8006838:	4654      	mov	r4, sl
 800683a:	2000      	movs	r0, #0
 800683c:	f04f 0c0a 	mov.w	ip, #10
 8006840:	9a07      	ldr	r2, [sp, #28]
 8006842:	4621      	mov	r1, r4
 8006844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006848:	3b30      	subs	r3, #48	@ 0x30
 800684a:	2b09      	cmp	r3, #9
 800684c:	d94b      	bls.n	80068e6 <_vfiprintf_r+0x1a2>
 800684e:	b1b0      	cbz	r0, 800687e <_vfiprintf_r+0x13a>
 8006850:	9207      	str	r2, [sp, #28]
 8006852:	e014      	b.n	800687e <_vfiprintf_r+0x13a>
 8006854:	eba0 0308 	sub.w	r3, r0, r8
 8006858:	fa09 f303 	lsl.w	r3, r9, r3
 800685c:	4313      	orrs	r3, r2
 800685e:	46a2      	mov	sl, r4
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	e7d2      	b.n	800680a <_vfiprintf_r+0xc6>
 8006864:	9b03      	ldr	r3, [sp, #12]
 8006866:	1d19      	adds	r1, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	9103      	str	r1, [sp, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfbb      	ittet	lt
 8006870:	425b      	neglt	r3, r3
 8006872:	f042 0202 	orrlt.w	r2, r2, #2
 8006876:	9307      	strge	r3, [sp, #28]
 8006878:	9307      	strlt	r3, [sp, #28]
 800687a:	bfb8      	it	lt
 800687c:	9204      	strlt	r2, [sp, #16]
 800687e:	7823      	ldrb	r3, [r4, #0]
 8006880:	2b2e      	cmp	r3, #46	@ 0x2e
 8006882:	d10a      	bne.n	800689a <_vfiprintf_r+0x156>
 8006884:	7863      	ldrb	r3, [r4, #1]
 8006886:	2b2a      	cmp	r3, #42	@ 0x2a
 8006888:	d132      	bne.n	80068f0 <_vfiprintf_r+0x1ac>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	3402      	adds	r4, #2
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	9203      	str	r2, [sp, #12]
 8006894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006964 <_vfiprintf_r+0x220>
 800689e:	2203      	movs	r2, #3
 80068a0:	4650      	mov	r0, sl
 80068a2:	7821      	ldrb	r1, [r4, #0]
 80068a4:	f000 fb4c 	bl	8006f40 <memchr>
 80068a8:	b138      	cbz	r0, 80068ba <_vfiprintf_r+0x176>
 80068aa:	2240      	movs	r2, #64	@ 0x40
 80068ac:	9b04      	ldr	r3, [sp, #16]
 80068ae:	eba0 000a 	sub.w	r0, r0, sl
 80068b2:	4082      	lsls	r2, r0
 80068b4:	4313      	orrs	r3, r2
 80068b6:	3401      	adds	r4, #1
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068be:	2206      	movs	r2, #6
 80068c0:	4829      	ldr	r0, [pc, #164]	@ (8006968 <_vfiprintf_r+0x224>)
 80068c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068c6:	f000 fb3b 	bl	8006f40 <memchr>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d03f      	beq.n	800694e <_vfiprintf_r+0x20a>
 80068ce:	4b27      	ldr	r3, [pc, #156]	@ (800696c <_vfiprintf_r+0x228>)
 80068d0:	bb1b      	cbnz	r3, 800691a <_vfiprintf_r+0x1d6>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	3307      	adds	r3, #7
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	3308      	adds	r3, #8
 80068dc:	9303      	str	r3, [sp, #12]
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	443b      	add	r3, r7
 80068e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e4:	e76a      	b.n	80067bc <_vfiprintf_r+0x78>
 80068e6:	460c      	mov	r4, r1
 80068e8:	2001      	movs	r0, #1
 80068ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ee:	e7a8      	b.n	8006842 <_vfiprintf_r+0xfe>
 80068f0:	2300      	movs	r3, #0
 80068f2:	f04f 0c0a 	mov.w	ip, #10
 80068f6:	4619      	mov	r1, r3
 80068f8:	3401      	adds	r4, #1
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	4620      	mov	r0, r4
 80068fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006902:	3a30      	subs	r2, #48	@ 0x30
 8006904:	2a09      	cmp	r2, #9
 8006906:	d903      	bls.n	8006910 <_vfiprintf_r+0x1cc>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0c6      	beq.n	800689a <_vfiprintf_r+0x156>
 800690c:	9105      	str	r1, [sp, #20]
 800690e:	e7c4      	b.n	800689a <_vfiprintf_r+0x156>
 8006910:	4604      	mov	r4, r0
 8006912:	2301      	movs	r3, #1
 8006914:	fb0c 2101 	mla	r1, ip, r1, r2
 8006918:	e7f0      	b.n	80068fc <_vfiprintf_r+0x1b8>
 800691a:	ab03      	add	r3, sp, #12
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	462a      	mov	r2, r5
 8006920:	4630      	mov	r0, r6
 8006922:	4b13      	ldr	r3, [pc, #76]	@ (8006970 <_vfiprintf_r+0x22c>)
 8006924:	a904      	add	r1, sp, #16
 8006926:	f3af 8000 	nop.w
 800692a:	4607      	mov	r7, r0
 800692c:	1c78      	adds	r0, r7, #1
 800692e:	d1d6      	bne.n	80068de <_vfiprintf_r+0x19a>
 8006930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006932:	07d9      	lsls	r1, r3, #31
 8006934:	d405      	bmi.n	8006942 <_vfiprintf_r+0x1fe>
 8006936:	89ab      	ldrh	r3, [r5, #12]
 8006938:	059a      	lsls	r2, r3, #22
 800693a:	d402      	bmi.n	8006942 <_vfiprintf_r+0x1fe>
 800693c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800693e:	f7ff fc7b 	bl	8006238 <__retarget_lock_release_recursive>
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	065b      	lsls	r3, r3, #25
 8006946:	f53f af1f 	bmi.w	8006788 <_vfiprintf_r+0x44>
 800694a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800694c:	e71e      	b.n	800678c <_vfiprintf_r+0x48>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4630      	mov	r0, r6
 8006956:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <_vfiprintf_r+0x22c>)
 8006958:	a904      	add	r1, sp, #16
 800695a:	f000 f87d 	bl	8006a58 <_printf_i>
 800695e:	e7e4      	b.n	800692a <_vfiprintf_r+0x1e6>
 8006960:	080082e2 	.word	0x080082e2
 8006964:	080082e8 	.word	0x080082e8
 8006968:	080082ec 	.word	0x080082ec
 800696c:	00000000 	.word	0x00000000
 8006970:	0800671f 	.word	0x0800671f

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4616      	mov	r6, r2
 800697a:	4698      	mov	r8, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	4607      	mov	r7, r0
 8006982:	4293      	cmp	r3, r2
 8006984:	bfb8      	it	lt
 8006986:	4613      	movlt	r3, r2
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800698e:	460c      	mov	r4, r1
 8006990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006994:	b10a      	cbz	r2, 800699a <_printf_common+0x26>
 8006996:	3301      	adds	r3, #1
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0699      	lsls	r1, r3, #26
 800699e:	bf42      	ittt	mi
 80069a0:	6833      	ldrmi	r3, [r6, #0]
 80069a2:	3302      	addmi	r3, #2
 80069a4:	6033      	strmi	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	f015 0506 	ands.w	r5, r5, #6
 80069ac:	d106      	bne.n	80069bc <_printf_common+0x48>
 80069ae:	f104 0a19 	add.w	sl, r4, #25
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dc2b      	bgt.n	8006a14 <_printf_common+0xa0>
 80069bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	3b00      	subs	r3, #0
 80069c4:	bf18      	it	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	0692      	lsls	r2, r2, #26
 80069ca:	d430      	bmi.n	8006a2e <_printf_common+0xba>
 80069cc:	4641      	mov	r1, r8
 80069ce:	4638      	mov	r0, r7
 80069d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069d4:	47c8      	blx	r9
 80069d6:	3001      	adds	r0, #1
 80069d8:	d023      	beq.n	8006a22 <_printf_common+0xae>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	bf14      	ite	ne
 80069e6:	2500      	movne	r5, #0
 80069e8:	6833      	ldreq	r3, [r6, #0]
 80069ea:	f04f 0600 	mov.w	r6, #0
 80069ee:	bf08      	it	eq
 80069f0:	68e5      	ldreq	r5, [r4, #12]
 80069f2:	f104 041a 	add.w	r4, r4, #26
 80069f6:	bf08      	it	eq
 80069f8:	1aed      	subeq	r5, r5, r3
 80069fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80069fe:	bf08      	it	eq
 8006a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a04:	4293      	cmp	r3, r2
 8006a06:	bfc4      	itt	gt
 8006a08:	1a9b      	subgt	r3, r3, r2
 8006a0a:	18ed      	addgt	r5, r5, r3
 8006a0c:	42b5      	cmp	r5, r6
 8006a0e:	d11a      	bne.n	8006a46 <_printf_common+0xd2>
 8006a10:	2000      	movs	r0, #0
 8006a12:	e008      	b.n	8006a26 <_printf_common+0xb2>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4652      	mov	r2, sl
 8006a18:	4641      	mov	r1, r8
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c8      	blx	r9
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d103      	bne.n	8006a2a <_printf_common+0xb6>
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295
 8006a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2a:	3501      	adds	r5, #1
 8006a2c:	e7c1      	b.n	80069b2 <_printf_common+0x3e>
 8006a2e:	2030      	movs	r0, #48	@ 0x30
 8006a30:	18e1      	adds	r1, r4, r3
 8006a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a3c:	4422      	add	r2, r4
 8006a3e:	3302      	adds	r3, #2
 8006a40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a44:	e7c2      	b.n	80069cc <_printf_common+0x58>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	47c8      	blx	r9
 8006a50:	3001      	adds	r0, #1
 8006a52:	d0e6      	beq.n	8006a22 <_printf_common+0xae>
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7d9      	b.n	8006a0c <_printf_common+0x98>

08006a58 <_printf_i>:
 8006a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	7e0f      	ldrb	r7, [r1, #24]
 8006a5e:	4691      	mov	r9, r2
 8006a60:	2f78      	cmp	r7, #120	@ 0x78
 8006a62:	4680      	mov	r8, r0
 8006a64:	460c      	mov	r4, r1
 8006a66:	469a      	mov	sl, r3
 8006a68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a6e:	d807      	bhi.n	8006a80 <_printf_i+0x28>
 8006a70:	2f62      	cmp	r7, #98	@ 0x62
 8006a72:	d80a      	bhi.n	8006a8a <_printf_i+0x32>
 8006a74:	2f00      	cmp	r7, #0
 8006a76:	f000 80d1 	beq.w	8006c1c <_printf_i+0x1c4>
 8006a7a:	2f58      	cmp	r7, #88	@ 0x58
 8006a7c:	f000 80b8 	beq.w	8006bf0 <_printf_i+0x198>
 8006a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a88:	e03a      	b.n	8006b00 <_printf_i+0xa8>
 8006a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a8e:	2b15      	cmp	r3, #21
 8006a90:	d8f6      	bhi.n	8006a80 <_printf_i+0x28>
 8006a92:	a101      	add	r1, pc, #4	@ (adr r1, 8006a98 <_printf_i+0x40>)
 8006a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a98:	08006af1 	.word	0x08006af1
 8006a9c:	08006b05 	.word	0x08006b05
 8006aa0:	08006a81 	.word	0x08006a81
 8006aa4:	08006a81 	.word	0x08006a81
 8006aa8:	08006a81 	.word	0x08006a81
 8006aac:	08006a81 	.word	0x08006a81
 8006ab0:	08006b05 	.word	0x08006b05
 8006ab4:	08006a81 	.word	0x08006a81
 8006ab8:	08006a81 	.word	0x08006a81
 8006abc:	08006a81 	.word	0x08006a81
 8006ac0:	08006a81 	.word	0x08006a81
 8006ac4:	08006c03 	.word	0x08006c03
 8006ac8:	08006b2f 	.word	0x08006b2f
 8006acc:	08006bbd 	.word	0x08006bbd
 8006ad0:	08006a81 	.word	0x08006a81
 8006ad4:	08006a81 	.word	0x08006a81
 8006ad8:	08006c25 	.word	0x08006c25
 8006adc:	08006a81 	.word	0x08006a81
 8006ae0:	08006b2f 	.word	0x08006b2f
 8006ae4:	08006a81 	.word	0x08006a81
 8006ae8:	08006a81 	.word	0x08006a81
 8006aec:	08006bc5 	.word	0x08006bc5
 8006af0:	6833      	ldr	r3, [r6, #0]
 8006af2:	1d1a      	adds	r2, r3, #4
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6032      	str	r2, [r6, #0]
 8006af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b00:	2301      	movs	r3, #1
 8006b02:	e09c      	b.n	8006c3e <_printf_i+0x1e6>
 8006b04:	6833      	ldr	r3, [r6, #0]
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	1d19      	adds	r1, r3, #4
 8006b0a:	6031      	str	r1, [r6, #0]
 8006b0c:	0606      	lsls	r6, r0, #24
 8006b0e:	d501      	bpl.n	8006b14 <_printf_i+0xbc>
 8006b10:	681d      	ldr	r5, [r3, #0]
 8006b12:	e003      	b.n	8006b1c <_printf_i+0xc4>
 8006b14:	0645      	lsls	r5, r0, #25
 8006b16:	d5fb      	bpl.n	8006b10 <_printf_i+0xb8>
 8006b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	da03      	bge.n	8006b28 <_printf_i+0xd0>
 8006b20:	232d      	movs	r3, #45	@ 0x2d
 8006b22:	426d      	negs	r5, r5
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b28:	230a      	movs	r3, #10
 8006b2a:	4858      	ldr	r0, [pc, #352]	@ (8006c8c <_printf_i+0x234>)
 8006b2c:	e011      	b.n	8006b52 <_printf_i+0xfa>
 8006b2e:	6821      	ldr	r1, [r4, #0]
 8006b30:	6833      	ldr	r3, [r6, #0]
 8006b32:	0608      	lsls	r0, r1, #24
 8006b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b38:	d402      	bmi.n	8006b40 <_printf_i+0xe8>
 8006b3a:	0649      	lsls	r1, r1, #25
 8006b3c:	bf48      	it	mi
 8006b3e:	b2ad      	uxthmi	r5, r5
 8006b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b42:	6033      	str	r3, [r6, #0]
 8006b44:	bf14      	ite	ne
 8006b46:	230a      	movne	r3, #10
 8006b48:	2308      	moveq	r3, #8
 8006b4a:	4850      	ldr	r0, [pc, #320]	@ (8006c8c <_printf_i+0x234>)
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b52:	6866      	ldr	r6, [r4, #4]
 8006b54:	2e00      	cmp	r6, #0
 8006b56:	60a6      	str	r6, [r4, #8]
 8006b58:	db05      	blt.n	8006b66 <_printf_i+0x10e>
 8006b5a:	6821      	ldr	r1, [r4, #0]
 8006b5c:	432e      	orrs	r6, r5
 8006b5e:	f021 0104 	bic.w	r1, r1, #4
 8006b62:	6021      	str	r1, [r4, #0]
 8006b64:	d04b      	beq.n	8006bfe <_printf_i+0x1a6>
 8006b66:	4616      	mov	r6, r2
 8006b68:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b6c:	fb03 5711 	mls	r7, r3, r1, r5
 8006b70:	5dc7      	ldrb	r7, [r0, r7]
 8006b72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b76:	462f      	mov	r7, r5
 8006b78:	42bb      	cmp	r3, r7
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	d9f4      	bls.n	8006b68 <_printf_i+0x110>
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d10b      	bne.n	8006b9a <_printf_i+0x142>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	07df      	lsls	r7, r3, #31
 8006b86:	d508      	bpl.n	8006b9a <_printf_i+0x142>
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	6861      	ldr	r1, [r4, #4]
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	bfde      	ittt	le
 8006b90:	2330      	movle	r3, #48	@ 0x30
 8006b92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b9a:	1b92      	subs	r2, r2, r6
 8006b9c:	6122      	str	r2, [r4, #16]
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	f8cd a000 	str.w	sl, [sp]
 8006ba8:	aa03      	add	r2, sp, #12
 8006baa:	f7ff fee3 	bl	8006974 <_printf_common>
 8006bae:	3001      	adds	r0, #1
 8006bb0:	d14a      	bne.n	8006c48 <_printf_i+0x1f0>
 8006bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb6:	b004      	add	sp, #16
 8006bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	f043 0320 	orr.w	r3, r3, #32
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	2778      	movs	r7, #120	@ 0x78
 8006bc6:	4832      	ldr	r0, [pc, #200]	@ (8006c90 <_printf_i+0x238>)
 8006bc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	6831      	ldr	r1, [r6, #0]
 8006bd0:	061f      	lsls	r7, r3, #24
 8006bd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bd6:	d402      	bmi.n	8006bde <_printf_i+0x186>
 8006bd8:	065f      	lsls	r7, r3, #25
 8006bda:	bf48      	it	mi
 8006bdc:	b2ad      	uxthmi	r5, r5
 8006bde:	6031      	str	r1, [r6, #0]
 8006be0:	07d9      	lsls	r1, r3, #31
 8006be2:	bf44      	itt	mi
 8006be4:	f043 0320 	orrmi.w	r3, r3, #32
 8006be8:	6023      	strmi	r3, [r4, #0]
 8006bea:	b11d      	cbz	r5, 8006bf4 <_printf_i+0x19c>
 8006bec:	2310      	movs	r3, #16
 8006bee:	e7ad      	b.n	8006b4c <_printf_i+0xf4>
 8006bf0:	4826      	ldr	r0, [pc, #152]	@ (8006c8c <_printf_i+0x234>)
 8006bf2:	e7e9      	b.n	8006bc8 <_printf_i+0x170>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	f023 0320 	bic.w	r3, r3, #32
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	e7f6      	b.n	8006bec <_printf_i+0x194>
 8006bfe:	4616      	mov	r6, r2
 8006c00:	e7bd      	b.n	8006b7e <_printf_i+0x126>
 8006c02:	6833      	ldr	r3, [r6, #0]
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1d18      	adds	r0, r3, #4
 8006c08:	6961      	ldr	r1, [r4, #20]
 8006c0a:	6030      	str	r0, [r6, #0]
 8006c0c:	062e      	lsls	r6, r5, #24
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	d501      	bpl.n	8006c16 <_printf_i+0x1be>
 8006c12:	6019      	str	r1, [r3, #0]
 8006c14:	e002      	b.n	8006c1c <_printf_i+0x1c4>
 8006c16:	0668      	lsls	r0, r5, #25
 8006c18:	d5fb      	bpl.n	8006c12 <_printf_i+0x1ba>
 8006c1a:	8019      	strh	r1, [r3, #0]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4616      	mov	r6, r2
 8006c20:	6123      	str	r3, [r4, #16]
 8006c22:	e7bc      	b.n	8006b9e <_printf_i+0x146>
 8006c24:	6833      	ldr	r3, [r6, #0]
 8006c26:	2100      	movs	r1, #0
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	6032      	str	r2, [r6, #0]
 8006c2c:	681e      	ldr	r6, [r3, #0]
 8006c2e:	6862      	ldr	r2, [r4, #4]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f985 	bl	8006f40 <memchr>
 8006c36:	b108      	cbz	r0, 8006c3c <_printf_i+0x1e4>
 8006c38:	1b80      	subs	r0, r0, r6
 8006c3a:	6060      	str	r0, [r4, #4]
 8006c3c:	6863      	ldr	r3, [r4, #4]
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	2300      	movs	r3, #0
 8006c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c46:	e7aa      	b.n	8006b9e <_printf_i+0x146>
 8006c48:	4632      	mov	r2, r6
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	47d0      	blx	sl
 8006c52:	3001      	adds	r0, #1
 8006c54:	d0ad      	beq.n	8006bb2 <_printf_i+0x15a>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	079b      	lsls	r3, r3, #30
 8006c5a:	d413      	bmi.n	8006c84 <_printf_i+0x22c>
 8006c5c:	68e0      	ldr	r0, [r4, #12]
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	4298      	cmp	r0, r3
 8006c62:	bfb8      	it	lt
 8006c64:	4618      	movlt	r0, r3
 8006c66:	e7a6      	b.n	8006bb6 <_printf_i+0x15e>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	4640      	mov	r0, r8
 8006c70:	47d0      	blx	sl
 8006c72:	3001      	adds	r0, #1
 8006c74:	d09d      	beq.n	8006bb2 <_printf_i+0x15a>
 8006c76:	3501      	adds	r5, #1
 8006c78:	68e3      	ldr	r3, [r4, #12]
 8006c7a:	9903      	ldr	r1, [sp, #12]
 8006c7c:	1a5b      	subs	r3, r3, r1
 8006c7e:	42ab      	cmp	r3, r5
 8006c80:	dcf2      	bgt.n	8006c68 <_printf_i+0x210>
 8006c82:	e7eb      	b.n	8006c5c <_printf_i+0x204>
 8006c84:	2500      	movs	r5, #0
 8006c86:	f104 0619 	add.w	r6, r4, #25
 8006c8a:	e7f5      	b.n	8006c78 <_printf_i+0x220>
 8006c8c:	080082f3 	.word	0x080082f3
 8006c90:	08008304 	.word	0x08008304

08006c94 <__sflush_r>:
 8006c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	0716      	lsls	r6, r2, #28
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	d454      	bmi.n	8006d4c <__sflush_r+0xb8>
 8006ca2:	684b      	ldr	r3, [r1, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dc02      	bgt.n	8006cae <__sflush_r+0x1a>
 8006ca8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dd48      	ble.n	8006d40 <__sflush_r+0xac>
 8006cae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	d045      	beq.n	8006d40 <__sflush_r+0xac>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cba:	682f      	ldr	r7, [r5, #0]
 8006cbc:	6a21      	ldr	r1, [r4, #32]
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	d030      	beq.n	8006d24 <__sflush_r+0x90>
 8006cc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	0759      	lsls	r1, r3, #29
 8006cc8:	d505      	bpl.n	8006cd6 <__sflush_r+0x42>
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cd0:	b10b      	cbz	r3, 8006cd6 <__sflush_r+0x42>
 8006cd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4628      	mov	r0, r5
 8006cda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cdc:	6a21      	ldr	r1, [r4, #32]
 8006cde:	47b0      	blx	r6
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	d106      	bne.n	8006cf4 <__sflush_r+0x60>
 8006ce6:	6829      	ldr	r1, [r5, #0]
 8006ce8:	291d      	cmp	r1, #29
 8006cea:	d82b      	bhi.n	8006d44 <__sflush_r+0xb0>
 8006cec:	4a28      	ldr	r2, [pc, #160]	@ (8006d90 <__sflush_r+0xfc>)
 8006cee:	40ca      	lsrs	r2, r1
 8006cf0:	07d6      	lsls	r6, r2, #31
 8006cf2:	d527      	bpl.n	8006d44 <__sflush_r+0xb0>
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6062      	str	r2, [r4, #4]
 8006cf8:	6922      	ldr	r2, [r4, #16]
 8006cfa:	04d9      	lsls	r1, r3, #19
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	d504      	bpl.n	8006d0a <__sflush_r+0x76>
 8006d00:	1c42      	adds	r2, r0, #1
 8006d02:	d101      	bne.n	8006d08 <__sflush_r+0x74>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b903      	cbnz	r3, 8006d0a <__sflush_r+0x76>
 8006d08:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d0c:	602f      	str	r7, [r5, #0]
 8006d0e:	b1b9      	cbz	r1, 8006d40 <__sflush_r+0xac>
 8006d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d14:	4299      	cmp	r1, r3
 8006d16:	d002      	beq.n	8006d1e <__sflush_r+0x8a>
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f7ff fa9d 	bl	8006258 <_free_r>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d22:	e00d      	b.n	8006d40 <__sflush_r+0xac>
 8006d24:	2301      	movs	r3, #1
 8006d26:	4628      	mov	r0, r5
 8006d28:	47b0      	blx	r6
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	1c50      	adds	r0, r2, #1
 8006d2e:	d1c9      	bne.n	8006cc4 <__sflush_r+0x30>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0c6      	beq.n	8006cc4 <__sflush_r+0x30>
 8006d36:	2b1d      	cmp	r3, #29
 8006d38:	d001      	beq.n	8006d3e <__sflush_r+0xaa>
 8006d3a:	2b16      	cmp	r3, #22
 8006d3c:	d11d      	bne.n	8006d7a <__sflush_r+0xe6>
 8006d3e:	602f      	str	r7, [r5, #0]
 8006d40:	2000      	movs	r0, #0
 8006d42:	e021      	b.n	8006d88 <__sflush_r+0xf4>
 8006d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	e01a      	b.n	8006d82 <__sflush_r+0xee>
 8006d4c:	690f      	ldr	r7, [r1, #16]
 8006d4e:	2f00      	cmp	r7, #0
 8006d50:	d0f6      	beq.n	8006d40 <__sflush_r+0xac>
 8006d52:	0793      	lsls	r3, r2, #30
 8006d54:	bf18      	it	ne
 8006d56:	2300      	movne	r3, #0
 8006d58:	680e      	ldr	r6, [r1, #0]
 8006d5a:	bf08      	it	eq
 8006d5c:	694b      	ldreq	r3, [r1, #20]
 8006d5e:	1bf6      	subs	r6, r6, r7
 8006d60:	600f      	str	r7, [r1, #0]
 8006d62:	608b      	str	r3, [r1, #8]
 8006d64:	2e00      	cmp	r6, #0
 8006d66:	ddeb      	ble.n	8006d40 <__sflush_r+0xac>
 8006d68:	4633      	mov	r3, r6
 8006d6a:	463a      	mov	r2, r7
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	6a21      	ldr	r1, [r4, #32]
 8006d70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d74:	47e0      	blx	ip
 8006d76:	2800      	cmp	r0, #0
 8006d78:	dc07      	bgt.n	8006d8a <__sflush_r+0xf6>
 8006d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d82:	f04f 30ff 	mov.w	r0, #4294967295
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d8a:	4407      	add	r7, r0
 8006d8c:	1a36      	subs	r6, r6, r0
 8006d8e:	e7e9      	b.n	8006d64 <__sflush_r+0xd0>
 8006d90:	20400001 	.word	0x20400001

08006d94 <_fflush_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	690b      	ldr	r3, [r1, #16]
 8006d98:	4605      	mov	r5, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	b913      	cbnz	r3, 8006da4 <_fflush_r+0x10>
 8006d9e:	2500      	movs	r5, #0
 8006da0:	4628      	mov	r0, r5
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	b118      	cbz	r0, 8006dae <_fflush_r+0x1a>
 8006da6:	6a03      	ldr	r3, [r0, #32]
 8006da8:	b90b      	cbnz	r3, 8006dae <_fflush_r+0x1a>
 8006daa:	f7ff f82b 	bl	8005e04 <__sinit>
 8006dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f3      	beq.n	8006d9e <_fflush_r+0xa>
 8006db6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006db8:	07d0      	lsls	r0, r2, #31
 8006dba:	d404      	bmi.n	8006dc6 <_fflush_r+0x32>
 8006dbc:	0599      	lsls	r1, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_fflush_r+0x32>
 8006dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dc2:	f7ff fa38 	bl	8006236 <__retarget_lock_acquire_recursive>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	4621      	mov	r1, r4
 8006dca:	f7ff ff63 	bl	8006c94 <__sflush_r>
 8006dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	07da      	lsls	r2, r3, #31
 8006dd4:	d4e4      	bmi.n	8006da0 <_fflush_r+0xc>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	059b      	lsls	r3, r3, #22
 8006dda:	d4e1      	bmi.n	8006da0 <_fflush_r+0xc>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dde:	f7ff fa2b 	bl	8006238 <__retarget_lock_release_recursive>
 8006de2:	e7dd      	b.n	8006da0 <_fflush_r+0xc>

08006de4 <__swhatbuf_r>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	460c      	mov	r4, r1
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	4615      	mov	r5, r2
 8006dee:	2900      	cmp	r1, #0
 8006df0:	461e      	mov	r6, r3
 8006df2:	b096      	sub	sp, #88	@ 0x58
 8006df4:	da0c      	bge.n	8006e10 <__swhatbuf_r+0x2c>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006dfe:	bf14      	ite	ne
 8006e00:	2340      	movne	r3, #64	@ 0x40
 8006e02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e06:	2000      	movs	r0, #0
 8006e08:	6031      	str	r1, [r6, #0]
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	b016      	add	sp, #88	@ 0x58
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	466a      	mov	r2, sp
 8006e12:	f000 f863 	bl	8006edc <_fstat_r>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	dbed      	blt.n	8006df6 <__swhatbuf_r+0x12>
 8006e1a:	9901      	ldr	r1, [sp, #4]
 8006e1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e24:	4259      	negs	r1, r3
 8006e26:	4159      	adcs	r1, r3
 8006e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e2c:	e7eb      	b.n	8006e06 <__swhatbuf_r+0x22>

08006e2e <__smakebuf_r>:
 8006e2e:	898b      	ldrh	r3, [r1, #12]
 8006e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e32:	079d      	lsls	r5, r3, #30
 8006e34:	4606      	mov	r6, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	d507      	bpl.n	8006e4a <__smakebuf_r+0x1c>
 8006e3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	6123      	str	r3, [r4, #16]
 8006e42:	2301      	movs	r3, #1
 8006e44:	6163      	str	r3, [r4, #20]
 8006e46:	b003      	add	sp, #12
 8006e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4a:	466a      	mov	r2, sp
 8006e4c:	ab01      	add	r3, sp, #4
 8006e4e:	f7ff ffc9 	bl	8006de4 <__swhatbuf_r>
 8006e52:	9f00      	ldr	r7, [sp, #0]
 8006e54:	4605      	mov	r5, r0
 8006e56:	4639      	mov	r1, r7
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff fa67 	bl	800632c <_malloc_r>
 8006e5e:	b948      	cbnz	r0, 8006e74 <__smakebuf_r+0x46>
 8006e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e64:	059a      	lsls	r2, r3, #22
 8006e66:	d4ee      	bmi.n	8006e46 <__smakebuf_r+0x18>
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	f043 0302 	orr.w	r3, r3, #2
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	e7e2      	b.n	8006e3a <__smakebuf_r+0xc>
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	6020      	str	r0, [r4, #0]
 8006e84:	b15b      	cbz	r3, 8006e9e <__smakebuf_r+0x70>
 8006e86:	4630      	mov	r0, r6
 8006e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8c:	f000 f838 	bl	8006f00 <_isatty_r>
 8006e90:	b128      	cbz	r0, 8006e9e <__smakebuf_r+0x70>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f023 0303 	bic.w	r3, r3, #3
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	431d      	orrs	r5, r3
 8006ea2:	81a5      	strh	r5, [r4, #12]
 8006ea4:	e7cf      	b.n	8006e46 <__smakebuf_r+0x18>

08006ea6 <memmove>:
 8006ea6:	4288      	cmp	r0, r1
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	eb01 0402 	add.w	r4, r1, r2
 8006eae:	d902      	bls.n	8006eb6 <memmove+0x10>
 8006eb0:	4284      	cmp	r4, r0
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	d807      	bhi.n	8006ec6 <memmove+0x20>
 8006eb6:	1e43      	subs	r3, r0, #1
 8006eb8:	42a1      	cmp	r1, r4
 8006eba:	d008      	beq.n	8006ece <memmove+0x28>
 8006ebc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ec0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ec4:	e7f8      	b.n	8006eb8 <memmove+0x12>
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	4402      	add	r2, r0
 8006eca:	428a      	cmp	r2, r1
 8006ecc:	d100      	bne.n	8006ed0 <memmove+0x2a>
 8006ece:	bd10      	pop	{r4, pc}
 8006ed0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ed4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed8:	e7f7      	b.n	8006eca <memmove+0x24>
	...

08006edc <_fstat_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4d06      	ldr	r5, [pc, #24]	@ (8006efc <_fstat_r+0x20>)
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	f7fc f958 	bl	800319e <_fstat>
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	d102      	bne.n	8006ef8 <_fstat_r+0x1c>
 8006ef2:	682b      	ldr	r3, [r5, #0]
 8006ef4:	b103      	cbz	r3, 8006ef8 <_fstat_r+0x1c>
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
 8006efa:	bf00      	nop
 8006efc:	200009b4 	.word	0x200009b4

08006f00 <_isatty_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	2300      	movs	r3, #0
 8006f04:	4d05      	ldr	r5, [pc, #20]	@ (8006f1c <_isatty_r+0x1c>)
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	f7fc f956 	bl	80031bc <_isatty>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_isatty_r+0x1a>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_isatty_r+0x1a>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	200009b4 	.word	0x200009b4

08006f20 <_sbrk_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	2300      	movs	r3, #0
 8006f24:	4d05      	ldr	r5, [pc, #20]	@ (8006f3c <_sbrk_r+0x1c>)
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	f7fc f95c 	bl	80031e8 <_sbrk>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_sbrk_r+0x1a>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_sbrk_r+0x1a>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	200009b4 	.word	0x200009b4

08006f40 <memchr>:
 8006f40:	4603      	mov	r3, r0
 8006f42:	b510      	push	{r4, lr}
 8006f44:	b2c9      	uxtb	r1, r1
 8006f46:	4402      	add	r2, r0
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	d101      	bne.n	8006f52 <memchr+0x12>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e003      	b.n	8006f5a <memchr+0x1a>
 8006f52:	7804      	ldrb	r4, [r0, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	428c      	cmp	r4, r1
 8006f58:	d1f6      	bne.n	8006f48 <memchr+0x8>
 8006f5a:	bd10      	pop	{r4, pc}

08006f5c <_realloc_r>:
 8006f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	4607      	mov	r7, r0
 8006f62:	4614      	mov	r4, r2
 8006f64:	460d      	mov	r5, r1
 8006f66:	b921      	cbnz	r1, 8006f72 <_realloc_r+0x16>
 8006f68:	4611      	mov	r1, r2
 8006f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6e:	f7ff b9dd 	b.w	800632c <_malloc_r>
 8006f72:	b92a      	cbnz	r2, 8006f80 <_realloc_r+0x24>
 8006f74:	f7ff f970 	bl	8006258 <_free_r>
 8006f78:	4625      	mov	r5, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f80:	f000 f81a 	bl	8006fb8 <_malloc_usable_size_r>
 8006f84:	4284      	cmp	r4, r0
 8006f86:	4606      	mov	r6, r0
 8006f88:	d802      	bhi.n	8006f90 <_realloc_r+0x34>
 8006f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f8e:	d8f4      	bhi.n	8006f7a <_realloc_r+0x1e>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4638      	mov	r0, r7
 8006f94:	f7ff f9ca 	bl	800632c <_malloc_r>
 8006f98:	4680      	mov	r8, r0
 8006f9a:	b908      	cbnz	r0, 8006fa0 <_realloc_r+0x44>
 8006f9c:	4645      	mov	r5, r8
 8006f9e:	e7ec      	b.n	8006f7a <_realloc_r+0x1e>
 8006fa0:	42b4      	cmp	r4, r6
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	bf28      	it	cs
 8006fa8:	4632      	movcs	r2, r6
 8006faa:	f7ff f946 	bl	800623a <memcpy>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff f951 	bl	8006258 <_free_r>
 8006fb6:	e7f1      	b.n	8006f9c <_realloc_r+0x40>

08006fb8 <_malloc_usable_size_r>:
 8006fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fbc:	1f18      	subs	r0, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bfbc      	itt	lt
 8006fc2:	580b      	ldrlt	r3, [r1, r0]
 8006fc4:	18c0      	addlt	r0, r0, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_init>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr

08006fd4 <_fini>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr
