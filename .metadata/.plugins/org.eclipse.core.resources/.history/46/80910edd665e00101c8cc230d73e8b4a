#ifndef MOTOR_CONTROL_H
#define MOTOR_CONTROL_H

#include "stm32f4xx_hal.h"
#include "../CAN/can.h"
#include <stdbool.h>

// 电机结构体
typedef struct {
    uint16_t motor_can_id;          // 电机CAN ID
    int32_t current_position;       // 当前位置
    int32_t target_position;        // 目标位置
    bool is_moving;                 // 运动状态
    uint16_t speed;                 // 当前速度
    uint8_t status;                 // 电机状态
    uint32_t last_command_time;     // 上次发送命令时间
    uint32_t last_response_time;    // 上次收到响应时间
} Motor_t;

// 电机命令定义
#define MOTOR_CMD_MOVE_ABSOLUTE     0x01    // 绝对位置移动
#define MOTOR_CMD_MOVE_RELATIVE     0x02    // 相对位置移动
#define MOTOR_CMD_SET_SPEED         0x03    // 设置速度
#define MOTOR_CMD_STOP              0x04    // 停止
#define MOTOR_CMD_SET_ZERO          0x05    // 设置零点
#define MOTOR_CMD_READ_POSITION     0x06    // 读取位置
#define MOTOR_CMD_READ_STATUS       0x07    // 读取状态

// 电机状态定义
#define MOTOR_STATUS_IDLE           0x00    // 空闲
#define MOTOR_STATUS_RUNNING        0x01    // 运行中
#define MOTOR_STATUS_FAULT          0x02    // 故障
#define MOTOR_STATUS_TIMEOUT        0x03    // 通信超时

// 函数声明
void Motor_Init(Motor_t* motor, uint16_t motor_id);
uint8_t Motor_MoveTo(Motor_t* motor, int32_t position);
uint8_t Motor_MoveSteps(Motor_t* motor, int32_t steps);
uint8_t Motor_SetSpeed(Motor_t* motor, uint16_t speed);
uint8_t Motor_Stop(Motor_t* motor);
uint8_t Motor_SetZero(Motor_t* motor);
uint8_t Motor_ReadPosition(Motor_t* motor);
uint8_t Motor_ReadStatus(Motor_t* motor);

// CAN接收处理函数
void Motor_ProcessRxMessage(Motor_t* motor, uint16_t rx_id, uint8_t* data);

// 状态获取函数
int32_t Motor_GetPosition(Motor_t* motor);
int32_t Motor_GetTargetPosition(Motor_t* motor);
bool Motor_IsMoving(Motor_t* motor);
uint8_t Motor_GetStatus(Motor_t* motor);
bool Motor_IsConnected(Motor_t* motor);
uint16_t Motor_GetSpeed(Motor_t* motor);

// 电机任务处理（定期调用）
void Motor_Task(Motor_t* motor);

#endif /* MOTOR_CONTROL_H */
