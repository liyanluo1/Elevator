
zuoju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f80  08001f80  00002f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fac  08001fac  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001fac  08001fac  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001fac  08001fac  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fac  08001fac  00002fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fb0  08001fb0  00002fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001fb4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001fc0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001fc0  00003078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007544  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ac  00000000  00000000  0000a579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000533  00000000  00000000  0000c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171a8  00000000  00000000  0000cb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096a4  00000000  00000000  00023cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d15  00000000  00000000  0002d397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af0ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019bc  00000000  00000000  000af0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b0aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f68 	.word	0x08001f68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f68 	.word	0x08001f68

0800014c <LED_Init>:

// Define LED pin
#define LED_PORT GPIOA
#define LED_PIN GPIO_PIN_1  // LED -> PA1 (output)

void LED_Init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

    // Enable GPIOA clock (if not already)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b11      	ldr	r3, [pc, #68]	@ (80001a8 <LED_Init+0x5c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a10      	ldr	r2, [pc, #64]	@ (80001a8 <LED_Init+0x5c>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b0e      	ldr	r3, [pc, #56]	@ (80001a8 <LED_Init+0x5c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]

    // Output for LED, push-pull, initial low (off)
    GPIO_InitStruct.Pin = LED_PIN;
 8000178:	2302      	movs	r3, #2
 800017a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800017c:	2301      	movs	r3, #1
 800017e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000180:	2300      	movs	r3, #0
 8000182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000184:	2302      	movs	r3, #2
 8000186:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000188:	f107 0308 	add.w	r3, r7, #8
 800018c:	4619      	mov	r1, r3
 800018e:	4807      	ldr	r0, [pc, #28]	@ (80001ac <LED_Init+0x60>)
 8000190:	f000 fe48 	bl	8000e24 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);  // Off
 8000194:	2200      	movs	r2, #0
 8000196:	2102      	movs	r1, #2
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <LED_Init+0x60>)
 800019a:	f000 ffc7 	bl	800112c <HAL_GPIO_WritePin>
}
 800019e:	bf00      	nop
 80001a0:	3718      	adds	r7, #24
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000
 80001ac:	40010800 	.word	0x40010800

080001b0 <Keyboard_Init>:
#define COL4_PORT GPIOA
#define COL4_PIN GPIO_PIN_5   // c4 -> PA5 (output)
#define COL3_PORT GPIOA
#define COL3_PIN GPIO_PIN_12  // c3 -> PA12 (output)

void Keyboard_Init(void) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b6:	f107 0308 	add.w	r3, r7, #8
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

    // Enable GPIOA clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000234 <Keyboard_Init+0x84>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000234 <Keyboard_Init+0x84>)
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b18      	ldr	r3, [pc, #96]	@ (8000234 <Keyboard_Init+0x84>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0304 	and.w	r3, r3, #4
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]

    // Input rows with pull-up
    GPIO_InitStruct.Pin = ROW1_PIN | ROW2_PIN;
 80001dc:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 80001e0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	4619      	mov	r1, r3
 80001f0:	4811      	ldr	r0, [pc, #68]	@ (8000238 <Keyboard_Init+0x88>)
 80001f2:	f000 fe17 	bl	8000e24 <HAL_GPIO_Init>

    // Output columns, push-pull, initial high
    GPIO_InitStruct.Pin = COL4_PIN | COL3_PIN;
 80001f6:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80001fa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fc:	2301      	movs	r3, #1
 80001fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	2300      	movs	r3, #0
 8000202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000204:	2302      	movs	r3, #2
 8000206:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000208:	f107 0308 	add.w	r3, r7, #8
 800020c:	4619      	mov	r1, r3
 800020e:	480a      	ldr	r0, [pc, #40]	@ (8000238 <Keyboard_Init+0x88>)
 8000210:	f000 fe08 	bl	8000e24 <HAL_GPIO_Init>

    // Set columns high initially
    HAL_GPIO_WritePin(COL4_PORT, COL4_PIN, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2120      	movs	r1, #32
 8000218:	4807      	ldr	r0, [pc, #28]	@ (8000238 <Keyboard_Init+0x88>)
 800021a:	f000 ff87 	bl	800112c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL3_PORT, COL3_PIN, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <Keyboard_Init+0x88>)
 8000226:	f000 ff81 	bl	800112c <HAL_GPIO_WritePin>
}
 800022a:	bf00      	nop
 800022c:	3718      	adds	r7, #24
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800

0800023c <calculate_checksum>:
#include <string.h>  // 用于memcpy

static UART_HandleTypeDef *servo_uart;  // USART句柄

// 函数：计算校验和
static uint8_t calculate_checksum(uint8_t *packet, uint8_t len) {
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 800024c:	2302      	movs	r3, #2
 800024e:	73bb      	strb	r3, [r7, #14]
 8000250:	e009      	b.n	8000266 <calculate_checksum+0x2a>
        sum += packet[i];
 8000252:	7bbb      	ldrb	r3, [r7, #14]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781a      	ldrb	r2, [r3, #0]
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	4413      	add	r3, r2
 800025e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	3301      	adds	r3, #1
 8000264:	73bb      	strb	r3, [r7, #14]
 8000266:	7bba      	ldrb	r2, [r7, #14]
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	3b01      	subs	r3, #1
 800026c:	429a      	cmp	r2, r3
 800026e:	dbf0      	blt.n	8000252 <calculate_checksum+0x16>
    }
    return ~sum;
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	43db      	mvns	r3, r3
 8000274:	b2db      	uxtb	r3, r3
}
 8000276:	4618      	mov	r0, r3
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <send_packet>:

// 函数：发送包
static void send_packet(uint8_t *packet, uint8_t len) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(servo_uart, packet, len, HAL_MAX_DELAY);
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <send_packet+0x28>)
 800028e:	6818      	ldr	r0, [r3, #0]
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	b29a      	uxth	r2, r3
 8000294:	f04f 33ff 	mov.w	r3, #4294967295
 8000298:	6879      	ldr	r1, [r7, #4]
 800029a:	f001 fbbf 	bl	8001a1c <HAL_UART_Transmit>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028

080002ac <receive_packet>:

// 函数：接收包（简单阻塞式，假设响应快速；实际可加超时/DMA）
static uint8_t receive_packet(uint8_t *rx_packet, uint8_t expected_len) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Receive(servo_uart, rx_packet, expected_len, 100);  // 返回实际接收长度，超时100ms
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <receive_packet+0x28>)
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	b29a      	uxth	r2, r3
 80002c0:	2364      	movs	r3, #100	@ 0x64
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	f001 fc35 	bl	8001b32 <HAL_UART_Receive>
 80002c8:	4603      	mov	r3, r0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028

080002d8 <servo_init>:

// 初始化（默认波特率1M，无需设置寄存器0x06，因为初始值0=1M）
void servo_init(UART_HandleTypeDef *huart) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    servo_uart = huart;
 80002e0:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <servo_init+0x1c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6013      	str	r3, [r2, #0]
    // 可在此PING舵机确认连接
    servo_ping(SERVO_DEFAULT_ID);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 f806 	bl	80002f8 <servo_ping>
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000028 	.word	0x20000028

080002f8 <servo_ping>:

// PING
uint8_t servo_ping(uint8_t id) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
    uint8_t packet[6] = {0xFF, 0xFF, id, 0x02, SERVO_INST_PING, 0x00};
 8000302:	23ff      	movs	r3, #255	@ 0xff
 8000304:	743b      	strb	r3, [r7, #16]
 8000306:	23ff      	movs	r3, #255	@ 0xff
 8000308:	747b      	strb	r3, [r7, #17]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	74bb      	strb	r3, [r7, #18]
 800030e:	2302      	movs	r3, #2
 8000310:	74fb      	strb	r3, [r7, #19]
 8000312:	2301      	movs	r3, #1
 8000314:	753b      	strb	r3, [r7, #20]
 8000316:	2300      	movs	r3, #0
 8000318:	757b      	strb	r3, [r7, #21]
    packet[5] = calculate_checksum(packet, 6);
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2106      	movs	r1, #6
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff8b 	bl	800023c <calculate_checksum>
 8000326:	4603      	mov	r3, r0
 8000328:	757b      	strb	r3, [r7, #21]
    send_packet(packet, 6);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	2106      	movs	r1, #6
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ffa5 	bl	8000280 <send_packet>

    uint8_t rx_packet[6];
    if (receive_packet(rx_packet, 6) == 6 &&
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	2106      	movs	r1, #6
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ffb5 	bl	80002ac <receive_packet>
 8000342:	4603      	mov	r3, r0
 8000344:	2b06      	cmp	r3, #6
 8000346:	d111      	bne.n	800036c <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8000348:	7a3b      	ldrb	r3, [r7, #8]
    if (receive_packet(rx_packet, 6) == 6 &&
 800034a:	2bff      	cmp	r3, #255	@ 0xff
 800034c:	d10e      	bne.n	800036c <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 800034e:	7a7b      	ldrb	r3, [r7, #9]
 8000350:	2bff      	cmp	r3, #255	@ 0xff
 8000352:	d10b      	bne.n	800036c <servo_ping+0x74>
 8000354:	7abb      	ldrb	r3, [r7, #10]
 8000356:	79fa      	ldrb	r2, [r7, #7]
 8000358:	429a      	cmp	r2, r3
 800035a:	d107      	bne.n	800036c <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 800035c:	7afb      	ldrb	r3, [r7, #11]
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 8000362:	7b3b      	ldrb	r3, [r7, #12]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <servo_ping+0x74>
        return 1;  // 成功
 8000368:	2301      	movs	r3, #1
 800036a:	e000      	b.n	800036e <servo_ping+0x76>
    }
    return 0;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <servo_write_reg>:

// 写寄存器（低字节在前）
void servo_write_reg(uint8_t id, uint8_t reg_addr, uint8_t *data, uint8_t data_len) {
 8000376:	b590      	push	{r4, r7, lr}
 8000378:	b0c7      	sub	sp, #284	@ 0x11c
 800037a:	af00      	add	r7, sp, #0
 800037c:	4604      	mov	r4, r0
 800037e:	4608      	mov	r0, r1
 8000380:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000384:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8000388:	600a      	str	r2, [r1, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000390:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000394:	4622      	mov	r2, r4
 8000396:	701a      	strb	r2, [r3, #0]
 8000398:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800039c:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80003a0:	4602      	mov	r2, r0
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80003a8:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80003ac:	460a      	mov	r2, r1
 80003ae:	701a      	strb	r2, [r3, #0]
    uint8_t packet[256];
    uint8_t idx = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx++] = 0xFF;
 80003b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80003c0:	461a      	mov	r2, r3
 80003c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80003c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80003ca:	21ff      	movs	r1, #255	@ 0xff
 80003cc:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0xFF;
 80003ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80003d8:	461a      	mov	r2, r3
 80003da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80003de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80003e2:	21ff      	movs	r1, #255	@ 0xff
 80003e4:	5499      	strb	r1, [r3, r2]
    packet[idx++] = id;
 80003e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80003f0:	4619      	mov	r1, r3
 80003f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80003f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80003fa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80003fe:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	545a      	strb	r2, [r3, r1]
    packet[idx++] = data_len + 3;  // Length = Instr + Addr + Data
 8000406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8000410:	461a      	mov	r2, r3
 8000412:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000416:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3303      	adds	r3, #3
 800041e:	b2d9      	uxtb	r1, r3
 8000420:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000428:	5499      	strb	r1, [r3, r2]
    packet[idx++] = SERVO_INST_WRITE;
 800042a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800042e:	1c5a      	adds	r2, r3, #1
 8000430:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8000434:	461a      	mov	r2, r3
 8000436:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800043a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800043e:	2103      	movs	r1, #3
 8000440:	5499      	strb	r1, [r3, r2]
    packet[idx++] = reg_addr;
 8000442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800044c:	4619      	mov	r1, r3
 800044e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000456:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800045a:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 800045e:	7812      	ldrb	r2, [r2, #0]
 8000460:	545a      	strb	r2, [r3, r1]
    memcpy(&packet[idx], data, data_len);
 8000462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000466:	f107 0214 	add.w	r2, r7, #20
 800046a:	18d0      	adds	r0, r2, r3
 800046c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000470:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800047a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800047e:	6819      	ldr	r1, [r3, #0]
 8000480:	f001 fd64 	bl	8001f4c <memcpy>
    idx += data_len;
 8000484:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000488:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800048c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	4413      	add	r3, r2
 8000494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx] = calculate_checksum(packet, idx + 1);
 8000498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800049c:	3301      	adds	r3, #1
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	f897 4117 	ldrb.w	r4, [r7, #279]	@ 0x117
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4611      	mov	r1, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fec6 	bl	800023c <calculate_checksum>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461a      	mov	r2, r3
 80004b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004bc:	551a      	strb	r2, [r3, r4]
    send_packet(packet, idx + 1);
 80004be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80004c2:	3301      	adds	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fed7 	bl	8000280 <send_packet>

    // 忽略响应（若非广播），实际可检查
    if (id != SERVO_BROADCAST_ID) {
 80004d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004d6:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80004de:	d005      	beq.n	80004ec <servo_write_reg+0x176>
        uint8_t rx_packet[6];
        receive_packet(rx_packet, 6);  // 预期响应Length=2, Error+Checksum
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2106      	movs	r1, #6
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff fee0 	bl	80002ac <receive_packet>
    }
}
 80004ec:	bf00      	nop
 80004ee:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd90      	pop	{r4, r7, pc}

080004f6 <servo_read_reg>:

// 读寄存器
uint8_t servo_read_reg(uint8_t id, uint8_t reg_addr, uint8_t data_len, uint8_t *rx_data) {
 80004f6:	b590      	push	{r4, r7, lr}
 80004f8:	b0c5      	sub	sp, #276	@ 0x114
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	4604      	mov	r4, r0
 80004fe:	4608      	mov	r0, r1
 8000500:	4611      	mov	r1, r2
 8000502:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000506:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000510:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000514:	4622      	mov	r2, r4
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800051c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000520:	4602      	mov	r2, r0
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000528:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 800052c:	460a      	mov	r2, r1
 800052e:	701a      	strb	r2, [r3, #0]
    uint8_t packet[7] = {0xFF, 0xFF, id, 0x04, SERVO_INST_READ, reg_addr, data_len};
 8000530:	23ff      	movs	r3, #255	@ 0xff
 8000532:	f887 3108 	strb.w	r3, [r7, #264]	@ 0x108
 8000536:	23ff      	movs	r3, #255	@ 0xff
 8000538:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
 800053c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000540:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 800054a:	2304      	movs	r3, #4
 800054c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8000550:	2302      	movs	r3, #2
 8000552:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8000556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800055a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8000564:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000568:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    packet[6] = calculate_checksum(packet, 7);
 8000572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000576:	2107      	movs	r1, #7
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fe5f 	bl	800023c <calculate_checksum>
 800057e:	4603      	mov	r3, r0
 8000580:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    send_packet(packet, 7);
 8000584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000588:	2107      	movs	r1, #7
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe78 	bl	8000280 <send_packet>

    uint8_t expected_len = data_len + 5;  // FF FF ID Len Error Params... Checksum
 8000590:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000594:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	3305      	adds	r3, #5
 800059c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t rx_packet[256];
    if (receive_packet(rx_packet, expected_len) == expected_len &&
 80005a0:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe7e 	bl	80002ac <receive_packet>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d13f      	bne.n	800063c <servo_read_reg+0x146>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80005bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005c4:	781b      	ldrb	r3, [r3, #0]
    if (receive_packet(rx_packet, expected_len) == expected_len &&
 80005c6:	2bff      	cmp	r3, #255	@ 0xff
 80005c8:	d138      	bne.n	800063c <servo_read_reg+0x146>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80005ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	2bff      	cmp	r3, #255	@ 0xff
 80005d6:	d131      	bne.n	800063c <servo_read_reg+0x146>
 80005d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005e6:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80005ea:	7812      	ldrb	r2, [r2, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d125      	bne.n	800063c <servo_read_reg+0x146>
        rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 80005f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	461a      	mov	r2, r3
 80005fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000600:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	3302      	adds	r3, #2
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8000608:	429a      	cmp	r2, r3
 800060a:	d117      	bne.n	800063c <servo_read_reg+0x146>
        rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 800060c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d110      	bne.n	800063c <servo_read_reg+0x146>
        memcpy(rx_data, &rx_packet[5], data_len);
 800061a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800061e:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	1d59      	adds	r1, r3, #5
 800062a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800062e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	f001 fc8a 	bl	8001f4c <memcpy>
        return 1;  // 成功
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <servo_read_reg+0x148>
    }
    return 0;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <servo_set_torque_enable>:

// 扭矩开关
void servo_set_torque_enable(uint8_t id, uint8_t enable) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
    uint8_t data = enable;
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	73fb      	strb	r3, [r7, #15]
    servo_write_reg(id, SERVO_REG_TORQUE_ENABLE, &data, 1);
 800065c:	f107 020f 	add.w	r2, r7, #15
 8000660:	79f8      	ldrb	r0, [r7, #7]
 8000662:	2301      	movs	r3, #1
 8000664:	2128      	movs	r1, #40	@ 0x28
 8000666:	f7ff fe86 	bl	8000376 <servo_write_reg>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <servo_set_speed>:

// 设置速度 (2字节，低在前)
void servo_set_speed(uint8_t id, int16_t speed) {
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	460a      	mov	r2, r1
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	4613      	mov	r3, r2
 8000680:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = speed & 0xFF;  // 低
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	733b      	strb	r3, [r7, #12]
    data[1] = (speed >> 8) & 0xFF;  // 高
 8000688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800068c:	121b      	asrs	r3, r3, #8
 800068e:	b21b      	sxth	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_SPEED, data, 2);
 8000694:	f107 020c 	add.w	r2, r7, #12
 8000698:	79f8      	ldrb	r0, [r7, #7]
 800069a:	2302      	movs	r3, #2
 800069c:	212e      	movs	r1, #46	@ 0x2e
 800069e:	f7ff fe6a 	bl	8000376 <servo_write_reg>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <servo_set_position>:

// 设置位置 (2字节，低在前)
void servo_set_position(uint8_t id, int16_t position) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	460a      	mov	r2, r1
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = position & 0xFF;
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	733b      	strb	r3, [r7, #12]
    data[1] = (position >> 8) & 0xFF;
 80006c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c4:	121b      	asrs	r3, r3, #8
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_TARGET_POS, data, 2);
 80006cc:	f107 020c 	add.w	r2, r7, #12
 80006d0:	79f8      	ldrb	r0, [r7, #7]
 80006d2:	2302      	movs	r3, #2
 80006d4:	212a      	movs	r1, #42	@ 0x2a
 80006d6:	f7ff fe4e 	bl	8000376 <servo_write_reg>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <servo_get_position>:

// 获取当前位置
uint16_t servo_get_position(uint8_t id) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data[2];
    if (servo_read_reg(id, SERVO_REG_CURR_POS, 2, rx_data)) {
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	79f8      	ldrb	r0, [r7, #7]
 80006f2:	2202      	movs	r2, #2
 80006f4:	2138      	movs	r1, #56	@ 0x38
 80006f6:	f7ff fefe 	bl	80004f6 <servo_read_reg>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <servo_get_position+0x32>
        return (rx_data[1] << 8) | rx_data[0];  // 高<<8 | 低
 8000700:	7b7b      	ldrb	r3, [r7, #13]
 8000702:	b21b      	sxth	r3, r3
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	b21a      	sxth	r2, r3
 8000708:	7b3b      	ldrb	r3, [r7, #12]
 800070a:	b21b      	sxth	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	e000      	b.n	8000716 <servo_get_position+0x34>
    }
    return 0;  // 错误返回0
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <servo_is_moving>:

// 检查是否移动
uint8_t servo_is_moving(uint8_t id) {
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    if (servo_read_reg(id, SERVO_REG_MOVING, 1, &rx_data)) {
 8000728:	f107 030f 	add.w	r3, r7, #15
 800072c:	79f8      	ldrb	r0, [r7, #7]
 800072e:	2201      	movs	r2, #1
 8000730:	2142      	movs	r1, #66	@ 0x42
 8000732:	f7ff fee0 	bl	80004f6 <servo_read_reg>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <servo_is_moving+0x22>
        return rx_data;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	e000      	b.n	8000742 <servo_is_moving+0x24>
    }
    return 0;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <servo_demo_max_speed_360>:

// Demo: 最大速度转360度 (正向最大速度转4096步，假设位置模式)
void servo_demo_max_speed_360(uint8_t id) {
 800074a:	b580      	push	{r7, lr}
 800074c:	b084      	sub	sp, #16
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
    servo_set_torque_enable(id, 1);  // 开启扭矩
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2101      	movs	r1, #1
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff75 	bl	8000648 <servo_set_torque_enable>

    // 设置最大速度 (32767 正向)
    servo_set_speed(id, 32767);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff84 	bl	8000672 <servo_set_speed>

    // 获取当前位置，然后加4096步 (360度=4096步)
    int16_t curr_pos = (int16_t)servo_get_position(id);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffb8 	bl	80006e2 <servo_get_position>
 8000772:	4603      	mov	r3, r0
 8000774:	81fb      	strh	r3, [r7, #14]
    int16_t target_pos = curr_pos + 4096;
 8000776:	89fb      	ldrh	r3, [r7, #14]
 8000778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800077c:	b29b      	uxth	r3, r3
 800077e:	81bb      	strh	r3, [r7, #12]

    servo_set_position(id, target_pos);
 8000780:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff8e 	bl	80006aa <servo_set_position>

    // 等待移动完成 (轮询)
    while (servo_is_moving(id)) {
 800078e:	e002      	b.n	8000796 <servo_demo_max_speed_360+0x4c>
        HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fa3f 	bl	8000c14 <HAL_Delay>
    while (servo_is_moving(id)) {
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffc0 	bl	800071e <servo_is_moving>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f5      	bne.n	8000790 <servo_demo_max_speed_360+0x46>
    }
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c4:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0320 	and.w	r3, r3, #32
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a20      	ldr	r2, [pc, #128]	@ (800087c <MX_GPIO_Init+0xcc>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_GPIO_Init+0xcc>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2102      	movs	r1, #2
 8000810:	481b      	ldr	r0, [pc, #108]	@ (8000880 <MX_GPIO_Init+0xd0>)
 8000812:	f000 fc8b 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800081c:	4818      	ldr	r0, [pc, #96]	@ (8000880 <MX_GPIO_Init+0xd0>)
 800081e:	f000 fc85 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_12;
 8000822:	f241 0322 	movw	r3, #4130	@ 0x1022
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	@ (8000880 <MX_GPIO_Init+0xd0>)
 800083c:	f000 faf2 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000840:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	480a      	ldr	r0, [pc, #40]	@ (8000880 <MX_GPIO_Init+0xd0>)
 8000856:	f000 fae5 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085a:	2301      	movs	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2302      	movs	r3, #2
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_GPIO_Init+0xd4>)
 800086e:	f000 fad9 	bl	8000e24 <HAL_GPIO_Init>

}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000
 8000880:	40010800 	.word	0x40010800
 8000884:	40010c00 	.word	0x40010c00

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 f960 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f812 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f7ff ff8c 	bl	80007b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000898:	f000 f8be 	bl	8000a18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 800089c:	f7ff fc88 	bl	80001b0 <Keyboard_Init>
      LED_Init();
 80008a0:	f7ff fc54 	bl	800014c <LED_Init>
      servo_init(&huart3);  // 初始化舵机驱动
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <main+0x2c>)
 80008a6:	f7ff fd17 	bl	80002d8 <servo_init>
        servo_demo_max_speed_360(SERVO_DEFAULT_ID);  // 执行Demo: 最大速度转360度
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff ff4d 	bl	800074a <servo_demo_max_speed_360>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <main+0x28>
 80008b4:	2000002c 	.word	0x2000002c

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b090      	sub	sp, #64	@ 0x40
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2228      	movs	r2, #40	@ 0x28
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fb14 	bl	8001ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fc2b 	bl	800115c <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800090c:	f000 f819 	bl	8000942 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fe98 	bl	8001660 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000936:	f000 f804 	bl	8000942 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3740      	adds	r7, #64	@ 0x40
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000946:	b672      	cpsid	i
}
 8000948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094a:	bf00      	nop
 800094c:	e7fd      	b.n	800094a <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <HAL_MspInit+0x5c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_MspInit+0x5c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_MspInit+0x60>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_MspInit+0x60>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f8ea 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a1e:	4a11      	ldr	r2, [pc, #68]	@ (8000a64 <MX_USART3_UART_Init+0x4c>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a24:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <MX_USART3_UART_Init+0x50>)
 8000a26:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <MX_USART3_UART_Init+0x48>)
 8000a4e:	f000 ff95 	bl	800197c <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8000a58:	f7ff ff73 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000002c 	.word	0x2000002c
 8000a64:	40004800 	.word	0x40004800
 8000a68:	000f4240 	.word	0x000f4240

08000a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a1c      	ldr	r2, [pc, #112]	@ (8000af8 <HAL_UART_MspInit+0x8c>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d131      	bne.n	8000af0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	4a1a      	ldr	r2, [pc, #104]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000a92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a96:	61d3      	str	r3, [r2, #28]
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <HAL_UART_MspInit+0x94>)
 8000ad2:	f000 f9a7 	bl	8000e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ad6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_UART_MspInit+0x94>)
 8000aec:	f000 f99a 	bl	8000e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40004800 	.word	0x40004800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff ff82 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b0a:	490c      	ldr	r1, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a09      	ldr	r2, [pc, #36]	@ (8000b44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b20:	4c09      	ldr	r4, [pc, #36]	@ (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f001 f9e9 	bl	8001f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fea9 	bl	8000888 <main>
  bx lr
 8000b36:	4770      	bx	lr
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b40:	08001fb4 	.word	0x08001fb4
  ldr r2, =_sbss
 8000b44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b48:	20000078 	.word	0x20000078

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f92b 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fef0 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f935 	bl	8000e0a <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f90b 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	@ (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000074 	.word	0x20000074

08000c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	@ (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000074 	.word	0x20000074

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff0 	bl	8000c00 <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffe0 	bl	8000c00 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	@ (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	@ (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	@ 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff90 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff49 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff5e 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff90 	bl	8000d14 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5f 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffb0 	bl	8000d78 <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b08b      	sub	sp, #44	@ 0x2c
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e169      	b.n	800110c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8158 	bne.w	8001106 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a9a      	ldr	r2, [pc, #616]	@ (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d05e      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e60:	4a98      	ldr	r2, [pc, #608]	@ (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d875      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e66:	4a98      	ldr	r2, [pc, #608]	@ (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d058      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e6c:	4a96      	ldr	r2, [pc, #600]	@ (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d86f      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e72:	4a96      	ldr	r2, [pc, #600]	@ (80010cc <HAL_GPIO_Init+0x2a8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d052      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e78:	4a94      	ldr	r2, [pc, #592]	@ (80010cc <HAL_GPIO_Init+0x2a8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d869      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e7e:	4a94      	ldr	r2, [pc, #592]	@ (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d04c      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e84:	4a92      	ldr	r2, [pc, #584]	@ (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d863      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e8a:	4a92      	ldr	r2, [pc, #584]	@ (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d046      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e90:	4a90      	ldr	r2, [pc, #576]	@ (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d85d      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d82a      	bhi.n	8000ef0 <HAL_GPIO_Init+0xcc>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d859      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <HAL_GPIO_Init+0x80>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000ef9 	.word	0x08000ef9
 8000eac:	08000f0b 	.word	0x08000f0b
 8000eb0:	08000f4d 	.word	0x08000f4d
 8000eb4:	08000f53 	.word	0x08000f53
 8000eb8:	08000f53 	.word	0x08000f53
 8000ebc:	08000f53 	.word	0x08000f53
 8000ec0:	08000f53 	.word	0x08000f53
 8000ec4:	08000f53 	.word	0x08000f53
 8000ec8:	08000f53 	.word	0x08000f53
 8000ecc:	08000f53 	.word	0x08000f53
 8000ed0:	08000f53 	.word	0x08000f53
 8000ed4:	08000f53 	.word	0x08000f53
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f53 	.word	0x08000f53
 8000ee0:	08000f53 	.word	0x08000f53
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f01 	.word	0x08000f01
 8000eec:	08000f15 	.word	0x08000f15
 8000ef0:	4a79      	ldr	r2, [pc, #484]	@ (80010d8 <HAL_GPIO_Init+0x2b4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ef6:	e02c      	b.n	8000f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e029      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	3304      	adds	r3, #4
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e024      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e01f      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e01a      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f26:	2304      	movs	r3, #4
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e013      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d105      	bne.n	8000f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f34:	2308      	movs	r3, #8
 8000f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	611a      	str	r2, [r3, #16]
          break;
 8000f3e:	e009      	b.n	8000f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f40:	2308      	movs	r3, #8
 8000f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	615a      	str	r2, [r3, #20]
          break;
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          break;
 8000f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	@ 0xff
 8000f58:	d801      	bhi.n	8000f5e <HAL_GPIO_Init+0x13a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_Init+0x13e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3304      	adds	r3, #4
 8000f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2bff      	cmp	r3, #255	@ 0xff
 8000f68:	d802      	bhi.n	8000f70 <HAL_GPIO_Init+0x14c>
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x152>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f72:	3b08      	subs	r3, #8
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	6a39      	ldr	r1, [r7, #32]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	431a      	orrs	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80b1 	beq.w	8001106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fbc:	4a48      	ldr	r2, [pc, #288]	@ (80010e0 <HAL_GPIO_Init+0x2bc>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a40      	ldr	r2, [pc, #256]	@ (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d013      	beq.n	8001010 <HAL_GPIO_Init+0x1ec>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3f      	ldr	r2, [pc, #252]	@ (80010e8 <HAL_GPIO_Init+0x2c4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00d      	beq.n	800100c <HAL_GPIO_Init+0x1e8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80010ec <HAL_GPIO_Init+0x2c8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x1e4>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80010f0 <HAL_GPIO_Init+0x2cc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_GPIO_Init+0x1e0>
 8001000:	2303      	movs	r3, #3
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001004:	2304      	movs	r3, #4
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001010:	2300      	movs	r3, #0
 8001012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001022:	492f      	ldr	r1, [pc, #188]	@ (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800103c:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	492c      	ldr	r1, [pc, #176]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	608b      	str	r3, [r1, #8]
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	43db      	mvns	r3, r3
 8001052:	4928      	ldr	r1, [pc, #160]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001054:	4013      	ands	r3, r2
 8001056:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001064:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	4922      	ldr	r1, [pc, #136]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	60cb      	str	r3, [r1, #12]
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	43db      	mvns	r3, r3
 800107a:	491e      	ldr	r1, [pc, #120]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 800107c:	4013      	ands	r3, r2
 800107e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4918      	ldr	r1, [pc, #96]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4914      	ldr	r1, [pc, #80]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d021      	beq.n	80010f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	490e      	ldr	r1, [pc, #56]	@ (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e021      	b.n	8001106 <HAL_GPIO_Init+0x2e2>
 80010c2:	bf00      	nop
 80010c4:	10320000 	.word	0x10320000
 80010c8:	10310000 	.word	0x10310000
 80010cc:	10220000 	.word	0x10220000
 80010d0:	10210000 	.word	0x10210000
 80010d4:	10120000 	.word	0x10120000
 80010d8:	10110000 	.word	0x10110000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40011000 	.word	0x40011000
 80010f0:	40011400 	.word	0x40011400
 80010f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <HAL_GPIO_Init+0x304>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4909      	ldr	r1, [pc, #36]	@ (8001128 <HAL_GPIO_Init+0x304>)
 8001102:	4013      	ands	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	3301      	adds	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	f47f ae8e 	bne.w	8000e38 <HAL_GPIO_Init+0x14>
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	372c      	adds	r7, #44	@ 0x2c
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e272      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800117c:	4b92      	ldr	r3, [pc, #584]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001188:	4b8f      	ldr	r3, [pc, #572]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d112      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
 8001194:	4b8c      	ldr	r3, [pc, #560]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011a0:	d10b      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a2:	4b89      	ldr	r3, [pc, #548]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d06c      	beq.n	8001288 <HAL_RCC_OscConfig+0x12c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d168      	bne.n	8001288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e24c      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x76>
 80011c4:	4b80      	ldr	r3, [pc, #512]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a7f      	ldr	r2, [pc, #508]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e02e      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x98>
 80011da:	4b7b      	ldr	r3, [pc, #492]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a7a      	ldr	r2, [pc, #488]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b78      	ldr	r3, [pc, #480]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a77      	ldr	r2, [pc, #476]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0xbc>
 80011fe:	4b72      	ldr	r3, [pc, #456]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a71      	ldr	r2, [pc, #452]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6f      	ldr	r3, [pc, #444]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6e      	ldr	r2, [pc, #440]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 8001218:	4b6b      	ldr	r3, [pc, #428]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a6a      	ldr	r2, [pc, #424]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b68      	ldr	r3, [pc, #416]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a67      	ldr	r2, [pc, #412]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800122e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fce2 	bl	8000c00 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcde 	bl	8000c00 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	@ 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e200      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b5d      	ldr	r3, [pc, #372]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xe4>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fcce 	bl	8000c00 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fcca 	bl	8000c00 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	@ 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1ec      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x10c>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001296:	4b4c      	ldr	r3, [pc, #304]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a2:	4b49      	ldr	r3, [pc, #292]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x18c>
 80012ae:	4b46      	ldr	r3, [pc, #280]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x176>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e1c0      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b3d      	ldr	r3, [pc, #244]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4939      	ldr	r1, [pc, #228]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e03a      	b.n	800135e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b36      	ldr	r3, [pc, #216]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fc83 	bl	8000c00 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc7f 	bl	8000c00 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1a1      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4927      	ldr	r1, [pc, #156]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc62 	bl	8000c00 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fc5e 	bl	8000c00 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e180      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03a      	beq.n	80013e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d019      	beq.n	80013a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_RCC_OscConfig+0x274>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fc42 	bl	8000c00 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fc3e 	bl	8000c00 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e160      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 face 	bl	8001940 <RCC_Delay>
 80013a4:	e01c      	b.n	80013e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_RCC_OscConfig+0x274>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fc28 	bl	8000c00 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b2:	e00f      	b.n	80013d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc24 	bl	8000c00 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d908      	bls.n	80013d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e146      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	42420000 	.word	0x42420000
 80013d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	4b92      	ldr	r3, [pc, #584]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e9      	bne.n	80013b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80a6 	beq.w	800153a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10d      	bne.n	800141a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b88      	ldr	r3, [pc, #544]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a87      	ldr	r2, [pc, #540]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b85      	ldr	r3, [pc, #532]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b82      	ldr	r3, [pc, #520]	@ (8001624 <HAL_RCC_OscConfig+0x4c8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4b7f      	ldr	r3, [pc, #508]	@ (8001624 <HAL_RCC_OscConfig+0x4c8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7e      	ldr	r2, [pc, #504]	@ (8001624 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fbe5 	bl	8000c00 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fbe1 	bl	8000c00 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b64      	cmp	r3, #100	@ 0x64
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e103      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <HAL_RCC_OscConfig+0x4c8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x312>
 8001460:	4b6f      	ldr	r3, [pc, #444]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a6e      	ldr	r2, [pc, #440]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e02d      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x334>
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a69      	ldr	r2, [pc, #420]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4b67      	ldr	r3, [pc, #412]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a66      	ldr	r2, [pc, #408]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	e01c      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x356>
 8001498:	4b61      	ldr	r3, [pc, #388]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a60      	ldr	r2, [pc, #384]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6213      	str	r3, [r2, #32]
 80014b0:	e00b      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 80014b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	4b58      	ldr	r3, [pc, #352]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a57      	ldr	r2, [pc, #348]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d015      	beq.n	80014fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb95 	bl	8000c00 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fb91 	bl	8000c00 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0b1      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ee      	beq.n	80014da <HAL_RCC_OscConfig+0x37e>
 80014fc:	e014      	b.n	8001528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb7f 	bl	8000c00 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fb7b 	bl	8000c00 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e09b      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	4b40      	ldr	r3, [pc, #256]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152e:	4b3c      	ldr	r3, [pc, #240]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a3b      	ldr	r2, [pc, #236]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8087 	beq.w	8001652 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001544:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d061      	beq.n	8001614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d146      	bne.n	80015e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001558:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <HAL_RCC_OscConfig+0x4cc>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb4f 	bl	8000c00 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fb4b 	bl	8000c00 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e06d      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4921      	ldr	r1, [pc, #132]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a19      	ldr	r1, [r3, #32]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	430b      	orrs	r3, r1
 80015b2:	491b      	ldr	r1, [pc, #108]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_RCC_OscConfig+0x4cc>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fb1f 	bl	8000c00 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fb1b 	bl	8000c00 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e03d      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x46a>
 80015e4:	e035      	b.n	8001652 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_RCC_OscConfig+0x4cc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb08 	bl	8000c00 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb04 	bl	8000c00 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e026      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x498>
 8001612:	e01e      	b.n	8001652 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e019      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
 8001628:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_RCC_OscConfig+0x500>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	429a      	cmp	r2, r3
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0d0      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b6a      	ldr	r3, [pc, #424]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d910      	bls.n	80016a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b67      	ldr	r3, [pc, #412]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 0207 	bic.w	r2, r3, #7
 800168a:	4965      	ldr	r1, [pc, #404]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b63      	ldr	r3, [pc, #396]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0b8      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016bc:	4b59      	ldr	r3, [pc, #356]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a58      	ldr	r2, [pc, #352]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a52      	ldr	r2, [pc, #328]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b50      	ldr	r3, [pc, #320]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	494d      	ldr	r1, [pc, #308]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d040      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b47      	ldr	r3, [pc, #284]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d115      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e07f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b41      	ldr	r3, [pc, #260]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e073      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3d      	ldr	r3, [pc, #244]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e06b      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4936      	ldr	r1, [pc, #216]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa56 	bl	8000c00 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa52 	bl	8000c00 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e053      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d210      	bcs.n	80017b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0207 	bic.w	r2, r3, #7
 8001796:	4922      	ldr	r1, [pc, #136]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e032      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4916      	ldr	r1, [pc, #88]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	490e      	ldr	r1, [pc, #56]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ee:	f000 f821 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	490a      	ldr	r1, [pc, #40]	@ (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001800:	5ccb      	ldrb	r3, [r1, r3]
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	4a09      	ldr	r2, [pc, #36]	@ (800182c <HAL_RCC_ClockConfig+0x1cc>)
 8001808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_ClockConfig+0x1d0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f9b4 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000
 8001824:	40021000 	.word	0x40021000
 8001828:	08001f80 	.word	0x08001f80
 800182c:	20000000 	.word	0x20000000
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b04      	cmp	r3, #4
 800185c:	d002      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x30>
 800185e:	2b08      	cmp	r3, #8
 8001860:	d003      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x36>
 8001862:	e027      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001866:	613b      	str	r3, [r7, #16]
      break;
 8001868:	e027      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	0c9b      	lsrs	r3, r3, #18
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d010      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0c5b      	lsrs	r3, r3, #17
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	4a11      	ldr	r2, [pc, #68]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001896:	fb03 f202 	mul.w	r2, r3, r2
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e004      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a0c      	ldr	r2, [pc, #48]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	613b      	str	r3, [r7, #16]
      break;
 80018b2:	e002      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x98>)
 80018b6:	613b      	str	r3, [r7, #16]
      break;
 80018b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ba:	693b      	ldr	r3, [r7, #16]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	007a1200 	.word	0x007a1200
 80018d0:	08001f98 	.word	0x08001f98
 80018d4:	08001fa8 	.word	0x08001fa8
 80018d8:	003d0900 	.word	0x003d0900

080018dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e0:	4b02      	ldr	r3, [pc, #8]	@ (80018ec <HAL_RCC_GetHCLKFreq+0x10>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000000 	.word	0x20000000

080018f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f4:	f7ff fff2 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	4903      	ldr	r1, [pc, #12]	@ (8001914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001906:	5ccb      	ldrb	r3, [r1, r3]
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	08001f90 	.word	0x08001f90

08001918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800191c:	f7ff ffde 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 8001920:	4602      	mov	r2, r0
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	0adb      	lsrs	r3, r3, #11
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	4903      	ldr	r1, [pc, #12]	@ (800193c <HAL_RCC_GetPCLK2Freq+0x24>)
 800192e:	5ccb      	ldrb	r3, [r1, r3]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	08001f90 	.word	0x08001f90

08001940 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <RCC_Delay+0x34>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <RCC_Delay+0x38>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	0a5b      	lsrs	r3, r3, #9
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800195c:	bf00      	nop
  }
  while (Delay --);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	60fa      	str	r2, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f9      	bne.n	800195c <RCC_Delay+0x1c>
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000000 	.word	0x20000000
 8001978:	10624dd3 	.word	0x10624dd3

0800197c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e042      	b.n	8001a14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff f862 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	@ 0x24
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fa09 	bl	8001dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d175      	bne.n	8001b28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_UART_Transmit+0x2c>
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e06e      	b.n	8001b2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2221      	movs	r2, #33	@ 0x21
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a5a:	f7ff f8d1 	bl	8000c00 <HAL_GetTick>
 8001a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	88fa      	ldrh	r2, [r7, #6]
 8001a6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a74:	d108      	bne.n	8001a88 <HAL_UART_Transmit+0x6c>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d104      	bne.n	8001a88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	e003      	b.n	8001a90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a90:	e02e      	b.n	8001af0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2180      	movs	r1, #128	@ 0x80
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f8df 	bl	8001c60 <UART_WaitOnFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e03a      	b.n	8001b2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ac8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	3302      	adds	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	e007      	b.n	8001ae2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1cb      	bne.n	8001a92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2140      	movs	r1, #64	@ 0x40
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f8ab 	bl	8001c60 <UART_WaitOnFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e006      	b.n	8001b2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e000      	b.n	8001b2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b28:	2302      	movs	r3, #2
  }
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b08a      	sub	sp, #40	@ 0x28
 8001b36:	af02      	add	r7, sp, #8
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	f040 8081 	bne.w	8001c56 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_UART_Receive+0x2e>
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e079      	b.n	8001c58 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2222      	movs	r2, #34	@ 0x22
 8001b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f842 	bl	8000c00 <HAL_GetTick>
 8001b7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b92:	d108      	bne.n	8001ba6 <HAL_UART_Receive+0x74>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d104      	bne.n	8001ba6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	e003      	b.n	8001bae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001bae:	e047      	b.n	8001c40 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2120      	movs	r1, #32
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f850 	bl	8001c60 <UART_WaitOnFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e042      	b.n	8001c58 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	3302      	adds	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e01f      	b.n	8001c32 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bfa:	d007      	beq.n	8001c0c <HAL_UART_Receive+0xda>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_UART_Receive+0xe8>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e008      	b.n	8001c2c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1b2      	bne.n	8001bb0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c70:	e03b      	b.n	8001cea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d037      	beq.n	8001cea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7fe ffc1 	bl	8000c00 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	6a3a      	ldr	r2, [r7, #32]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e03a      	b.n	8001d0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d023      	beq.n	8001cea <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b80      	cmp	r3, #128	@ 0x80
 8001ca6:	d020      	beq.n	8001cea <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b40      	cmp	r3, #64	@ 0x40
 8001cac:	d01d      	beq.n	8001cea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d116      	bne.n	8001cea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f81d 	bl	8001d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2208      	movs	r2, #8
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d0b4      	beq.n	8001c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b095      	sub	sp, #84	@ 0x54
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	330c      	adds	r3, #12
 8001d20:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d24:	e853 3f00 	ldrex	r3, [r3]
 8001d28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	330c      	adds	r3, #12
 8001d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d42:	e841 2300 	strex	r3, r2, [r1]
 8001d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e5      	bne.n	8001d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3314      	adds	r3, #20
 8001d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	e853 3f00 	ldrex	r3, [r3]
 8001d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d76:	e841 2300 	strex	r3, r2, [r1]
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1e5      	bne.n	8001d4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d119      	bne.n	8001dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	330c      	adds	r3, #12
 8001d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	e853 3f00 	ldrex	r3, [r3]
 8001d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f023 0310 	bic.w	r3, r3, #16
 8001da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	330c      	adds	r3, #12
 8001da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001daa:	61ba      	str	r2, [r7, #24]
 8001dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dae:	6979      	ldr	r1, [r7, #20]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	e841 2300 	strex	r3, r2, [r1]
 8001db6:	613b      	str	r3, [r7, #16]
   return(result);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1e5      	bne.n	8001d8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001dcc:	bf00      	nop
 8001dce:	3754      	adds	r7, #84	@ 0x54
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
	...

08001dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e12:	f023 030c 	bic.w	r3, r3, #12
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001eec <UART_SetConfig+0x114>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d103      	bne.n	8001e48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e40:	f7ff fd6a 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	e002      	b.n	8001e4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e48:	f7ff fd52 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8001e4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	4a22      	ldr	r2, [pc, #136]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	0119      	lsls	r1, r3, #4
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001e86:	fba3 0302 	umull	r0, r3, r3, r2
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2064      	movs	r0, #100	@ 0x64
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	3332      	adds	r3, #50	@ 0x32
 8001e98:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea4:	4419      	add	r1, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2064      	movs	r0, #100	@ 0x64
 8001ec6:	fb00 f303 	mul.w	r3, r0, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3332      	adds	r3, #50	@ 0x32
 8001ed0:	4a07      	ldr	r2, [pc, #28]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	440a      	add	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	51eb851f 	.word	0x51eb851f

08001ef4 <memset>:
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4402      	add	r2, r0
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d100      	bne.n	8001efe <memset+0xa>
 8001efc:	4770      	bx	lr
 8001efe:	f803 1b01 	strb.w	r1, [r3], #1
 8001f02:	e7f9      	b.n	8001ef8 <memset+0x4>

08001f04 <__libc_init_array>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	2600      	movs	r6, #0
 8001f08:	4d0c      	ldr	r5, [pc, #48]	@ (8001f3c <__libc_init_array+0x38>)
 8001f0a:	4c0d      	ldr	r4, [pc, #52]	@ (8001f40 <__libc_init_array+0x3c>)
 8001f0c:	1b64      	subs	r4, r4, r5
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	42a6      	cmp	r6, r4
 8001f12:	d109      	bne.n	8001f28 <__libc_init_array+0x24>
 8001f14:	f000 f828 	bl	8001f68 <_init>
 8001f18:	2600      	movs	r6, #0
 8001f1a:	4d0a      	ldr	r5, [pc, #40]	@ (8001f44 <__libc_init_array+0x40>)
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <__libc_init_array+0x44>)
 8001f1e:	1b64      	subs	r4, r4, r5
 8001f20:	10a4      	asrs	r4, r4, #2
 8001f22:	42a6      	cmp	r6, r4
 8001f24:	d105      	bne.n	8001f32 <__libc_init_array+0x2e>
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f2c:	4798      	blx	r3
 8001f2e:	3601      	adds	r6, #1
 8001f30:	e7ee      	b.n	8001f10 <__libc_init_array+0xc>
 8001f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f36:	4798      	blx	r3
 8001f38:	3601      	adds	r6, #1
 8001f3a:	e7f2      	b.n	8001f22 <__libc_init_array+0x1e>
 8001f3c:	08001fac 	.word	0x08001fac
 8001f40:	08001fac 	.word	0x08001fac
 8001f44:	08001fac 	.word	0x08001fac
 8001f48:	08001fb0 	.word	0x08001fb0

08001f4c <memcpy>:
 8001f4c:	440a      	add	r2, r1
 8001f4e:	4291      	cmp	r1, r2
 8001f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f54:	d100      	bne.n	8001f58 <memcpy+0xc>
 8001f56:	4770      	bx	lr
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f5e:	4291      	cmp	r1, r2
 8001f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f64:	d1f9      	bne.n	8001f5a <memcpy+0xe>
 8001f66:	bd10      	pop	{r4, pc}

08001f68 <_init>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	bf00      	nop
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr

08001f74 <_fini>:
 8001f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f76:	bf00      	nop
 8001f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7a:	bc08      	pop	{r3}
 8001f7c:	469e      	mov	lr, r3
 8001f7e:	4770      	bx	lr
