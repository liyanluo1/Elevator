/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Servo 270-degree rotation test with angle and error tracking
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "../Modules/servo/servo.h"
#include "../Modules/servo/servo_control.h"
#include "../Modules/LED/LED.h"
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
ServoControl_t servo_ctrl;  // 舵机控制器
uint8_t servo_id = 1;       // 舵机ID
uint8_t uart2_rx_flag = 0;  // UART2接收标志
uint8_t uart2_rx_buffer[100];  // UART2接收缓冲区
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART3_UART_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  // Initialize LED
  LED_Init();
  
  // 启动UART2接收中断 - 使用DMA循环接收
  HAL_UART_Receive_DMA(&huart2, uart2_rx_buffer, sizeof(uart2_rx_buffer));
  LED_Flash(3);  // Flash 3 times to indicate system start
  
  printf("\r\n========================================\r\n");
  printf("SERVO 270-DEGREE ROTATION TEST\r\n");
  printf("========================================\r\n\r\n");
  
  // Initialize servo communication
  printf("Initializing servo...\r\n");
  servo_init(&huart3);
  HAL_Delay(100);
  
  // Verify connection
  if (servo_ping(servo_id)) {
      printf("[OK] Servo connected\r\n");
  } else {
      printf("[ERROR] Servo not responding\r\n");
      while(1) { HAL_Delay(1000); }
  }
  
  // Initialize servo controller
  ServoControl_Init(&servo_ctrl, servo_id);
  
  // Set custom PID parameters
  PIDParams_t pid = {
      .kp = 3.0f,
      .ki = 0.2f,
      .kd = 1.0f,
      .max_output = 2000,
      .min_output = 150
  };
  ServoControl_SetPID(&pid);
  
  // Enable controller
  ServoControl_Enable(&servo_ctrl);
  HAL_Delay(100);
  
  // Move to home position first
  printf("\r\nMoving to home position...\r\n");
  ServoControl_Home(&servo_ctrl);
  
  // Wait for home position
  while (!ServoControl_IsAtTarget(&servo_ctrl)) {
      ServoControl_Update(&servo_ctrl);
      HAL_Delay(SERVO_CONTROL_PERIOD_MS);
  }
  printf("Home position reached: %d\r\n", servo_ctrl.current_position);
  HAL_Delay(1000);
  
  // Start 270-degree rotation
  printf("\r\n========================================\r\n");
  printf("Starting 270-degree clockwise rotation\r\n");
  printf("Angle(deg) | Position | Target | Error\r\n");
  printf("----------------------------------------\r\n");
  
  ServoControl_RotateContinuous(&servo_ctrl, 270.0f);
  uint32_t start_time = HAL_GetTick();
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_tx_time = 0;
  uint32_t led_flash_time = 0;
  uint8_t led_flash_count = 0;
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
    
    // 每500ms发送一次Hello world
    if (current_time - last_tx_time >= 500) {
        HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Hello world\r\n", 13);
        last_tx_time = current_time;
    }
    
    // 检查是否收到数据
    if (uart2_rx_flag) {
        uart2_rx_flag = 0;
        led_flash_count = 10;  // 快速闪烁5次（10个状态变化）
        printf("RS485 RX: Data received!\r\n");
    }
    
    // LED快速闪烁控制
    if (led_flash_count > 0) {
        if (current_time - led_flash_time >= 50) {  // 50ms快速闪烁
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);  // PA1是LED
            led_flash_count--;
            led_flash_time = current_time;
            
            if (led_flash_count == 0) {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  // 确保LED最终熄灭
            }
        }
    }
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

// UART接收完成回调（空闲中断或DMA半满/全满）
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2) {
        uart2_rx_flag = 1;  // 设置接收标志
        // 重新启动DMA接收
        HAL_UART_Receive_DMA(&huart2, uart2_rx_buffer, sizeof(uart2_rx_buffer));
    }
}

// UART接收半满回调
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2) {
        uart2_rx_flag = 1;  // 设置接收标志
    }
}

// UART错误回调
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2) {
        // 错误处理：重新启动接收
        HAL_UART_Receive_DMA(&huart2, uart2_rx_buffer, sizeof(uart2_rx_buffer));
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
