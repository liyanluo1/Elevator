
slavemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fdc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f38  08005f38  00007088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005f38  08005f38  00007088  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005f38  08005f38  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f38  08005f38  00006f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08005f40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000088  08005fc8  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  08005fc8  000079b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a50c  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027be  00000000  00000000  000115bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00013d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ed  00000000  00000000  00014800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004100  00000000  00000000  00014fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfc4  00000000  00000000  000190ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085924  00000000  00000000  000270b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac9d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c0  00000000  00000000  000aca18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000afad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080050d0 	.word	0x080050d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080050d0 	.word	0x080050d0

0800014c <LocalBB_Init>:
/* 全局实例 */
LocalBlackboard_t g_local_bb;

/* ==================== 初始化函数 ==================== */

void LocalBB_Init(void) {
 800014c:	b598      	push	{r3, r4, r7, lr}
 800014e:	af00      	add	r7, sp, #0
    memset(&g_local_bb, 0, sizeof(LocalBlackboard_t));
 8000150:	22c8      	movs	r2, #200	@ 0xc8
 8000152:	2100      	movs	r1, #0
 8000154:	4814      	ldr	r0, [pc, #80]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000156:	f004 f879 	bl	800424c <memset>
    
    /* 初始状态 */
    g_local_bb.current_floor = 1;
 800015a:	4b13      	ldr	r3, [pc, #76]	@ (80001a8 <LocalBB_Init+0x5c>)
 800015c:	2201      	movs	r2, #1
 800015e:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    g_local_bb.expected_next_floor = 1;
 8000162:	4b11      	ldr	r3, [pc, #68]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000164:	2201      	movs	r2, #1
 8000166:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    g_local_bb.direction = DIR_STOP;
 800016a:	4b0f      	ldr	r3, [pc, #60]	@ (80001a8 <LocalBB_Init+0x5c>)
 800016c:	2200      	movs	r2, #0
 800016e:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
    g_local_bb.door_state = LOCAL_DOOR_CLOSED;
 8000172:	4b0d      	ldr	r3, [pc, #52]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000174:	2200      	movs	r2, #0
 8000176:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    
    /* 事件队列 */
    g_local_bb.event_head = 0;
 800017a:	4b0b      	ldr	r3, [pc, #44]	@ (80001a8 <LocalBB_Init+0x5c>)
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_tail = 0;
 8000182:	4b09      	ldr	r3, [pc, #36]	@ (80001a8 <LocalBB_Init+0x5c>)
 8000184:	2200      	movs	r2, #0
 8000186:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count = 0;
 800018a:	4b07      	ldr	r3, [pc, #28]	@ (80001a8 <LocalBB_Init+0x5c>)
 800018c:	2200      	movs	r2, #0
 800018e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    strcpy(g_local_bb.debug_msg, "LocalBB Init");
 8000192:	4a06      	ldr	r2, [pc, #24]	@ (80001ac <LocalBB_Init+0x60>)
 8000194:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <LocalBB_Init+0x64>)
 8000196:	4614      	mov	r4, r2
 8000198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019a:	c407      	stmia	r4!, {r0, r1, r2}
 800019c:	7023      	strb	r3, [r4, #0]
    printf("[LocalBB] Initialized\r\n");
 800019e:	4805      	ldr	r0, [pc, #20]	@ (80001b4 <LocalBB_Init+0x68>)
 80001a0:	f003 ff52 	bl	8004048 <puts>
}
 80001a4:	bf00      	nop
 80001a6:	bd98      	pop	{r3, r4, r7, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	2000014c 	.word	0x2000014c
 80001b0:	080050e8 	.word	0x080050e8
 80001b4:	080050f8 	.word	0x080050f8

080001b8 <PushEvent>:
    LocalBB_Init();
}

/* ==================== 事件队列管理 ==================== */

static bool PushEvent(LocalEventType_t type, uint8_t data1, uint8_t data2, uint8_t data3) {
 80001b8:	b590      	push	{r4, r7, lr}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4604      	mov	r4, r0
 80001c0:	4608      	mov	r0, r1
 80001c2:	4611      	mov	r1, r2
 80001c4:	461a      	mov	r2, r3
 80001c6:	4623      	mov	r3, r4
 80001c8:	71fb      	strb	r3, [r7, #7]
 80001ca:	4603      	mov	r3, r0
 80001cc:	71bb      	strb	r3, [r7, #6]
 80001ce:	460b      	mov	r3, r1
 80001d0:	717b      	strb	r3, [r7, #5]
 80001d2:	4613      	mov	r3, r2
 80001d4:	713b      	strb	r3, [r7, #4]
    if (g_local_bb.event_count >= MAX_EVENT_QUEUE) {
 80001d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000254 <PushEvent+0x9c>)
 80001d8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80001dc:	2b0f      	cmp	r3, #15
 80001de:	d904      	bls.n	80001ea <PushEvent+0x32>
        printf("[LocalBB] Event queue full!\r\n");
 80001e0:	481d      	ldr	r0, [pc, #116]	@ (8000258 <PushEvent+0xa0>)
 80001e2:	f003 ff31 	bl	8004048 <puts>
        return false;
 80001e6:	2300      	movs	r3, #0
 80001e8:	e02f      	b.n	800024a <PushEvent+0x92>
    }
    
    LocalEvent_t* event = &g_local_bb.event_queue[g_local_bb.event_tail];
 80001ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000254 <PushEvent+0x9c>)
 80001ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80001f0:	00db      	lsls	r3, r3, #3
 80001f2:	4a18      	ldr	r2, [pc, #96]	@ (8000254 <PushEvent+0x9c>)
 80001f4:	4413      	add	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]
    event->type = type;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	701a      	strb	r2, [r3, #0]
    event->data1 = data1;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	79ba      	ldrb	r2, [r7, #6]
 8000202:	705a      	strb	r2, [r3, #1]
    event->data2 = data2;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	797a      	ldrb	r2, [r7, #5]
 8000208:	709a      	strb	r2, [r3, #2]
    event->data3 = data3;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	793a      	ldrb	r2, [r7, #4]
 800020e:	70da      	strb	r2, [r3, #3]
    event->timestamp = HAL_GetTick();
 8000210:	f001 ffdc 	bl	80021cc <HAL_GetTick>
 8000214:	4602      	mov	r2, r0
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	605a      	str	r2, [r3, #4]
    
    g_local_bb.event_tail = (g_local_bb.event_tail + 1) % MAX_EVENT_QUEUE;
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <PushEvent+0x9c>)
 800021c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000220:	3301      	adds	r3, #1
 8000222:	425a      	negs	r2, r3
 8000224:	f003 030f 	and.w	r3, r3, #15
 8000228:	f002 020f 	and.w	r2, r2, #15
 800022c:	bf58      	it	pl
 800022e:	4253      	negpl	r3, r2
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <PushEvent+0x9c>)
 8000234:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count++;
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <PushEvent+0x9c>)
 800023a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800023e:	3301      	adds	r3, #1
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <PushEvent+0x9c>)
 8000244:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    return true;
 8000248:	2301      	movs	r3, #1
}
 800024a:	4618      	mov	r0, r3
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bd90      	pop	{r4, r7, pc}
 8000252:	bf00      	nop
 8000254:	200000a4 	.word	0x200000a4
 8000258:	08005110 	.word	0x08005110

0800025c <PopEvent>:

static bool PopEvent(LocalEvent_t* event) {
 800025c:	b490      	push	{r4, r7}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    if (g_local_bb.event_count == 0) {
 8000264:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <PopEvent+0x68>)
 8000266:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800026a:	2b00      	cmp	r3, #0
 800026c:	d101      	bne.n	8000272 <PopEvent+0x16>
        return false;
 800026e:	2300      	movs	r3, #0
 8000270:	e023      	b.n	80002ba <PopEvent+0x5e>
    }
    
    *event = g_local_bb.event_queue[g_local_bb.event_head];
 8000272:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <PopEvent+0x68>)
 8000274:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <PopEvent+0x68>)
 800027c:	460c      	mov	r4, r1
 800027e:	00db      	lsls	r3, r3, #3
 8000280:	4413      	add	r3, r2
 8000282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000286:	e884 0003 	stmia.w	r4, {r0, r1}
    g_local_bb.event_head = (g_local_bb.event_head + 1) % MAX_EVENT_QUEUE;
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <PopEvent+0x68>)
 800028c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000290:	3301      	adds	r3, #1
 8000292:	425a      	negs	r2, r3
 8000294:	f003 030f 	and.w	r3, r3, #15
 8000298:	f002 020f 	and.w	r2, r2, #15
 800029c:	bf58      	it	pl
 800029e:	4253      	negpl	r3, r2
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <PopEvent+0x68>)
 80002a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_count--;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <PopEvent+0x68>)
 80002aa:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80002ae:	3b01      	subs	r3, #1
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <PopEvent+0x68>)
 80002b4:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    return true;
 80002b8:	2301      	movs	r3, #1
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc90      	pop	{r4, r7}
 80002c2:	4770      	bx	lr
 80002c4:	200000a4 	.word	0x200000a4

080002c8 <LocalBB_AddCabinCall>:

/* ==================== 事件输入接口 ==================== */

void LocalBB_AddCabinCall(uint8_t floor) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
    if (floor < 1 || floor > MAX_FLOORS) return;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d02b      	beq.n	8000330 <LocalBB_AddCabinCall+0x68>
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b03      	cmp	r3, #3
 80002dc:	d828      	bhi.n	8000330 <LocalBB_AddCabinCall+0x68>
    
    /* 防抖：如果短时间内重复按同一楼层，忽略 */
    uint32_t current_time = HAL_GetTick();
 80002de:	f001 ff75 	bl	80021cc <HAL_GetTick>
 80002e2:	60f8      	str	r0, [r7, #12]
    if (floor == g_local_bb.last_sent_cabin_call && 
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 80002e6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80002ea:	79fa      	ldrb	r2, [r7, #7]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d10c      	bne.n	800030a <LocalBB_AddCabinCall+0x42>
        (current_time - g_local_bb.last_cabin_call_time) < DEBOUNCE_TIME_MS) {
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 80002f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	1ad3      	subs	r3, r2, r3
    if (floor == g_local_bb.last_sent_cabin_call && 
 80002fa:	2b63      	cmp	r3, #99	@ 0x63
 80002fc:	d805      	bhi.n	800030a <LocalBB_AddCabinCall+0x42>
        printf("[LocalBB] Cabin call %d debounced\r\n", floor);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	4619      	mov	r1, r3
 8000302:	480e      	ldr	r0, [pc, #56]	@ (800033c <LocalBB_AddCabinCall+0x74>)
 8000304:	f003 fe38 	bl	8003f78 <iprintf>
        return;
 8000308:	e013      	b.n	8000332 <LocalBB_AddCabinCall+0x6a>
    }
    
    PushEvent(LOCAL_EVENT_CABIN_CALL, floor, 0, 0);
 800030a:	79f9      	ldrb	r1, [r7, #7]
 800030c:	2300      	movs	r3, #0
 800030e:	2200      	movs	r2, #0
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ff51 	bl	80001b8 <PushEvent>
    g_local_bb.cabin_call_count++;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 8000318:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800031c:	3301      	adds	r3, #1
 800031e:	4a06      	ldr	r2, [pc, #24]	@ (8000338 <LocalBB_AddCabinCall+0x70>)
 8000320:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    printf("[LocalBB] Cabin call queued: floor %d\r\n", floor);
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	@ (8000340 <LocalBB_AddCabinCall+0x78>)
 800032a:	f003 fe25 	bl	8003f78 <iprintf>
 800032e:	e000      	b.n	8000332 <LocalBB_AddCabinCall+0x6a>
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000330:	bf00      	nop
}
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	200000a4 	.word	0x200000a4
 800033c:	08005130 	.word	0x08005130
 8000340:	08005154 	.word	0x08005154

08000344 <LocalBB_AddPhotoSensor>:

void LocalBB_AddPhotoSensor(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
    /* 使用预期楼层 */
    uint8_t floor = g_local_bb.expected_next_floor;
 800034a:	4b23      	ldr	r3, [pc, #140]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 800034c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000350:	71fb      	strb	r3, [r7, #7]
    
    PushEvent(LOCAL_EVENT_PHOTO_SENSOR, floor, 0, 0);
 8000352:	79f9      	ldrb	r1, [r7, #7]
 8000354:	2300      	movs	r3, #0
 8000356:	2200      	movs	r2, #0
 8000358:	2002      	movs	r0, #2
 800035a:	f7ff ff2d 	bl	80001b8 <PushEvent>
    g_local_bb.photo_trigger_count++;
 800035e:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000360:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000364:	3301      	adds	r3, #1
 8000366:	4a1c      	ldr	r2, [pc, #112]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000368:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    printf("[LocalBB] Photo sensor queued: floor %d\r\n", floor);
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4619      	mov	r1, r3
 8000370:	481a      	ldr	r0, [pc, #104]	@ (80003dc <LocalBB_AddPhotoSensor+0x98>)
 8000372:	f003 fe01 	bl	8003f78 <iprintf>
    
    /* 更新当前楼层 */
    g_local_bb.current_floor = floor;
 8000376:	4a18      	ldr	r2, [pc, #96]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    
    /* 根据方向更新预期楼层 */
    if (g_local_bb.direction == DIR_UP) {
 800037e:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000380:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10f      	bne.n	80003a8 <LocalBB_AddPhotoSensor+0x64>
        g_local_bb.expected_next_floor = floor + 1;
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000390:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        if (g_local_bb.expected_next_floor > MAX_FLOORS) {
 8000394:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 8000396:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800039a:	2b03      	cmp	r3, #3
 800039c:	d917      	bls.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
            g_local_bb.expected_next_floor = MAX_FLOORS;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003a0:	2203      	movs	r2, #3
 80003a2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
            g_local_bb.expected_next_floor = floor - 1;
        } else {
            g_local_bb.expected_next_floor = 1;
        }
    }
}
 80003a6:	e012      	b.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
    } else if (g_local_bb.direction == DIR_DOWN) {
 80003a8:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003aa:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d10d      	bne.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
        if (floor > 1) {
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d906      	bls.n	80003c6 <LocalBB_AddPhotoSensor+0x82>
            g_local_bb.expected_next_floor = floor - 1;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003c0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 80003c4:	e003      	b.n	80003ce <LocalBB_AddPhotoSensor+0x8a>
            g_local_bb.expected_next_floor = 1;
 80003c6:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <LocalBB_AddPhotoSensor+0x94>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000a4 	.word	0x200000a4
 80003dc:	0800517c 	.word	0x0800517c

080003e0 <LocalBB_SetDirection>:

void LocalBB_SetDirection(uint8_t dir, uint8_t current, uint8_t target) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	460b      	mov	r3, r1
 80003ec:	71bb      	strb	r3, [r7, #6]
 80003ee:	4613      	mov	r3, r2
 80003f0:	717b      	strb	r3, [r7, #5]
    g_local_bb.direction = dir;
 80003f2:	4a22      	ldr	r2, [pc, #136]	@ (800047c <LocalBB_SetDirection+0x9c>)
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	f882 3085 	strb.w	r3, [r2, #133]	@ 0x85
    g_local_bb.current_floor = current;
 80003fa:	4a20      	ldr	r2, [pc, #128]	@ (800047c <LocalBB_SetDirection+0x9c>)
 80003fc:	79bb      	ldrb	r3, [r7, #6]
 80003fe:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    g_local_bb.target_floor = target;
 8000402:	4a1e      	ldr	r2, [pc, #120]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000404:	797b      	ldrb	r3, [r7, #5]
 8000406:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
    
    /* 设置预期楼层 */
    if (dir == DIR_UP) {
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d106      	bne.n	800041e <LocalBB_SetDirection+0x3e>
        g_local_bb.expected_next_floor = current + 1;
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b19      	ldr	r3, [pc, #100]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000418:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 800041c:	e010      	b.n	8000440 <LocalBB_SetDirection+0x60>
    } else if (dir == DIR_DOWN && current > 1) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d109      	bne.n	8000438 <LocalBB_SetDirection+0x58>
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d906      	bls.n	8000438 <LocalBB_SetDirection+0x58>
        g_local_bb.expected_next_floor = current - 1;
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	3b01      	subs	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000432:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000436:	e003      	b.n	8000440 <LocalBB_SetDirection+0x60>
    } else {
        g_local_bb.expected_next_floor = current;
 8000438:	4a10      	ldr	r2, [pc, #64]	@ (800047c <LocalBB_SetDirection+0x9c>)
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
    }
    
    PushEvent(LOCAL_EVENT_DIRECTION_SET, dir, current, target);
 8000440:	797b      	ldrb	r3, [r7, #5]
 8000442:	79ba      	ldrb	r2, [r7, #6]
 8000444:	79f9      	ldrb	r1, [r7, #7]
 8000446:	2003      	movs	r0, #3
 8000448:	f7ff feb6 	bl	80001b8 <PushEvent>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d006      	beq.n	8000460 <LocalBB_SetDirection+0x80>
           dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DOWN" : "STOP",
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d101      	bne.n	800045c <LocalBB_SetDirection+0x7c>
 8000458:	4909      	ldr	r1, [pc, #36]	@ (8000480 <LocalBB_SetDirection+0xa0>)
 800045a:	e002      	b.n	8000462 <LocalBB_SetDirection+0x82>
 800045c:	4909      	ldr	r1, [pc, #36]	@ (8000484 <LocalBB_SetDirection+0xa4>)
 800045e:	e000      	b.n	8000462 <LocalBB_SetDirection+0x82>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000460:	4909      	ldr	r1, [pc, #36]	@ (8000488 <LocalBB_SetDirection+0xa8>)
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	797b      	ldrb	r3, [r7, #5]
           current, target, g_local_bb.expected_next_floor);
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <LocalBB_SetDirection+0x9c>)
 8000468:	f890 0086 	ldrb.w	r0, [r0, #134]	@ 0x86
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 800046c:	9000      	str	r0, [sp, #0]
 800046e:	4807      	ldr	r0, [pc, #28]	@ (800048c <LocalBB_SetDirection+0xac>)
 8000470:	f003 fd82 	bl	8003f78 <iprintf>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000a4 	.word	0x200000a4
 8000480:	080051a8 	.word	0x080051a8
 8000484:	080051b0 	.word	0x080051b0
 8000488:	080051b8 	.word	0x080051b8
 800048c:	080051bc 	.word	0x080051bc

08000490 <LocalBB_AddDoorCommand>:

void LocalBB_AddDoorCommand(bool open) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
    PushEvent(LOCAL_EVENT_DOOR_CMD, open ? 1 : 0, 0, 0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4619      	mov	r1, r3
 800049e:	2300      	movs	r3, #0
 80004a0:	2200      	movs	r2, #0
 80004a2:	2004      	movs	r0, #4
 80004a4:	f7ff fe88 	bl	80001b8 <PushEvent>
    g_local_bb.door_state = open ? LOCAL_DOOR_OPENING : LOCAL_DOOR_CLOSING;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <LocalBB_AddDoorCommand+0x22>
 80004ae:	2201      	movs	r2, #1
 80004b0:	e000      	b.n	80004b4 <LocalBB_AddDoorCommand+0x24>
 80004b2:	2203      	movs	r2, #3
 80004b4:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <LocalBB_AddDoorCommand+0x54>)
 80004b6:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    g_local_bb.door_cmd_time = HAL_GetTick();
 80004ba:	f001 fe87 	bl	80021cc <HAL_GetTick>
 80004be:	4603      	mov	r3, r0
 80004c0:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <LocalBB_AddDoorCommand+0x54>)
 80004c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    printf("[LocalBB] Door command queued: %s\r\n", open ? "OPEN" : "CLOSE");
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <LocalBB_AddDoorCommand+0x40>
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <LocalBB_AddDoorCommand+0x58>)
 80004ce:	e000      	b.n	80004d2 <LocalBB_AddDoorCommand+0x42>
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <LocalBB_AddDoorCommand+0x5c>)
 80004d2:	4619      	mov	r1, r3
 80004d4:	4806      	ldr	r0, [pc, #24]	@ (80004f0 <LocalBB_AddDoorCommand+0x60>)
 80004d6:	f003 fd4f 	bl	8003f78 <iprintf>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000a4 	.word	0x200000a4
 80004e8:	080051f0 	.word	0x080051f0
 80004ec:	080051f8 	.word	0x080051f8
 80004f0:	08005200 	.word	0x08005200

080004f4 <LocalBB_Process>:

/* ==================== 事件处理主函数 ==================== */

void LocalBB_Process(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af02      	add	r7, sp, #8
    LocalEvent_t event;
    uint32_t current_time = HAL_GetTick();
 80004fa:	f001 fe67 	bl	80021cc <HAL_GetTick>
 80004fe:	6178      	str	r0, [r7, #20]
    
    while (PopEvent(&event)) {
 8000500:	e083      	b.n	800060a <LocalBB_Process+0x116>
        switch (event.type) {
 8000502:	7b3b      	ldrb	r3, [r7, #12]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d066      	beq.n	80005d6 <LocalBB_Process+0xe2>
 8000508:	2b03      	cmp	r3, #3
 800050a:	dc79      	bgt.n	8000600 <LocalBB_Process+0x10c>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d002      	beq.n	8000516 <LocalBB_Process+0x22>
 8000510:	2b02      	cmp	r3, #2
 8000512:	d031      	beq.n	8000578 <LocalBB_Process+0x84>
                        event.data1 == DIR_DOWN ? "DN" : "ST",
                        event.data2, event.data3);
                break;
                
            default:
                break;
 8000514:	e074      	b.n	8000600 <LocalBB_Process+0x10c>
                if (event.data1 != g_local_bb.last_sent_cabin_call ||
 8000516:	7b7a      	ldrb	r2, [r7, #13]
 8000518:	4b43      	ldr	r3, [pc, #268]	@ (8000628 <LocalBB_Process+0x134>)
 800051a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800051e:	429a      	cmp	r2, r3
 8000520:	d107      	bne.n	8000532 <LocalBB_Process+0x3e>
                    (current_time - g_local_bb.last_cabin_call_time) > MIN_RESEND_TIME_MS) {
 8000522:	4b41      	ldr	r3, [pc, #260]	@ (8000628 <LocalBB_Process+0x134>)
 8000524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_cabin_call ||
 800052c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000530:	d968      	bls.n	8000604 <LocalBB_Process+0x110>
                    tx_buffer[0] = CMD_CABIN_CALL;
 8000532:	2331      	movs	r3, #49	@ 0x31
 8000534:	723b      	strb	r3, [r7, #8]
                    tx_buffer[1] = event.data1;  // 楼层
 8000536:	7b7b      	ldrb	r3, [r7, #13]
 8000538:	727b      	strb	r3, [r7, #9]
                    tx_buffer[2] = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	72bb      	strb	r3, [r7, #10]
                    tx_buffer[3] = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	72fb      	strb	r3, [r7, #11]
                    rs485_send_packet_dma(tx_buffer, 4);
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	2104      	movs	r1, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f917 	bl	800077c <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 800054e:	4b36      	ldr	r3, [pc, #216]	@ (8000628 <LocalBB_Process+0x134>)
 8000550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000554:	3301      	adds	r3, #1
 8000556:	4a34      	ldr	r2, [pc, #208]	@ (8000628 <LocalBB_Process+0x134>)
 8000558:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    g_local_bb.last_sent_cabin_call = event.data1;
 800055c:	7b7a      	ldrb	r2, [r7, #13]
 800055e:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <LocalBB_Process+0x134>)
 8000560:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
                    g_local_bb.last_cabin_call_time = current_time;
 8000564:	4a30      	ldr	r2, [pc, #192]	@ (8000628 <LocalBB_Process+0x134>)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                    printf("[LocalBB] RS485 TX: Cabin call floor %d\r\n", event.data1);
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	4619      	mov	r1, r3
 8000570:	482e      	ldr	r0, [pc, #184]	@ (800062c <LocalBB_Process+0x138>)
 8000572:	f003 fd01 	bl	8003f78 <iprintf>
                break;
 8000576:	e045      	b.n	8000604 <LocalBB_Process+0x110>
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000578:	7b7a      	ldrb	r2, [r7, #13]
 800057a:	4b2b      	ldr	r3, [pc, #172]	@ (8000628 <LocalBB_Process+0x134>)
 800057c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000580:	429a      	cmp	r2, r3
 8000582:	d106      	bne.n	8000592 <LocalBB_Process+0x9e>
                    (current_time - g_local_bb.last_photo_send_time) > 200) {  // 光电允许更快
 8000584:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <LocalBB_Process+0x134>)
 8000586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 800058e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000590:	d93a      	bls.n	8000608 <LocalBB_Process+0x114>
                    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8000592:	2310      	movs	r3, #16
 8000594:	713b      	strb	r3, [r7, #4]
                    tx_buffer[1] = event.data1;  // 楼层
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	717b      	strb	r3, [r7, #5]
                    tx_buffer[2] = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	71bb      	strb	r3, [r7, #6]
                    tx_buffer[3] = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
                    rs485_send_packet_dma(tx_buffer, 4);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f8e8 	bl	800077c <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <LocalBB_Process+0x134>)
 80005ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80005b2:	3301      	adds	r3, #1
 80005b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000628 <LocalBB_Process+0x134>)
 80005b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    g_local_bb.last_sent_photo_floor = event.data1;
 80005ba:	7b7a      	ldrb	r2, [r7, #13]
 80005bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <LocalBB_Process+0x134>)
 80005be:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
                    g_local_bb.last_photo_send_time = current_time;
 80005c2:	4a19      	ldr	r2, [pc, #100]	@ (8000628 <LocalBB_Process+0x134>)
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
                    printf("[LocalBB] RS485 TX: Photo sensor floor %d\r\n", event.data1);
 80005ca:	7b7b      	ldrb	r3, [r7, #13]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4818      	ldr	r0, [pc, #96]	@ (8000630 <LocalBB_Process+0x13c>)
 80005d0:	f003 fcd2 	bl	8003f78 <iprintf>
                break;
 80005d4:	e018      	b.n	8000608 <LocalBB_Process+0x114>
                        event.data1 == DIR_UP ? "UP" : 
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d006      	beq.n	80005ea <LocalBB_Process+0xf6>
                        event.data1 == DIR_DOWN ? "DN" : "ST",
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d101      	bne.n	80005e6 <LocalBB_Process+0xf2>
 80005e2:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <LocalBB_Process+0x140>)
 80005e4:	e002      	b.n	80005ec <LocalBB_Process+0xf8>
 80005e6:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <LocalBB_Process+0x144>)
 80005e8:	e000      	b.n	80005ec <LocalBB_Process+0xf8>
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <LocalBB_Process+0x148>)
                        event.data2, event.data3);
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005ee:	4619      	mov	r1, r3
                        event.data2, event.data3);
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	460b      	mov	r3, r1
 80005f6:	4912      	ldr	r1, [pc, #72]	@ (8000640 <LocalBB_Process+0x14c>)
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <LocalBB_Process+0x150>)
 80005fa:	f003 fd2d 	bl	8004058 <siprintf>
                break;
 80005fe:	e004      	b.n	800060a <LocalBB_Process+0x116>
                break;
 8000600:	bf00      	nop
 8000602:	e002      	b.n	800060a <LocalBB_Process+0x116>
                break;
 8000604:	bf00      	nop
 8000606:	e000      	b.n	800060a <LocalBB_Process+0x116>
                break;
 8000608:	bf00      	nop
    while (PopEvent(&event)) {
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fe24 	bl	800025c <PopEvent>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	f47f af73 	bne.w	8000502 <LocalBB_Process+0xe>
        }
    }
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000a4 	.word	0x200000a4
 800062c:	08005224 	.word	0x08005224
 8000630:	08005250 	.word	0x08005250
 8000634:	0800527c 	.word	0x0800527c
 8000638:	08005280 	.word	0x08005280
 800063c:	080051b8 	.word	0x080051b8
 8000640:	08005284 	.word	0x08005284
 8000644:	2000014c 	.word	0x2000014c

08000648 <LocalBB_PrintStatus>:
    return g_local_bb.direction;
}

/* ==================== 调试输出 ==================== */

void LocalBB_PrintStatus(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    printf("\r\n=== LocalBB Status ===\r\n");
 800064c:	481f      	ldr	r0, [pc, #124]	@ (80006cc <LocalBB_PrintStatus+0x84>)
 800064e:	f003 fcfb 	bl	8004048 <puts>
    printf("Floor: %d (expect: %d)\r\n", 
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000652:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000654:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
    printf("Floor: %d (expect: %d)\r\n", 
 8000658:	4619      	mov	r1, r3
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 800065a:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 800065c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
    printf("Floor: %d (expect: %d)\r\n", 
 8000660:	461a      	mov	r2, r3
 8000662:	481c      	ldr	r0, [pc, #112]	@ (80006d4 <LocalBB_PrintStatus+0x8c>)
 8000664:	f003 fc88 	bl	8003f78 <iprintf>
    printf("Direction: %s, Target: %d\r\n",
           g_local_bb.direction == DIR_UP ? "UP" : 
 8000668:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 800066a:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
    printf("Direction: %s, Target: %d\r\n",
 800066e:	2b01      	cmp	r3, #1
 8000670:	d008      	beq.n	8000684 <LocalBB_PrintStatus+0x3c>
           g_local_bb.direction == DIR_DOWN ? "DOWN" : "STOP",
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000674:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000678:	2b02      	cmp	r3, #2
 800067a:	d101      	bne.n	8000680 <LocalBB_PrintStatus+0x38>
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <LocalBB_PrintStatus+0x90>)
 800067e:	e002      	b.n	8000686 <LocalBB_PrintStatus+0x3e>
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <LocalBB_PrintStatus+0x94>)
 8000682:	e000      	b.n	8000686 <LocalBB_PrintStatus+0x3e>
    printf("Direction: %s, Target: %d\r\n",
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <LocalBB_PrintStatus+0x98>)
           g_local_bb.target_floor);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000688:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
    printf("Direction: %s, Target: %d\r\n",
 800068c:	4619      	mov	r1, r3
 800068e:	4815      	ldr	r0, [pc, #84]	@ (80006e4 <LocalBB_PrintStatus+0x9c>)
 8000690:	f003 fc72 	bl	8003f78 <iprintf>
    printf("Events: %d in queue\r\n", g_local_bb.event_count);
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 8000696:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800069a:	4619      	mov	r1, r3
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <LocalBB_PrintStatus+0xa0>)
 800069e:	f003 fc6b 	bl	8003f78 <iprintf>
    printf("Stats: Cabin=%lu, Photo=%lu, RS485=%lu\r\n",
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 80006a4:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 80006aa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <LocalBB_PrintStatus+0x88>)
 80006b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <LocalBB_PrintStatus+0xa4>)
 80006b6:	f003 fc5f 	bl	8003f78 <iprintf>
           g_local_bb.cabin_call_count,
           g_local_bb.photo_trigger_count,
           g_local_bb.rs485_send_count);
    printf("Debug: %s\r\n", g_local_bb.debug_msg);
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LocalBB_PrintStatus+0xa8>)
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <LocalBB_PrintStatus+0xac>)
 80006be:	f003 fc5b 	bl	8003f78 <iprintf>
    printf("======================\r\n");
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <LocalBB_PrintStatus+0xb0>)
 80006c4:	f003 fcc0 	bl	8004048 <puts>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08005294 	.word	0x08005294
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	080052b0 	.word	0x080052b0
 80006d8:	080051a8 	.word	0x080051a8
 80006dc:	080051b0 	.word	0x080051b0
 80006e0:	080051b8 	.word	0x080051b8
 80006e4:	080052cc 	.word	0x080052cc
 80006e8:	080052e8 	.word	0x080052e8
 80006ec:	08005300 	.word	0x08005300
 80006f0:	2000014c 	.word	0x2000014c
 80006f4:	0800532c 	.word	0x0800532c
 80006f8:	08005338 	.word	0x08005338

080006fc <rs485_init>:

/**
 * @brief Initialize RS485 driver
 */
rs485_status_t rs485_init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    /* Clear driver structure */
    memset(&rs485_driver, 0, sizeof(rs485_driver));
 8000700:	2248      	movs	r2, #72	@ 0x48
 8000702:	2100      	movs	r1, #0
 8000704:	4816      	ldr	r0, [pc, #88]	@ (8000760 <rs485_init+0x64>)
 8000706:	f003 fda1 	bl	800424c <memset>
    
    /* Set buffer pointers */
    rs485_driver.dma_rx_buffer = rs485_dma_rx_buffer;
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <rs485_init+0x64>)
 800070c:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <rs485_init+0x68>)
 800070e:	605a      	str	r2, [r3, #4]
    rs485_driver.rx_buffer = rs485_rx_ring_buffer;
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <rs485_init+0x64>)
 8000712:	4a15      	ldr	r2, [pc, #84]	@ (8000768 <rs485_init+0x6c>)
 8000714:	609a      	str	r2, [r3, #8]
    rs485_driver.tx_buffer = rs485_tx_ring_buffer;
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <rs485_init+0x64>)
 8000718:	4a14      	ldr	r2, [pc, #80]	@ (800076c <rs485_init+0x70>)
 800071a:	60da      	str	r2, [r3, #12]
    
    /* Initialize ring buffers */
    ring_buffer_init(&rs485_driver.rx_ring, rs485_rx_ring_buffer, RS485_RX_BUFFER_SIZE);
 800071c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000720:	4911      	ldr	r1, [pc, #68]	@ (8000768 <rs485_init+0x6c>)
 8000722:	4813      	ldr	r0, [pc, #76]	@ (8000770 <rs485_init+0x74>)
 8000724:	f000 f8c2 	bl	80008ac <ring_buffer_init>
    ring_buffer_init(&rs485_driver.tx_ring, rs485_tx_ring_buffer, RS485_TX_BUFFER_SIZE);
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	490f      	ldr	r1, [pc, #60]	@ (800076c <rs485_init+0x70>)
 800072e:	4811      	ldr	r0, [pc, #68]	@ (8000774 <rs485_init+0x78>)
 8000730:	f000 f8bc 	bl	80008ac <ring_buffer_init>
    
    /* Set UART handle */
    rs485_driver.huart = &huart2;  /* slavemcu uses USART2 */
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <rs485_init+0x64>)
 8000736:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <rs485_init+0x7c>)
 8000738:	601a      	str	r2, [r3, #0]
    
    /* Clear DMA buffer */
    memset(rs485_dma_rx_buffer, 0, RS485_DMA_RX_BUFFER_SIZE);
 800073a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800073e:	2100      	movs	r1, #0
 8000740:	4808      	ldr	r0, [pc, #32]	@ (8000764 <rs485_init+0x68>)
 8000742:	f003 fd83 	bl	800424c <memset>
    
    /* Start DMA reception in circular mode */
    HAL_UART_Receive_DMA(rs485_driver.huart, rs485_dma_rx_buffer, RS485_DMA_RX_BUFFER_SIZE);
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <rs485_init+0x64>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800074e:	4905      	ldr	r1, [pc, #20]	@ (8000764 <rs485_init+0x68>)
 8000750:	4618      	mov	r0, r3
 8000752:	f002 ff8d 	bl	8003670 <HAL_UART_Receive_DMA>
    
    /* Enable IDLE interrupt */
    // __HAL_UART_ENABLE_IT(rs485_driver.huart, UART_IT_IDLE);
    
    /* Reset statistics */
    rs485_reset_stats();
 8000756:	f000 f89d 	bl	8000894 <rs485_reset_stats>
    
    return RS485_OK;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000016c 	.word	0x2000016c
 8000764:	200001b4 	.word	0x200001b4
 8000768:	200002b4 	.word	0x200002b4
 800076c:	200004b4 	.word	0x200004b4
 8000770:	2000017c 	.word	0x2000017c
 8000774:	20000188 	.word	0x20000188
 8000778:	2000074c 	.word	0x2000074c

0800077c <rs485_send_packet_dma>:

/**
 * @brief Send packet via RS485 using DMA (non-blocking)
 */
rs485_status_t rs485_send_packet_dma(const uint8_t *data, uint16_t length)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    
    if (data == NULL || length == 0 || length > RS485_TX_BUFFER_SIZE) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d006      	beq.n	800079c <rs485_send_packet_dma+0x20>
 800078e:	887b      	ldrh	r3, [r7, #2]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <rs485_send_packet_dma+0x20>
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800079a:	d901      	bls.n	80007a0 <rs485_send_packet_dma+0x24>
        return RS485_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e036      	b.n	800080e <rs485_send_packet_dma+0x92>
    }
    
    if (rs485_driver.tx_pending) {
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <rs485_send_packet_dma+0x34>
        return RS485_BUSY;
 80007ac:	2302      	movs	r3, #2
 80007ae:	e02e      	b.n	800080e <rs485_send_packet_dma+0x92>
    }
    
    /* Set pending flag */
    rs485_driver.tx_pending = 1;
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    
    /* Copy data to TX buffer */
    memcpy(rs485_driver.tx_buffer, data, length);
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	887a      	ldrh	r2, [r7, #2]
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fdbe 	bl	8004342 <memcpy>
    
    /* Send data via DMA */
    status = HAL_UART_Transmit_DMA(rs485_driver.huart, rs485_driver.tx_buffer, length);
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007cc:	68d1      	ldr	r1, [r2, #12]
 80007ce:	887a      	ldrh	r2, [r7, #2]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fedd 	bl	8003590 <HAL_UART_Transmit_DMA>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73fb      	strb	r3, [r7, #15]
    
    if (status == HAL_OK) {
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10c      	bne.n	80007fa <rs485_send_packet_dma+0x7e>
        rs485_driver.stats.tx_packets++;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        rs485_driver.stats.tx_bytes += length;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007f4:	6353      	str	r3, [r2, #52]	@ 0x34
        return RS485_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e009      	b.n	800080e <rs485_send_packet_dma+0x92>
    } else {
        rs485_driver.stats.tx_errors++;
 80007fa:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	3301      	adds	r3, #1
 8000800:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 8000802:	6413      	str	r3, [r2, #64]	@ 0x40
        rs485_driver.tx_pending = 0;
 8000804:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <rs485_send_packet_dma+0x9c>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        return RS485_ERROR;
 800080c:	2301      	movs	r3, #1
    }
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000016c 	.word	0x2000016c

0800081c <rs485_receive_packet>:

/**
 * @brief Receive packet from RS485
 */
uint16_t rs485_receive_packet(uint8_t *buffer, uint16_t max_length)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
    if (buffer == NULL || max_length == 0) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <rs485_receive_packet+0x18>
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <rs485_receive_packet+0x1c>
        return 0;
 8000834:	2300      	movs	r3, #0
 8000836:	e013      	b.n	8000860 <rs485_receive_packet+0x44>
    }
    
    /* Process any pending DMA data */
    rs485_process_dma_rx();
 8000838:	f000 f8c2 	bl	80009c0 <rs485_process_dma_rx>
    
    /* Read from ring buffer */
    uint16_t received = ring_buffer_read(&rs485_driver.rx_ring, buffer, max_length);
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	461a      	mov	r2, r3
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4809      	ldr	r0, [pc, #36]	@ (8000868 <rs485_receive_packet+0x4c>)
 8000844:	f000 f883 	bl	800094e <ring_buffer_read>
 8000848:	4603      	mov	r3, r0
 800084a:	81fb      	strh	r3, [r7, #14]
    
    if (received > 0) {
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d005      	beq.n	800085e <rs485_receive_packet+0x42>
        rs485_driver.stats.rx_bytes += received;
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <rs485_receive_packet+0x50>)
 8000854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	4413      	add	r3, r2
 800085a:	4a04      	ldr	r2, [pc, #16]	@ (800086c <rs485_receive_packet+0x50>)
 800085c:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    
    return received;
 800085e:	89fb      	ldrh	r3, [r7, #14]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000017c 	.word	0x2000017c
 800086c:	2000016c 	.word	0x2000016c

08000870 <rs485_get_stats>:

/**
 * @brief Get RS485 statistics
 */
void rs485_get_stats(rs485_stats_t *stats)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    if (stats != NULL) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d004      	beq.n	8000888 <rs485_get_stats+0x18>
        memcpy(stats, &rs485_driver.stats, sizeof(rs485_stats_t));
 800087e:	2218      	movs	r2, #24
 8000880:	4903      	ldr	r1, [pc, #12]	@ (8000890 <rs485_get_stats+0x20>)
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f003 fd5d 	bl	8004342 <memcpy>
    }
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000198 	.word	0x20000198

08000894 <rs485_reset_stats>:

/**
 * @brief Reset RS485 statistics
 */
void rs485_reset_stats(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    memset(&rs485_driver.stats, 0, sizeof(rs485_stats_t));
 8000898:	2218      	movs	r2, #24
 800089a:	2100      	movs	r1, #0
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <rs485_reset_stats+0x14>)
 800089e:	f003 fcd5 	bl	800424c <memset>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000198 	.word	0x20000198

080008ac <ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
static void ring_buffer_init(ring_buffer_t *rb, uint8_t *buffer, uint16_t size)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	4613      	mov	r3, r2
 80008b8:	80fb      	strh	r3, [r7, #6]
    rb->buffer = buffer;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	601a      	str	r2, [r3, #0]
    rb->size = size;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	88fa      	ldrh	r2, [r7, #6]
 80008c4:	809a      	strh	r2, [r3, #4]
    rb->head = 0;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2200      	movs	r2, #0
 80008ca:	80da      	strh	r2, [r3, #6]
    rb->tail = 0;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	811a      	strh	r2, [r3, #8]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <ring_buffer_write>:

/**
 * @brief Write data to ring buffer
 */
static uint16_t ring_buffer_write(ring_buffer_t *rb, const uint8_t *data, uint16_t length)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4613      	mov	r3, r2
 80008e8:	80fb      	strh	r3, [r7, #6]
    uint16_t written = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	82fb      	strh	r3, [r7, #22]
    
    while (written < length) {
 80008ee:	e022      	b.n	8000936 <ring_buffer_write+0x5a>
        uint16_t next_head = (rb->head + 1) % rb->size;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	88db      	ldrh	r3, [r3, #6]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3301      	adds	r3, #1
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	8892      	ldrh	r2, [r2, #4]
 80008fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000900:	fb01 f202 	mul.w	r2, r1, r2
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	82bb      	strh	r3, [r7, #20]
        
        /* Check if buffer is full */
        if (next_head == rb->tail) {
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	891b      	ldrh	r3, [r3, #8]
 800090c:	b29b      	uxth	r3, r3
 800090e:	8aba      	ldrh	r2, [r7, #20]
 8000910:	429a      	cmp	r2, r3
 8000912:	d015      	beq.n	8000940 <ring_buffer_write+0x64>
            break;  /* Buffer full */
        }
        
        rb->buffer[rb->head] = data[written];
 8000914:	8afb      	ldrh	r3, [r7, #22]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	441a      	add	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	88c9      	ldrh	r1, [r1, #6]
 8000922:	b289      	uxth	r1, r1
 8000924:	440b      	add	r3, r1
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	701a      	strb	r2, [r3, #0]
        rb->head = next_head;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	8aba      	ldrh	r2, [r7, #20]
 800092e:	80da      	strh	r2, [r3, #6]
        written++;
 8000930:	8afb      	ldrh	r3, [r7, #22]
 8000932:	3301      	adds	r3, #1
 8000934:	82fb      	strh	r3, [r7, #22]
    while (written < length) {
 8000936:	8afa      	ldrh	r2, [r7, #22]
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	429a      	cmp	r2, r3
 800093c:	d3d8      	bcc.n	80008f0 <ring_buffer_write+0x14>
 800093e:	e000      	b.n	8000942 <ring_buffer_write+0x66>
            break;  /* Buffer full */
 8000940:	bf00      	nop
    }
    
    return written;
 8000942:	8afb      	ldrh	r3, [r7, #22]
}
 8000944:	4618      	mov	r0, r3
 8000946:	371c      	adds	r7, #28
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <ring_buffer_read>:

/**
 * @brief Read data from ring buffer
 */
static uint16_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data, uint16_t length)
{
 800094e:	b480      	push	{r7}
 8000950:	b087      	sub	sp, #28
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	4613      	mov	r3, r2
 800095a:	80fb      	strh	r3, [r7, #6]
    uint16_t read = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	82fb      	strh	r3, [r7, #22]
    
    while (read < length && rb->tail != rb->head) {
 8000960:	e01b      	b.n	800099a <ring_buffer_read+0x4c>
        data[read] = rb->buffer[rb->tail];
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	8912      	ldrh	r2, [r2, #8]
 800096a:	b292      	uxth	r2, r2
 800096c:	441a      	add	r2, r3
 800096e:	8afb      	ldrh	r3, [r7, #22]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	440b      	add	r3, r1
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	701a      	strb	r2, [r3, #0]
        rb->tail = (rb->tail + 1) % rb->size;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	891b      	ldrh	r3, [r3, #8]
 800097c:	b29b      	uxth	r3, r3
 800097e:	3301      	adds	r3, #1
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	8892      	ldrh	r2, [r2, #4]
 8000984:	fb93 f1f2 	sdiv	r1, r3, r2
 8000988:	fb01 f202 	mul.w	r2, r1, r2
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	b29a      	uxth	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	811a      	strh	r2, [r3, #8]
        read++;
 8000994:	8afb      	ldrh	r3, [r7, #22]
 8000996:	3301      	adds	r3, #1
 8000998:	82fb      	strh	r3, [r7, #22]
    while (read < length && rb->tail != rb->head) {
 800099a:	8afa      	ldrh	r2, [r7, #22]
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d207      	bcs.n	80009b2 <ring_buffer_read+0x64>
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	891b      	ldrh	r3, [r3, #8]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	88db      	ldrh	r3, [r3, #6]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d1d7      	bne.n	8000962 <ring_buffer_read+0x14>
    }
    
    return read;
 80009b2:	8afb      	ldrh	r3, [r7, #22]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	371c      	adds	r7, #28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
	...

080009c0 <rs485_process_dma_rx>:

/**
 * @brief Process DMA received data
 */
static void rs485_process_dma_rx(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
    /* Get current DMA position */
    uint16_t dma_pos = RS485_DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(rs485_driver.huart->hdmarx);
 80009c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80009d6:	80bb      	strh	r3, [r7, #4]
    
    /* Calculate received bytes */
    uint16_t length;
    if (dma_pos >= rs485_driver.last_dma_pos) {
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 80009da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009dc:	b29b      	uxth	r3, r3
 80009de:	88ba      	ldrh	r2, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d306      	bcc.n	80009f2 <rs485_process_dma_rx+0x32>
        length = dma_pos - rs485_driver.last_dma_pos;
 80009e4:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 80009e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	88ba      	ldrh	r2, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	80fb      	strh	r3, [r7, #6]
 80009f0:	e008      	b.n	8000a04 <rs485_process_dma_rx+0x44>
    } else {
        /* DMA wrapped around */
        length = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos + dma_pos;
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 80009f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	88ba      	ldrh	r2, [r7, #4]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a02:	80fb      	strh	r3, [r7, #6]
    }
    
    if (length > 0) {
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d031      	beq.n	8000a6e <rs485_process_dma_rx+0xae>
        /* Copy data to ring buffer */
        if (rs485_driver.last_dma_pos + length <= RS485_DMA_RX_BUFFER_SIZE) {
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 8000a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	4413      	add	r3, r2
 8000a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a1a:	dc0b      	bgt.n	8000a34 <rs485_process_dma_rx+0x74>
            /* Simple copy */
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 8000a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <rs485_process_dma_rx+0xbc>)
 8000a26:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8000a28:	88fa      	ldrh	r2, [r7, #6]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <rs485_process_dma_rx+0xc0>)
 8000a2e:	f7ff ff55 	bl	80008dc <ring_buffer_write>
 8000a32:	e019      	b.n	8000a68 <rs485_process_dma_rx+0xa8>
                            length);
        } else {
            /* Wrapped copy */
            uint16_t first_part = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos;
 8000a34:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 8000a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000a3e:	807b      	strh	r3, [r7, #2]
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 8000a40:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 8000a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <rs485_process_dma_rx+0xbc>)
 8000a4a:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8000a4c:	887a      	ldrh	r2, [r7, #2]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480b      	ldr	r0, [pc, #44]	@ (8000a80 <rs485_process_dma_rx+0xc0>)
 8000a52:	f7ff ff43 	bl	80008dc <ring_buffer_write>
                            first_part);
            ring_buffer_write(&rs485_driver.rx_ring, 
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4906      	ldr	r1, [pc, #24]	@ (8000a7c <rs485_process_dma_rx+0xbc>)
 8000a62:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <rs485_process_dma_rx+0xc0>)
 8000a64:	f7ff ff3a 	bl	80008dc <ring_buffer_write>
                            &rs485_dma_rx_buffer[0], 
                            length - first_part);
        }
        
        /* Update last position */
        rs485_driver.last_dma_pos = dma_pos;
 8000a68:	4a03      	ldr	r2, [pc, #12]	@ (8000a78 <rs485_process_dma_rx+0xb8>)
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	8553      	strh	r3, [r2, #42]	@ 0x2a
    }
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000016c 	.word	0x2000016c
 8000a7c:	200001b4 	.word	0x200001b4
 8000a80:	2000017c 	.word	0x2000017c

08000a84 <RS485_Test_SendSimple>:
}

/**
 * @brief 发送简单测试数据包
 */
void RS485_Test_SendSimple(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
    uint8_t test_data[8] = {0x55, 0xAA, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60};
 8000a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b44 <RS485_Test_SendSimple+0xc0>)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a92:	e883 0003 	stmia.w	r3, {r0, r1}
    
    // printf("[RS485_TEST] Sending simple test packet\r\n");
    printf("  Data: ");
 8000a96:	482c      	ldr	r0, [pc, #176]	@ (8000b48 <RS485_Test_SendSimple+0xc4>)
 8000a98:	f003 fa6e 	bl	8003f78 <iprintf>
    for(int i = 0; i < 8; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e00a      	b.n	8000ab8 <RS485_Test_SendSimple+0x34>
        printf("0x%02X ", test_data[i]);
 8000aa2:	463a      	mov	r2, r7
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4827      	ldr	r0, [pc, #156]	@ (8000b4c <RS485_Test_SendSimple+0xc8>)
 8000aae:	f003 fa63 	bl	8003f78 <iprintf>
    for(int i = 0; i < 8; i++) {
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	ddf1      	ble.n	8000aa2 <RS485_Test_SendSimple+0x1e>
    }
    printf("\r\n");
 8000abe:	4824      	ldr	r0, [pc, #144]	@ (8000b50 <RS485_Test_SendSimple+0xcc>)
 8000ac0:	f003 fac2 	bl	8004048 <puts>
    
    /* 方法1: 使用HAL_UART_Transmit (阻塞式) */
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, test_data, 8, 100);
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	2364      	movs	r3, #100	@ 0x64
 8000ac8:	2208      	movs	r2, #8
 8000aca:	4822      	ldr	r0, [pc, #136]	@ (8000b54 <RS485_Test_SendSimple+0xd0>)
 8000acc:	f002 fcd4 	bl	8003478 <HAL_UART_Transmit>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	72fb      	strb	r3, [r7, #11]
    
    if (status == HAL_OK) {
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d108      	bne.n	8000aec <RS485_Test_SendSimple+0x68>
        test_state.send_success++;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <RS485_Test_SendSimple+0xd4>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b58 <RS485_Test_SendSimple+0xd4>)
 8000ae2:	6053      	str	r3, [r2, #4]
        printf("  [OK] HAL_UART_Transmit success\r\n");
 8000ae4:	481d      	ldr	r0, [pc, #116]	@ (8000b5c <RS485_Test_SendSimple+0xd8>)
 8000ae6:	f003 faaf 	bl	8004048 <puts>
 8000aea:	e009      	b.n	8000b00 <RS485_Test_SendSimple+0x7c>
    } else {
        test_state.send_fail++;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <RS485_Test_SendSimple+0xd4>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <RS485_Test_SendSimple+0xd4>)
 8000af4:	6093      	str	r3, [r2, #8]
        printf("  [FAIL] HAL_UART_Transmit error: %d\r\n", status);
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4819      	ldr	r0, [pc, #100]	@ (8000b60 <RS485_Test_SendSimple+0xdc>)
 8000afc:	f003 fa3c 	bl	8003f78 <iprintf>
    }
    
    /* 方法2: 尝试DMA发送 */
    rs485_status_t rs_status = rs485_send_packet_dma(test_data, 8);
 8000b00:	463b      	mov	r3, r7
 8000b02:	2108      	movs	r1, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe39 	bl	800077c <rs485_send_packet_dma>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	72bb      	strb	r3, [r7, #10]
    if (rs_status == RS485_OK) {
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d103      	bne.n	8000b1c <RS485_Test_SendSimple+0x98>
        printf("  [OK] DMA send initiated\r\n");
 8000b14:	4813      	ldr	r0, [pc, #76]	@ (8000b64 <RS485_Test_SendSimple+0xe0>)
 8000b16:	f003 fa97 	bl	8004048 <puts>
 8000b1a:	e009      	b.n	8000b30 <RS485_Test_SendSimple+0xac>
    } else if (rs_status == RS485_BUSY) {
 8000b1c:	7abb      	ldrb	r3, [r7, #10]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d103      	bne.n	8000b2a <RS485_Test_SendSimple+0xa6>
        printf("  [BUSY] DMA is busy\r\n");
 8000b22:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <RS485_Test_SendSimple+0xe4>)
 8000b24:	f003 fa90 	bl	8004048 <puts>
 8000b28:	e002      	b.n	8000b30 <RS485_Test_SendSimple+0xac>
    } else {
        printf("  [FAIL] DMA send error\r\n");
 8000b2a:	4810      	ldr	r0, [pc, #64]	@ (8000b6c <RS485_Test_SendSimple+0xe8>)
 8000b2c:	f003 fa8c 	bl	8004048 <puts>
    }
    
    test_state.test_count++;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <RS485_Test_SendSimple+0xd4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <RS485_Test_SendSimple+0xd4>)
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	080054d0 	.word	0x080054d0
 8000b48:	08005420 	.word	0x08005420
 8000b4c:	0800542c 	.word	0x0800542c
 8000b50:	0800541c 	.word	0x0800541c
 8000b54:	2000074c 	.word	0x2000074c
 8000b58:	200006b4 	.word	0x200006b4
 8000b5c:	08005434 	.word	0x08005434
 8000b60:	08005458 	.word	0x08005458
 8000b64:	08005480 	.word	0x08005480
 8000b68:	0800549c 	.word	0x0800549c
 8000b6c:	080054b4 	.word	0x080054b4

08000b70 <RS485_Test_SendProtocol>:

/**
 * @brief 发送协议测试数据包（模拟按键）
 */
void RS485_Test_SendProtocol(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af02      	add	r7, sp, #8
    static uint8_t floor = 1;
    uint8_t cabin_call[4] = {CMD_CABIN_CALL, floor, 0, 0};
 8000b76:	2331      	movs	r3, #49	@ 0x31
 8000b78:	703b      	strb	r3, [r7, #0]
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <RS485_Test_SendProtocol+0x94>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	707b      	strb	r3, [r7, #1]
 8000b80:	2300      	movs	r3, #0
 8000b82:	70bb      	strb	r3, [r7, #2]
 8000b84:	2300      	movs	r3, #0
 8000b86:	70fb      	strb	r3, [r7, #3]
    
    printf("\r\n[TEST] Cabin Call Floor %d\r\n", floor);
 8000b88:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <RS485_Test_SendProtocol+0x94>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481e      	ldr	r0, [pc, #120]	@ (8000c08 <RS485_Test_SendProtocol+0x98>)
 8000b90:	f003 f9f2 	bl	8003f78 <iprintf>
    
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, cabin_call, 4, 100);
 8000b94:	4639      	mov	r1, r7
 8000b96:	2364      	movs	r3, #100	@ 0x64
 8000b98:	2204      	movs	r2, #4
 8000b9a:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <RS485_Test_SendProtocol+0x9c>)
 8000b9c:	f002 fc6c 	bl	8003478 <HAL_UART_Transmit>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
    
    if (status == HAL_OK) {
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d11e      	bne.n	8000be8 <RS485_Test_SendProtocol+0x78>
        test_state.send_success++;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <RS485_Test_SendProtocol+0xa0>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <RS485_Test_SendProtocol+0xa0>)
 8000bb2:	6053      	str	r3, [r2, #4]
        printf("  TX: 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
               cabin_call[0], cabin_call[1], cabin_call[2], cabin_call[3]);
 8000bb4:	783b      	ldrb	r3, [r7, #0]
        printf("  TX: 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
 8000bb6:	4619      	mov	r1, r3
               cabin_call[0], cabin_call[1], cabin_call[2], cabin_call[3]);
 8000bb8:	787b      	ldrb	r3, [r7, #1]
        printf("  TX: 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
 8000bba:	461a      	mov	r2, r3
               cabin_call[0], cabin_call[1], cabin_call[2], cabin_call[3]);
 8000bbc:	78bb      	ldrb	r3, [r7, #2]
        printf("  TX: 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
 8000bbe:	4618      	mov	r0, r3
               cabin_call[0], cabin_call[1], cabin_call[2], cabin_call[3]);
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
        printf("  TX: 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4813      	ldr	r0, [pc, #76]	@ (8000c14 <RS485_Test_SendProtocol+0xa4>)
 8000bc8:	f003 f9d6 	bl	8003f78 <iprintf>
        
        /* 循环楼层1-3 */
        floor++;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <RS485_Test_SendProtocol+0x94>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <RS485_Test_SendProtocol+0x94>)
 8000bd6:	701a      	strb	r2, [r3, #0]
        if (floor > 3) floor = 1;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <RS485_Test_SendProtocol+0x94>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d90d      	bls.n	8000bfc <RS485_Test_SendProtocol+0x8c>
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <RS485_Test_SendProtocol+0x94>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
    } else {
        test_state.send_fail++;
        printf("  [FAIL] TX error: %d\r\n", status);
    }
}
 8000be6:	e009      	b.n	8000bfc <RS485_Test_SendProtocol+0x8c>
        test_state.send_fail++;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <RS485_Test_SendProtocol+0xa0>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <RS485_Test_SendProtocol+0xa0>)
 8000bf0:	6093      	str	r3, [r2, #8]
        printf("  [FAIL] TX error: %d\r\n", status);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <RS485_Test_SendProtocol+0xa8>)
 8000bf8:	f003 f9be 	bl	8003f78 <iprintf>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	080054d8 	.word	0x080054d8
 8000c0c:	2000074c 	.word	0x2000074c
 8000c10:	200006b4 	.word	0x200006b4
 8000c14:	080054f8 	.word	0x080054f8
 8000c18:	0800551c 	.word	0x0800551c

08000c1c <RS485_Test_SimulatePhotoSensor>:
}

/**
 * @brief 模拟光电传感器触发
 */
void RS485_Test_SimulatePhotoSensor(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
    static uint8_t floor = 1;
    uint8_t photo_data[4] = {CMD_PHOTO_SENSOR, floor, 0, 0};
 8000c22:	2310      	movs	r3, #16
 8000c24:	703b      	strb	r3, [r7, #0]
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <RS485_Test_SimulatePhotoSensor+0x6c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	707b      	strb	r3, [r7, #1]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	70bb      	strb	r3, [r7, #2]
 8000c30:	2300      	movs	r3, #0
 8000c32:	70fb      	strb	r3, [r7, #3]
    
    printf("[RS485_TEST] Simulating photo sensor at floor %d\r\n", floor);
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <RS485_Test_SimulatePhotoSensor+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	@ (8000c8c <RS485_Test_SimulatePhotoSensor+0x70>)
 8000c3c:	f003 f99c 	bl	8003f78 <iprintf>
    
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, photo_data, 4, 100);
 8000c40:	4639      	mov	r1, r7
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	2204      	movs	r2, #4
 8000c46:	4812      	ldr	r0, [pc, #72]	@ (8000c90 <RS485_Test_SimulatePhotoSensor+0x74>)
 8000c48:	f002 fc16 	bl	8003478 <HAL_UART_Transmit>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
    
    if (status == HAL_OK) {
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d110      	bne.n	8000c78 <RS485_Test_SimulatePhotoSensor+0x5c>
        printf("  [OK] Photo sensor event sent\r\n");
 8000c56:	480f      	ldr	r0, [pc, #60]	@ (8000c94 <RS485_Test_SimulatePhotoSensor+0x78>)
 8000c58:	f003 f9f6 	bl	8004048 <puts>
        floor++;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <RS485_Test_SimulatePhotoSensor+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <RS485_Test_SimulatePhotoSensor+0x6c>)
 8000c66:	701a      	strb	r2, [r3, #0]
        if (floor > 3) floor = 1;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <RS485_Test_SimulatePhotoSensor+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d906      	bls.n	8000c7e <RS485_Test_SimulatePhotoSensor+0x62>
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <RS485_Test_SimulatePhotoSensor+0x6c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
    } else {
        printf("  [FAIL] Send error\r\n");
    }
}
 8000c76:	e002      	b.n	8000c7e <RS485_Test_SimulatePhotoSensor+0x62>
        printf("  [FAIL] Send error\r\n");
 8000c78:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <RS485_Test_SimulatePhotoSensor+0x7c>)
 8000c7a:	f003 f9e5 	bl	8004048 <puts>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000001 	.word	0x20000001
 8000c8c:	080056cc 	.word	0x080056cc
 8000c90:	2000074c 	.word	0x2000074c
 8000c94:	08005700 	.word	0x08005700
 8000c98:	080056b4 	.word	0x080056b4

08000c9c <RS485_Test_Process>:

/**
 * @brief RS485测试主处理函数
 */
void RS485_Test_Process(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000ca2:	f001 fa93 	bl	80021cc <HAL_GetTick>
 8000ca6:	6078      	str	r0, [r7, #4]
    
    /* 先检查接收（总是检查） */
    // RS485_Test_CheckReceive();
    
    /* 每3秒执行一次发送测试 */
    if (current_time - test_state.last_test_time < 3000) {
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <RS485_Test_Process+0x7c>)
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d92b      	bls.n	8000d10 <RS485_Test_Process+0x74>
        return;
    }
    test_state.last_test_time = current_time;
 8000cb8:	4a17      	ldr	r2, [pc, #92]	@ (8000d18 <RS485_Test_Process+0x7c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6113      	str	r3, [r2, #16]
    
    /* 根据测试模式执行不同测试 */
    switch(test_state.test_mode) {
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <RS485_Test_Process+0x7c>)
 8000cc0:	7d1b      	ldrb	r3, [r3, #20]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d00c      	beq.n	8000ce0 <RS485_Test_Process+0x44>
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	dc0d      	bgt.n	8000ce6 <RS485_Test_Process+0x4a>
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d002      	beq.n	8000cd4 <RS485_Test_Process+0x38>
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d003      	beq.n	8000cda <RS485_Test_Process+0x3e>
        case 3:  // 光电传感器模拟
            RS485_Test_SimulatePhotoSensor();
            break;
            
        default:
            break;
 8000cd2:	e008      	b.n	8000ce6 <RS485_Test_Process+0x4a>
            RS485_Test_SendSimple();
 8000cd4:	f7ff fed6 	bl	8000a84 <RS485_Test_SendSimple>
            break;
 8000cd8:	e006      	b.n	8000ce8 <RS485_Test_Process+0x4c>
            RS485_Test_SendProtocol();
 8000cda:	f7ff ff49 	bl	8000b70 <RS485_Test_SendProtocol>
            break;
 8000cde:	e003      	b.n	8000ce8 <RS485_Test_Process+0x4c>
            RS485_Test_SimulatePhotoSensor();
 8000ce0:	f7ff ff9c 	bl	8000c1c <RS485_Test_SimulatePhotoSensor>
            break;
 8000ce4:	e000      	b.n	8000ce8 <RS485_Test_Process+0x4c>
            break;
 8000ce6:	bf00      	nop
    }
    
    /* 每20次打印统计 */
    if (test_state.test_count % 20 == 0 && test_state.test_count > 0) {
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <RS485_Test_Process+0x7c>)
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <RS485_Test_Process+0x80>)
 8000cee:	fba3 2301 	umull	r2, r3, r3, r1
 8000cf2:	091a      	lsrs	r2, r3, #4
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	1aca      	subs	r2, r1, r3
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d107      	bne.n	8000d12 <RS485_Test_Process+0x76>
 8000d02:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <RS485_Test_Process+0x7c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <RS485_Test_Process+0x76>
        RS485_Test_PrintStats();
 8000d0a:	f000 f809 	bl	8000d20 <RS485_Test_PrintStats>
 8000d0e:	e000      	b.n	8000d12 <RS485_Test_Process+0x76>
        return;
 8000d10:	bf00      	nop
    }
}
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200006b4 	.word	0x200006b4
 8000d1c:	cccccccd 	.word	0xcccccccd

08000d20 <RS485_Test_PrintStats>:
}

/**
 * @brief 打印测试统计
 */
void RS485_Test_PrintStats(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
    printf("\r\n=== RS485 TEST STATISTICS (SLAVE) ===\r\n");
 8000d26:	4829      	ldr	r0, [pc, #164]	@ (8000dcc <RS485_Test_PrintStats+0xac>)
 8000d28:	f003 f98e 	bl	8004048 <puts>
    printf("Test Count: %lu\r\n", test_state.test_count);
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <RS485_Test_PrintStats+0xb0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4828      	ldr	r0, [pc, #160]	@ (8000dd4 <RS485_Test_PrintStats+0xb4>)
 8000d34:	f003 f920 	bl	8003f78 <iprintf>
    printf("Send Success: %lu\r\n", test_state.send_success);
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <RS485_Test_PrintStats+0xb0>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4826      	ldr	r0, [pc, #152]	@ (8000dd8 <RS485_Test_PrintStats+0xb8>)
 8000d40:	f003 f91a 	bl	8003f78 <iprintf>
    printf("Send Fail: %lu\r\n", test_state.send_fail);
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <RS485_Test_PrintStats+0xb0>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4824      	ldr	r0, [pc, #144]	@ (8000ddc <RS485_Test_PrintStats+0xbc>)
 8000d4c:	f003 f914 	bl	8003f78 <iprintf>
    printf("Receive Count: %lu\r\n", test_state.recv_count);
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <RS485_Test_PrintStats+0xb0>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4619      	mov	r1, r3
 8000d56:	4822      	ldr	r0, [pc, #136]	@ (8000de0 <RS485_Test_PrintStats+0xc0>)
 8000d58:	f003 f90e 	bl	8003f78 <iprintf>
    printf("Echo Mode: %s\r\n", test_state.echo_enabled ? "ON" : "OFF");
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <RS485_Test_PrintStats+0xb0>)
 8000d5e:	7d5b      	ldrb	r3, [r3, #21]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <RS485_Test_PrintStats+0x48>
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <RS485_Test_PrintStats+0xc4>)
 8000d66:	e000      	b.n	8000d6a <RS485_Test_PrintStats+0x4a>
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <RS485_Test_PrintStats+0xc8>)
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481f      	ldr	r0, [pc, #124]	@ (8000dec <RS485_Test_PrintStats+0xcc>)
 8000d6e:	f003 f903 	bl	8003f78 <iprintf>
    
    /* 获取RS485驱动统计 */
    rs485_stats_t stats;
    rs485_get_stats(&stats);
 8000d72:	463b      	mov	r3, r7
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fd7b 	bl	8000870 <rs485_get_stats>
    printf("\r\nDriver Stats:\r\n");
 8000d7a:	481d      	ldr	r0, [pc, #116]	@ (8000df0 <RS485_Test_PrintStats+0xd0>)
 8000d7c:	f003 f964 	bl	8004048 <puts>
    printf("  TX Packets: %lu\r\n", stats.tx_packets);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	481b      	ldr	r0, [pc, #108]	@ (8000df4 <RS485_Test_PrintStats+0xd4>)
 8000d86:	f003 f8f7 	bl	8003f78 <iprintf>
    printf("  TX Bytes: %lu\r\n", stats.tx_bytes);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481a      	ldr	r0, [pc, #104]	@ (8000df8 <RS485_Test_PrintStats+0xd8>)
 8000d90:	f003 f8f2 	bl	8003f78 <iprintf>
    printf("  TX Errors: %lu\r\n", stats.tx_errors);
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4818      	ldr	r0, [pc, #96]	@ (8000dfc <RS485_Test_PrintStats+0xdc>)
 8000d9a:	f003 f8ed 	bl	8003f78 <iprintf>
    printf("  RX Packets: %lu\r\n", stats.rx_packets);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4817      	ldr	r0, [pc, #92]	@ (8000e00 <RS485_Test_PrintStats+0xe0>)
 8000da4:	f003 f8e8 	bl	8003f78 <iprintf>
    printf("  RX Bytes: %lu\r\n", stats.rx_bytes);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4815      	ldr	r0, [pc, #84]	@ (8000e04 <RS485_Test_PrintStats+0xe4>)
 8000dae:	f003 f8e3 	bl	8003f78 <iprintf>
    printf("  RX Errors: %lu\r\n", stats.rx_errors);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <RS485_Test_PrintStats+0xe8>)
 8000db8:	f003 f8de 	bl	8003f78 <iprintf>
    printf("====================================\r\n\r\n");
 8000dbc:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <RS485_Test_PrintStats+0xec>)
 8000dbe:	f003 f943 	bl	8004048 <puts>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08005758 	.word	0x08005758
 8000dd0:	200006b4 	.word	0x200006b4
 8000dd4:	08005784 	.word	0x08005784
 8000dd8:	08005798 	.word	0x08005798
 8000ddc:	080057ac 	.word	0x080057ac
 8000de0:	080057c0 	.word	0x080057c0
 8000de4:	080057d8 	.word	0x080057d8
 8000de8:	080057dc 	.word	0x080057dc
 8000dec:	080057e0 	.word	0x080057e0
 8000df0:	080057f0 	.word	0x080057f0
 8000df4:	08005804 	.word	0x08005804
 8000df8:	08005818 	.word	0x08005818
 8000dfc:	0800582c 	.word	0x0800582c
 8000e00:	08005840 	.word	0x08005840
 8000e04:	08005854 	.word	0x08005854
 8000e08:	08005868 	.word	0x08005868
 8000e0c:	0800587c 	.word	0x0800587c

08000e10 <Keyboard_Init>:

// 全局键盘实例
Keyboard_t g_keyboard;

// 初始化键盘模块
void Keyboard_Init(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    // 清零结构体
    memset(&g_keyboard, 0, sizeof(Keyboard_t));
 8000e14:	2228      	movs	r2, #40	@ 0x28
 8000e16:	2100      	movs	r1, #0
 8000e18:	4811      	ldr	r0, [pc, #68]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e1a:	f003 fa17 	bl	800424c <memset>
    
    // 初始化变量
    g_keyboard.current_key = KEY_NONE;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
    g_keyboard.last_key = KEY_NONE;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	705a      	strb	r2, [r3, #1]
    g_keyboard.last_scan_time = HAL_GetTick();
 8000e2a:	f001 f9cf 	bl	80021cc <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e32:	6053      	str	r3, [r2, #4]
    g_keyboard.key_stable = false;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	735a      	strb	r2, [r3, #13]
    g_keyboard.buffer_head = 0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
    g_keyboard.interrupt_flag = false;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = 0;
 8000e52:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <Keyboard_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
    
    // 初始化GPIO
    Keyboard_GPIO_Init();
 8000e58:	f000 fa0e 	bl	8001278 <Keyboard_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200006cc 	.word	0x200006cc

08000e64 <Keyboard_Handler>:

// 主处理函数 - 中断模式
void Keyboard_Handler(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
    // 检查中断标志
    if (g_keyboard.interrupt_flag) {
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <Keyboard_Handler+0x88>)
 8000e6c:	7e5b      	ldrb	r3, [r3, #25]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d027      	beq.n	8000ec4 <Keyboard_Handler+0x60>
        g_keyboard.interrupt_flag = false;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <Keyboard_Handler+0x88>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	765a      	strb	r2, [r3, #25]
        
        uint32_t current_time = HAL_GetTick();
 8000e7a:	f001 f9a7 	bl	80021cc <HAL_GetTick>
 8000e7e:	60f8      	str	r0, [r7, #12]
        
        // 去抖处理 - 两次按键间隔至少 KEYBOARD_DEBOUNCE_TIME
        if (current_time - g_keyboard.last_scan_time >= KEYBOARD_DEBOUNCE_TIME) {
 8000e80:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <Keyboard_Handler+0x88>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b63      	cmp	r3, #99	@ 0x63
 8000e8a:	d91b      	bls.n	8000ec4 <Keyboard_Handler+0x60>
            g_keyboard.last_scan_time = current_time;
 8000e8c:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <Keyboard_Handler+0x88>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6053      	str	r3, [r2, #4]
            
            // 延时5ms后再扫描，等待信号稳定
            HAL_Delay(5);
 8000e92:	2005      	movs	r0, #5
 8000e94:	f001 f9a4 	bl	80021e0 <HAL_Delay>
            
            // 扫描键盘确定哪个按键被按下
            uint8_t key = Keyboard_ScanInterrupt();
 8000e98:	f000 f82a 	bl	8000ef0 <Keyboard_ScanInterrupt>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	72fb      	strb	r3, [r7, #11]
            
            // 处理按键 - 只处理不同于上次的按键
            if (key != KEY_NONE && key != g_keyboard.last_key) {
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00b      	beq.n	8000ebe <Keyboard_Handler+0x5a>
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <Keyboard_Handler+0x88>)
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	7afa      	ldrb	r2, [r7, #11]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d006      	beq.n	8000ebe <Keyboard_Handler+0x5a>
                Keyboard_ProcessKey(key);
 8000eb0:	7afb      	ldrb	r3, [r7, #11]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9b8 	bl	8001228 <Keyboard_ProcessKey>
                g_keyboard.last_key = key;
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <Keyboard_Handler+0x88>)
 8000eba:	7afb      	ldrb	r3, [r7, #11]
 8000ebc:	7053      	strb	r3, [r2, #1]
            }
            
            // 设置按键释放超时
            g_keyboard.key_press_time = current_time;
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8000eec <Keyboard_Handler+0x88>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6093      	str	r3, [r2, #8]
        }
    }
    
    // 检查按键释放
    uint32_t current_time = HAL_GetTick();
 8000ec4:	f001 f982 	bl	80021cc <HAL_GetTick>
 8000ec8:	6078      	str	r0, [r7, #4]
    if (g_keyboard.last_key != KEY_NONE) {
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <Keyboard_Handler+0x88>)
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d008      	beq.n	8000ee4 <Keyboard_Handler+0x80>
        if (current_time - g_keyboard.key_press_time > KEYBOARD_RELEASE_TIME) {
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <Keyboard_Handler+0x88>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2bc8      	cmp	r3, #200	@ 0xc8
 8000edc:	d902      	bls.n	8000ee4 <Keyboard_Handler+0x80>
            g_keyboard.last_key = KEY_NONE;
 8000ede:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <Keyboard_Handler+0x88>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	705a      	strb	r2, [r3, #1]
        }
    }
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200006cc 	.word	0x200006cc

08000ef0 <Keyboard_ScanInterrupt>:
    
    return KEY_NONE;
}

// Scan keyboard when interrupt triggered
uint8_t Keyboard_ScanInterrupt(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
    uint8_t key = KEY_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t confirm_count = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    // First set all columns HIGH to prepare for scanning
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8000f02:	2201      	movs	r2, #1
 8000f04:	f241 1130 	movw	r1, #4400	@ 0x1130
 8000f08:	488f      	ldr	r0, [pc, #572]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8000f0a:	f001 fe24 	bl	8002b56 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_SET);
    
    // 等待电平稳定
    HAL_Delay(1);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f001 f966 	bl	80021e0 <HAL_Delay>
    // S13 -> PA12 -> Not used
    
    // Test each column one by one with confirmation
    
    // Test PA4 (COL4_PIN) for S16 -> Floor 1
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_RESET);  // PA4
 8000f14:	2200      	movs	r2, #0
 8000f16:	2110      	movs	r1, #16
 8000f18:	488b      	ldr	r0, [pc, #556]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8000f1a:	f001 fe1c 	bl	8002b56 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 等待电平稳定
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f001 f95e 	bl	80021e0 <HAL_Delay>
    // 连续读取3次确认
    confirm_count = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < 3; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
 8000f2e:	e018      	b.n	8000f62 <Keyboard_ScanInterrupt+0x72>
        if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8000f30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f34:	4884      	ldr	r0, [pc, #528]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8000f36:	f001 fdf7 	bl	8002b28 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d104      	bne.n	8000f4a <Keyboard_ScanInterrupt+0x5a>
            confirm_count++;
 8000f40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f44:	3301      	adds	r3, #1
 8000f46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        for(volatile int j = 0; j < 100; j++);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	e002      	b.n	8000f56 <Keyboard_ScanInterrupt+0x66>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b63      	cmp	r3, #99	@ 0x63
 8000f5a:	ddf9      	ble.n	8000f50 <Keyboard_ScanInterrupt+0x60>
    for (int i = 0; i < 3; i++) {
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	623b      	str	r3, [r7, #32]
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	dde3      	ble.n	8000f30 <Keyboard_ScanInterrupt+0x40>
    }
    if (confirm_count >= 2) {  // 至少3次中有2次读到低电平
 8000f68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d902      	bls.n	8000f76 <Keyboard_ScanInterrupt+0x86>
        key = KEY_S16;  // Floor 1
 8000f70:	2310      	movs	r3, #16
 8000f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4873      	ldr	r0, [pc, #460]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8000f7c:	f001 fdeb 	bl	8002b56 <HAL_GPIO_WritePin>
    
    if (key == KEY_NONE) {
 8000f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d137      	bne.n	8000ff8 <Keyboard_ScanInterrupt+0x108>
        // Test PA8 (COL1_PIN) for S15 -> Floor 2
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_RESET);  // PA8
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f8e:	486e      	ldr	r0, [pc, #440]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8000f90:	f001 fde1 	bl	8002b56 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 f923 	bl	80021e0 <HAL_Delay>
        confirm_count = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	e018      	b.n	8000fd8 <Keyboard_ScanInterrupt+0xe8>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8000fa6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000faa:	4867      	ldr	r0, [pc, #412]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8000fac:	f001 fdbc 	bl	8002b28 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d104      	bne.n	8000fc0 <Keyboard_ScanInterrupt+0xd0>
                confirm_count++;
 8000fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	e002      	b.n	8000fcc <Keyboard_ScanInterrupt+0xdc>
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b63      	cmp	r3, #99	@ 0x63
 8000fd0:	ddf9      	ble.n	8000fc6 <Keyboard_ScanInterrupt+0xd6>
        for (int i = 0; i < 3; i++) {
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dde3      	ble.n	8000fa6 <Keyboard_ScanInterrupt+0xb6>
        }
        if (confirm_count >= 2) {
 8000fde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d902      	bls.n	8000fec <Keyboard_ScanInterrupt+0xfc>
            key = KEY_S15;  // Floor 2
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff2:	4855      	ldr	r0, [pc, #340]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8000ff4:	f001 fdaf 	bl	8002b56 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 8000ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d135      	bne.n	800106c <Keyboard_ScanInterrupt+0x17c>
        // Test PA5 (COL3_PIN) for S14 -> Floor 3
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_RESET);  // PA5
 8001000:	2200      	movs	r2, #0
 8001002:	2120      	movs	r1, #32
 8001004:	4850      	ldr	r0, [pc, #320]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8001006:	f001 fda6 	bl	8002b56 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f001 f8e8 	bl	80021e0 <HAL_Delay>
        confirm_count = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	e018      	b.n	800104e <Keyboard_ScanInterrupt+0x15e>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 800101c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001020:	4849      	ldr	r0, [pc, #292]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8001022:	f001 fd81 	bl	8002b28 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d104      	bne.n	8001036 <Keyboard_ScanInterrupt+0x146>
                confirm_count++;
 800102c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001030:	3301      	adds	r3, #1
 8001032:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	e002      	b.n	8001042 <Keyboard_ScanInterrupt+0x152>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3301      	adds	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b63      	cmp	r3, #99	@ 0x63
 8001046:	ddf9      	ble.n	800103c <Keyboard_ScanInterrupt+0x14c>
        for (int i = 0; i < 3; i++) {
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	3301      	adds	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b02      	cmp	r3, #2
 8001052:	dde3      	ble.n	800101c <Keyboard_ScanInterrupt+0x12c>
        }
        if (confirm_count >= 2) {
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001058:	2b01      	cmp	r3, #1
 800105a:	d902      	bls.n	8001062 <Keyboard_ScanInterrupt+0x172>
            key = KEY_S14;  // Floor 3
 800105c:	230e      	movs	r3, #14
 800105e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2120      	movs	r1, #32
 8001066:	4838      	ldr	r0, [pc, #224]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8001068:	f001 fd75 	bl	8002b56 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 800106c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001070:	2b00      	cmp	r3, #0
 8001072:	d137      	bne.n	80010e4 <Keyboard_ScanInterrupt+0x1f4>
        // Test PA12 (COL2_PIN) for S13 -> Not used
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_RESET);  // PA12
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107a:	4833      	ldr	r0, [pc, #204]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 800107c:	f001 fd6b 	bl	8002b56 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f001 f8ad 	bl	80021e0 <HAL_Delay>
        confirm_count = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e018      	b.n	80010c4 <Keyboard_ScanInterrupt+0x1d4>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8001092:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001096:	482c      	ldr	r0, [pc, #176]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8001098:	f001 fd46 	bl	8002b28 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d104      	bne.n	80010ac <Keyboard_ScanInterrupt+0x1bc>
                confirm_count++;
 80010a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010a6:	3301      	adds	r3, #1
 80010a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	e002      	b.n	80010b8 <Keyboard_ScanInterrupt+0x1c8>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b63      	cmp	r3, #99	@ 0x63
 80010bc:	ddf9      	ble.n	80010b2 <Keyboard_ScanInterrupt+0x1c2>
        for (int i = 0; i < 3; i++) {
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	dde3      	ble.n	8001092 <Keyboard_ScanInterrupt+0x1a2>
        }
        if (confirm_count >= 2) {
 80010ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d902      	bls.n	80010d8 <Keyboard_ScanInterrupt+0x1e8>
            key = KEY_S13;  // S13 detected but not used in elevator logic
 80010d2:	230d      	movs	r3, #13
 80010d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010de:	481a      	ldr	r0, [pc, #104]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 80010e0:	f001 fd39 	bl	8002b56 <HAL_GPIO_WritePin>
    }
    
    // 等待按键释放
    if (key != KEY_NONE) {
 80010e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <Keyboard_ScanInterrupt+0x23e>
        // 等待按键释放（最多等500ms）
        uint32_t wait_start = HAL_GetTick();
 80010ec:	f001 f86e 	bl	80021cc <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]
        while ((HAL_GetTick() - wait_start) < 500) {
 80010f2:	e014      	b.n	800111e <Keyboard_ScanInterrupt+0x22e>
            // 设置所有列为HIGH
            HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 80010f4:	2201      	movs	r2, #1
 80010f6:	f241 1130 	movw	r1, #4400	@ 0x1130
 80010fa:	4813      	ldr	r0, [pc, #76]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 80010fc:	f001 fd2b 	bl	8002b56 <HAL_GPIO_WritePin>
                              KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                              KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                              GPIO_PIN_SET);
            HAL_Delay(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f001 f86d 	bl	80021e0 <HAL_Delay>
            
            // 检查是否释放
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_SET) {
 8001106:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800110a:	480f      	ldr	r0, [pc, #60]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 800110c:	f001 fd0c 	bl	8002b28 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d103      	bne.n	800111e <Keyboard_ScanInterrupt+0x22e>
                // 按键已释放
                HAL_Delay(10);  // 额外延时确保完全释放
 8001116:	200a      	movs	r0, #10
 8001118:	f001 f862 	bl	80021e0 <HAL_Delay>
                break;
 800111c:	e007      	b.n	800112e <Keyboard_ScanInterrupt+0x23e>
        while ((HAL_GetTick() - wait_start) < 500) {
 800111e:	f001 f855 	bl	80021cc <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800112c:	d3e2      	bcc.n	80010f4 <Keyboard_ScanInterrupt+0x204>
            }
        }
    }
    
    // After scanning, set all columns LOW again for next interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 800112e:	2200      	movs	r2, #0
 8001130:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <Keyboard_ScanInterrupt+0x258>)
 8001136:	f001 fd0e 	bl	8002b56 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
    
    return key;
 800113a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800113e:	4618      	mov	r0, r3
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40010800 	.word	0x40010800

0800114c <Keyboard_PushKey>:
bool Keyboard_IsKeyPressed(uint8_t key) {
    return (g_keyboard.current_key == key && g_keyboard.key_stable);
}

// 将按键推入缓冲区
bool Keyboard_PushKey(uint8_t key) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
    if (g_keyboard.buffer_count >= KEYBOARD_BUFFER_SIZE) {
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <Keyboard_PushKey+0x58>)
 8001158:	7e1b      	ldrb	r3, [r3, #24]
 800115a:	2b07      	cmp	r3, #7
 800115c:	d901      	bls.n	8001162 <Keyboard_PushKey+0x16>
        return false;  // 缓冲区满
 800115e:	2300      	movs	r3, #0
 8001160:	e01a      	b.n	8001198 <Keyboard_PushKey+0x4c>
    }
    
    g_keyboard.key_buffer[g_keyboard.buffer_tail] = key;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <Keyboard_PushKey+0x58>)
 8001164:	7ddb      	ldrb	r3, [r3, #23]
 8001166:	461a      	mov	r2, r3
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <Keyboard_PushKey+0x58>)
 800116a:	4413      	add	r3, r2
 800116c:	79fa      	ldrb	r2, [r7, #7]
 800116e:	739a      	strb	r2, [r3, #14]
    g_keyboard.buffer_tail = (g_keyboard.buffer_tail + 1) % KEYBOARD_BUFFER_SIZE;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <Keyboard_PushKey+0x58>)
 8001172:	7ddb      	ldrb	r3, [r3, #23]
 8001174:	3301      	adds	r3, #1
 8001176:	425a      	negs	r2, r3
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	f002 0207 	and.w	r2, r2, #7
 8001180:	bf58      	it	pl
 8001182:	4253      	negpl	r3, r2
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <Keyboard_PushKey+0x58>)
 8001188:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count++;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <Keyboard_PushKey+0x58>)
 800118c:	7e1b      	ldrb	r3, [r3, #24]
 800118e:	3301      	adds	r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <Keyboard_PushKey+0x58>)
 8001194:	761a      	strb	r2, [r3, #24]
    
    return true;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200006cc 	.word	0x200006cc

080011a8 <Keyboard_PopKey>:

// 从缓冲区弹出按键
bool Keyboard_PopKey(uint8_t* key) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    if (g_keyboard.buffer_count == 0) {
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <Keyboard_PopKey+0x58>)
 80011b2:	7e1b      	ldrb	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <Keyboard_PopKey+0x14>
        return false;  // 缓冲区空
 80011b8:	2300      	movs	r3, #0
 80011ba:	e01b      	b.n	80011f4 <Keyboard_PopKey+0x4c>
    }
    
    *key = g_keyboard.key_buffer[g_keyboard.buffer_head];
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <Keyboard_PopKey+0x58>)
 80011be:	7d9b      	ldrb	r3, [r3, #22]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <Keyboard_PopKey+0x58>)
 80011c4:	4413      	add	r3, r2
 80011c6:	7b9a      	ldrb	r2, [r3, #14]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	701a      	strb	r2, [r3, #0]
    g_keyboard.buffer_head = (g_keyboard.buffer_head + 1) % KEYBOARD_BUFFER_SIZE;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <Keyboard_PopKey+0x58>)
 80011ce:	7d9b      	ldrb	r3, [r3, #22]
 80011d0:	3301      	adds	r3, #1
 80011d2:	425a      	negs	r2, r3
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	f002 0207 	and.w	r2, r2, #7
 80011dc:	bf58      	it	pl
 80011de:	4253      	negpl	r3, r2
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <Keyboard_PopKey+0x58>)
 80011e4:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_count--;
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <Keyboard_PopKey+0x58>)
 80011e8:	7e1b      	ldrb	r3, [r3, #24]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <Keyboard_PopKey+0x58>)
 80011f0:	761a      	strb	r2, [r3, #24]
    
    return true;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200006cc 	.word	0x200006cc

08001204 <Keyboard_ClearBuffer>:
bool Keyboard_HasKey(void) {
    return g_keyboard.buffer_count > 0;
}

// 清空缓冲区
void Keyboard_ClearBuffer(void) {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    g_keyboard.buffer_head = 0;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <Keyboard_ClearBuffer+0x20>)
 800120a:	2200      	movs	r2, #0
 800120c:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <Keyboard_ClearBuffer+0x20>)
 8001210:	2200      	movs	r2, #0
 8001212:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <Keyboard_ClearBuffer+0x20>)
 8001216:	2200      	movs	r2, #0
 8001218:	761a      	strb	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200006cc 	.word	0x200006cc

08001228 <Keyboard_ProcessKey>:

// 处理按键
void Keyboard_ProcessKey(uint8_t key) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    if (key != KEY_NONE) {
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d019      	beq.n	800126c <Keyboard_ProcessKey+0x44>
        g_keyboard.total_key_presses++;
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <Keyboard_ProcessKey+0x4c>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	3301      	adds	r3, #1
 800123e:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <Keyboard_ProcessKey+0x4c>)
 8001240:	6213      	str	r3, [r2, #32]
        g_keyboard.key_press_time = HAL_GetTick();
 8001242:	f000 ffc3 	bl	80021cc <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <Keyboard_ProcessKey+0x4c>)
 800124a:	6093      	str	r3, [r2, #8]
        
        // 推入缓冲区
        if (!Keyboard_PushKey(key)) {
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff7c 	bl	800114c <Keyboard_PushKey>
 8001254:	4603      	mov	r3, r0
 8001256:	f083 0301 	eor.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <Keyboard_ProcessKey+0x44>
            // 缓冲区满，清空后再推入
            Keyboard_ClearBuffer();
 8001260:	f7ff ffd0 	bl	8001204 <Keyboard_ClearBuffer>
            Keyboard_PushKey(key);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff70 	bl	800114c <Keyboard_PushKey>
        }
        
    }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200006cc 	.word	0x200006cc

08001278 <Keyboard_GPIO_Init>:


// GPIO Init
void Keyboard_GPIO_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    // GPIO is already initialized in gpio.c
    // Set all columns LOW initially for interrupt mode
    // When any button is pressed, it will pull PA11 LOW and trigger interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 800127c:	2200      	movs	r2, #0
 800127e:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001282:	4802      	ldr	r0, [pc, #8]	@ (800128c <Keyboard_GPIO_Init+0x14>)
 8001284:	f001 fc67 	bl	8002b56 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40010800 	.word	0x40010800

08001290 <Keyboard_IRQHandler>:


// 中断处理函数
void Keyboard_IRQHandler(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    // 设置中断标志
    g_keyboard.interrupt_flag = true;
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <Keyboard_IRQHandler+0x18>)
 8001296:	2201      	movs	r2, #1
 8001298:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = HAL_GetTick();
 800129a:	f000 ff97 	bl	80021cc <HAL_GetTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a01      	ldr	r2, [pc, #4]	@ (80012a8 <Keyboard_IRQHandler+0x18>)
 80012a2:	61d3      	str	r3, [r2, #28]
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200006cc 	.word	0x200006cc

080012ac <PhotoSensor_Init>:

/**
 * @brief Initialize photo sensor on PB5 with interrupt
 */
void PhotoSensor_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
    
    /* Enable GPIOB clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <PhotoSensor_Init+0x68>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <PhotoSensor_Init+0x68>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <PhotoSensor_Init+0x68>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
    
    /* Configure PB5 as input with pull-up */
    GPIO_InitStruct.Pin = PHOTO_SENSOR_GPIO_PIN;  // GPIO_PIN_5
 80012d8:	2320      	movs	r3, #32
 80012da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;   /* Interrupt on rising edge only */
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <PhotoSensor_Init+0x6c>)
 80012de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;           /* Internal pull-up resistor */
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PHOTO_SENSOR_GPIO_PORT, &GPIO_InitStruct);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	@ (800131c <PhotoSensor_Init+0x70>)
 80012ec:	f001 fa98 	bl	8002820 <HAL_GPIO_Init>
    
    /* Enable and set EXTI9_5 interrupt priority (PB5 uses this) */
    HAL_NVIC_SetPriority(PHOTO_SENSOR_IRQn, 2, 0);  // EXTI9_5_IRQn
 80012f0:	2200      	movs	r2, #0
 80012f2:	2102      	movs	r1, #2
 80012f4:	2017      	movs	r0, #23
 80012f6:	f001 f86e 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PHOTO_SENSOR_IRQn);
 80012fa:	2017      	movs	r0, #23
 80012fc:	f001 f887 	bl	800240e <HAL_NVIC_EnableIRQ>
    
    /* Reset counter */
    trigger_count = 0;
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <PhotoSensor_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
    last_trigger_time = 0;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <PhotoSensor_Init+0x78>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	10110000 	.word	0x10110000
 800131c:	40010c00 	.word	0x40010c00
 8001320:	200006f4 	.word	0x200006f4
 8001324:	200006f8 	.word	0x200006f8

08001328 <PhotoSensor_GetState>:
/**
 * @brief Get current state of photo sensor
 * @return PHOTO_SENSOR_BLOCKED if object detected, PHOTO_SENSOR_CLEAR if no object
 */
photo_sensor_state_t PhotoSensor_GetState(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
    /* Read GPIO pin state */
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(PHOTO_SENSOR_GPIO_PORT, PHOTO_SENSOR_GPIO_PIN);
 800132e:	2120      	movs	r1, #32
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <PhotoSensor_GetState+0x28>)
 8001332:	f001 fbf9 	bl	8002b28 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
    
    /* White line (Dark-ON): LOW = object detected, HIGH = no object */
    if (pin_state == GPIO_PIN_RESET) {
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <PhotoSensor_GetState+0x1c>
        return PHOTO_SENSOR_BLOCKED;
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <PhotoSensor_GetState+0x1e>
    } else {
        return PHOTO_SENSOR_CLEAR;
 8001344:	2301      	movs	r3, #1
    }
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010c00 	.word	0x40010c00

08001354 <PhotoSensor_IRQHandler>:
/**
 * @brief Photo sensor interrupt handler
 * @note Called from HAL_GPIO_EXTI_Callback
 */
void PhotoSensor_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
    /* Simple debounce: ignore triggers within 50ms */
    uint32_t current_time = HAL_GetTick();
 800135a:	f000 ff37 	bl	80021cc <HAL_GetTick>
 800135e:	6078      	str	r0, [r7, #4]
    if (current_time - last_trigger_time > 50) {
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <PhotoSensor_IRQHandler+0x34>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b32      	cmp	r3, #50	@ 0x32
 800136a:	d909      	bls.n	8001380 <PhotoSensor_IRQHandler+0x2c>
        trigger_count++;
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <PhotoSensor_IRQHandler+0x38>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	4a06      	ldr	r2, [pc, #24]	@ (800138c <PhotoSensor_IRQHandler+0x38>)
 8001374:	6013      	str	r3, [r2, #0]
        last_trigger_time = current_time;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <PhotoSensor_IRQHandler+0x34>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6013      	str	r3, [r2, #0]
        
        /* Call user callback */
        PhotoSensor_TriggerCallback();
 800137c:	f000 fbc4 	bl	8001b08 <PhotoSensor_TriggerCallback>
    }
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200006f8 	.word	0x200006f8
 800138c:	200006f4 	.word	0x200006f4

08001390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <MX_DMA_Init+0x48>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <MX_DMA_Init+0x48>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6153      	str	r3, [r2, #20]
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <MX_DMA_Init+0x48>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2010      	movs	r0, #16
 80013b4:	f001 f80f 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013b8:	2010      	movs	r0, #16
 80013ba:	f001 f828 	bl	800240e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2011      	movs	r0, #17
 80013c4:	f001 f807 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013c8:	2011      	movs	r0, #17
 80013ca:	f001 f820 	bl	800240e <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a37      	ldr	r2, [pc, #220]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a31      	ldr	r2, [pc, #196]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a2b      	ldr	r2, [pc, #172]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <MX_GPIO_Init+0xf8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	4826      	ldr	r0, [pc, #152]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 800143e:	f001 fb8a 	bl	8002b56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001448:	4823      	ldr	r0, [pc, #140]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 800144a:	f001 fb84 	bl	8002b56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800144e:	2302      	movs	r3, #2
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2302      	movs	r3, #2
 800145c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	4619      	mov	r1, r3
 8001464:	481c      	ldr	r0, [pc, #112]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001466:	f001 f9db 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA12 (Keyboard columns - output) */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12;
 800146a:	f241 1330 	movw	r3, #4400	@ 0x1130
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2302      	movs	r3, #2
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	4815      	ldr	r0, [pc, #84]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001484:	f001 f9cc 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 (Keyboard row r4 - input with interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001488:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <MX_GPIO_Init+0x100>)
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	4619      	mov	r1, r3
 800149c:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 800149e:	f001 f9bf 	bl	8002820 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2102      	movs	r1, #2
 80014a6:	2028      	movs	r0, #40	@ 0x28
 80014a8:	f000 ff95 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ac:	2028      	movs	r0, #40	@ 0x28
 80014ae:	f000 ffae 	bl	800240e <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b2:	2301      	movs	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <MX_GPIO_Init+0x104>)
 80014c6:	f001 f9ab 	bl	8002820 <HAL_GPIO_Init>
  
  /* PB5 is configured by PhotoSensor_Init() as input with interrupt */

}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	10210000 	.word	0x10210000
 80014e0:	40010c00 	.word	0x40010c00

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ea:	f000 fe17 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f8bb 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f7ff ff73 	bl	80013dc <MX_GPIO_Init>
  MX_DMA_Init();
 80014f6:	f7ff ff4b 	bl	8001390 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80014fa:	f000 fc8b 	bl	8001e14 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80014fe:	f000 fc35 	bl	8001d6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001502:	f000 fc5d 	bl	8001dc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  printf("\r\n=== SLAVE MCU - ELEVATOR CONTROL SYSTEM ===\r\n");
 8001506:	4841      	ldr	r0, [pc, #260]	@ (800160c <main+0x128>)
 8001508:	f002 fd9e 	bl	8004048 <puts>
  printf("Keyboard + Photo Sensor + Door Control\r\n\r\n");
 800150c:	4840      	ldr	r0, [pc, #256]	@ (8001610 <main+0x12c>)
 800150e:	f002 fd9b 	bl	8004048 <puts>
  
  /* 初始化RS485通信 */
  rs485_init();
 8001512:	f7ff f8f3 	bl	80006fc <rs485_init>
  printf("[RS485] Initialized on USART2\r\n");
 8001516:	483f      	ldr	r0, [pc, #252]	@ (8001614 <main+0x130>)
 8001518:	f002 fd96 	bl	8004048 <puts>
  //RS485_Test_Init();
  //RS485_Test_SetMode(TEST_MODE_PROTOCOL);  // 协议测试模式
  //RS485_Test_SetEcho(1);  // 开启回显
  
  /* 初始化键盘 - 中断模式 */
  Keyboard_Init();
 800151c:	f7ff fc78 	bl	8000e10 <Keyboard_Init>
  printf("[KEYBOARD] Initialized (PA11 EXTI)\r\n");
 8001520:	483d      	ldr	r0, [pc, #244]	@ (8001618 <main+0x134>)
 8001522:	f002 fd91 	bl	8004048 <puts>
  printf("  S16 (PA4)  -> Floor 1 (Cabin Call)\r\n");
 8001526:	483d      	ldr	r0, [pc, #244]	@ (800161c <main+0x138>)
 8001528:	f002 fd8e 	bl	8004048 <puts>
  printf("  S15 (PA8)  -> Floor 2 (Cabin Call)\r\n");
 800152c:	483c      	ldr	r0, [pc, #240]	@ (8001620 <main+0x13c>)
 800152e:	f002 fd8b 	bl	8004048 <puts>
  printf("  S14 (PA5)  -> Floor 3 (Cabin Call)\r\n");
 8001532:	483c      	ldr	r0, [pc, #240]	@ (8001624 <main+0x140>)
 8001534:	f002 fd88 	bl	8004048 <puts>
  printf("  S13 (PA12) -> Not Used\r\n\r\n");
 8001538:	483b      	ldr	r0, [pc, #236]	@ (8001628 <main+0x144>)
 800153a:	f002 fd85 	bl	8004048 <puts>
  
  /* 初始化光电传感器 - 中断模式 */
  PhotoSensor_Init();
 800153e:	f7ff feb5 	bl	80012ac <PhotoSensor_Init>
  photo_sensor_state_t initial_state = PhotoSensor_GetState();
 8001542:	f7ff fef1 	bl	8001328 <PhotoSensor_GetState>
 8001546:	4603      	mov	r3, r0
 8001548:	72fb      	strb	r3, [r7, #11]
  last_sensor_state = initial_state;
 800154a:	4a38      	ldr	r2, [pc, #224]	@ (800162c <main+0x148>)
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	7013      	strb	r3, [r2, #0]
  printf("[PHOTO] Initialized (PB5 EXTI) - State: %s\r\n", 
 8001550:	7afb      	ldrb	r3, [r7, #11]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <main+0x76>
 8001556:	4b36      	ldr	r3, [pc, #216]	@ (8001630 <main+0x14c>)
 8001558:	e000      	b.n	800155c <main+0x78>
 800155a:	4b36      	ldr	r3, [pc, #216]	@ (8001634 <main+0x150>)
 800155c:	4619      	mov	r1, r3
 800155e:	4836      	ldr	r0, [pc, #216]	@ (8001638 <main+0x154>)
 8001560:	f002 fd0a 	bl	8003f78 <iprintf>
  
  /* 初始化舵机门控系统 - 暂时禁用 */
  // servo_init(&huart1);  // 使用USART1控制舵机
  // DoorControl_Init(&door_controller, 0);  // 使用舵机ID 0
  // DoorControl_Close(&door_controller);  // 初始关门
  printf("[DOOR] DISABLED for testing\r\n");
 8001564:	4835      	ldr	r0, [pc, #212]	@ (800163c <main+0x158>)
 8001566:	f002 fd6f 	bl	8004048 <puts>
  
  /* 初始化Local Blackboard - 中央事件管理 */
  LocalBB_Init();
 800156a:	f7fe fdef 	bl	800014c <LocalBB_Init>
  printf("[LocalBB] Initialized - Event queue ready\r\n");
 800156e:	4834      	ldr	r0, [pc, #208]	@ (8001640 <main+0x15c>)
 8001570:	f002 fd6a 	bl	8004048 <puts>
  
  printf("\r\nSystem ready. Waiting for commands...\r\n\r\n");
 8001574:	4833      	ldr	r0, [pc, #204]	@ (8001644 <main+0x160>)
 8001576:	f002 fd67 	bl	8004048 <puts>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_status_time = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  uint32_t last_door_update = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 8001582:	f000 fe23 	bl	80021cc <HAL_GetTick>
 8001586:	6038      	str	r0, [r7, #0]
    
    /* 运行RS485测试 */
    RS485_Test_Process();
 8001588:	f7ff fb88 	bl	8000c9c <RS485_Test_Process>
    
    /* 处理键盘输入 */
    ProcessKeyboard();
 800158c:	f000 f8b2 	bl	80016f4 <ProcessKeyboard>
    
    /* 处理光电传感器 */
    ProcessPhotoSensor();
 8001590:	f000 f91c 	bl	80017cc <ProcessPhotoSensor>
    
    /* 处理RS485接收 */
    ProcessRS485();
 8001594:	f000 f9a8 	bl	80018e8 <ProcessRS485>
    //     last_door_update = current_time;
    //     ProcessDoorControl();
    // }
    
    /* 处理LocalBB事件队列 */
    LocalBB_Process();
 8001598:	f7fe ffac 	bl	80004f4 <LocalBB_Process>
    
    /* 每5秒打印一次状态 */
    if (current_time - last_status_time >= 5000) {
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d9eb      	bls.n	8001582 <main+0x9e>
        last_status_time = current_time;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
               system_state.current_floor,
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <main+0x164>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80015b2:	4619      	mov	r1, r3
               system_state.direction == DIR_UP ? "UP" : 
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <main+0x164>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d007      	beq.n	80015cc <main+0xe8>
               system_state.direction == DIR_DOWN ? "DN" : "STOP",
 80015bc:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <main+0x164>)
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d101      	bne.n	80015c8 <main+0xe4>
 80015c4:	4a21      	ldr	r2, [pc, #132]	@ (800164c <main+0x168>)
 80015c6:	e002      	b.n	80015ce <main+0xea>
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <main+0x16c>)
 80015ca:	e000      	b.n	80015ce <main+0xea>
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <main+0x170>)
               system_state.door_is_open ? "OPEN" : "CLOSED");
 80015ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <main+0x164>)
 80015d0:	78db      	ldrb	r3, [r3, #3]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <main+0xf6>
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <main+0x174>)
 80015d8:	e000      	b.n	80015dc <main+0xf8>
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <main+0x178>)
 80015dc:	4820      	ldr	r0, [pc, #128]	@ (8001660 <main+0x17c>)
 80015de:	f002 fccb 	bl	8003f78 <iprintf>
        printf("  Keyboard=%lu, Photo=%lu, RS485_RX=%lu, TX=%lu, DoorCmd=%lu\r\n",
 80015e2:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <main+0x164>)
 80015e4:	6859      	ldr	r1, [r3, #4]
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <main+0x164>)
 80015e8:	6898      	ldr	r0, [r3, #8]
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <main+0x164>)
 80015ec:	68dc      	ldr	r4, [r3, #12]
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <main+0x164>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	4a15      	ldr	r2, [pc, #84]	@ (8001648 <main+0x164>)
 80015f4:	6952      	ldr	r2, [r2, #20]
 80015f6:	9201      	str	r2, [sp, #4]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	4623      	mov	r3, r4
 80015fc:	4602      	mov	r2, r0
 80015fe:	4819      	ldr	r0, [pc, #100]	@ (8001664 <main+0x180>)
 8001600:	f002 fcba 	bl	8003f78 <iprintf>
               system_state.keyboard_count,
               system_state.photo_count,
               system_state.rs485_rx_count,
               system_state.rs485_tx_count,
               system_state.door_cmd_count);
        LocalBB_PrintStatus();
 8001604:	f7ff f820 	bl	8000648 <LocalBB_PrintStatus>
  {
 8001608:	e7bb      	b.n	8001582 <main+0x9e>
 800160a:	bf00      	nop
 800160c:	0800591c 	.word	0x0800591c
 8001610:	0800594c 	.word	0x0800594c
 8001614:	08005978 	.word	0x08005978
 8001618:	08005998 	.word	0x08005998
 800161c:	080059bc 	.word	0x080059bc
 8001620:	080059e4 	.word	0x080059e4
 8001624:	08005a0c 	.word	0x08005a0c
 8001628:	08005a34 	.word	0x08005a34
 800162c:	2000001c 	.word	0x2000001c
 8001630:	08005a50 	.word	0x08005a50
 8001634:	08005a58 	.word	0x08005a58
 8001638:	08005a60 	.word	0x08005a60
 800163c:	08005a90 	.word	0x08005a90
 8001640:	08005ab0 	.word	0x08005ab0
 8001644:	08005adc 	.word	0x08005adc
 8001648:	20000004 	.word	0x20000004
 800164c:	08005b08 	.word	0x08005b08
 8001650:	08005b0c 	.word	0x08005b0c
 8001654:	08005b14 	.word	0x08005b14
 8001658:	08005b18 	.word	0x08005b18
 800165c:	08005b20 	.word	0x08005b20
 8001660:	08005b28 	.word	0x08005b28
 8001664:	08005b50 	.word	0x08005b50

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b090      	sub	sp, #64	@ 0x40
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	2228      	movs	r2, #40	@ 0x28
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fde8 	bl	800424c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169c:	2302      	movs	r3, #2
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fa81 	bl	8002bb8 <HAL_RCC_OscConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016bc:	f000 fa45 	bl	8001b4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	230f      	movs	r3, #15
 80016c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c4:	2302      	movs	r3, #2
 80016c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2102      	movs	r1, #2
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fcee 	bl	80030bc <HAL_RCC_ClockConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016e6:	f000 fa30 	bl	8001b4a <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3740      	adds	r7, #64	@ 0x40
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <ProcessKeyboard>:
/* USER CODE BEGIN 4 */

/**
  * @brief  处理键盘输入
  */
void ProcessKeyboard(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
    Keyboard_Handler();
 80016fa:	f7ff fbb3 	bl	8000e64 <Keyboard_Handler>
    
    uint8_t key;
    if (Keyboard_PopKey(&key)) {
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd51 	bl	80011a8 <Keyboard_PopKey>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d048      	beq.n	800179e <ProcessKeyboard+0xaa>
        system_state.keyboard_count++;
 800170c:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <ProcessKeyboard+0xb4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	3301      	adds	r3, #1
 8001712:	4a25      	ldr	r2, [pc, #148]	@ (80017a8 <ProcessKeyboard+0xb4>)
 8001714:	6053      	str	r3, [r2, #4]
        
        printf("\r\n========================================\r\n");
 8001716:	4825      	ldr	r0, [pc, #148]	@ (80017ac <ProcessKeyboard+0xb8>)
 8001718:	f002 fc96 	bl	8004048 <puts>
        printf("[KEYBOARD #%lu] Key detected: 0x%02X\r\n", system_state.keyboard_count, key);
 800171c:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <ProcessKeyboard+0xb4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	4619      	mov	r1, r3
 8001724:	4822      	ldr	r0, [pc, #136]	@ (80017b0 <ProcessKeyboard+0xbc>)
 8001726:	f002 fc27 	bl	8003f78 <iprintf>
        
        switch(key) {
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	3b0d      	subs	r3, #13
 800172e:	2b03      	cmp	r3, #3
 8001730:	d82c      	bhi.n	800178c <ProcessKeyboard+0x98>
 8001732:	a201      	add	r2, pc, #4	@ (adr r2, 8001738 <ProcessKeyboard+0x44>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	08001785 	.word	0x08001785
 800173c:	08001771 	.word	0x08001771
 8001740:	0800175d 	.word	0x0800175d
 8001744:	08001749 	.word	0x08001749
            case KEY_S16:  // Floor 1
                printf("S16 -> Floor 1 call\r\n");
 8001748:	481a      	ldr	r0, [pc, #104]	@ (80017b4 <ProcessKeyboard+0xc0>)
 800174a:	f002 fc7d 	bl	8004048 <puts>
                SendCabinCall(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f000 f988 	bl	8001a64 <SendCabinCall>
                LocalBB_AddCabinCall(1);
 8001754:	2001      	movs	r0, #1
 8001756:	f7fe fdb7 	bl	80002c8 <LocalBB_AddCabinCall>
                break;
 800175a:	e01d      	b.n	8001798 <ProcessKeyboard+0xa4>
                
            case KEY_S15:  // Floor 2
                printf("S15 -> Floor 2 call\r\n");
 800175c:	4816      	ldr	r0, [pc, #88]	@ (80017b8 <ProcessKeyboard+0xc4>)
 800175e:	f002 fc73 	bl	8004048 <puts>
                SendCabinCall(2);
 8001762:	2002      	movs	r0, #2
 8001764:	f000 f97e 	bl	8001a64 <SendCabinCall>
                LocalBB_AddCabinCall(2);
 8001768:	2002      	movs	r0, #2
 800176a:	f7fe fdad 	bl	80002c8 <LocalBB_AddCabinCall>
                break;
 800176e:	e013      	b.n	8001798 <ProcessKeyboard+0xa4>
                
            case KEY_S14:  // Floor 3
                printf("S14 -> Floor 3 call\r\n");
 8001770:	4812      	ldr	r0, [pc, #72]	@ (80017bc <ProcessKeyboard+0xc8>)
 8001772:	f002 fc69 	bl	8004048 <puts>
                SendCabinCall(3);
 8001776:	2003      	movs	r0, #3
 8001778:	f000 f974 	bl	8001a64 <SendCabinCall>
                LocalBB_AddCabinCall(3);
 800177c:	2003      	movs	r0, #3
 800177e:	f7fe fda3 	bl	80002c8 <LocalBB_AddCabinCall>
                break;
 8001782:	e009      	b.n	8001798 <ProcessKeyboard+0xa4>
                
            case KEY_S13:  // Not used
                printf("S13 pressed (not used)\r\n");
 8001784:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <ProcessKeyboard+0xcc>)
 8001786:	f002 fc5f 	bl	8004048 <puts>
                break;
 800178a:	e005      	b.n	8001798 <ProcessKeyboard+0xa4>
                
            default:
                printf("Unknown key (0x%02X)\r\n", key);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <ProcessKeyboard+0xd0>)
 8001792:	f002 fbf1 	bl	8003f78 <iprintf>
                break;
 8001796:	bf00      	nop
        }
        printf("========================================\r\n");
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <ProcessKeyboard+0xd4>)
 800179a:	f002 fc55 	bl	8004048 <puts>
    }
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000004 	.word	0x20000004
 80017ac:	08005b90 	.word	0x08005b90
 80017b0:	08005bbc 	.word	0x08005bbc
 80017b4:	08005be4 	.word	0x08005be4
 80017b8:	08005bfc 	.word	0x08005bfc
 80017bc:	08005c14 	.word	0x08005c14
 80017c0:	08005c2c 	.word	0x08005c2c
 80017c4:	08005c44 	.word	0x08005c44
 80017c8:	08005c5c 	.word	0x08005c5c

080017cc <ProcessPhotoSensor>:

/**
  * @brief  处理光电传感器
  */
void ProcessPhotoSensor(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
    if (sensor_triggered) {
 80017d2:	4b3d      	ldr	r3, [pc, #244]	@ (80018c8 <ProcessPhotoSensor+0xfc>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d071      	beq.n	80018c0 <ProcessPhotoSensor+0xf4>
        sensor_triggered = false;
 80017dc:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <ProcessPhotoSensor+0xfc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
        
        photo_sensor_state_t current_state = PhotoSensor_GetState();
 80017e2:	f7ff fda1 	bl	8001328 <PhotoSensor_GetState>
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
        
        /* 只在状态从CLEAR变为BLOCKED时触发（到达楼层） */
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d164      	bne.n	80018ba <ProcessPhotoSensor+0xee>
            last_sensor_state == PHOTO_SENSOR_CLEAR) {
 80017f0:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <ProcessPhotoSensor+0x100>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d160      	bne.n	80018ba <ProcessPhotoSensor+0xee>
            
            system_state.photo_count++;
 80017f8:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001800:	6093      	str	r3, [r2, #8]
            
            /* 根据移动方向判断到达的楼层 */
            uint8_t detected_floor = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	71fb      	strb	r3, [r7, #7]
            
            if (system_state.direction == DIR_UP) {
 8001806:	4b32      	ldr	r3, [pc, #200]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10e      	bne.n	800182c <ProcessPhotoSensor+0x60>
                /* 上行时，预测下一个楼层 */
                if (system_state.current_floor < system_state.target_floor) {
 800180e:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001814:	789b      	ldrb	r3, [r3, #2]
 8001816:	429a      	cmp	r2, r3
 8001818:	d204      	bcs.n	8001824 <ProcessPhotoSensor+0x58>
                    detected_floor = system_state.current_floor + 1;
 800181a:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	e019      	b.n	8001858 <ProcessPhotoSensor+0x8c>
                } else {
                    detected_floor = system_state.target_floor;
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001826:	789b      	ldrb	r3, [r3, #2]
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e015      	b.n	8001858 <ProcessPhotoSensor+0x8c>
                }
            }
            else if (system_state.direction == DIR_DOWN) {
 800182c:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d10e      	bne.n	8001852 <ProcessPhotoSensor+0x86>
                /* 下行时，预测下一个楼层 */
                if (system_state.current_floor > system_state.target_floor) {
 8001834:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	429a      	cmp	r2, r3
 800183e:	d904      	bls.n	800184a <ProcessPhotoSensor+0x7e>
                    detected_floor = system_state.current_floor - 1;
 8001840:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	e006      	b.n	8001858 <ProcessPhotoSensor+0x8c>
                } else {
                    detected_floor = system_state.target_floor;
 800184a:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 800184c:	789b      	ldrb	r3, [r3, #2]
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	e002      	b.n	8001858 <ProcessPhotoSensor+0x8c>
                }
            }
            else {
                /* 停止状态，保持当前楼层 */
                detected_floor = system_state.current_floor;
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
            }
            
            /* 确保楼层在有效范围内 */
            if (detected_floor < 1) detected_floor = 1;
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <ProcessPhotoSensor+0x96>
 800185e:	2301      	movs	r3, #1
 8001860:	71fb      	strb	r3, [r7, #7]
            if (detected_floor > MAX_FLOORS) detected_floor = MAX_FLOORS;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d901      	bls.n	800186c <ProcessPhotoSensor+0xa0>
 8001868:	2303      	movs	r3, #3
 800186a:	71fb      	strb	r3, [r7, #7]
            
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s)\r\n",
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 800186e:	6899      	ldr	r1, [r3, #8]
 8001870:	79fa      	ldrb	r2, [r7, #7]
                   system_state.photo_count, detected_floor,
                   system_state.direction == DIR_UP ? "UP" :
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 8001874:	785b      	ldrb	r3, [r3, #1]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s)\r\n",
 8001876:	2b01      	cmp	r3, #1
 8001878:	d007      	beq.n	800188a <ProcessPhotoSensor+0xbe>
                   system_state.direction == DIR_DOWN ? "DN" : "STOP");
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d101      	bne.n	8001886 <ProcessPhotoSensor+0xba>
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <ProcessPhotoSensor+0x108>)
 8001884:	e002      	b.n	800188c <ProcessPhotoSensor+0xc0>
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <ProcessPhotoSensor+0x10c>)
 8001888:	e000      	b.n	800188c <ProcessPhotoSensor+0xc0>
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s)\r\n",
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <ProcessPhotoSensor+0x110>)
 800188c:	4814      	ldr	r0, [pc, #80]	@ (80018e0 <ProcessPhotoSensor+0x114>)
 800188e:	f002 fb73 	bl	8003f78 <iprintf>
            
            /* 发送光电传感器事件给Master */
            SendPhotoSensorEvent(detected_floor);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f8bf 	bl	8001a18 <SendPhotoSensorEvent>
            
            /* 更新当前楼层 */
            system_state.current_floor = detected_floor;
 800189a:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	7013      	strb	r3, [r2, #0]
            
            /* 如果到达目标楼层，停止 */
            if (detected_floor == system_state.target_floor) {
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d105      	bne.n	80018b6 <ProcessPhotoSensor+0xea>
                system_state.direction = DIR_STOP;
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <ProcessPhotoSensor+0x104>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	705a      	strb	r2, [r3, #1]
                printf("[PHOTO] Target floor reached, stopping\r\n");
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <ProcessPhotoSensor+0x118>)
 80018b2:	f002 fbc9 	bl	8004048 <puts>
            }
            
            /* 通过LocalBB处理 */
            LocalBB_AddPhotoSensor();
 80018b6:	f7fe fd45 	bl	8000344 <LocalBB_AddPhotoSensor>
        }
        
        last_sensor_state = current_state;
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <ProcessPhotoSensor+0x100>)
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	7013      	strb	r3, [r2, #0]
    }
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200006fc 	.word	0x200006fc
 80018cc:	2000001c 	.word	0x2000001c
 80018d0:	20000004 	.word	0x20000004
 80018d4:	08005b08 	.word	0x08005b08
 80018d8:	08005b0c 	.word	0x08005b0c
 80018dc:	08005b14 	.word	0x08005b14
 80018e0:	08005c88 	.word	0x08005c88
 80018e4:	08005cb4 	.word	0x08005cb4

080018e8 <ProcessRS485>:

/**
  * @brief  处理RS485接收
  */
void ProcessRS485(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	@ 0x50
 80018ec:	af00      	add	r7, sp, #0
    uint8_t rx_buffer[64];
    uint16_t rx_len = rs485_receive_packet(rx_buffer, sizeof(rx_buffer));
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe ff91 	bl	800081c <rs485_receive_packet>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    
    if (rx_len > 0) {
 8001900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001904:	2b00      	cmp	r3, #0
 8001906:	d075      	beq.n	80019f4 <ProcessRS485+0x10c>
        system_state.rs485_rx_count++;
 8001908:	4b3c      	ldr	r3, [pc, #240]	@ (80019fc <ProcessRS485+0x114>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	4a3b      	ldr	r2, [pc, #236]	@ (80019fc <ProcessRS485+0x114>)
 8001910:	60d3      	str	r3, [r2, #12]
        
        /* 方向设置命令 */
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8001912:	7a3b      	ldrb	r3, [r7, #8]
 8001914:	2b40      	cmp	r3, #64	@ 0x40
 8001916:	d137      	bne.n	8001988 <ProcessRS485+0xa0>
 8001918:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800191c:	2b03      	cmp	r3, #3
 800191e:	d933      	bls.n	8001988 <ProcessRS485+0xa0>
            uint8_t dir = rx_buffer[1];
 8001920:	7a7b      	ldrb	r3, [r7, #9]
 8001922:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            uint8_t cur = rx_buffer[2];
 8001926:	7abb      	ldrb	r3, [r7, #10]
 8001928:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            uint8_t target = rx_buffer[3];
 800192c:	7afb      	ldrb	r3, [r7, #11]
 800192e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            
            system_state.direction = dir;
 8001932:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <ProcessRS485+0x114>)
 8001934:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001938:	7053      	strb	r3, [r2, #1]
            system_state.current_floor = cur;
 800193a:	4a30      	ldr	r2, [pc, #192]	@ (80019fc <ProcessRS485+0x114>)
 800193c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001940:	7013      	strb	r3, [r2, #0]
            system_state.target_floor = target;
 8001942:	4a2e      	ldr	r2, [pc, #184]	@ (80019fc <ProcessRS485+0x114>)
 8001944:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001948:	7093      	strb	r3, [r2, #2]
            
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 800194a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800194e:	2b01      	cmp	r3, #1
 8001950:	d007      	beq.n	8001962 <ProcessRS485+0x7a>
                   dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DN" : "STOP",
 8001952:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001956:	2b02      	cmp	r3, #2
 8001958:	d101      	bne.n	800195e <ProcessRS485+0x76>
 800195a:	4929      	ldr	r1, [pc, #164]	@ (8001a00 <ProcessRS485+0x118>)
 800195c:	e002      	b.n	8001964 <ProcessRS485+0x7c>
 800195e:	4929      	ldr	r1, [pc, #164]	@ (8001a04 <ProcessRS485+0x11c>)
 8001960:	e000      	b.n	8001964 <ProcessRS485+0x7c>
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8001962:	4929      	ldr	r1, [pc, #164]	@ (8001a08 <ProcessRS485+0x120>)
 8001964:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001968:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800196c:	4827      	ldr	r0, [pc, #156]	@ (8001a0c <ProcessRS485+0x124>)
 800196e:	f002 fb03 	bl	8003f78 <iprintf>
                   cur, target);
            
            /* 通过LocalBB处理 */
            LocalBB_SetDirection(dir, cur, target);
 8001972:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001976:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 800197a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd2e 	bl	80003e0 <LocalBB_SetDirection>
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8001984:	bf00      	nop
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
            rs485_send_packet_dma(tx_buffer, 4);
            system_state.rs485_tx_count++;
        }
    }
}
 8001986:	e035      	b.n	80019f4 <ProcessRS485+0x10c>
        else if (rx_buffer[0] == CMD_DOOR_OPEN) {
 8001988:	7a3b      	ldrb	r3, [r7, #8]
 800198a:	2b20      	cmp	r3, #32
 800198c:	d10b      	bne.n	80019a6 <ProcessRS485+0xbe>
            printf("[RS485 RX] Door OPEN command\r\n");
 800198e:	4820      	ldr	r0, [pc, #128]	@ (8001a10 <ProcessRS485+0x128>)
 8001990:	f002 fb5a 	bl	8004048 <puts>
            LocalBB_AddDoorCommand(true);
 8001994:	2001      	movs	r0, #1
 8001996:	f7fe fd7b 	bl	8000490 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <ProcessRS485+0x114>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a16      	ldr	r2, [pc, #88]	@ (80019fc <ProcessRS485+0x114>)
 80019a2:	6153      	str	r3, [r2, #20]
}
 80019a4:	e026      	b.n	80019f4 <ProcessRS485+0x10c>
        else if (rx_buffer[0] == CMD_DOOR_CLOSE) {
 80019a6:	7a3b      	ldrb	r3, [r7, #8]
 80019a8:	2b21      	cmp	r3, #33	@ 0x21
 80019aa:	d10b      	bne.n	80019c4 <ProcessRS485+0xdc>
            printf("[RS485 RX] Door CLOSE command\r\n");
 80019ac:	4819      	ldr	r0, [pc, #100]	@ (8001a14 <ProcessRS485+0x12c>)
 80019ae:	f002 fb4b 	bl	8004048 <puts>
            LocalBB_AddDoorCommand(false);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7fe fd6c 	bl	8000490 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 80019b8:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <ProcessRS485+0x114>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <ProcessRS485+0x114>)
 80019c0:	6153      	str	r3, [r2, #20]
}
 80019c2:	e017      	b.n	80019f4 <ProcessRS485+0x10c>
        else if (rx_buffer[0] == CMD_STATUS_REQUEST) {
 80019c4:	7a3b      	ldrb	r3, [r7, #8]
 80019c6:	2b50      	cmp	r3, #80	@ 0x50
 80019c8:	d114      	bne.n	80019f4 <ProcessRS485+0x10c>
            tx_buffer[0] = CMD_STATUS_RESPONSE;
 80019ca:	2351      	movs	r3, #81	@ 0x51
 80019cc:	713b      	strb	r3, [r7, #4]
            tx_buffer[1] = system_state.current_floor;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <ProcessRS485+0x114>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	717b      	strb	r3, [r7, #5]
            tx_buffer[2] = system_state.direction;
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <ProcessRS485+0x114>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	71bb      	strb	r3, [r7, #6]
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <ProcessRS485+0x114>)
 80019dc:	78db      	ldrb	r3, [r3, #3]
 80019de:	71fb      	strb	r3, [r7, #7]
            rs485_send_packet_dma(tx_buffer, 4);
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2104      	movs	r1, #4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fec9 	bl	800077c <rs485_send_packet_dma>
            system_state.rs485_tx_count++;
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <ProcessRS485+0x114>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a02      	ldr	r2, [pc, #8]	@ (80019fc <ProcessRS485+0x114>)
 80019f2:	6113      	str	r3, [r2, #16]
}
 80019f4:	bf00      	nop
 80019f6:	3750      	adds	r7, #80	@ 0x50
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000004 	.word	0x20000004
 8001a00:	08005b08 	.word	0x08005b08
 8001a04:	08005b0c 	.word	0x08005b0c
 8001a08:	08005b14 	.word	0x08005b14
 8001a0c:	08005cdc 	.word	0x08005cdc
 8001a10:	08005d00 	.word	0x08005d00
 8001a14:	08005d20 	.word	0x08005d20

08001a18 <SendPhotoSensorEvent>:
}

/**
  * @brief  发送光电传感器事件
  */
void SendPhotoSensorEvent(uint8_t floor) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8001a22:	2310      	movs	r3, #16
 8001a24:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = floor;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]
    tx_buffer[3] = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
    
    rs485_send_packet_dma(tx_buffer, 4);
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2104      	movs	r1, #4
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fe9f 	bl	800077c <rs485_send_packet_dma>
    system_state.rs485_tx_count++;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <SendPhotoSensorEvent+0x44>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <SendPhotoSensorEvent+0x44>)
 8001a46:	6113      	str	r3, [r2, #16]
    printf("[RS485 TX] Photo sensor floor %d\r\n", floor);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <SendPhotoSensorEvent+0x48>)
 8001a4e:	f002 fa93 	bl	8003f78 <iprintf>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	08005db4 	.word	0x08005db4

08001a64 <SendCabinCall>:

/**
  * @brief  发送轿厢内呼
  */
void SendCabinCall(uint8_t floor) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_CABIN_CALL;
 8001a6e:	2331      	movs	r3, #49	@ 0x31
 8001a70:	723b      	strb	r3, [r7, #8]
    tx_buffer[1] = floor;
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	727b      	strb	r3, [r7, #9]
    tx_buffer[2] = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	72bb      	strb	r3, [r7, #10]
    tx_buffer[3] = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	72fb      	strb	r3, [r7, #11]
    
    printf("[RS485 TX] Sending cabin call for floor %d\r\n", floor);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4619      	mov	r1, r3
 8001a82:	481b      	ldr	r0, [pc, #108]	@ (8001af0 <SendCabinCall+0x8c>)
 8001a84:	f002 fa78 	bl	8003f78 <iprintf>
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8001a88:	7a3b      	ldrb	r3, [r7, #8]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8001a8a:	4619      	mov	r1, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8001a8c:	7a7b      	ldrb	r3, [r7, #9]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8001a8e:	461a      	mov	r2, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8001a90:	7abb      	ldrb	r3, [r7, #10]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8001a92:	4618      	mov	r0, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8001a94:	7afb      	ldrb	r3, [r7, #11]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4816      	ldr	r0, [pc, #88]	@ (8001af4 <SendCabinCall+0x90>)
 8001a9c:	f002 fa6c 	bl	8003f78 <iprintf>
    
    rs485_status_t status = rs485_send_packet_dma(tx_buffer, 4);
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fe68 	bl	800077c <rs485_send_packet_dma>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
    if (status == RS485_OK) {
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10b      	bne.n	8001ace <SendCabinCall+0x6a>
        system_state.rs485_tx_count++;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <SendCabinCall+0x94>)
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <SendCabinCall+0x94>)
 8001abe:	6113      	str	r3, [r2, #16]
        printf("[RS485 TX] Cabin call sent successfully (count=%lu)\r\n", system_state.rs485_tx_count);
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <SendCabinCall+0x94>)
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480d      	ldr	r0, [pc, #52]	@ (8001afc <SendCabinCall+0x98>)
 8001ac8:	f002 fa56 	bl	8003f78 <iprintf>
    } else if (status == RS485_BUSY) {
        printf("[RS485 TX] ERROR: RS485 busy!\r\n");
    } else {
        printf("[RS485 TX] ERROR: Send failed (status=%d)\r\n", status);
    }
}
 8001acc:	e00b      	b.n	8001ae6 <SendCabinCall+0x82>
    } else if (status == RS485_BUSY) {
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d103      	bne.n	8001adc <SendCabinCall+0x78>
        printf("[RS485 TX] ERROR: RS485 busy!\r\n");
 8001ad4:	480a      	ldr	r0, [pc, #40]	@ (8001b00 <SendCabinCall+0x9c>)
 8001ad6:	f002 fab7 	bl	8004048 <puts>
}
 8001ada:	e004      	b.n	8001ae6 <SendCabinCall+0x82>
        printf("[RS485 TX] ERROR: Send failed (status=%d)\r\n", status);
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4808      	ldr	r0, [pc, #32]	@ (8001b04 <SendCabinCall+0xa0>)
 8001ae2:	f002 fa49 	bl	8003f78 <iprintf>
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08005dd8 	.word	0x08005dd8
 8001af4:	08005e08 	.word	0x08005e08
 8001af8:	20000004 	.word	0x20000004
 8001afc:	08005e38 	.word	0x08005e38
 8001b00:	08005e70 	.word	0x08005e70
 8001b04:	08005e90 	.word	0x08005e90

08001b08 <PhotoSensor_TriggerCallback>:
/**
  * @brief  光电传感器触发回调
  * @note   在中断中被调用
  */
void PhotoSensor_TriggerCallback(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
    sensor_triggered = true;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <PhotoSensor_TriggerCallback+0x14>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	200006fc 	.word	0x200006fc

08001b20 <HAL_GPIO_EXTI_Callback>:
  * @brief  HAL GPIO EXTI回调 - 统一处理所有GPIO中断
  * @param  GPIO_Pin: 触发中断的引脚
  * @note   这个函数覆盖HAL库的weak函数
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b30:	d102      	bne.n	8001b38 <HAL_GPIO_EXTI_Callback+0x18>
        // PA11 中断 - 键盘按下
        Keyboard_IRQHandler();
 8001b32:	f7ff fbad 	bl	8001290 <Keyboard_IRQHandler>
    }
    else if (GPIO_Pin == GPIO_PIN_5) {
        // PB5 中断 - 光电传感器
        PhotoSensor_IRQHandler();
    }
}
 8001b36:	e004      	b.n	8001b42 <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_Pin == GPIO_PIN_5) {
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_EXTI_Callback+0x22>
        PhotoSensor_IRQHandler();
 8001b3e:	f7ff fc09 	bl	8001354 <PhotoSensor_IRQHandler>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4e:	b672      	cpsid	i
}
 8001b50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b52:	bf00      	nop
 8001b54:	e7fd      	b.n	8001b52 <Error_Handler+0x8>
	...

08001b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6193      	str	r3, [r2, #24]
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <HAL_MspInit+0x60>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <HAL_MspInit+0x60>)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 facc 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <DMA1_Channel6_IRQHandler+0x10>)
 8001c1a:	f000 fccd 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200007dc 	.word	0x200007dc

08001c28 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <DMA1_Channel7_IRQHandler+0x10>)
 8001c2e:	f000 fcc3 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000820 	.word	0x20000820

08001c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts for PB5 (Photo Sensor).
  */
void EXTI9_5_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c40:	2020      	movs	r0, #32
 8001c42:	f000 ffa1 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts for PA11 (Keyboard).
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c4e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c52:	f000 ff99 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e00a      	b.n	8001c82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c6c:	f3af 8000 	nop.w
 8001c70:	4601      	mov	r1, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	b2ca      	uxtb	r2, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dbf0      	blt.n	8001c6c <_read+0x12>
  }

  return len;
 8001c8a:	687b      	ldr	r3, [r7, #4]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cba:	605a      	str	r2, [r3, #4]
  return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <_isatty>:

int _isatty(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <_sbrk+0x5c>)
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <_sbrk+0x60>)
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <_sbrk+0x64>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <_sbrk+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d24:	f002 fae0 	bl	80042e8 <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	e009      	b.n	8001d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d34:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a05      	ldr	r2, [pc, #20]	@ (8001d58 <_sbrk+0x64>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20005000 	.word	0x20005000
 8001d54:	00000400 	.word	0x00000400
 8001d58:	20000700 	.word	0x20000700
 8001d5c:	200009b8 	.word	0x200009b8

08001d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <MX_USART1_UART_Init+0x50>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001da4:	f001 fb18 	bl	80033d8 <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dae:	f7ff fecc 	bl	8001b4a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000704 	.word	0x20000704
 8001dbc:	40013800 	.word	0x40013800

08001dc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <MX_USART2_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df8:	f001 faee 	bl	80033d8 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff fea2 	bl	8001b4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000074c 	.word	0x2000074c
 8001e10:	40004400 	.word	0x40004400

08001e14 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e1a:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e20:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <MX_USART3_UART_Init+0x50>)
 8001e22:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e38:	220c      	movs	r2, #12
 8001e3a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <MX_USART3_UART_Init+0x48>)
 8001e4a:	f001 fac5 	bl	80033d8 <HAL_UART_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001e54:	f7ff fe79 	bl	8001b4a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000794 	.word	0x20000794
 8001e60:	40004800 	.word	0x40004800
 8001e64:	000f4240 	.word	0x000f4240

08001e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	@ (800207c <HAL_UART_MspInit+0x214>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d132      	bne.n	8001eee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e88:	4b7d      	ldr	r3, [pc, #500]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a7c      	ldr	r2, [pc, #496]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b7a      	ldr	r3, [pc, #488]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b77      	ldr	r3, [pc, #476]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a76      	ldr	r2, [pc, #472]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b74      	ldr	r3, [pc, #464]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	4619      	mov	r1, r3
 8001ecc:	486d      	ldr	r0, [pc, #436]	@ (8002084 <HAL_UART_MspInit+0x21c>)
 8001ece:	f000 fca7 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4867      	ldr	r0, [pc, #412]	@ (8002084 <HAL_UART_MspInit+0x21c>)
 8001ee8:	f000 fc9a 	bl	8002820 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eec:	e0c1      	b.n	8002072 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a65      	ldr	r2, [pc, #404]	@ (8002088 <HAL_UART_MspInit+0x220>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	f040 8085 	bne.w	8002004 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efa:	4b61      	ldr	r3, [pc, #388]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a60      	ldr	r2, [pc, #384]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b5e      	ldr	r3, [pc, #376]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6193      	str	r3, [r2, #24]
 8001f1e:	4b58      	ldr	r3, [pc, #352]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0320 	add.w	r3, r7, #32
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4851      	ldr	r0, [pc, #324]	@ (8002084 <HAL_UART_MspInit+0x21c>)
 8001f3e:	f000 fc6f 	bl	8002820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f42:	2308      	movs	r3, #8
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0320 	add.w	r3, r7, #32
 8001f52:	4619      	mov	r1, r3
 8001f54:	484b      	ldr	r0, [pc, #300]	@ (8002084 <HAL_UART_MspInit+0x21c>)
 8001f56:	f000 fc63 	bl	8002820 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <HAL_UART_MspInit+0x228>)
 8001f5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f60:	4b4a      	ldr	r3, [pc, #296]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f66:	4b49      	ldr	r3, [pc, #292]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6c:	4b47      	ldr	r3, [pc, #284]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f72:	4b46      	ldr	r3, [pc, #280]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f78:	4b44      	ldr	r3, [pc, #272]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f7e:	4b43      	ldr	r3, [pc, #268]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f84:	4b41      	ldr	r3, [pc, #260]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f8a:	4840      	ldr	r0, [pc, #256]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f8c:	f000 fa5a 	bl	8002444 <HAL_DMA_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001f96:	f7ff fdd8 	bl	8001b4a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fa0:	4a3a      	ldr	r2, [pc, #232]	@ (800208c <HAL_UART_MspInit+0x224>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8002098 <HAL_UART_MspInit+0x230>)
 8001faa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fac:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fae:	2210      	movs	r2, #16
 8001fb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b38      	ldr	r3, [pc, #224]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fbe:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc4:	4b33      	ldr	r3, [pc, #204]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fca:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fd6:	482f      	ldr	r0, [pc, #188]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fd8:	f000 fa34 	bl	8002444 <HAL_DMA_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8001fe2:	f7ff fdb2 	bl	8001b4a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fea:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fec:	4a29      	ldr	r2, [pc, #164]	@ (8002094 <HAL_UART_MspInit+0x22c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2026      	movs	r0, #38	@ 0x26
 8001ff8:	f000 f9ed 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ffc:	2026      	movs	r0, #38	@ 0x26
 8001ffe:	f000 fa06 	bl	800240e <HAL_NVIC_EnableIRQ>
}
 8002002:	e036      	b.n	8002072 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a24      	ldr	r2, [pc, #144]	@ (800209c <HAL_UART_MspInit+0x234>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d131      	bne.n	8002072 <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a1b      	ldr	r2, [pc, #108]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_UART_MspInit+0x218>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <HAL_UART_MspInit+0x218>)
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	6193      	str	r3, [r2, #24]
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <HAL_UART_MspInit+0x218>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800203e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	4619      	mov	r1, r3
 8002052:	4813      	ldr	r0, [pc, #76]	@ (80020a0 <HAL_UART_MspInit+0x238>)
 8002054:	f000 fbe4 	bl	8002820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002058:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0320 	add.w	r3, r7, #32
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <HAL_UART_MspInit+0x238>)
 800206e:	f000 fbd7 	bl	8002820 <HAL_GPIO_Init>
}
 8002072:	bf00      	nop
 8002074:	3730      	adds	r7, #48	@ 0x30
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40013800 	.word	0x40013800
 8002080:	40021000 	.word	0x40021000
 8002084:	40010800 	.word	0x40010800
 8002088:	40004400 	.word	0x40004400
 800208c:	200007dc 	.word	0x200007dc
 8002090:	4002006c 	.word	0x4002006c
 8002094:	20000820 	.word	0x20000820
 8002098:	40020080 	.word	0x40020080
 800209c:	40004800 	.word	0x40004800
 80020a0:	40010c00 	.word	0x40010c00

080020a4 <_write>:

/* USER CODE BEGIN 1 */

/* Redirect printf to USART1 for debug output */
int _write(int file, char *ptr, int len)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	4804      	ldr	r0, [pc, #16]	@ (80020cc <_write+0x28>)
 80020bc:	f001 f9dc 	bl	8003478 <HAL_UART_Transmit>
  return len;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000704 	.word	0x20000704

080020d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d0:	f7ff fe46 	bl	8001d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480b      	ldr	r0, [pc, #44]	@ (8002104 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020d6:	490c      	ldr	r1, [pc, #48]	@ (8002108 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020d8:	4a0c      	ldr	r2, [pc, #48]	@ (800210c <LoopFillZerobss+0x16>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020ec:	4c09      	ldr	r4, [pc, #36]	@ (8002114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f002 f8fb 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020fe:	f7ff f9f1 	bl	80014e4 <main>
  bx lr
 8002102:	4770      	bx	lr
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800210c:	08005f40 	.word	0x08005f40
  ldr r2, =_sbss
 8002110:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002114:	200009b4 	.word	0x200009b4

08002118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_2_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_Init+0x28>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	@ (8002144 <HAL_Init+0x28>)
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 f947 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002132:	200f      	movs	r0, #15
 8002134:	f000 f808 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002138:	f7ff fd0e 	bl	8001b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_InitTick+0x54>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f95f 	bl	800242a <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 f927 	bl	80023d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_InitTick+0x5c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000020 	.word	0x20000020
 80021a0:	20000028 	.word	0x20000028
 80021a4:	20000024 	.word	0x20000024

080021a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_IncTick+0x1c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_IncTick+0x20>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a03      	ldr	r2, [pc, #12]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000028 	.word	0x20000028
 80021c8:	20000864 	.word	0x20000864

080021cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <HAL_GetTick+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	20000864 	.word	0x20000864

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fff0 	bl	80021cc <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffe0 	bl	80021cc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000028 	.word	0x20000028

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4906      	ldr	r1, [pc, #24]	@ (80022c0 <__NVIC_EnableIRQ+0x34>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff90 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff2d 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e8:	f7ff ff42 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ff90 	bl	8002318 <NVIC_EncodePriority>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff5f 	bl	80022c4 <__NVIC_SetPriority>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff35 	bl	800228c <__NVIC_EnableIRQ>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffa2 	bl	800237c <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e043      	b.n	80024e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_DMA_Init+0xa8>)
 8002462:	4413      	add	r3, r2
 8002464:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <HAL_DMA_Init+0xac>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	009a      	lsls	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_DMA_Init+0xb0>)
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800248e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002492:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	bffdfff8 	.word	0xbffdfff8
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	40020000 	.word	0x40020000

080024f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_DMA_Start_IT+0x20>
 8002514:	2302      	movs	r3, #2
 8002516:	e04b      	b.n	80025b0 <HAL_DMA_Start_IT+0xb8>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d13a      	bne.n	80025a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f937 	bl	80027c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 020e 	orr.w	r2, r2, #14
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e00f      	b.n	8002590 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 020a 	orr.w	r2, r2, #10
 800258e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e005      	b.n	80025ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	2204      	movs	r2, #4
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d04f      	beq.n	8002680 <HAL_DMA_IRQHandler+0xc8>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d04a      	beq.n	8002680 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0204 	bic.w	r2, r2, #4
 8002606:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a66      	ldr	r2, [pc, #408]	@ (80027a8 <HAL_DMA_IRQHandler+0x1f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d029      	beq.n	8002666 <HAL_DMA_IRQHandler+0xae>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a65      	ldr	r2, [pc, #404]	@ (80027ac <HAL_DMA_IRQHandler+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_IRQHandler+0xaa>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a63      	ldr	r2, [pc, #396]	@ (80027b0 <HAL_DMA_IRQHandler+0x1f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01a      	beq.n	800265c <HAL_DMA_IRQHandler+0xa4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a62      	ldr	r2, [pc, #392]	@ (80027b4 <HAL_DMA_IRQHandler+0x1fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d012      	beq.n	8002656 <HAL_DMA_IRQHandler+0x9e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a60      	ldr	r2, [pc, #384]	@ (80027b8 <HAL_DMA_IRQHandler+0x200>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x98>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5f      	ldr	r2, [pc, #380]	@ (80027bc <HAL_DMA_IRQHandler+0x204>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d102      	bne.n	800264a <HAL_DMA_IRQHandler+0x92>
 8002644:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002648:	e00e      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 800264a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800264e:	e00b      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002650:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002654:	e008      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002656:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800265a:	e005      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 800265c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002660:	e002      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002662:	2340      	movs	r3, #64	@ 0x40
 8002664:	e000      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002666:	2304      	movs	r3, #4
 8002668:	4a55      	ldr	r2, [pc, #340]	@ (80027c0 <HAL_DMA_IRQHandler+0x208>)
 800266a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8094 	beq.w	800279e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800267e:	e08e      	b.n	800279e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2202      	movs	r2, #2
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d056      	beq.n	800273e <HAL_DMA_IRQHandler+0x186>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d051      	beq.n	800273e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10b      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020a 	bic.w	r2, r2, #10
 80026b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a38      	ldr	r2, [pc, #224]	@ (80027a8 <HAL_DMA_IRQHandler+0x1f0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d029      	beq.n	800271e <HAL_DMA_IRQHandler+0x166>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a37      	ldr	r2, [pc, #220]	@ (80027ac <HAL_DMA_IRQHandler+0x1f4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_IRQHandler+0x162>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a35      	ldr	r2, [pc, #212]	@ (80027b0 <HAL_DMA_IRQHandler+0x1f8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01a      	beq.n	8002714 <HAL_DMA_IRQHandler+0x15c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a34      	ldr	r2, [pc, #208]	@ (80027b4 <HAL_DMA_IRQHandler+0x1fc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d012      	beq.n	800270e <HAL_DMA_IRQHandler+0x156>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a32      	ldr	r2, [pc, #200]	@ (80027b8 <HAL_DMA_IRQHandler+0x200>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x150>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <HAL_DMA_IRQHandler+0x204>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d102      	bne.n	8002702 <HAL_DMA_IRQHandler+0x14a>
 80026fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002700:	e00e      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 8002702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002706:	e00b      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 8002708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800270c:	e008      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 800270e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002712:	e005      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 8002714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002718:	e002      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 800271a:	2320      	movs	r3, #32
 800271c:	e000      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 800271e:	2302      	movs	r3, #2
 8002720:	4a27      	ldr	r2, [pc, #156]	@ (80027c0 <HAL_DMA_IRQHandler+0x208>)
 8002722:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d034      	beq.n	800279e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800273c:	e02f      	b.n	800279e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2208      	movs	r2, #8
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x1e8>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d023      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
    }
  }
  return;
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
}
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40020008 	.word	0x40020008
 80027ac:	4002001c 	.word	0x4002001c
 80027b0:	40020030 	.word	0x40020030
 80027b4:	40020044 	.word	0x40020044
 80027b8:	40020058 	.word	0x40020058
 80027bc:	4002006c 	.word	0x4002006c
 80027c0:	40020000 	.word	0x40020000

080027c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d108      	bne.n	8002804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002802:	e007      	b.n	8002814 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
	...

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b08b      	sub	sp, #44	@ 0x2c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002832:	e169      	b.n	8002b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002834:	2201      	movs	r2, #1
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8158 	bne.w	8002b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a9a      	ldr	r2, [pc, #616]	@ (8002ac0 <HAL_GPIO_Init+0x2a0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d05e      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 800285c:	4a98      	ldr	r2, [pc, #608]	@ (8002ac0 <HAL_GPIO_Init+0x2a0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d875      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 8002862:	4a98      	ldr	r2, [pc, #608]	@ (8002ac4 <HAL_GPIO_Init+0x2a4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d058      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 8002868:	4a96      	ldr	r2, [pc, #600]	@ (8002ac4 <HAL_GPIO_Init+0x2a4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d86f      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 800286e:	4a96      	ldr	r2, [pc, #600]	@ (8002ac8 <HAL_GPIO_Init+0x2a8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d052      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 8002874:	4a94      	ldr	r2, [pc, #592]	@ (8002ac8 <HAL_GPIO_Init+0x2a8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d869      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 800287a:	4a94      	ldr	r2, [pc, #592]	@ (8002acc <HAL_GPIO_Init+0x2ac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d04c      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 8002880:	4a92      	ldr	r2, [pc, #584]	@ (8002acc <HAL_GPIO_Init+0x2ac>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d863      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 8002886:	4a92      	ldr	r2, [pc, #584]	@ (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d046      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 800288c:	4a90      	ldr	r2, [pc, #576]	@ (8002ad0 <HAL_GPIO_Init+0x2b0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d85d      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 8002892:	2b12      	cmp	r3, #18
 8002894:	d82a      	bhi.n	80028ec <HAL_GPIO_Init+0xcc>
 8002896:	2b12      	cmp	r3, #18
 8002898:	d859      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 800289a:	a201      	add	r2, pc, #4	@ (adr r2, 80028a0 <HAL_GPIO_Init+0x80>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	0800291b 	.word	0x0800291b
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	08002907 	.word	0x08002907
 80028ac:	08002949 	.word	0x08002949
 80028b0:	0800294f 	.word	0x0800294f
 80028b4:	0800294f 	.word	0x0800294f
 80028b8:	0800294f 	.word	0x0800294f
 80028bc:	0800294f 	.word	0x0800294f
 80028c0:	0800294f 	.word	0x0800294f
 80028c4:	0800294f 	.word	0x0800294f
 80028c8:	0800294f 	.word	0x0800294f
 80028cc:	0800294f 	.word	0x0800294f
 80028d0:	0800294f 	.word	0x0800294f
 80028d4:	0800294f 	.word	0x0800294f
 80028d8:	0800294f 	.word	0x0800294f
 80028dc:	0800294f 	.word	0x0800294f
 80028e0:	0800294f 	.word	0x0800294f
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002911 	.word	0x08002911
 80028ec:	4a79      	ldr	r2, [pc, #484]	@ (8002ad4 <HAL_GPIO_Init+0x2b4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028f2:	e02c      	b.n	800294e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e029      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	3304      	adds	r3, #4
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e024      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	3308      	adds	r3, #8
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e01f      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	330c      	adds	r3, #12
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e01a      	b.n	8002950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002922:	2304      	movs	r3, #4
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e013      	b.n	8002950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002930:	2308      	movs	r3, #8
 8002932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	611a      	str	r2, [r3, #16]
          break;
 800293a:	e009      	b.n	8002950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800293c:	2308      	movs	r3, #8
 800293e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	615a      	str	r2, [r3, #20]
          break;
 8002946:	e003      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x130>
          break;
 800294e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2bff      	cmp	r3, #255	@ 0xff
 8002954:	d801      	bhi.n	800295a <HAL_GPIO_Init+0x13a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	e001      	b.n	800295e <HAL_GPIO_Init+0x13e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2bff      	cmp	r3, #255	@ 0xff
 8002964:	d802      	bhi.n	800296c <HAL_GPIO_Init+0x14c>
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	e002      	b.n	8002972 <HAL_GPIO_Init+0x152>
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	3b08      	subs	r3, #8
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	210f      	movs	r1, #15
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	6a39      	ldr	r1, [r7, #32]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	431a      	orrs	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80b1 	beq.w	8002b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029a0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad8 <HAL_GPIO_Init+0x2b8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad8 <HAL_GPIO_Init+0x2b8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <HAL_GPIO_Init+0x2b8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029b8:	4a48      	ldr	r2, [pc, #288]	@ (8002adc <HAL_GPIO_Init+0x2bc>)
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a40      	ldr	r2, [pc, #256]	@ (8002ae0 <HAL_GPIO_Init+0x2c0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_GPIO_Init+0x1ec>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ae4 <HAL_GPIO_Init+0x2c4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00d      	beq.n	8002a08 <HAL_GPIO_Init+0x1e8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3e      	ldr	r2, [pc, #248]	@ (8002ae8 <HAL_GPIO_Init+0x2c8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <HAL_GPIO_Init+0x1e4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3d      	ldr	r2, [pc, #244]	@ (8002aec <HAL_GPIO_Init+0x2cc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_GPIO_Init+0x1e0>
 80029fc:	2303      	movs	r3, #3
 80029fe:	e006      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a00:	2304      	movs	r3, #4
 8002a02:	e004      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a10:	f002 0203 	and.w	r2, r2, #3
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	4093      	lsls	r3, r2
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a1e:	492f      	ldr	r1, [pc, #188]	@ (8002adc <HAL_GPIO_Init+0x2bc>)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a38:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	492c      	ldr	r1, [pc, #176]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a46:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4928      	ldr	r1, [pc, #160]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a60:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4922      	ldr	r1, [pc, #136]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
 8002a6c:	e006      	b.n	8002a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a6e:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	491e      	ldr	r1, [pc, #120]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a88:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4918      	ldr	r1, [pc, #96]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a96:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4914      	ldr	r1, [pc, #80]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d021      	beq.n	8002af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	490e      	ldr	r1, [pc, #56]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	e021      	b.n	8002b02 <HAL_GPIO_Init+0x2e2>
 8002abe:	bf00      	nop
 8002ac0:	10320000 	.word	0x10320000
 8002ac4:	10310000 	.word	0x10310000
 8002ac8:	10220000 	.word	0x10220000
 8002acc:	10210000 	.word	0x10210000
 8002ad0:	10120000 	.word	0x10120000
 8002ad4:	10110000 	.word	0x10110000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	40010c00 	.word	0x40010c00
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	40011400 	.word	0x40011400
 8002af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_GPIO_Init+0x304>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	4909      	ldr	r1, [pc, #36]	@ (8002b24 <HAL_GPIO_Init+0x304>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	3301      	adds	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f47f ae8e 	bne.w	8002834 <HAL_GPIO_Init+0x14>
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	372c      	adds	r7, #44	@ 0x2c
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40010400 	.word	0x40010400

08002b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e001      	b.n	8002b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	807b      	strh	r3, [r7, #2]
 8002b62:	4613      	mov	r3, r2
 8002b64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b66:	787b      	ldrb	r3, [r7, #1]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6c:	887a      	ldrh	r2, [r7, #2]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b72:	e003      	b.n	8002b7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	611a      	str	r2, [r3, #16]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ffba 	bl	8001b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e272      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8087 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd8:	4b92      	ldr	r3, [pc, #584]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d00c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be4:	4b8f      	ldr	r3, [pc, #572]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d112      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfe:	4b89      	ldr	r3, [pc, #548]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d06c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d168      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e24c      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x76>
 8002c20:	4b80      	ldr	r3, [pc, #512]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a7f      	ldr	r2, [pc, #508]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e02e      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x98>
 8002c36:	4b7b      	ldr	r3, [pc, #492]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b78      	ldr	r3, [pc, #480]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a77      	ldr	r2, [pc, #476]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0xbc>
 8002c5a:	4b72      	ldr	r3, [pc, #456]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a71      	ldr	r2, [pc, #452]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b6f      	ldr	r3, [pc, #444]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c74:	4b6b      	ldr	r3, [pc, #428]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6a      	ldr	r2, [pc, #424]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b68      	ldr	r3, [pc, #416]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a67      	ldr	r2, [pc, #412]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff fa9a 	bl	80021cc <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7ff fa96 	bl	80021cc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	@ 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e200      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b5d      	ldr	r3, [pc, #372]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe4>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fa86 	bl	80021cc <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff fa82 	bl	80021cc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	@ 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1ec      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	4b53      	ldr	r3, [pc, #332]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x10c>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfe:	4b49      	ldr	r3, [pc, #292]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
 8002d0a:	4b46      	ldr	r3, [pc, #280]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1c0      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4939      	ldr	r1, [pc, #228]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	e03a      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7ff fa3b 	bl	80021cc <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7ff fa37 	bl	80021cc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1a1      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b2a      	ldr	r3, [pc, #168]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4927      	ldr	r1, [pc, #156]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7ff fa1a 	bl	80021cc <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7ff fa16 	bl	80021cc <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e180      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b1d      	ldr	r3, [pc, #116]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03a      	beq.n	8002e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b17      	ldr	r3, [pc, #92]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7ff f9fa 	bl	80021cc <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7ff f9f6 	bl	80021cc <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e160      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 face 	bl	800339c <RCC_Delay>
 8002e00:	e01c      	b.n	8002e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e02:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7ff f9e0 	bl	80021cc <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7ff f9dc 	bl	80021cc <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d908      	bls.n	8002e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e146      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	42420000 	.word	0x42420000
 8002e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b92      	ldr	r3, [pc, #584]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e9      	bne.n	8002e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a6 	beq.w	8002f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b88      	ldr	r3, [pc, #544]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a87      	ldr	r2, [pc, #540]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]
 8002e66:	4b85      	ldr	r3, [pc, #532]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b82      	ldr	r3, [pc, #520]	@ (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b7f      	ldr	r3, [pc, #508]	@ (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7e      	ldr	r2, [pc, #504]	@ (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7ff f99d 	bl	80021cc <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7ff f999 	bl	80021cc <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	@ 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e103      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b75      	ldr	r3, [pc, #468]	@ (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x312>
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e02d      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x334>
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a69      	ldr	r2, [pc, #420]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	4b67      	ldr	r3, [pc, #412]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a66      	ldr	r2, [pc, #408]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	e01c      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x356>
 8002ef4:	4b61      	ldr	r3, [pc, #388]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a60      	ldr	r2, [pc, #384]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	4b5e      	ldr	r3, [pc, #376]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a5a      	ldr	r2, [pc, #360]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	4b58      	ldr	r3, [pc, #352]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a57      	ldr	r2, [pc, #348]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d015      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff f94d 	bl	80021cc <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7ff f949 	bl	80021cc <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0b1      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ee      	beq.n	8002f36 <HAL_RCC_OscConfig+0x37e>
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff f937 	bl	80021cc <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7ff f933 	bl	80021cc <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e09b      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	4b40      	ldr	r3, [pc, #256]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8087 	beq.w	80030ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	4b36      	ldr	r3, [pc, #216]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d061      	beq.n	8003070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d146      	bne.n	8003042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b33      	ldr	r3, [pc, #204]	@ (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7ff f907 	bl	80021cc <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7ff f903 	bl	80021cc <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e06d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	4b29      	ldr	r3, [pc, #164]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe8:	d108      	bne.n	8002ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fea:	4b24      	ldr	r3, [pc, #144]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4921      	ldr	r1, [pc, #132]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a19      	ldr	r1, [r3, #32]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	430b      	orrs	r3, r1
 800300e:	491b      	ldr	r1, [pc, #108]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003014:	4b1b      	ldr	r3, [pc, #108]	@ (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7ff f8d7 	bl	80021cc <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7ff f8d3 	bl	80021cc <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e03d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003034:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x46a>
 8003040:	e035      	b.n	80030ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7ff f8c0 	bl	80021cc <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7ff f8bc 	bl	80021cc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e026      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_RCC_OscConfig+0x4c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x498>
 800306e:	e01e      	b.n	80030ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e019      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
 8003084:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_OscConfig+0x500>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0d0      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d910      	bls.n	8003100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b67      	ldr	r3, [pc, #412]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0207 	bic.w	r2, r3, #7
 80030e6:	4965      	ldr	r1, [pc, #404]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a58      	ldr	r2, [pc, #352]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a52      	ldr	r2, [pc, #328]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800313a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d040      	beq.n	80031dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d115      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317a:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e073      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06b      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319a:	4b39      	ldr	r3, [pc, #228]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4936      	ldr	r1, [pc, #216]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ac:	f7ff f80e 	bl	80021cc <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7ff f80a 	bl	80021cc <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e053      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031dc:	4b27      	ldr	r3, [pc, #156]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d210      	bcs.n	800320c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b24      	ldr	r3, [pc, #144]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4922      	ldr	r1, [pc, #136]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003236:	4b12      	ldr	r3, [pc, #72]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f821 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	490a      	ldr	r1, [pc, #40]	@ (8003284 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1cc>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCC_ClockConfig+0x1d0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ff6c 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40022000 	.word	0x40022000
 8003280:	40021000 	.word	0x40021000
 8003284:	08005ed8 	.word	0x08005ed8
 8003288:	20000020 	.word	0x20000020
 800328c:	20000024 	.word	0x20000024

08003290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x94>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x30>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x36>
 80032be:	e027      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x98>)
 80032c2:	613b      	str	r3, [r7, #16]
      break;
 80032c4:	e027      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	4a17      	ldr	r2, [pc, #92]	@ (800332c <HAL_RCC_GetSysClockFreq+0x9c>)
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032de:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x94>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0c5b      	lsrs	r3, r3, #17
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	4a11      	ldr	r2, [pc, #68]	@ (8003330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x98>)
 80032f2:	fb03 f202 	mul.w	r2, r3, r2
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e004      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0c      	ldr	r2, [pc, #48]	@ (8003334 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	613b      	str	r3, [r7, #16]
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x98>)
 8003312:	613b      	str	r3, [r7, #16]
      break;
 8003314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003316:	693b      	ldr	r3, [r7, #16]
}
 8003318:	4618      	mov	r0, r3
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	007a1200 	.word	0x007a1200
 800332c:	08005ef0 	.word	0x08005ef0
 8003330:	08005f00 	.word	0x08005f00
 8003334:	003d0900 	.word	0x003d0900

08003338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b02      	ldr	r3, [pc, #8]	@ (8003348 <HAL_RCC_GetHCLKFreq+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	20000020 	.word	0x20000020

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003350:	f7ff fff2 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4903      	ldr	r1, [pc, #12]	@ (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	08005ee8 	.word	0x08005ee8

08003374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003378:	f7ff ffde 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0adb      	lsrs	r3, r3, #11
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	@ (8003398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	08005ee8 	.word	0x08005ee8

0800339c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a4:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <RCC_Delay+0x34>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	@ (80033d4 <RCC_Delay+0x38>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0a5b      	lsrs	r3, r3, #9
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b8:	bf00      	nop
  }
  while (Delay --);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <RCC_Delay+0x1c>
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	20000020 	.word	0x20000020
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e042      	b.n	8003470 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fd32 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	@ 0x24
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800341a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fc5b 	bl	8003cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b20      	cmp	r3, #32
 8003496:	d175      	bne.n	8003584 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_UART_Transmit+0x2c>
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e06e      	b.n	8003586 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2221      	movs	r2, #33	@ 0x21
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034b6:	f7fe fe89 	bl	80021cc <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d0:	d108      	bne.n	80034e4 <HAL_UART_Transmit+0x6c>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d104      	bne.n	80034e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e003      	b.n	80034ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034ec:	e02e      	b.n	800354c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2180      	movs	r1, #128	@ 0x80
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fa6f 	bl	80039dc <UART_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e03a      	b.n	8003586 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	3302      	adds	r3, #2
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	e007      	b.n	800353e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	3301      	adds	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1cb      	bne.n	80034ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	2140      	movs	r1, #64	@ 0x40
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fa3b 	bl	80039dc <UART_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e006      	b.n	8003586 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	@ 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d156      	bne.n	8003658 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_UART_Transmit_DMA+0x26>
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e04f      	b.n	800365a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2221      	movs	r2, #33	@ 0x21
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	4a21      	ldr	r2, [pc, #132]	@ (8003664 <HAL_UART_Transmit_DMA+0xd4>)
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e6:	4a20      	ldr	r2, [pc, #128]	@ (8003668 <HAL_UART_Transmit_DMA+0xd8>)
 80035e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	4a1f      	ldr	r2, [pc, #124]	@ (800366c <HAL_UART_Transmit_DMA+0xdc>)
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	2200      	movs	r2, #0
 80035f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3304      	adds	r3, #4
 800360e:	461a      	mov	r2, r3
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	f7fe ff71 	bl	80024f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800361e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3314      	adds	r3, #20
 8003626:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	617b      	str	r3, [r7, #20]
   return(result);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003640:	627a      	str	r2, [r7, #36]	@ 0x24
 8003642:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6a39      	ldr	r1, [r7, #32]
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	61fb      	str	r3, [r7, #28]
   return(result);
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e5      	bne.n	8003620 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3730      	adds	r7, #48	@ 0x30
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	0800372b 	.word	0x0800372b
 8003668:	080037c5 	.word	0x080037c5
 800366c:	08003949 	.word	0x08003949

08003670 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	d112      	bne.n	80036b0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_UART_Receive_DMA+0x26>
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00b      	b.n	80036b2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	461a      	mov	r2, r3
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f9f2 	bl	8003a90 <UART_Start_Receive_DMA>
 80036ac:	4603      	mov	r3, r0
 80036ae:	e000      	b.n	80036b2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b090      	sub	sp, #64	@ 0x40
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d137      	bne.n	80037b6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003748:	2200      	movs	r2, #0
 800374a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800374c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3314      	adds	r3, #20
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	623b      	str	r3, [r7, #32]
   return(result);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800376c:	633a      	str	r2, [r7, #48]	@ 0x30
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e5      	bne.n	800374c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
 8003798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a0:	61fa      	str	r2, [r7, #28]
 80037a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	69b9      	ldr	r1, [r7, #24]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	617b      	str	r3, [r7, #20]
   return(result);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e5      	bne.n	8003780 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037b4:	e002      	b.n	80037bc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80037b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80037b8:	f7ff ff7f 	bl	80036ba <HAL_UART_TxCpltCallback>
}
 80037bc:	bf00      	nop
 80037be:	3740      	adds	r7, #64	@ 0x40
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff ff7a 	bl	80036cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b09c      	sub	sp, #112	@ 0x70
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d172      	bne.n	80038e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	2200      	movs	r2, #0
 8003800:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800381a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003822:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003824:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003828:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e5      	bne.n	8003802 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	667b      	str	r3, [r7, #100]	@ 0x64
 800384e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003856:	647a      	str	r2, [r7, #68]	@ 0x44
 8003858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800385c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	623b      	str	r3, [r7, #32]
   return(result);
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003880:	663b      	str	r3, [r7, #96]	@ 0x60
 8003882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3314      	adds	r3, #20
 8003888:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800388a:	633a      	str	r2, [r7, #48]	@ 0x30
 800388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800389e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d119      	bne.n	80038e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f023 0310 	bic.w	r3, r3, #16
 80038c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80038ce:	61fa      	str	r2, [r7, #28]
 80038d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	69b9      	ldr	r1, [r7, #24]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	617b      	str	r3, [r7, #20]
   return(result);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e4:	2200      	movs	r2, #0
 80038e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d106      	bne.n	80038fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038f4:	4619      	mov	r1, r3
 80038f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038f8:	f7ff ff0c 	bl	8003714 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038fc:	e002      	b.n	8003904 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80038fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003900:	f7ff feed 	bl	80036de <HAL_UART_RxCpltCallback>
}
 8003904:	bf00      	nop
 8003906:	3770      	adds	r7, #112	@ 0x70
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	2b01      	cmp	r3, #1
 8003926:	d108      	bne.n	800393a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	b29b      	uxth	r3, r3
 8003930:	4619      	mov	r1, r3
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff feee 	bl	8003714 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003938:	e002      	b.n	8003940 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff fed8 	bl	80036f0 <HAL_UART_RxHalfCpltCallback>
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b21      	cmp	r3, #33	@ 0x21
 800397a:	d108      	bne.n	800398e <UART_DMAError+0x46>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2200      	movs	r2, #0
 8003986:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f000 f91b 	bl	8003bc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b22      	cmp	r3, #34	@ 0x22
 80039ae:	d108      	bne.n	80039c2 <UART_DMAError+0x7a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2200      	movs	r2, #0
 80039ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80039bc:	68b8      	ldr	r0, [r7, #8]
 80039be:	f000 f928 	bl	8003c12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ce:	68b8      	ldr	r0, [r7, #8]
 80039d0:	f7ff fe97 	bl	8003702 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ec:	e03b      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d037      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7fe fbe9 	bl	80021cc <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e03a      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d023      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b80      	cmp	r3, #128	@ 0x80
 8003a22:	d020      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b40      	cmp	r3, #64	@ 0x40
 8003a28:	d01d      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d116      	bne.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f8df 	bl	8003c12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2208      	movs	r2, #8
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00f      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d0b4      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b098      	sub	sp, #96	@ 0x60
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2222      	movs	r2, #34	@ 0x22
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb8 <UART_Start_Receive_DMA+0x128>)
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac4:	4a3d      	ldr	r2, [pc, #244]	@ (8003bbc <UART_Start_Receive_DMA+0x12c>)
 8003ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc0 <UART_Start_Receive_DMA+0x130>)
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ad8:	f107 0308 	add.w	r3, r7, #8
 8003adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	f7fe fd02 	bl	80024f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d019      	beq.n	8003b46 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b32:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003b38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3314      	adds	r3, #20
 8003b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b66:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e5      	bne.n	8003b46 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b90:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6a39      	ldr	r1, [r7, #32]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3760      	adds	r7, #96	@ 0x60
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	080037e1 	.word	0x080037e1
 8003bbc:	0800390d 	.word	0x0800390d
 8003bc0:	08003949 	.word	0x08003949

08003bc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	@ 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	61ba      	str	r2, [r7, #24]
 8003bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6979      	ldr	r1, [r7, #20]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e5      	bne.n	8003bcc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003c08:	bf00      	nop
 8003c0a:	3724      	adds	r7, #36	@ 0x24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b095      	sub	sp, #84	@ 0x54
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d119      	bne.n	8003cbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0310 	bic.w	r3, r3, #16
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003caa:	61ba      	str	r2, [r7, #24]
 8003cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e5      	bne.n	8003c8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ccc:	bf00      	nop
 8003cce:	3754      	adds	r7, #84	@ 0x54
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
	...

08003cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d12:	f023 030c 	bic.w	r3, r3, #12
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dec <UART_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d103      	bne.n	8003d48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7ff fb18 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d48:	f7ff fb00 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8003d4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009a      	lsls	r2, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	4a22      	ldr	r2, [pc, #136]	@ (8003df0 <UART_SetConfig+0x118>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	0119      	lsls	r1, r3, #4
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009a      	lsls	r2, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d84:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <UART_SetConfig+0x118>)
 8003d86:	fba3 0302 	umull	r0, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2064      	movs	r0, #100	@ 0x64
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	3332      	adds	r3, #50	@ 0x32
 8003d98:	4a15      	ldr	r2, [pc, #84]	@ (8003df0 <UART_SetConfig+0x118>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da4:	4419      	add	r1, r3
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009a      	lsls	r2, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <UART_SetConfig+0x118>)
 8003dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2064      	movs	r0, #100	@ 0x64
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	3332      	adds	r3, #50	@ 0x32
 8003dd0:	4a07      	ldr	r2, [pc, #28]	@ (8003df0 <UART_SetConfig+0x118>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	440a      	add	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40013800 	.word	0x40013800
 8003df0:	51eb851f 	.word	0x51eb851f

08003df4 <std>:
 8003df4:	2300      	movs	r3, #0
 8003df6:	b510      	push	{r4, lr}
 8003df8:	4604      	mov	r4, r0
 8003dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8003dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e02:	6083      	str	r3, [r0, #8]
 8003e04:	8181      	strh	r1, [r0, #12]
 8003e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e08:	81c2      	strh	r2, [r0, #14]
 8003e0a:	6183      	str	r3, [r0, #24]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	2208      	movs	r2, #8
 8003e10:	305c      	adds	r0, #92	@ 0x5c
 8003e12:	f000 fa1b 	bl	800424c <memset>
 8003e16:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <std+0x58>)
 8003e18:	6224      	str	r4, [r4, #32]
 8003e1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <std+0x5c>)
 8003e1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e20:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <std+0x60>)
 8003e22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e24:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <std+0x64>)
 8003e26:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e28:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <std+0x68>)
 8003e2a:	429c      	cmp	r4, r3
 8003e2c:	d006      	beq.n	8003e3c <std+0x48>
 8003e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e32:	4294      	cmp	r4, r2
 8003e34:	d002      	beq.n	8003e3c <std+0x48>
 8003e36:	33d0      	adds	r3, #208	@ 0xd0
 8003e38:	429c      	cmp	r4, r3
 8003e3a:	d105      	bne.n	8003e48 <std+0x54>
 8003e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e44:	f000 ba7a 	b.w	800433c <__retarget_lock_init_recursive>
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	bf00      	nop
 8003e4c:	0800409d 	.word	0x0800409d
 8003e50:	080040bf 	.word	0x080040bf
 8003e54:	080040f7 	.word	0x080040f7
 8003e58:	0800411b 	.word	0x0800411b
 8003e5c:	20000868 	.word	0x20000868

08003e60 <stdio_exit_handler>:
 8003e60:	4a02      	ldr	r2, [pc, #8]	@ (8003e6c <stdio_exit_handler+0xc>)
 8003e62:	4903      	ldr	r1, [pc, #12]	@ (8003e70 <stdio_exit_handler+0x10>)
 8003e64:	4803      	ldr	r0, [pc, #12]	@ (8003e74 <stdio_exit_handler+0x14>)
 8003e66:	f000 b869 	b.w	8003f3c <_fwalk_sglue>
 8003e6a:	bf00      	nop
 8003e6c:	2000002c 	.word	0x2000002c
 8003e70:	08004e9d 	.word	0x08004e9d
 8003e74:	2000003c 	.word	0x2000003c

08003e78 <cleanup_stdio>:
 8003e78:	6841      	ldr	r1, [r0, #4]
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <cleanup_stdio+0x34>)
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	4299      	cmp	r1, r3
 8003e80:	4604      	mov	r4, r0
 8003e82:	d001      	beq.n	8003e88 <cleanup_stdio+0x10>
 8003e84:	f001 f80a 	bl	8004e9c <_fflush_r>
 8003e88:	68a1      	ldr	r1, [r4, #8]
 8003e8a:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <cleanup_stdio+0x38>)
 8003e8c:	4299      	cmp	r1, r3
 8003e8e:	d002      	beq.n	8003e96 <cleanup_stdio+0x1e>
 8003e90:	4620      	mov	r0, r4
 8003e92:	f001 f803 	bl	8004e9c <_fflush_r>
 8003e96:	68e1      	ldr	r1, [r4, #12]
 8003e98:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <cleanup_stdio+0x3c>)
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	d004      	beq.n	8003ea8 <cleanup_stdio+0x30>
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ea4:	f000 bffa 	b.w	8004e9c <_fflush_r>
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000868 	.word	0x20000868
 8003eb0:	200008d0 	.word	0x200008d0
 8003eb4:	20000938 	.word	0x20000938

08003eb8 <global_stdio_init.part.0>:
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <global_stdio_init.part.0+0x30>)
 8003ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8003eec <global_stdio_init.part.0+0x34>)
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef0 <global_stdio_init.part.0+0x38>)
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f7ff ff94 	bl	8003df4 <std>
 8003ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	2109      	movs	r1, #9
 8003ed4:	f7ff ff8e 	bl	8003df4 <std>
 8003ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003edc:	2202      	movs	r2, #2
 8003ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ee2:	2112      	movs	r1, #18
 8003ee4:	f7ff bf86 	b.w	8003df4 <std>
 8003ee8:	200009a0 	.word	0x200009a0
 8003eec:	20000868 	.word	0x20000868
 8003ef0:	08003e61 	.word	0x08003e61

08003ef4 <__sfp_lock_acquire>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	@ (8003efc <__sfp_lock_acquire+0x8>)
 8003ef6:	f000 ba22 	b.w	800433e <__retarget_lock_acquire_recursive>
 8003efa:	bf00      	nop
 8003efc:	200009a9 	.word	0x200009a9

08003f00 <__sfp_lock_release>:
 8003f00:	4801      	ldr	r0, [pc, #4]	@ (8003f08 <__sfp_lock_release+0x8>)
 8003f02:	f000 ba1d 	b.w	8004340 <__retarget_lock_release_recursive>
 8003f06:	bf00      	nop
 8003f08:	200009a9 	.word	0x200009a9

08003f0c <__sinit>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	4604      	mov	r4, r0
 8003f10:	f7ff fff0 	bl	8003ef4 <__sfp_lock_acquire>
 8003f14:	6a23      	ldr	r3, [r4, #32]
 8003f16:	b11b      	cbz	r3, 8003f20 <__sinit+0x14>
 8003f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f1c:	f7ff bff0 	b.w	8003f00 <__sfp_lock_release>
 8003f20:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <__sinit+0x28>)
 8003f22:	6223      	str	r3, [r4, #32]
 8003f24:	4b04      	ldr	r3, [pc, #16]	@ (8003f38 <__sinit+0x2c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f5      	bne.n	8003f18 <__sinit+0xc>
 8003f2c:	f7ff ffc4 	bl	8003eb8 <global_stdio_init.part.0>
 8003f30:	e7f2      	b.n	8003f18 <__sinit+0xc>
 8003f32:	bf00      	nop
 8003f34:	08003e79 	.word	0x08003e79
 8003f38:	200009a0 	.word	0x200009a0

08003f3c <_fwalk_sglue>:
 8003f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f40:	4607      	mov	r7, r0
 8003f42:	4688      	mov	r8, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	2600      	movs	r6, #0
 8003f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f50:	d505      	bpl.n	8003f5e <_fwalk_sglue+0x22>
 8003f52:	6824      	ldr	r4, [r4, #0]
 8003f54:	2c00      	cmp	r4, #0
 8003f56:	d1f7      	bne.n	8003f48 <_fwalk_sglue+0xc>
 8003f58:	4630      	mov	r0, r6
 8003f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f5e:	89ab      	ldrh	r3, [r5, #12]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d907      	bls.n	8003f74 <_fwalk_sglue+0x38>
 8003f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	d003      	beq.n	8003f74 <_fwalk_sglue+0x38>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4638      	mov	r0, r7
 8003f70:	47c0      	blx	r8
 8003f72:	4306      	orrs	r6, r0
 8003f74:	3568      	adds	r5, #104	@ 0x68
 8003f76:	e7e9      	b.n	8003f4c <_fwalk_sglue+0x10>

08003f78 <iprintf>:
 8003f78:	b40f      	push	{r0, r1, r2, r3}
 8003f7a:	b507      	push	{r0, r1, r2, lr}
 8003f7c:	4906      	ldr	r1, [pc, #24]	@ (8003f98 <iprintf+0x20>)
 8003f7e:	ab04      	add	r3, sp, #16
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f86:	6881      	ldr	r1, [r0, #8]
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	f000 fc5f 	bl	800484c <_vfiprintf_r>
 8003f8e:	b003      	add	sp, #12
 8003f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f94:	b004      	add	sp, #16
 8003f96:	4770      	bx	lr
 8003f98:	20000038 	.word	0x20000038

08003f9c <_puts_r>:
 8003f9c:	6a03      	ldr	r3, [r0, #32]
 8003f9e:	b570      	push	{r4, r5, r6, lr}
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	460e      	mov	r6, r1
 8003fa4:	6884      	ldr	r4, [r0, #8]
 8003fa6:	b90b      	cbnz	r3, 8003fac <_puts_r+0x10>
 8003fa8:	f7ff ffb0 	bl	8003f0c <__sinit>
 8003fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fae:	07db      	lsls	r3, r3, #31
 8003fb0:	d405      	bmi.n	8003fbe <_puts_r+0x22>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	0598      	lsls	r0, r3, #22
 8003fb6:	d402      	bmi.n	8003fbe <_puts_r+0x22>
 8003fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fba:	f000 f9c0 	bl	800433e <__retarget_lock_acquire_recursive>
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	0719      	lsls	r1, r3, #28
 8003fc2:	d502      	bpl.n	8003fca <_puts_r+0x2e>
 8003fc4:	6923      	ldr	r3, [r4, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d135      	bne.n	8004036 <_puts_r+0x9a>
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f000 f8e7 	bl	80041a0 <__swsetup_r>
 8003fd2:	b380      	cbz	r0, 8004036 <_puts_r+0x9a>
 8003fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8003fd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fda:	07da      	lsls	r2, r3, #31
 8003fdc:	d405      	bmi.n	8003fea <_puts_r+0x4e>
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	059b      	lsls	r3, r3, #22
 8003fe2:	d402      	bmi.n	8003fea <_puts_r+0x4e>
 8003fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fe6:	f000 f9ab 	bl	8004340 <__retarget_lock_release_recursive>
 8003fea:	4628      	mov	r0, r5
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	da04      	bge.n	8003ffc <_puts_r+0x60>
 8003ff2:	69a2      	ldr	r2, [r4, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	dc17      	bgt.n	8004028 <_puts_r+0x8c>
 8003ff8:	290a      	cmp	r1, #10
 8003ffa:	d015      	beq.n	8004028 <_puts_r+0x8c>
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	7019      	strb	r1, [r3, #0]
 8004004:	68a3      	ldr	r3, [r4, #8]
 8004006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800400a:	3b01      	subs	r3, #1
 800400c:	60a3      	str	r3, [r4, #8]
 800400e:	2900      	cmp	r1, #0
 8004010:	d1ed      	bne.n	8003fee <_puts_r+0x52>
 8004012:	2b00      	cmp	r3, #0
 8004014:	da11      	bge.n	800403a <_puts_r+0x9e>
 8004016:	4622      	mov	r2, r4
 8004018:	210a      	movs	r1, #10
 800401a:	4628      	mov	r0, r5
 800401c:	f000 f881 	bl	8004122 <__swbuf_r>
 8004020:	3001      	adds	r0, #1
 8004022:	d0d7      	beq.n	8003fd4 <_puts_r+0x38>
 8004024:	250a      	movs	r5, #10
 8004026:	e7d7      	b.n	8003fd8 <_puts_r+0x3c>
 8004028:	4622      	mov	r2, r4
 800402a:	4628      	mov	r0, r5
 800402c:	f000 f879 	bl	8004122 <__swbuf_r>
 8004030:	3001      	adds	r0, #1
 8004032:	d1e7      	bne.n	8004004 <_puts_r+0x68>
 8004034:	e7ce      	b.n	8003fd4 <_puts_r+0x38>
 8004036:	3e01      	subs	r6, #1
 8004038:	e7e4      	b.n	8004004 <_puts_r+0x68>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	6022      	str	r2, [r4, #0]
 8004040:	220a      	movs	r2, #10
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e7ee      	b.n	8004024 <_puts_r+0x88>
	...

08004048 <puts>:
 8004048:	4b02      	ldr	r3, [pc, #8]	@ (8004054 <puts+0xc>)
 800404a:	4601      	mov	r1, r0
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	f7ff bfa5 	b.w	8003f9c <_puts_r>
 8004052:	bf00      	nop
 8004054:	20000038 	.word	0x20000038

08004058 <siprintf>:
 8004058:	b40e      	push	{r1, r2, r3}
 800405a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800405e:	b510      	push	{r4, lr}
 8004060:	2400      	movs	r4, #0
 8004062:	b09d      	sub	sp, #116	@ 0x74
 8004064:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004066:	9002      	str	r0, [sp, #8]
 8004068:	9006      	str	r0, [sp, #24]
 800406a:	9107      	str	r1, [sp, #28]
 800406c:	9104      	str	r1, [sp, #16]
 800406e:	4809      	ldr	r0, [pc, #36]	@ (8004094 <siprintf+0x3c>)
 8004070:	4909      	ldr	r1, [pc, #36]	@ (8004098 <siprintf+0x40>)
 8004072:	f853 2b04 	ldr.w	r2, [r3], #4
 8004076:	9105      	str	r1, [sp, #20]
 8004078:	6800      	ldr	r0, [r0, #0]
 800407a:	a902      	add	r1, sp, #8
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004080:	f000 fac0 	bl	8004604 <_svfiprintf_r>
 8004084:	9b02      	ldr	r3, [sp, #8]
 8004086:	701c      	strb	r4, [r3, #0]
 8004088:	b01d      	add	sp, #116	@ 0x74
 800408a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800408e:	b003      	add	sp, #12
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000038 	.word	0x20000038
 8004098:	ffff0208 	.word	0xffff0208

0800409c <__sread>:
 800409c:	b510      	push	{r4, lr}
 800409e:	460c      	mov	r4, r1
 80040a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a4:	f000 f8fc 	bl	80042a0 <_read_r>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	bfab      	itete	ge
 80040ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040ae:	89a3      	ldrhlt	r3, [r4, #12]
 80040b0:	181b      	addge	r3, r3, r0
 80040b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040b6:	bfac      	ite	ge
 80040b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040ba:	81a3      	strhlt	r3, [r4, #12]
 80040bc:	bd10      	pop	{r4, pc}

080040be <__swrite>:
 80040be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c2:	461f      	mov	r7, r3
 80040c4:	898b      	ldrh	r3, [r1, #12]
 80040c6:	4605      	mov	r5, r0
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	460c      	mov	r4, r1
 80040cc:	4616      	mov	r6, r2
 80040ce:	d505      	bpl.n	80040dc <__swrite+0x1e>
 80040d0:	2302      	movs	r3, #2
 80040d2:	2200      	movs	r2, #0
 80040d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d8:	f000 f8d0 	bl	800427c <_lseek_r>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	4632      	mov	r2, r6
 80040e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	4628      	mov	r0, r5
 80040e8:	463b      	mov	r3, r7
 80040ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040f2:	f000 b8e7 	b.w	80042c4 <_write_r>

080040f6 <__sseek>:
 80040f6:	b510      	push	{r4, lr}
 80040f8:	460c      	mov	r4, r1
 80040fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fe:	f000 f8bd 	bl	800427c <_lseek_r>
 8004102:	1c43      	adds	r3, r0, #1
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	bf15      	itete	ne
 8004108:	6560      	strne	r0, [r4, #84]	@ 0x54
 800410a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800410e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004112:	81a3      	strheq	r3, [r4, #12]
 8004114:	bf18      	it	ne
 8004116:	81a3      	strhne	r3, [r4, #12]
 8004118:	bd10      	pop	{r4, pc}

0800411a <__sclose>:
 800411a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800411e:	f000 b89d 	b.w	800425c <_close_r>

08004122 <__swbuf_r>:
 8004122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004124:	460e      	mov	r6, r1
 8004126:	4614      	mov	r4, r2
 8004128:	4605      	mov	r5, r0
 800412a:	b118      	cbz	r0, 8004134 <__swbuf_r+0x12>
 800412c:	6a03      	ldr	r3, [r0, #32]
 800412e:	b90b      	cbnz	r3, 8004134 <__swbuf_r+0x12>
 8004130:	f7ff feec 	bl	8003f0c <__sinit>
 8004134:	69a3      	ldr	r3, [r4, #24]
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	071a      	lsls	r2, r3, #28
 800413c:	d501      	bpl.n	8004142 <__swbuf_r+0x20>
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	b943      	cbnz	r3, 8004154 <__swbuf_r+0x32>
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 f82b 	bl	80041a0 <__swsetup_r>
 800414a:	b118      	cbz	r0, 8004154 <__swbuf_r+0x32>
 800414c:	f04f 37ff 	mov.w	r7, #4294967295
 8004150:	4638      	mov	r0, r7
 8004152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	6922      	ldr	r2, [r4, #16]
 8004158:	b2f6      	uxtb	r6, r6
 800415a:	1a98      	subs	r0, r3, r2
 800415c:	6963      	ldr	r3, [r4, #20]
 800415e:	4637      	mov	r7, r6
 8004160:	4283      	cmp	r3, r0
 8004162:	dc05      	bgt.n	8004170 <__swbuf_r+0x4e>
 8004164:	4621      	mov	r1, r4
 8004166:	4628      	mov	r0, r5
 8004168:	f000 fe98 	bl	8004e9c <_fflush_r>
 800416c:	2800      	cmp	r0, #0
 800416e:	d1ed      	bne.n	800414c <__swbuf_r+0x2a>
 8004170:	68a3      	ldr	r3, [r4, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	60a3      	str	r3, [r4, #8]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	701e      	strb	r6, [r3, #0]
 800417e:	6962      	ldr	r2, [r4, #20]
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	429a      	cmp	r2, r3
 8004184:	d004      	beq.n	8004190 <__swbuf_r+0x6e>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	07db      	lsls	r3, r3, #31
 800418a:	d5e1      	bpl.n	8004150 <__swbuf_r+0x2e>
 800418c:	2e0a      	cmp	r6, #10
 800418e:	d1df      	bne.n	8004150 <__swbuf_r+0x2e>
 8004190:	4621      	mov	r1, r4
 8004192:	4628      	mov	r0, r5
 8004194:	f000 fe82 	bl	8004e9c <_fflush_r>
 8004198:	2800      	cmp	r0, #0
 800419a:	d0d9      	beq.n	8004150 <__swbuf_r+0x2e>
 800419c:	e7d6      	b.n	800414c <__swbuf_r+0x2a>
	...

080041a0 <__swsetup_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4b29      	ldr	r3, [pc, #164]	@ (8004248 <__swsetup_r+0xa8>)
 80041a4:	4605      	mov	r5, r0
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	460c      	mov	r4, r1
 80041aa:	b118      	cbz	r0, 80041b4 <__swsetup_r+0x14>
 80041ac:	6a03      	ldr	r3, [r0, #32]
 80041ae:	b90b      	cbnz	r3, 80041b4 <__swsetup_r+0x14>
 80041b0:	f7ff feac 	bl	8003f0c <__sinit>
 80041b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b8:	0719      	lsls	r1, r3, #28
 80041ba:	d422      	bmi.n	8004202 <__swsetup_r+0x62>
 80041bc:	06da      	lsls	r2, r3, #27
 80041be:	d407      	bmi.n	80041d0 <__swsetup_r+0x30>
 80041c0:	2209      	movs	r2, #9
 80041c2:	602a      	str	r2, [r5, #0]
 80041c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	81a3      	strh	r3, [r4, #12]
 80041ce:	e033      	b.n	8004238 <__swsetup_r+0x98>
 80041d0:	0758      	lsls	r0, r3, #29
 80041d2:	d512      	bpl.n	80041fa <__swsetup_r+0x5a>
 80041d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041d6:	b141      	cbz	r1, 80041ea <__swsetup_r+0x4a>
 80041d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041dc:	4299      	cmp	r1, r3
 80041de:	d002      	beq.n	80041e6 <__swsetup_r+0x46>
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 f8bd 	bl	8004360 <_free_r>
 80041e6:	2300      	movs	r3, #0
 80041e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	2300      	movs	r3, #0
 80041f4:	6063      	str	r3, [r4, #4]
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0308 	orr.w	r3, r3, #8
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	b94b      	cbnz	r3, 800421a <__swsetup_r+0x7a>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800420c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004210:	d003      	beq.n	800421a <__swsetup_r+0x7a>
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	f000 fe8e 	bl	8004f36 <__smakebuf_r>
 800421a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800421e:	f013 0201 	ands.w	r2, r3, #1
 8004222:	d00a      	beq.n	800423a <__swsetup_r+0x9a>
 8004224:	2200      	movs	r2, #0
 8004226:	60a2      	str	r2, [r4, #8]
 8004228:	6962      	ldr	r2, [r4, #20]
 800422a:	4252      	negs	r2, r2
 800422c:	61a2      	str	r2, [r4, #24]
 800422e:	6922      	ldr	r2, [r4, #16]
 8004230:	b942      	cbnz	r2, 8004244 <__swsetup_r+0xa4>
 8004232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004236:	d1c5      	bne.n	80041c4 <__swsetup_r+0x24>
 8004238:	bd38      	pop	{r3, r4, r5, pc}
 800423a:	0799      	lsls	r1, r3, #30
 800423c:	bf58      	it	pl
 800423e:	6962      	ldrpl	r2, [r4, #20]
 8004240:	60a2      	str	r2, [r4, #8]
 8004242:	e7f4      	b.n	800422e <__swsetup_r+0x8e>
 8004244:	2000      	movs	r0, #0
 8004246:	e7f7      	b.n	8004238 <__swsetup_r+0x98>
 8004248:	20000038 	.word	0x20000038

0800424c <memset>:
 800424c:	4603      	mov	r3, r0
 800424e:	4402      	add	r2, r0
 8004250:	4293      	cmp	r3, r2
 8004252:	d100      	bne.n	8004256 <memset+0xa>
 8004254:	4770      	bx	lr
 8004256:	f803 1b01 	strb.w	r1, [r3], #1
 800425a:	e7f9      	b.n	8004250 <memset+0x4>

0800425c <_close_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	2300      	movs	r3, #0
 8004260:	4d05      	ldr	r5, [pc, #20]	@ (8004278 <_close_r+0x1c>)
 8004262:	4604      	mov	r4, r0
 8004264:	4608      	mov	r0, r1
 8004266:	602b      	str	r3, [r5, #0]
 8004268:	f7fd fd14 	bl	8001c94 <_close>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_close_r+0x1a>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_close_r+0x1a>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	200009a4 	.word	0x200009a4

0800427c <_lseek_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4604      	mov	r4, r0
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	2200      	movs	r2, #0
 8004286:	4d05      	ldr	r5, [pc, #20]	@ (800429c <_lseek_r+0x20>)
 8004288:	602a      	str	r2, [r5, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	f7fd fd26 	bl	8001cdc <_lseek>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_lseek_r+0x1e>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	b103      	cbz	r3, 800429a <_lseek_r+0x1e>
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	200009a4 	.word	0x200009a4

080042a0 <_read_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4604      	mov	r4, r0
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	2200      	movs	r2, #0
 80042aa:	4d05      	ldr	r5, [pc, #20]	@ (80042c0 <_read_r+0x20>)
 80042ac:	602a      	str	r2, [r5, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fd fcd3 	bl	8001c5a <_read>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_read_r+0x1e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_read_r+0x1e>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	200009a4 	.word	0x200009a4

080042c4 <_write_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	2200      	movs	r2, #0
 80042ce:	4d05      	ldr	r5, [pc, #20]	@ (80042e4 <_write_r+0x20>)
 80042d0:	602a      	str	r2, [r5, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fd fee6 	bl	80020a4 <_write>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_write_r+0x1e>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_write_r+0x1e>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	200009a4 	.word	0x200009a4

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	@ (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000038 	.word	0x20000038

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	2600      	movs	r6, #0
 80042f8:	4d0c      	ldr	r5, [pc, #48]	@ (800432c <__libc_init_array+0x38>)
 80042fa:	4c0d      	ldr	r4, [pc, #52]	@ (8004330 <__libc_init_array+0x3c>)
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	f000 fee4 	bl	80050d0 <_init>
 8004308:	2600      	movs	r6, #0
 800430a:	4d0a      	ldr	r5, [pc, #40]	@ (8004334 <__libc_init_array+0x40>)
 800430c:	4c0a      	ldr	r4, [pc, #40]	@ (8004338 <__libc_init_array+0x44>)
 800430e:	1b64      	subs	r4, r4, r5
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	08005f38 	.word	0x08005f38
 8004330:	08005f38 	.word	0x08005f38
 8004334:	08005f38 	.word	0x08005f38
 8004338:	08005f3c 	.word	0x08005f3c

0800433c <__retarget_lock_init_recursive>:
 800433c:	4770      	bx	lr

0800433e <__retarget_lock_acquire_recursive>:
 800433e:	4770      	bx	lr

08004340 <__retarget_lock_release_recursive>:
 8004340:	4770      	bx	lr

08004342 <memcpy>:
 8004342:	440a      	add	r2, r1
 8004344:	4291      	cmp	r1, r2
 8004346:	f100 33ff 	add.w	r3, r0, #4294967295
 800434a:	d100      	bne.n	800434e <memcpy+0xc>
 800434c:	4770      	bx	lr
 800434e:	b510      	push	{r4, lr}
 8004350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004354:	4291      	cmp	r1, r2
 8004356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800435a:	d1f9      	bne.n	8004350 <memcpy+0xe>
 800435c:	bd10      	pop	{r4, pc}
	...

08004360 <_free_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4605      	mov	r5, r0
 8004364:	2900      	cmp	r1, #0
 8004366:	d040      	beq.n	80043ea <_free_r+0x8a>
 8004368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436c:	1f0c      	subs	r4, r1, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfb8      	it	lt
 8004372:	18e4      	addlt	r4, r4, r3
 8004374:	f000 f8de 	bl	8004534 <__malloc_lock>
 8004378:	4a1c      	ldr	r2, [pc, #112]	@ (80043ec <_free_r+0x8c>)
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	b933      	cbnz	r3, 800438c <_free_r+0x2c>
 800437e:	6063      	str	r3, [r4, #4]
 8004380:	6014      	str	r4, [r2, #0]
 8004382:	4628      	mov	r0, r5
 8004384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004388:	f000 b8da 	b.w	8004540 <__malloc_unlock>
 800438c:	42a3      	cmp	r3, r4
 800438e:	d908      	bls.n	80043a2 <_free_r+0x42>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	1821      	adds	r1, r4, r0
 8004394:	428b      	cmp	r3, r1
 8004396:	bf01      	itttt	eq
 8004398:	6819      	ldreq	r1, [r3, #0]
 800439a:	685b      	ldreq	r3, [r3, #4]
 800439c:	1809      	addeq	r1, r1, r0
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	e7ed      	b.n	800437e <_free_r+0x1e>
 80043a2:	461a      	mov	r2, r3
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b10b      	cbz	r3, 80043ac <_free_r+0x4c>
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	d9fa      	bls.n	80043a2 <_free_r+0x42>
 80043ac:	6811      	ldr	r1, [r2, #0]
 80043ae:	1850      	adds	r0, r2, r1
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d10b      	bne.n	80043cc <_free_r+0x6c>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	4401      	add	r1, r0
 80043b8:	1850      	adds	r0, r2, r1
 80043ba:	4283      	cmp	r3, r0
 80043bc:	6011      	str	r1, [r2, #0]
 80043be:	d1e0      	bne.n	8004382 <_free_r+0x22>
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4408      	add	r0, r1
 80043c6:	6010      	str	r0, [r2, #0]
 80043c8:	6053      	str	r3, [r2, #4]
 80043ca:	e7da      	b.n	8004382 <_free_r+0x22>
 80043cc:	d902      	bls.n	80043d4 <_free_r+0x74>
 80043ce:	230c      	movs	r3, #12
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	e7d6      	b.n	8004382 <_free_r+0x22>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	1821      	adds	r1, r4, r0
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf01      	itttt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	6054      	str	r4, [r2, #4]
 80043e8:	e7cb      	b.n	8004382 <_free_r+0x22>
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	200009b0 	.word	0x200009b0

080043f0 <sbrk_aligned>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004430 <sbrk_aligned+0x40>)
 80043f4:	460c      	mov	r4, r1
 80043f6:	6831      	ldr	r1, [r6, #0]
 80043f8:	4605      	mov	r5, r0
 80043fa:	b911      	cbnz	r1, 8004402 <sbrk_aligned+0x12>
 80043fc:	f000 fe14 	bl	8005028 <_sbrk_r>
 8004400:	6030      	str	r0, [r6, #0]
 8004402:	4621      	mov	r1, r4
 8004404:	4628      	mov	r0, r5
 8004406:	f000 fe0f 	bl	8005028 <_sbrk_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d103      	bne.n	8004416 <sbrk_aligned+0x26>
 800440e:	f04f 34ff 	mov.w	r4, #4294967295
 8004412:	4620      	mov	r0, r4
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	1cc4      	adds	r4, r0, #3
 8004418:	f024 0403 	bic.w	r4, r4, #3
 800441c:	42a0      	cmp	r0, r4
 800441e:	d0f8      	beq.n	8004412 <sbrk_aligned+0x22>
 8004420:	1a21      	subs	r1, r4, r0
 8004422:	4628      	mov	r0, r5
 8004424:	f000 fe00 	bl	8005028 <_sbrk_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d1f2      	bne.n	8004412 <sbrk_aligned+0x22>
 800442c:	e7ef      	b.n	800440e <sbrk_aligned+0x1e>
 800442e:	bf00      	nop
 8004430:	200009ac 	.word	0x200009ac

08004434 <_malloc_r>:
 8004434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004438:	1ccd      	adds	r5, r1, #3
 800443a:	f025 0503 	bic.w	r5, r5, #3
 800443e:	3508      	adds	r5, #8
 8004440:	2d0c      	cmp	r5, #12
 8004442:	bf38      	it	cc
 8004444:	250c      	movcc	r5, #12
 8004446:	2d00      	cmp	r5, #0
 8004448:	4606      	mov	r6, r0
 800444a:	db01      	blt.n	8004450 <_malloc_r+0x1c>
 800444c:	42a9      	cmp	r1, r5
 800444e:	d904      	bls.n	800445a <_malloc_r+0x26>
 8004450:	230c      	movs	r3, #12
 8004452:	6033      	str	r3, [r6, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004530 <_malloc_r+0xfc>
 800445e:	f000 f869 	bl	8004534 <__malloc_lock>
 8004462:	f8d8 3000 	ldr.w	r3, [r8]
 8004466:	461c      	mov	r4, r3
 8004468:	bb44      	cbnz	r4, 80044bc <_malloc_r+0x88>
 800446a:	4629      	mov	r1, r5
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff ffbf 	bl	80043f0 <sbrk_aligned>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	4604      	mov	r4, r0
 8004476:	d158      	bne.n	800452a <_malloc_r+0xf6>
 8004478:	f8d8 4000 	ldr.w	r4, [r8]
 800447c:	4627      	mov	r7, r4
 800447e:	2f00      	cmp	r7, #0
 8004480:	d143      	bne.n	800450a <_malloc_r+0xd6>
 8004482:	2c00      	cmp	r4, #0
 8004484:	d04b      	beq.n	800451e <_malloc_r+0xea>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	4639      	mov	r1, r7
 800448a:	4630      	mov	r0, r6
 800448c:	eb04 0903 	add.w	r9, r4, r3
 8004490:	f000 fdca 	bl	8005028 <_sbrk_r>
 8004494:	4581      	cmp	r9, r0
 8004496:	d142      	bne.n	800451e <_malloc_r+0xea>
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	4630      	mov	r0, r6
 800449c:	1a6d      	subs	r5, r5, r1
 800449e:	4629      	mov	r1, r5
 80044a0:	f7ff ffa6 	bl	80043f0 <sbrk_aligned>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d03a      	beq.n	800451e <_malloc_r+0xea>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	442b      	add	r3, r5
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	f8d8 3000 	ldr.w	r3, [r8]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	bb62      	cbnz	r2, 8004510 <_malloc_r+0xdc>
 80044b6:	f8c8 7000 	str.w	r7, [r8]
 80044ba:	e00f      	b.n	80044dc <_malloc_r+0xa8>
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	1b52      	subs	r2, r2, r5
 80044c0:	d420      	bmi.n	8004504 <_malloc_r+0xd0>
 80044c2:	2a0b      	cmp	r2, #11
 80044c4:	d917      	bls.n	80044f6 <_malloc_r+0xc2>
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	6025      	str	r5, [r4, #0]
 80044cc:	bf18      	it	ne
 80044ce:	6059      	strne	r1, [r3, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	bf08      	it	eq
 80044d4:	f8c8 1000 	streq.w	r1, [r8]
 80044d8:	5162      	str	r2, [r4, r5]
 80044da:	604b      	str	r3, [r1, #4]
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f82f 	bl	8004540 <__malloc_unlock>
 80044e2:	f104 000b 	add.w	r0, r4, #11
 80044e6:	1d23      	adds	r3, r4, #4
 80044e8:	f020 0007 	bic.w	r0, r0, #7
 80044ec:	1ac2      	subs	r2, r0, r3
 80044ee:	bf1c      	itt	ne
 80044f0:	1a1b      	subne	r3, r3, r0
 80044f2:	50a3      	strne	r3, [r4, r2]
 80044f4:	e7af      	b.n	8004456 <_malloc_r+0x22>
 80044f6:	6862      	ldr	r2, [r4, #4]
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	bf0c      	ite	eq
 80044fc:	f8c8 2000 	streq.w	r2, [r8]
 8004500:	605a      	strne	r2, [r3, #4]
 8004502:	e7eb      	b.n	80044dc <_malloc_r+0xa8>
 8004504:	4623      	mov	r3, r4
 8004506:	6864      	ldr	r4, [r4, #4]
 8004508:	e7ae      	b.n	8004468 <_malloc_r+0x34>
 800450a:	463c      	mov	r4, r7
 800450c:	687f      	ldr	r7, [r7, #4]
 800450e:	e7b6      	b.n	800447e <_malloc_r+0x4a>
 8004510:	461a      	mov	r2, r3
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	42a3      	cmp	r3, r4
 8004516:	d1fb      	bne.n	8004510 <_malloc_r+0xdc>
 8004518:	2300      	movs	r3, #0
 800451a:	6053      	str	r3, [r2, #4]
 800451c:	e7de      	b.n	80044dc <_malloc_r+0xa8>
 800451e:	230c      	movs	r3, #12
 8004520:	4630      	mov	r0, r6
 8004522:	6033      	str	r3, [r6, #0]
 8004524:	f000 f80c 	bl	8004540 <__malloc_unlock>
 8004528:	e794      	b.n	8004454 <_malloc_r+0x20>
 800452a:	6005      	str	r5, [r0, #0]
 800452c:	e7d6      	b.n	80044dc <_malloc_r+0xa8>
 800452e:	bf00      	nop
 8004530:	200009b0 	.word	0x200009b0

08004534 <__malloc_lock>:
 8004534:	4801      	ldr	r0, [pc, #4]	@ (800453c <__malloc_lock+0x8>)
 8004536:	f7ff bf02 	b.w	800433e <__retarget_lock_acquire_recursive>
 800453a:	bf00      	nop
 800453c:	200009a8 	.word	0x200009a8

08004540 <__malloc_unlock>:
 8004540:	4801      	ldr	r0, [pc, #4]	@ (8004548 <__malloc_unlock+0x8>)
 8004542:	f7ff befd 	b.w	8004340 <__retarget_lock_release_recursive>
 8004546:	bf00      	nop
 8004548:	200009a8 	.word	0x200009a8

0800454c <__ssputs_r>:
 800454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	461f      	mov	r7, r3
 8004552:	688e      	ldr	r6, [r1, #8]
 8004554:	4682      	mov	sl, r0
 8004556:	42be      	cmp	r6, r7
 8004558:	460c      	mov	r4, r1
 800455a:	4690      	mov	r8, r2
 800455c:	680b      	ldr	r3, [r1, #0]
 800455e:	d82d      	bhi.n	80045bc <__ssputs_r+0x70>
 8004560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004568:	d026      	beq.n	80045b8 <__ssputs_r+0x6c>
 800456a:	6965      	ldr	r5, [r4, #20]
 800456c:	6909      	ldr	r1, [r1, #16]
 800456e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004572:	eba3 0901 	sub.w	r9, r3, r1
 8004576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800457a:	1c7b      	adds	r3, r7, #1
 800457c:	444b      	add	r3, r9
 800457e:	106d      	asrs	r5, r5, #1
 8004580:	429d      	cmp	r5, r3
 8004582:	bf38      	it	cc
 8004584:	461d      	movcc	r5, r3
 8004586:	0553      	lsls	r3, r2, #21
 8004588:	d527      	bpl.n	80045da <__ssputs_r+0x8e>
 800458a:	4629      	mov	r1, r5
 800458c:	f7ff ff52 	bl	8004434 <_malloc_r>
 8004590:	4606      	mov	r6, r0
 8004592:	b360      	cbz	r0, 80045ee <__ssputs_r+0xa2>
 8004594:	464a      	mov	r2, r9
 8004596:	6921      	ldr	r1, [r4, #16]
 8004598:	f7ff fed3 	bl	8004342 <memcpy>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	6126      	str	r6, [r4, #16]
 80045aa:	444e      	add	r6, r9
 80045ac:	6026      	str	r6, [r4, #0]
 80045ae:	463e      	mov	r6, r7
 80045b0:	6165      	str	r5, [r4, #20]
 80045b2:	eba5 0509 	sub.w	r5, r5, r9
 80045b6:	60a5      	str	r5, [r4, #8]
 80045b8:	42be      	cmp	r6, r7
 80045ba:	d900      	bls.n	80045be <__ssputs_r+0x72>
 80045bc:	463e      	mov	r6, r7
 80045be:	4632      	mov	r2, r6
 80045c0:	4641      	mov	r1, r8
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	f000 fcf3 	bl	8004fae <memmove>
 80045c8:	2000      	movs	r0, #0
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	1b9b      	subs	r3, r3, r6
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	4433      	add	r3, r6
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045da:	462a      	mov	r2, r5
 80045dc:	f000 fd42 	bl	8005064 <_realloc_r>
 80045e0:	4606      	mov	r6, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1e0      	bne.n	80045a8 <__ssputs_r+0x5c>
 80045e6:	4650      	mov	r0, sl
 80045e8:	6921      	ldr	r1, [r4, #16]
 80045ea:	f7ff feb9 	bl	8004360 <_free_r>
 80045ee:	230c      	movs	r3, #12
 80045f0:	f8ca 3000 	str.w	r3, [sl]
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	f04f 30ff 	mov.w	r0, #4294967295
 80045fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	e7e9      	b.n	80045d6 <__ssputs_r+0x8a>
	...

08004604 <_svfiprintf_r>:
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	4698      	mov	r8, r3
 800460a:	898b      	ldrh	r3, [r1, #12]
 800460c:	4607      	mov	r7, r0
 800460e:	061b      	lsls	r3, r3, #24
 8004610:	460d      	mov	r5, r1
 8004612:	4614      	mov	r4, r2
 8004614:	b09d      	sub	sp, #116	@ 0x74
 8004616:	d510      	bpl.n	800463a <_svfiprintf_r+0x36>
 8004618:	690b      	ldr	r3, [r1, #16]
 800461a:	b973      	cbnz	r3, 800463a <_svfiprintf_r+0x36>
 800461c:	2140      	movs	r1, #64	@ 0x40
 800461e:	f7ff ff09 	bl	8004434 <_malloc_r>
 8004622:	6028      	str	r0, [r5, #0]
 8004624:	6128      	str	r0, [r5, #16]
 8004626:	b930      	cbnz	r0, 8004636 <_svfiprintf_r+0x32>
 8004628:	230c      	movs	r3, #12
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	b01d      	add	sp, #116	@ 0x74
 8004632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004636:	2340      	movs	r3, #64	@ 0x40
 8004638:	616b      	str	r3, [r5, #20]
 800463a:	2300      	movs	r3, #0
 800463c:	9309      	str	r3, [sp, #36]	@ 0x24
 800463e:	2320      	movs	r3, #32
 8004640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004644:	2330      	movs	r3, #48	@ 0x30
 8004646:	f04f 0901 	mov.w	r9, #1
 800464a:	f8cd 800c 	str.w	r8, [sp, #12]
 800464e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80047e8 <_svfiprintf_r+0x1e4>
 8004652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004656:	4623      	mov	r3, r4
 8004658:	469a      	mov	sl, r3
 800465a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800465e:	b10a      	cbz	r2, 8004664 <_svfiprintf_r+0x60>
 8004660:	2a25      	cmp	r2, #37	@ 0x25
 8004662:	d1f9      	bne.n	8004658 <_svfiprintf_r+0x54>
 8004664:	ebba 0b04 	subs.w	fp, sl, r4
 8004668:	d00b      	beq.n	8004682 <_svfiprintf_r+0x7e>
 800466a:	465b      	mov	r3, fp
 800466c:	4622      	mov	r2, r4
 800466e:	4629      	mov	r1, r5
 8004670:	4638      	mov	r0, r7
 8004672:	f7ff ff6b 	bl	800454c <__ssputs_r>
 8004676:	3001      	adds	r0, #1
 8004678:	f000 80a7 	beq.w	80047ca <_svfiprintf_r+0x1c6>
 800467c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800467e:	445a      	add	r2, fp
 8004680:	9209      	str	r2, [sp, #36]	@ 0x24
 8004682:	f89a 3000 	ldrb.w	r3, [sl]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 809f 	beq.w	80047ca <_svfiprintf_r+0x1c6>
 800468c:	2300      	movs	r3, #0
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004696:	f10a 0a01 	add.w	sl, sl, #1
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	9307      	str	r3, [sp, #28]
 800469e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80046a4:	4654      	mov	r4, sl
 80046a6:	2205      	movs	r2, #5
 80046a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ac:	484e      	ldr	r0, [pc, #312]	@ (80047e8 <_svfiprintf_r+0x1e4>)
 80046ae:	f000 fccb 	bl	8005048 <memchr>
 80046b2:	9a04      	ldr	r2, [sp, #16]
 80046b4:	b9d8      	cbnz	r0, 80046ee <_svfiprintf_r+0xea>
 80046b6:	06d0      	lsls	r0, r2, #27
 80046b8:	bf44      	itt	mi
 80046ba:	2320      	movmi	r3, #32
 80046bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046c0:	0711      	lsls	r1, r2, #28
 80046c2:	bf44      	itt	mi
 80046c4:	232b      	movmi	r3, #43	@ 0x2b
 80046c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ca:	f89a 3000 	ldrb.w	r3, [sl]
 80046ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80046d0:	d015      	beq.n	80046fe <_svfiprintf_r+0xfa>
 80046d2:	4654      	mov	r4, sl
 80046d4:	2000      	movs	r0, #0
 80046d6:	f04f 0c0a 	mov.w	ip, #10
 80046da:	9a07      	ldr	r2, [sp, #28]
 80046dc:	4621      	mov	r1, r4
 80046de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e2:	3b30      	subs	r3, #48	@ 0x30
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	d94b      	bls.n	8004780 <_svfiprintf_r+0x17c>
 80046e8:	b1b0      	cbz	r0, 8004718 <_svfiprintf_r+0x114>
 80046ea:	9207      	str	r2, [sp, #28]
 80046ec:	e014      	b.n	8004718 <_svfiprintf_r+0x114>
 80046ee:	eba0 0308 	sub.w	r3, r0, r8
 80046f2:	fa09 f303 	lsl.w	r3, r9, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	46a2      	mov	sl, r4
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	e7d2      	b.n	80046a4 <_svfiprintf_r+0xa0>
 80046fe:	9b03      	ldr	r3, [sp, #12]
 8004700:	1d19      	adds	r1, r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	9103      	str	r1, [sp, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfbb      	ittet	lt
 800470a:	425b      	neglt	r3, r3
 800470c:	f042 0202 	orrlt.w	r2, r2, #2
 8004710:	9307      	strge	r3, [sp, #28]
 8004712:	9307      	strlt	r3, [sp, #28]
 8004714:	bfb8      	it	lt
 8004716:	9204      	strlt	r2, [sp, #16]
 8004718:	7823      	ldrb	r3, [r4, #0]
 800471a:	2b2e      	cmp	r3, #46	@ 0x2e
 800471c:	d10a      	bne.n	8004734 <_svfiprintf_r+0x130>
 800471e:	7863      	ldrb	r3, [r4, #1]
 8004720:	2b2a      	cmp	r3, #42	@ 0x2a
 8004722:	d132      	bne.n	800478a <_svfiprintf_r+0x186>
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	3402      	adds	r4, #2
 8004728:	1d1a      	adds	r2, r3, #4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	9203      	str	r2, [sp, #12]
 800472e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80047ec <_svfiprintf_r+0x1e8>
 8004738:	2203      	movs	r2, #3
 800473a:	4650      	mov	r0, sl
 800473c:	7821      	ldrb	r1, [r4, #0]
 800473e:	f000 fc83 	bl	8005048 <memchr>
 8004742:	b138      	cbz	r0, 8004754 <_svfiprintf_r+0x150>
 8004744:	2240      	movs	r2, #64	@ 0x40
 8004746:	9b04      	ldr	r3, [sp, #16]
 8004748:	eba0 000a 	sub.w	r0, r0, sl
 800474c:	4082      	lsls	r2, r0
 800474e:	4313      	orrs	r3, r2
 8004750:	3401      	adds	r4, #1
 8004752:	9304      	str	r3, [sp, #16]
 8004754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004758:	2206      	movs	r2, #6
 800475a:	4825      	ldr	r0, [pc, #148]	@ (80047f0 <_svfiprintf_r+0x1ec>)
 800475c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004760:	f000 fc72 	bl	8005048 <memchr>
 8004764:	2800      	cmp	r0, #0
 8004766:	d036      	beq.n	80047d6 <_svfiprintf_r+0x1d2>
 8004768:	4b22      	ldr	r3, [pc, #136]	@ (80047f4 <_svfiprintf_r+0x1f0>)
 800476a:	bb1b      	cbnz	r3, 80047b4 <_svfiprintf_r+0x1b0>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	3307      	adds	r3, #7
 8004770:	f023 0307 	bic.w	r3, r3, #7
 8004774:	3308      	adds	r3, #8
 8004776:	9303      	str	r3, [sp, #12]
 8004778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800477a:	4433      	add	r3, r6
 800477c:	9309      	str	r3, [sp, #36]	@ 0x24
 800477e:	e76a      	b.n	8004656 <_svfiprintf_r+0x52>
 8004780:	460c      	mov	r4, r1
 8004782:	2001      	movs	r0, #1
 8004784:	fb0c 3202 	mla	r2, ip, r2, r3
 8004788:	e7a8      	b.n	80046dc <_svfiprintf_r+0xd8>
 800478a:	2300      	movs	r3, #0
 800478c:	f04f 0c0a 	mov.w	ip, #10
 8004790:	4619      	mov	r1, r3
 8004792:	3401      	adds	r4, #1
 8004794:	9305      	str	r3, [sp, #20]
 8004796:	4620      	mov	r0, r4
 8004798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800479c:	3a30      	subs	r2, #48	@ 0x30
 800479e:	2a09      	cmp	r2, #9
 80047a0:	d903      	bls.n	80047aa <_svfiprintf_r+0x1a6>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0c6      	beq.n	8004734 <_svfiprintf_r+0x130>
 80047a6:	9105      	str	r1, [sp, #20]
 80047a8:	e7c4      	b.n	8004734 <_svfiprintf_r+0x130>
 80047aa:	4604      	mov	r4, r0
 80047ac:	2301      	movs	r3, #1
 80047ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80047b2:	e7f0      	b.n	8004796 <_svfiprintf_r+0x192>
 80047b4:	ab03      	add	r3, sp, #12
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	462a      	mov	r2, r5
 80047ba:	4638      	mov	r0, r7
 80047bc:	4b0e      	ldr	r3, [pc, #56]	@ (80047f8 <_svfiprintf_r+0x1f4>)
 80047be:	a904      	add	r1, sp, #16
 80047c0:	f3af 8000 	nop.w
 80047c4:	1c42      	adds	r2, r0, #1
 80047c6:	4606      	mov	r6, r0
 80047c8:	d1d6      	bne.n	8004778 <_svfiprintf_r+0x174>
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	065b      	lsls	r3, r3, #25
 80047ce:	f53f af2d 	bmi.w	800462c <_svfiprintf_r+0x28>
 80047d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047d4:	e72c      	b.n	8004630 <_svfiprintf_r+0x2c>
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	462a      	mov	r2, r5
 80047dc:	4638      	mov	r0, r7
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <_svfiprintf_r+0x1f4>)
 80047e0:	a904      	add	r1, sp, #16
 80047e2:	f000 f9bd 	bl	8004b60 <_printf_i>
 80047e6:	e7ed      	b.n	80047c4 <_svfiprintf_r+0x1c0>
 80047e8:	08005f02 	.word	0x08005f02
 80047ec:	08005f08 	.word	0x08005f08
 80047f0:	08005f0c 	.word	0x08005f0c
 80047f4:	00000000 	.word	0x00000000
 80047f8:	0800454d 	.word	0x0800454d

080047fc <__sfputc_r>:
 80047fc:	6893      	ldr	r3, [r2, #8]
 80047fe:	b410      	push	{r4}
 8004800:	3b01      	subs	r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	6093      	str	r3, [r2, #8]
 8004806:	da07      	bge.n	8004818 <__sfputc_r+0x1c>
 8004808:	6994      	ldr	r4, [r2, #24]
 800480a:	42a3      	cmp	r3, r4
 800480c:	db01      	blt.n	8004812 <__sfputc_r+0x16>
 800480e:	290a      	cmp	r1, #10
 8004810:	d102      	bne.n	8004818 <__sfputc_r+0x1c>
 8004812:	bc10      	pop	{r4}
 8004814:	f7ff bc85 	b.w	8004122 <__swbuf_r>
 8004818:	6813      	ldr	r3, [r2, #0]
 800481a:	1c58      	adds	r0, r3, #1
 800481c:	6010      	str	r0, [r2, #0]
 800481e:	7019      	strb	r1, [r3, #0]
 8004820:	4608      	mov	r0, r1
 8004822:	bc10      	pop	{r4}
 8004824:	4770      	bx	lr

08004826 <__sfputs_r>:
 8004826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004828:	4606      	mov	r6, r0
 800482a:	460f      	mov	r7, r1
 800482c:	4614      	mov	r4, r2
 800482e:	18d5      	adds	r5, r2, r3
 8004830:	42ac      	cmp	r4, r5
 8004832:	d101      	bne.n	8004838 <__sfputs_r+0x12>
 8004834:	2000      	movs	r0, #0
 8004836:	e007      	b.n	8004848 <__sfputs_r+0x22>
 8004838:	463a      	mov	r2, r7
 800483a:	4630      	mov	r0, r6
 800483c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004840:	f7ff ffdc 	bl	80047fc <__sfputc_r>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d1f3      	bne.n	8004830 <__sfputs_r+0xa>
 8004848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800484c <_vfiprintf_r>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	460d      	mov	r5, r1
 8004852:	4614      	mov	r4, r2
 8004854:	4698      	mov	r8, r3
 8004856:	4606      	mov	r6, r0
 8004858:	b09d      	sub	sp, #116	@ 0x74
 800485a:	b118      	cbz	r0, 8004864 <_vfiprintf_r+0x18>
 800485c:	6a03      	ldr	r3, [r0, #32]
 800485e:	b90b      	cbnz	r3, 8004864 <_vfiprintf_r+0x18>
 8004860:	f7ff fb54 	bl	8003f0c <__sinit>
 8004864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004866:	07d9      	lsls	r1, r3, #31
 8004868:	d405      	bmi.n	8004876 <_vfiprintf_r+0x2a>
 800486a:	89ab      	ldrh	r3, [r5, #12]
 800486c:	059a      	lsls	r2, r3, #22
 800486e:	d402      	bmi.n	8004876 <_vfiprintf_r+0x2a>
 8004870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004872:	f7ff fd64 	bl	800433e <__retarget_lock_acquire_recursive>
 8004876:	89ab      	ldrh	r3, [r5, #12]
 8004878:	071b      	lsls	r3, r3, #28
 800487a:	d501      	bpl.n	8004880 <_vfiprintf_r+0x34>
 800487c:	692b      	ldr	r3, [r5, #16]
 800487e:	b99b      	cbnz	r3, 80048a8 <_vfiprintf_r+0x5c>
 8004880:	4629      	mov	r1, r5
 8004882:	4630      	mov	r0, r6
 8004884:	f7ff fc8c 	bl	80041a0 <__swsetup_r>
 8004888:	b170      	cbz	r0, 80048a8 <_vfiprintf_r+0x5c>
 800488a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800488c:	07dc      	lsls	r4, r3, #31
 800488e:	d504      	bpl.n	800489a <_vfiprintf_r+0x4e>
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	b01d      	add	sp, #116	@ 0x74
 8004896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489a:	89ab      	ldrh	r3, [r5, #12]
 800489c:	0598      	lsls	r0, r3, #22
 800489e:	d4f7      	bmi.n	8004890 <_vfiprintf_r+0x44>
 80048a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048a2:	f7ff fd4d 	bl	8004340 <__retarget_lock_release_recursive>
 80048a6:	e7f3      	b.n	8004890 <_vfiprintf_r+0x44>
 80048a8:	2300      	movs	r3, #0
 80048aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ac:	2320      	movs	r3, #32
 80048ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048b2:	2330      	movs	r3, #48	@ 0x30
 80048b4:	f04f 0901 	mov.w	r9, #1
 80048b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004a68 <_vfiprintf_r+0x21c>
 80048c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048c4:	4623      	mov	r3, r4
 80048c6:	469a      	mov	sl, r3
 80048c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048cc:	b10a      	cbz	r2, 80048d2 <_vfiprintf_r+0x86>
 80048ce:	2a25      	cmp	r2, #37	@ 0x25
 80048d0:	d1f9      	bne.n	80048c6 <_vfiprintf_r+0x7a>
 80048d2:	ebba 0b04 	subs.w	fp, sl, r4
 80048d6:	d00b      	beq.n	80048f0 <_vfiprintf_r+0xa4>
 80048d8:	465b      	mov	r3, fp
 80048da:	4622      	mov	r2, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	4630      	mov	r0, r6
 80048e0:	f7ff ffa1 	bl	8004826 <__sfputs_r>
 80048e4:	3001      	adds	r0, #1
 80048e6:	f000 80a7 	beq.w	8004a38 <_vfiprintf_r+0x1ec>
 80048ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048ec:	445a      	add	r2, fp
 80048ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80048f0:	f89a 3000 	ldrb.w	r3, [sl]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 809f 	beq.w	8004a38 <_vfiprintf_r+0x1ec>
 80048fa:	2300      	movs	r3, #0
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004904:	f10a 0a01 	add.w	sl, sl, #1
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	9307      	str	r3, [sp, #28]
 800490c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004910:	931a      	str	r3, [sp, #104]	@ 0x68
 8004912:	4654      	mov	r4, sl
 8004914:	2205      	movs	r2, #5
 8004916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491a:	4853      	ldr	r0, [pc, #332]	@ (8004a68 <_vfiprintf_r+0x21c>)
 800491c:	f000 fb94 	bl	8005048 <memchr>
 8004920:	9a04      	ldr	r2, [sp, #16]
 8004922:	b9d8      	cbnz	r0, 800495c <_vfiprintf_r+0x110>
 8004924:	06d1      	lsls	r1, r2, #27
 8004926:	bf44      	itt	mi
 8004928:	2320      	movmi	r3, #32
 800492a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800492e:	0713      	lsls	r3, r2, #28
 8004930:	bf44      	itt	mi
 8004932:	232b      	movmi	r3, #43	@ 0x2b
 8004934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004938:	f89a 3000 	ldrb.w	r3, [sl]
 800493c:	2b2a      	cmp	r3, #42	@ 0x2a
 800493e:	d015      	beq.n	800496c <_vfiprintf_r+0x120>
 8004940:	4654      	mov	r4, sl
 8004942:	2000      	movs	r0, #0
 8004944:	f04f 0c0a 	mov.w	ip, #10
 8004948:	9a07      	ldr	r2, [sp, #28]
 800494a:	4621      	mov	r1, r4
 800494c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004950:	3b30      	subs	r3, #48	@ 0x30
 8004952:	2b09      	cmp	r3, #9
 8004954:	d94b      	bls.n	80049ee <_vfiprintf_r+0x1a2>
 8004956:	b1b0      	cbz	r0, 8004986 <_vfiprintf_r+0x13a>
 8004958:	9207      	str	r2, [sp, #28]
 800495a:	e014      	b.n	8004986 <_vfiprintf_r+0x13a>
 800495c:	eba0 0308 	sub.w	r3, r0, r8
 8004960:	fa09 f303 	lsl.w	r3, r9, r3
 8004964:	4313      	orrs	r3, r2
 8004966:	46a2      	mov	sl, r4
 8004968:	9304      	str	r3, [sp, #16]
 800496a:	e7d2      	b.n	8004912 <_vfiprintf_r+0xc6>
 800496c:	9b03      	ldr	r3, [sp, #12]
 800496e:	1d19      	adds	r1, r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	9103      	str	r1, [sp, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	bfbb      	ittet	lt
 8004978:	425b      	neglt	r3, r3
 800497a:	f042 0202 	orrlt.w	r2, r2, #2
 800497e:	9307      	strge	r3, [sp, #28]
 8004980:	9307      	strlt	r3, [sp, #28]
 8004982:	bfb8      	it	lt
 8004984:	9204      	strlt	r2, [sp, #16]
 8004986:	7823      	ldrb	r3, [r4, #0]
 8004988:	2b2e      	cmp	r3, #46	@ 0x2e
 800498a:	d10a      	bne.n	80049a2 <_vfiprintf_r+0x156>
 800498c:	7863      	ldrb	r3, [r4, #1]
 800498e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004990:	d132      	bne.n	80049f8 <_vfiprintf_r+0x1ac>
 8004992:	9b03      	ldr	r3, [sp, #12]
 8004994:	3402      	adds	r4, #2
 8004996:	1d1a      	adds	r2, r3, #4
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	9203      	str	r2, [sp, #12]
 800499c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004a6c <_vfiprintf_r+0x220>
 80049a6:	2203      	movs	r2, #3
 80049a8:	4650      	mov	r0, sl
 80049aa:	7821      	ldrb	r1, [r4, #0]
 80049ac:	f000 fb4c 	bl	8005048 <memchr>
 80049b0:	b138      	cbz	r0, 80049c2 <_vfiprintf_r+0x176>
 80049b2:	2240      	movs	r2, #64	@ 0x40
 80049b4:	9b04      	ldr	r3, [sp, #16]
 80049b6:	eba0 000a 	sub.w	r0, r0, sl
 80049ba:	4082      	lsls	r2, r0
 80049bc:	4313      	orrs	r3, r2
 80049be:	3401      	adds	r4, #1
 80049c0:	9304      	str	r3, [sp, #16]
 80049c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c6:	2206      	movs	r2, #6
 80049c8:	4829      	ldr	r0, [pc, #164]	@ (8004a70 <_vfiprintf_r+0x224>)
 80049ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049ce:	f000 fb3b 	bl	8005048 <memchr>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d03f      	beq.n	8004a56 <_vfiprintf_r+0x20a>
 80049d6:	4b27      	ldr	r3, [pc, #156]	@ (8004a74 <_vfiprintf_r+0x228>)
 80049d8:	bb1b      	cbnz	r3, 8004a22 <_vfiprintf_r+0x1d6>
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	3307      	adds	r3, #7
 80049de:	f023 0307 	bic.w	r3, r3, #7
 80049e2:	3308      	adds	r3, #8
 80049e4:	9303      	str	r3, [sp, #12]
 80049e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e8:	443b      	add	r3, r7
 80049ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ec:	e76a      	b.n	80048c4 <_vfiprintf_r+0x78>
 80049ee:	460c      	mov	r4, r1
 80049f0:	2001      	movs	r0, #1
 80049f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f6:	e7a8      	b.n	800494a <_vfiprintf_r+0xfe>
 80049f8:	2300      	movs	r3, #0
 80049fa:	f04f 0c0a 	mov.w	ip, #10
 80049fe:	4619      	mov	r1, r3
 8004a00:	3401      	adds	r4, #1
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	4620      	mov	r0, r4
 8004a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a0a:	3a30      	subs	r2, #48	@ 0x30
 8004a0c:	2a09      	cmp	r2, #9
 8004a0e:	d903      	bls.n	8004a18 <_vfiprintf_r+0x1cc>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0c6      	beq.n	80049a2 <_vfiprintf_r+0x156>
 8004a14:	9105      	str	r1, [sp, #20]
 8004a16:	e7c4      	b.n	80049a2 <_vfiprintf_r+0x156>
 8004a18:	4604      	mov	r4, r0
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a20:	e7f0      	b.n	8004a04 <_vfiprintf_r+0x1b8>
 8004a22:	ab03      	add	r3, sp, #12
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	462a      	mov	r2, r5
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <_vfiprintf_r+0x22c>)
 8004a2c:	a904      	add	r1, sp, #16
 8004a2e:	f3af 8000 	nop.w
 8004a32:	4607      	mov	r7, r0
 8004a34:	1c78      	adds	r0, r7, #1
 8004a36:	d1d6      	bne.n	80049e6 <_vfiprintf_r+0x19a>
 8004a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a3a:	07d9      	lsls	r1, r3, #31
 8004a3c:	d405      	bmi.n	8004a4a <_vfiprintf_r+0x1fe>
 8004a3e:	89ab      	ldrh	r3, [r5, #12]
 8004a40:	059a      	lsls	r2, r3, #22
 8004a42:	d402      	bmi.n	8004a4a <_vfiprintf_r+0x1fe>
 8004a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a46:	f7ff fc7b 	bl	8004340 <__retarget_lock_release_recursive>
 8004a4a:	89ab      	ldrh	r3, [r5, #12]
 8004a4c:	065b      	lsls	r3, r3, #25
 8004a4e:	f53f af1f 	bmi.w	8004890 <_vfiprintf_r+0x44>
 8004a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a54:	e71e      	b.n	8004894 <_vfiprintf_r+0x48>
 8004a56:	ab03      	add	r3, sp, #12
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <_vfiprintf_r+0x22c>)
 8004a60:	a904      	add	r1, sp, #16
 8004a62:	f000 f87d 	bl	8004b60 <_printf_i>
 8004a66:	e7e4      	b.n	8004a32 <_vfiprintf_r+0x1e6>
 8004a68:	08005f02 	.word	0x08005f02
 8004a6c:	08005f08 	.word	0x08005f08
 8004a70:	08005f0c 	.word	0x08005f0c
 8004a74:	00000000 	.word	0x00000000
 8004a78:	08004827 	.word	0x08004827

08004a7c <_printf_common>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	4616      	mov	r6, r2
 8004a82:	4698      	mov	r8, r3
 8004a84:	688a      	ldr	r2, [r1, #8]
 8004a86:	690b      	ldr	r3, [r1, #16]
 8004a88:	4607      	mov	r7, r0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	bfb8      	it	lt
 8004a8e:	4613      	movlt	r3, r2
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a96:	460c      	mov	r4, r1
 8004a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a9c:	b10a      	cbz	r2, 8004aa2 <_printf_common+0x26>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	bf42      	ittt	mi
 8004aa8:	6833      	ldrmi	r3, [r6, #0]
 8004aaa:	3302      	addmi	r3, #2
 8004aac:	6033      	strmi	r3, [r6, #0]
 8004aae:	6825      	ldr	r5, [r4, #0]
 8004ab0:	f015 0506 	ands.w	r5, r5, #6
 8004ab4:	d106      	bne.n	8004ac4 <_printf_common+0x48>
 8004ab6:	f104 0a19 	add.w	sl, r4, #25
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	6832      	ldr	r2, [r6, #0]
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dc2b      	bgt.n	8004b1c <_printf_common+0xa0>
 8004ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	3b00      	subs	r3, #0
 8004acc:	bf18      	it	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	0692      	lsls	r2, r2, #26
 8004ad2:	d430      	bmi.n	8004b36 <_printf_common+0xba>
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004adc:	47c8      	blx	r9
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d023      	beq.n	8004b2a <_printf_common+0xae>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	6922      	ldr	r2, [r4, #16]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf14      	ite	ne
 8004aee:	2500      	movne	r5, #0
 8004af0:	6833      	ldreq	r3, [r6, #0]
 8004af2:	f04f 0600 	mov.w	r6, #0
 8004af6:	bf08      	it	eq
 8004af8:	68e5      	ldreq	r5, [r4, #12]
 8004afa:	f104 041a 	add.w	r4, r4, #26
 8004afe:	bf08      	it	eq
 8004b00:	1aed      	subeq	r5, r5, r3
 8004b02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b06:	bf08      	it	eq
 8004b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	bfc4      	itt	gt
 8004b10:	1a9b      	subgt	r3, r3, r2
 8004b12:	18ed      	addgt	r5, r5, r3
 8004b14:	42b5      	cmp	r5, r6
 8004b16:	d11a      	bne.n	8004b4e <_printf_common+0xd2>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e008      	b.n	8004b2e <_printf_common+0xb2>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	4652      	mov	r2, sl
 8004b20:	4641      	mov	r1, r8
 8004b22:	4638      	mov	r0, r7
 8004b24:	47c8      	blx	r9
 8004b26:	3001      	adds	r0, #1
 8004b28:	d103      	bne.n	8004b32 <_printf_common+0xb6>
 8004b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b32:	3501      	adds	r5, #1
 8004b34:	e7c1      	b.n	8004aba <_printf_common+0x3e>
 8004b36:	2030      	movs	r0, #48	@ 0x30
 8004b38:	18e1      	adds	r1, r4, r3
 8004b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b44:	4422      	add	r2, r4
 8004b46:	3302      	adds	r3, #2
 8004b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b4c:	e7c2      	b.n	8004ad4 <_printf_common+0x58>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4622      	mov	r2, r4
 8004b52:	4641      	mov	r1, r8
 8004b54:	4638      	mov	r0, r7
 8004b56:	47c8      	blx	r9
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d0e6      	beq.n	8004b2a <_printf_common+0xae>
 8004b5c:	3601      	adds	r6, #1
 8004b5e:	e7d9      	b.n	8004b14 <_printf_common+0x98>

08004b60 <_printf_i>:
 8004b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	7e0f      	ldrb	r7, [r1, #24]
 8004b66:	4691      	mov	r9, r2
 8004b68:	2f78      	cmp	r7, #120	@ 0x78
 8004b6a:	4680      	mov	r8, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	469a      	mov	sl, r3
 8004b70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b76:	d807      	bhi.n	8004b88 <_printf_i+0x28>
 8004b78:	2f62      	cmp	r7, #98	@ 0x62
 8004b7a:	d80a      	bhi.n	8004b92 <_printf_i+0x32>
 8004b7c:	2f00      	cmp	r7, #0
 8004b7e:	f000 80d1 	beq.w	8004d24 <_printf_i+0x1c4>
 8004b82:	2f58      	cmp	r7, #88	@ 0x58
 8004b84:	f000 80b8 	beq.w	8004cf8 <_printf_i+0x198>
 8004b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b90:	e03a      	b.n	8004c08 <_printf_i+0xa8>
 8004b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b96:	2b15      	cmp	r3, #21
 8004b98:	d8f6      	bhi.n	8004b88 <_printf_i+0x28>
 8004b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ba0 <_printf_i+0x40>)
 8004b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004b89 	.word	0x08004b89
 8004bac:	08004b89 	.word	0x08004b89
 8004bb0:	08004b89 	.word	0x08004b89
 8004bb4:	08004b89 	.word	0x08004b89
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004b89 	.word	0x08004b89
 8004bc0:	08004b89 	.word	0x08004b89
 8004bc4:	08004b89 	.word	0x08004b89
 8004bc8:	08004b89 	.word	0x08004b89
 8004bcc:	08004d0b 	.word	0x08004d0b
 8004bd0:	08004c37 	.word	0x08004c37
 8004bd4:	08004cc5 	.word	0x08004cc5
 8004bd8:	08004b89 	.word	0x08004b89
 8004bdc:	08004b89 	.word	0x08004b89
 8004be0:	08004d2d 	.word	0x08004d2d
 8004be4:	08004b89 	.word	0x08004b89
 8004be8:	08004c37 	.word	0x08004c37
 8004bec:	08004b89 	.word	0x08004b89
 8004bf0:	08004b89 	.word	0x08004b89
 8004bf4:	08004ccd 	.word	0x08004ccd
 8004bf8:	6833      	ldr	r3, [r6, #0]
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6032      	str	r2, [r6, #0]
 8004c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e09c      	b.n	8004d46 <_printf_i+0x1e6>
 8004c0c:	6833      	ldr	r3, [r6, #0]
 8004c0e:	6820      	ldr	r0, [r4, #0]
 8004c10:	1d19      	adds	r1, r3, #4
 8004c12:	6031      	str	r1, [r6, #0]
 8004c14:	0606      	lsls	r6, r0, #24
 8004c16:	d501      	bpl.n	8004c1c <_printf_i+0xbc>
 8004c18:	681d      	ldr	r5, [r3, #0]
 8004c1a:	e003      	b.n	8004c24 <_printf_i+0xc4>
 8004c1c:	0645      	lsls	r5, r0, #25
 8004c1e:	d5fb      	bpl.n	8004c18 <_printf_i+0xb8>
 8004c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c24:	2d00      	cmp	r5, #0
 8004c26:	da03      	bge.n	8004c30 <_printf_i+0xd0>
 8004c28:	232d      	movs	r3, #45	@ 0x2d
 8004c2a:	426d      	negs	r5, r5
 8004c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c30:	230a      	movs	r3, #10
 8004c32:	4858      	ldr	r0, [pc, #352]	@ (8004d94 <_printf_i+0x234>)
 8004c34:	e011      	b.n	8004c5a <_printf_i+0xfa>
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	6833      	ldr	r3, [r6, #0]
 8004c3a:	0608      	lsls	r0, r1, #24
 8004c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c40:	d402      	bmi.n	8004c48 <_printf_i+0xe8>
 8004c42:	0649      	lsls	r1, r1, #25
 8004c44:	bf48      	it	mi
 8004c46:	b2ad      	uxthmi	r5, r5
 8004c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c4a:	6033      	str	r3, [r6, #0]
 8004c4c:	bf14      	ite	ne
 8004c4e:	230a      	movne	r3, #10
 8004c50:	2308      	moveq	r3, #8
 8004c52:	4850      	ldr	r0, [pc, #320]	@ (8004d94 <_printf_i+0x234>)
 8004c54:	2100      	movs	r1, #0
 8004c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c5a:	6866      	ldr	r6, [r4, #4]
 8004c5c:	2e00      	cmp	r6, #0
 8004c5e:	60a6      	str	r6, [r4, #8]
 8004c60:	db05      	blt.n	8004c6e <_printf_i+0x10e>
 8004c62:	6821      	ldr	r1, [r4, #0]
 8004c64:	432e      	orrs	r6, r5
 8004c66:	f021 0104 	bic.w	r1, r1, #4
 8004c6a:	6021      	str	r1, [r4, #0]
 8004c6c:	d04b      	beq.n	8004d06 <_printf_i+0x1a6>
 8004c6e:	4616      	mov	r6, r2
 8004c70:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c74:	fb03 5711 	mls	r7, r3, r1, r5
 8004c78:	5dc7      	ldrb	r7, [r0, r7]
 8004c7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c7e:	462f      	mov	r7, r5
 8004c80:	42bb      	cmp	r3, r7
 8004c82:	460d      	mov	r5, r1
 8004c84:	d9f4      	bls.n	8004c70 <_printf_i+0x110>
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d10b      	bne.n	8004ca2 <_printf_i+0x142>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	07df      	lsls	r7, r3, #31
 8004c8e:	d508      	bpl.n	8004ca2 <_printf_i+0x142>
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	6861      	ldr	r1, [r4, #4]
 8004c94:	4299      	cmp	r1, r3
 8004c96:	bfde      	ittt	le
 8004c98:	2330      	movle	r3, #48	@ 0x30
 8004c9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ca2:	1b92      	subs	r2, r2, r6
 8004ca4:	6122      	str	r2, [r4, #16]
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4640      	mov	r0, r8
 8004cac:	f8cd a000 	str.w	sl, [sp]
 8004cb0:	aa03      	add	r2, sp, #12
 8004cb2:	f7ff fee3 	bl	8004a7c <_printf_common>
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d14a      	bne.n	8004d50 <_printf_i+0x1f0>
 8004cba:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbe:	b004      	add	sp, #16
 8004cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f043 0320 	orr.w	r3, r3, #32
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	2778      	movs	r7, #120	@ 0x78
 8004cce:	4832      	ldr	r0, [pc, #200]	@ (8004d98 <_printf_i+0x238>)
 8004cd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	6831      	ldr	r1, [r6, #0]
 8004cd8:	061f      	lsls	r7, r3, #24
 8004cda:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cde:	d402      	bmi.n	8004ce6 <_printf_i+0x186>
 8004ce0:	065f      	lsls	r7, r3, #25
 8004ce2:	bf48      	it	mi
 8004ce4:	b2ad      	uxthmi	r5, r5
 8004ce6:	6031      	str	r1, [r6, #0]
 8004ce8:	07d9      	lsls	r1, r3, #31
 8004cea:	bf44      	itt	mi
 8004cec:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf0:	6023      	strmi	r3, [r4, #0]
 8004cf2:	b11d      	cbz	r5, 8004cfc <_printf_i+0x19c>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	e7ad      	b.n	8004c54 <_printf_i+0xf4>
 8004cf8:	4826      	ldr	r0, [pc, #152]	@ (8004d94 <_printf_i+0x234>)
 8004cfa:	e7e9      	b.n	8004cd0 <_printf_i+0x170>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	f023 0320 	bic.w	r3, r3, #32
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	e7f6      	b.n	8004cf4 <_printf_i+0x194>
 8004d06:	4616      	mov	r6, r2
 8004d08:	e7bd      	b.n	8004c86 <_printf_i+0x126>
 8004d0a:	6833      	ldr	r3, [r6, #0]
 8004d0c:	6825      	ldr	r5, [r4, #0]
 8004d0e:	1d18      	adds	r0, r3, #4
 8004d10:	6961      	ldr	r1, [r4, #20]
 8004d12:	6030      	str	r0, [r6, #0]
 8004d14:	062e      	lsls	r6, r5, #24
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	d501      	bpl.n	8004d1e <_printf_i+0x1be>
 8004d1a:	6019      	str	r1, [r3, #0]
 8004d1c:	e002      	b.n	8004d24 <_printf_i+0x1c4>
 8004d1e:	0668      	lsls	r0, r5, #25
 8004d20:	d5fb      	bpl.n	8004d1a <_printf_i+0x1ba>
 8004d22:	8019      	strh	r1, [r3, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	4616      	mov	r6, r2
 8004d28:	6123      	str	r3, [r4, #16]
 8004d2a:	e7bc      	b.n	8004ca6 <_printf_i+0x146>
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	6032      	str	r2, [r6, #0]
 8004d34:	681e      	ldr	r6, [r3, #0]
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 f985 	bl	8005048 <memchr>
 8004d3e:	b108      	cbz	r0, 8004d44 <_printf_i+0x1e4>
 8004d40:	1b80      	subs	r0, r0, r6
 8004d42:	6060      	str	r0, [r4, #4]
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d4e:	e7aa      	b.n	8004ca6 <_printf_i+0x146>
 8004d50:	4632      	mov	r2, r6
 8004d52:	4649      	mov	r1, r9
 8004d54:	4640      	mov	r0, r8
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	47d0      	blx	sl
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d0ad      	beq.n	8004cba <_printf_i+0x15a>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	079b      	lsls	r3, r3, #30
 8004d62:	d413      	bmi.n	8004d8c <_printf_i+0x22c>
 8004d64:	68e0      	ldr	r0, [r4, #12]
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	4298      	cmp	r0, r3
 8004d6a:	bfb8      	it	lt
 8004d6c:	4618      	movlt	r0, r3
 8004d6e:	e7a6      	b.n	8004cbe <_printf_i+0x15e>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4632      	mov	r2, r6
 8004d74:	4649      	mov	r1, r9
 8004d76:	4640      	mov	r0, r8
 8004d78:	47d0      	blx	sl
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d09d      	beq.n	8004cba <_printf_i+0x15a>
 8004d7e:	3501      	adds	r5, #1
 8004d80:	68e3      	ldr	r3, [r4, #12]
 8004d82:	9903      	ldr	r1, [sp, #12]
 8004d84:	1a5b      	subs	r3, r3, r1
 8004d86:	42ab      	cmp	r3, r5
 8004d88:	dcf2      	bgt.n	8004d70 <_printf_i+0x210>
 8004d8a:	e7eb      	b.n	8004d64 <_printf_i+0x204>
 8004d8c:	2500      	movs	r5, #0
 8004d8e:	f104 0619 	add.w	r6, r4, #25
 8004d92:	e7f5      	b.n	8004d80 <_printf_i+0x220>
 8004d94:	08005f13 	.word	0x08005f13
 8004d98:	08005f24 	.word	0x08005f24

08004d9c <__sflush_r>:
 8004d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	0716      	lsls	r6, r2, #28
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	d454      	bmi.n	8004e54 <__sflush_r+0xb8>
 8004daa:	684b      	ldr	r3, [r1, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dc02      	bgt.n	8004db6 <__sflush_r+0x1a>
 8004db0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dd48      	ble.n	8004e48 <__sflush_r+0xac>
 8004db6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	d045      	beq.n	8004e48 <__sflush_r+0xac>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dc2:	682f      	ldr	r7, [r5, #0]
 8004dc4:	6a21      	ldr	r1, [r4, #32]
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	d030      	beq.n	8004e2c <__sflush_r+0x90>
 8004dca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	0759      	lsls	r1, r3, #29
 8004dd0:	d505      	bpl.n	8004dde <__sflush_r+0x42>
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dd8:	b10b      	cbz	r3, 8004dde <__sflush_r+0x42>
 8004dda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ddc:	1ad2      	subs	r2, r2, r3
 8004dde:	2300      	movs	r3, #0
 8004de0:	4628      	mov	r0, r5
 8004de2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004de4:	6a21      	ldr	r1, [r4, #32]
 8004de6:	47b0      	blx	r6
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	d106      	bne.n	8004dfc <__sflush_r+0x60>
 8004dee:	6829      	ldr	r1, [r5, #0]
 8004df0:	291d      	cmp	r1, #29
 8004df2:	d82b      	bhi.n	8004e4c <__sflush_r+0xb0>
 8004df4:	4a28      	ldr	r2, [pc, #160]	@ (8004e98 <__sflush_r+0xfc>)
 8004df6:	40ca      	lsrs	r2, r1
 8004df8:	07d6      	lsls	r6, r2, #31
 8004dfa:	d527      	bpl.n	8004e4c <__sflush_r+0xb0>
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	6062      	str	r2, [r4, #4]
 8004e00:	6922      	ldr	r2, [r4, #16]
 8004e02:	04d9      	lsls	r1, r3, #19
 8004e04:	6022      	str	r2, [r4, #0]
 8004e06:	d504      	bpl.n	8004e12 <__sflush_r+0x76>
 8004e08:	1c42      	adds	r2, r0, #1
 8004e0a:	d101      	bne.n	8004e10 <__sflush_r+0x74>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	b903      	cbnz	r3, 8004e12 <__sflush_r+0x76>
 8004e10:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e14:	602f      	str	r7, [r5, #0]
 8004e16:	b1b9      	cbz	r1, 8004e48 <__sflush_r+0xac>
 8004e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	d002      	beq.n	8004e26 <__sflush_r+0x8a>
 8004e20:	4628      	mov	r0, r5
 8004e22:	f7ff fa9d 	bl	8004360 <_free_r>
 8004e26:	2300      	movs	r3, #0
 8004e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e2a:	e00d      	b.n	8004e48 <__sflush_r+0xac>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b0      	blx	r6
 8004e32:	4602      	mov	r2, r0
 8004e34:	1c50      	adds	r0, r2, #1
 8004e36:	d1c9      	bne.n	8004dcc <__sflush_r+0x30>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c6      	beq.n	8004dcc <__sflush_r+0x30>
 8004e3e:	2b1d      	cmp	r3, #29
 8004e40:	d001      	beq.n	8004e46 <__sflush_r+0xaa>
 8004e42:	2b16      	cmp	r3, #22
 8004e44:	d11d      	bne.n	8004e82 <__sflush_r+0xe6>
 8004e46:	602f      	str	r7, [r5, #0]
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e021      	b.n	8004e90 <__sflush_r+0xf4>
 8004e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	e01a      	b.n	8004e8a <__sflush_r+0xee>
 8004e54:	690f      	ldr	r7, [r1, #16]
 8004e56:	2f00      	cmp	r7, #0
 8004e58:	d0f6      	beq.n	8004e48 <__sflush_r+0xac>
 8004e5a:	0793      	lsls	r3, r2, #30
 8004e5c:	bf18      	it	ne
 8004e5e:	2300      	movne	r3, #0
 8004e60:	680e      	ldr	r6, [r1, #0]
 8004e62:	bf08      	it	eq
 8004e64:	694b      	ldreq	r3, [r1, #20]
 8004e66:	1bf6      	subs	r6, r6, r7
 8004e68:	600f      	str	r7, [r1, #0]
 8004e6a:	608b      	str	r3, [r1, #8]
 8004e6c:	2e00      	cmp	r6, #0
 8004e6e:	ddeb      	ble.n	8004e48 <__sflush_r+0xac>
 8004e70:	4633      	mov	r3, r6
 8004e72:	463a      	mov	r2, r7
 8004e74:	4628      	mov	r0, r5
 8004e76:	6a21      	ldr	r1, [r4, #32]
 8004e78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004e7c:	47e0      	blx	ip
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	dc07      	bgt.n	8004e92 <__sflush_r+0xf6>
 8004e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e92:	4407      	add	r7, r0
 8004e94:	1a36      	subs	r6, r6, r0
 8004e96:	e7e9      	b.n	8004e6c <__sflush_r+0xd0>
 8004e98:	20400001 	.word	0x20400001

08004e9c <_fflush_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	690b      	ldr	r3, [r1, #16]
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	b913      	cbnz	r3, 8004eac <_fflush_r+0x10>
 8004ea6:	2500      	movs	r5, #0
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	b118      	cbz	r0, 8004eb6 <_fflush_r+0x1a>
 8004eae:	6a03      	ldr	r3, [r0, #32]
 8004eb0:	b90b      	cbnz	r3, 8004eb6 <_fflush_r+0x1a>
 8004eb2:	f7ff f82b 	bl	8003f0c <__sinit>
 8004eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f3      	beq.n	8004ea6 <_fflush_r+0xa>
 8004ebe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ec0:	07d0      	lsls	r0, r2, #31
 8004ec2:	d404      	bmi.n	8004ece <_fflush_r+0x32>
 8004ec4:	0599      	lsls	r1, r3, #22
 8004ec6:	d402      	bmi.n	8004ece <_fflush_r+0x32>
 8004ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eca:	f7ff fa38 	bl	800433e <__retarget_lock_acquire_recursive>
 8004ece:	4628      	mov	r0, r5
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	f7ff ff63 	bl	8004d9c <__sflush_r>
 8004ed6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ed8:	4605      	mov	r5, r0
 8004eda:	07da      	lsls	r2, r3, #31
 8004edc:	d4e4      	bmi.n	8004ea8 <_fflush_r+0xc>
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	059b      	lsls	r3, r3, #22
 8004ee2:	d4e1      	bmi.n	8004ea8 <_fflush_r+0xc>
 8004ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ee6:	f7ff fa2b 	bl	8004340 <__retarget_lock_release_recursive>
 8004eea:	e7dd      	b.n	8004ea8 <_fflush_r+0xc>

08004eec <__swhatbuf_r>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	460c      	mov	r4, r1
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	4615      	mov	r5, r2
 8004ef6:	2900      	cmp	r1, #0
 8004ef8:	461e      	mov	r6, r3
 8004efa:	b096      	sub	sp, #88	@ 0x58
 8004efc:	da0c      	bge.n	8004f18 <__swhatbuf_r+0x2c>
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	2100      	movs	r1, #0
 8004f02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f06:	bf14      	ite	ne
 8004f08:	2340      	movne	r3, #64	@ 0x40
 8004f0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f0e:	2000      	movs	r0, #0
 8004f10:	6031      	str	r1, [r6, #0]
 8004f12:	602b      	str	r3, [r5, #0]
 8004f14:	b016      	add	sp, #88	@ 0x58
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	466a      	mov	r2, sp
 8004f1a:	f000 f863 	bl	8004fe4 <_fstat_r>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	dbed      	blt.n	8004efe <__swhatbuf_r+0x12>
 8004f22:	9901      	ldr	r1, [sp, #4]
 8004f24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f2c:	4259      	negs	r1, r3
 8004f2e:	4159      	adcs	r1, r3
 8004f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f34:	e7eb      	b.n	8004f0e <__swhatbuf_r+0x22>

08004f36 <__smakebuf_r>:
 8004f36:	898b      	ldrh	r3, [r1, #12]
 8004f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f3a:	079d      	lsls	r5, r3, #30
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	d507      	bpl.n	8004f52 <__smakebuf_r+0x1c>
 8004f42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	6123      	str	r3, [r4, #16]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	6163      	str	r3, [r4, #20]
 8004f4e:	b003      	add	sp, #12
 8004f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f52:	466a      	mov	r2, sp
 8004f54:	ab01      	add	r3, sp, #4
 8004f56:	f7ff ffc9 	bl	8004eec <__swhatbuf_r>
 8004f5a:	9f00      	ldr	r7, [sp, #0]
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	4639      	mov	r1, r7
 8004f60:	4630      	mov	r0, r6
 8004f62:	f7ff fa67 	bl	8004434 <_malloc_r>
 8004f66:	b948      	cbnz	r0, 8004f7c <__smakebuf_r+0x46>
 8004f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f6c:	059a      	lsls	r2, r3, #22
 8004f6e:	d4ee      	bmi.n	8004f4e <__smakebuf_r+0x18>
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	e7e2      	b.n	8004f42 <__smakebuf_r+0xc>
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	6020      	str	r0, [r4, #0]
 8004f8c:	b15b      	cbz	r3, 8004fa6 <__smakebuf_r+0x70>
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f94:	f000 f838 	bl	8005008 <_isatty_r>
 8004f98:	b128      	cbz	r0, 8004fa6 <__smakebuf_r+0x70>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	f023 0303 	bic.w	r3, r3, #3
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	431d      	orrs	r5, r3
 8004faa:	81a5      	strh	r5, [r4, #12]
 8004fac:	e7cf      	b.n	8004f4e <__smakebuf_r+0x18>

08004fae <memmove>:
 8004fae:	4288      	cmp	r0, r1
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	eb01 0402 	add.w	r4, r1, r2
 8004fb6:	d902      	bls.n	8004fbe <memmove+0x10>
 8004fb8:	4284      	cmp	r4, r0
 8004fba:	4623      	mov	r3, r4
 8004fbc:	d807      	bhi.n	8004fce <memmove+0x20>
 8004fbe:	1e43      	subs	r3, r0, #1
 8004fc0:	42a1      	cmp	r1, r4
 8004fc2:	d008      	beq.n	8004fd6 <memmove+0x28>
 8004fc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fcc:	e7f8      	b.n	8004fc0 <memmove+0x12>
 8004fce:	4601      	mov	r1, r0
 8004fd0:	4402      	add	r2, r0
 8004fd2:	428a      	cmp	r2, r1
 8004fd4:	d100      	bne.n	8004fd8 <memmove+0x2a>
 8004fd6:	bd10      	pop	{r4, pc}
 8004fd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fdc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fe0:	e7f7      	b.n	8004fd2 <memmove+0x24>
	...

08004fe4 <_fstat_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4d06      	ldr	r5, [pc, #24]	@ (8005004 <_fstat_r+0x20>)
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	602b      	str	r3, [r5, #0]
 8004ff2:	f7fc fe5a 	bl	8001caa <_fstat>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d102      	bne.n	8005000 <_fstat_r+0x1c>
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	b103      	cbz	r3, 8005000 <_fstat_r+0x1c>
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	200009a4 	.word	0x200009a4

08005008 <_isatty_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	2300      	movs	r3, #0
 800500c:	4d05      	ldr	r5, [pc, #20]	@ (8005024 <_isatty_r+0x1c>)
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fc fe58 	bl	8001cc8 <_isatty>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_isatty_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_isatty_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	200009a4 	.word	0x200009a4

08005028 <_sbrk_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	2300      	movs	r3, #0
 800502c:	4d05      	ldr	r5, [pc, #20]	@ (8005044 <_sbrk_r+0x1c>)
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f7fc fe5e 	bl	8001cf4 <_sbrk>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_sbrk_r+0x1a>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_sbrk_r+0x1a>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	200009a4 	.word	0x200009a4

08005048 <memchr>:
 8005048:	4603      	mov	r3, r0
 800504a:	b510      	push	{r4, lr}
 800504c:	b2c9      	uxtb	r1, r1
 800504e:	4402      	add	r2, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	4618      	mov	r0, r3
 8005054:	d101      	bne.n	800505a <memchr+0x12>
 8005056:	2000      	movs	r0, #0
 8005058:	e003      	b.n	8005062 <memchr+0x1a>
 800505a:	7804      	ldrb	r4, [r0, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	428c      	cmp	r4, r1
 8005060:	d1f6      	bne.n	8005050 <memchr+0x8>
 8005062:	bd10      	pop	{r4, pc}

08005064 <_realloc_r>:
 8005064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005068:	4607      	mov	r7, r0
 800506a:	4614      	mov	r4, r2
 800506c:	460d      	mov	r5, r1
 800506e:	b921      	cbnz	r1, 800507a <_realloc_r+0x16>
 8005070:	4611      	mov	r1, r2
 8005072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005076:	f7ff b9dd 	b.w	8004434 <_malloc_r>
 800507a:	b92a      	cbnz	r2, 8005088 <_realloc_r+0x24>
 800507c:	f7ff f970 	bl	8004360 <_free_r>
 8005080:	4625      	mov	r5, r4
 8005082:	4628      	mov	r0, r5
 8005084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005088:	f000 f81a 	bl	80050c0 <_malloc_usable_size_r>
 800508c:	4284      	cmp	r4, r0
 800508e:	4606      	mov	r6, r0
 8005090:	d802      	bhi.n	8005098 <_realloc_r+0x34>
 8005092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005096:	d8f4      	bhi.n	8005082 <_realloc_r+0x1e>
 8005098:	4621      	mov	r1, r4
 800509a:	4638      	mov	r0, r7
 800509c:	f7ff f9ca 	bl	8004434 <_malloc_r>
 80050a0:	4680      	mov	r8, r0
 80050a2:	b908      	cbnz	r0, 80050a8 <_realloc_r+0x44>
 80050a4:	4645      	mov	r5, r8
 80050a6:	e7ec      	b.n	8005082 <_realloc_r+0x1e>
 80050a8:	42b4      	cmp	r4, r6
 80050aa:	4622      	mov	r2, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	bf28      	it	cs
 80050b0:	4632      	movcs	r2, r6
 80050b2:	f7ff f946 	bl	8004342 <memcpy>
 80050b6:	4629      	mov	r1, r5
 80050b8:	4638      	mov	r0, r7
 80050ba:	f7ff f951 	bl	8004360 <_free_r>
 80050be:	e7f1      	b.n	80050a4 <_realloc_r+0x40>

080050c0 <_malloc_usable_size_r>:
 80050c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c4:	1f18      	subs	r0, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfbc      	itt	lt
 80050ca:	580b      	ldrlt	r3, [r1, r0]
 80050cc:	18c0      	addlt	r0, r0, r3
 80050ce:	4770      	bx	lr

080050d0 <_init>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	bf00      	nop
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr

080050dc <_fini>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr
