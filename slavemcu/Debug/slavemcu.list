
slavemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001374  08006f94  08006f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008308  08008308  0000a08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008308  08008308  0000a08c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008308  08008308  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008308  08008308  00009308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800830c  0800830c  0000930c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008310  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  2000008c  0800839c  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  0800839c  0000a9c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b507  00000000  00000000  0000a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b85  00000000  00000000  000155bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00018148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085b  00000000  00000000  00018c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044c9  00000000  00000000  000194bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed2a  00000000  00000000  0001d984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a50  00000000  00000000  0002c6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b20fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000b2144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b55ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f7c 	.word	0x08006f7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08006f7c 	.word	0x08006f7c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	@ 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000732:	2afd      	cmp	r2, #253	@ 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	@ 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	@ 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	@ 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <LocalBB_Init>:
/* 门控命令缓存 */
static LocalBB_DoorCommand_t pending_door_cmd = DOOR_CMD_NONE;

/* ==================== 初始化函数 ==================== */

void LocalBB_Init(void) {
 8000980:	b598      	push	{r3, r4, r7, lr}
 8000982:	af00      	add	r7, sp, #0
    memset(&g_local_bb, 0, sizeof(LocalBlackboard_t));
 8000984:	22c8      	movs	r2, #200	@ 0xc8
 8000986:	2100      	movs	r1, #0
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <LocalBB_Init+0x5c>)
 800098a:	f005 fbb5 	bl	80060f8 <memset>
    
    /* 初始状态 */
    g_local_bb.current_floor = 1;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <LocalBB_Init+0x5c>)
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    g_local_bb.expected_next_floor = 1;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <LocalBB_Init+0x5c>)
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    g_local_bb.direction = DIR_STOP;
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <LocalBB_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
    g_local_bb.door_state = LOCAL_DOOR_CLOSED;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <LocalBB_Init+0x5c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    
    /* 事件队列 */
    g_local_bb.event_head = 0;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <LocalBB_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_tail = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <LocalBB_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count = 0;
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <LocalBB_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    strcpy(g_local_bb.debug_msg, "LocalBB Init");
 80009c6:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <LocalBB_Init+0x60>)
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <LocalBB_Init+0x64>)
 80009ca:	4614      	mov	r4, r2
 80009cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ce:	c407      	stmia	r4!, {r0, r1, r2}
 80009d0:	7023      	strb	r3, [r4, #0]
    printf("[LocalBB] Initialized\r\n");
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <LocalBB_Init+0x68>)
 80009d4:	f005 fa8e 	bl	8005ef4 <puts>
}
 80009d8:	bf00      	nop
 80009da:	bd98      	pop	{r3, r4, r7, pc}
 80009dc:	200000a8 	.word	0x200000a8
 80009e0:	20000150 	.word	0x20000150
 80009e4:	08006f94 	.word	0x08006f94
 80009e8:	08006fa4 	.word	0x08006fa4

080009ec <PushEvent>:
    LocalBB_Init();
}

/* ==================== 事件队列管理 ==================== */

static bool PushEvent(LocalEventType_t type, uint8_t data1, uint8_t data2, uint8_t data3) {
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4603      	mov	r3, r0
 8000a00:	71bb      	strb	r3, [r7, #6]
 8000a02:	460b      	mov	r3, r1
 8000a04:	717b      	strb	r3, [r7, #5]
 8000a06:	4613      	mov	r3, r2
 8000a08:	713b      	strb	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8000a0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /* 临界区保护 */
    uint32_t primask = __get_PRIMASK();
 8000a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
    __disable_irq();
    
    if (g_local_bb.event_count >= MAX_EVENT_QUEUE) {
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <PushEvent+0xec>)
 8000a1a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d91b      	bls.n	8000a5c <PushEvent+0x70>
        /* 队列满时丢弃最旧事件 */
        printf("[LocalBB] Event queue full! Dropping oldest\r\n");
 8000a24:	482d      	ldr	r0, [pc, #180]	@ (8000adc <PushEvent+0xf0>)
 8000a26:	f005 fa65 	bl	8005ef4 <puts>
        g_local_bb.event_head = (g_local_bb.event_head + 1) % MAX_EVENT_QUEUE;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <PushEvent+0xec>)
 8000a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3301      	adds	r3, #1
 8000a34:	425a      	negs	r2, r3
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	f002 020f 	and.w	r2, r2, #15
 8000a3e:	bf58      	it	pl
 8000a40:	4253      	negpl	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <PushEvent+0xec>)
 8000a46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        g_local_bb.event_count--;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <PushEvent+0xec>)
 8000a4c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <PushEvent+0xec>)
 8000a58:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    }
    
    LocalEvent_t* event = &g_local_bb.event_queue[g_local_bb.event_tail];
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <PushEvent+0xec>)
 8000a5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <PushEvent+0xec>)
 8000a68:	4413      	add	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
    event->type = type;
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	701a      	strb	r2, [r3, #0]
    event->data1 = data1;
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	79ba      	ldrb	r2, [r7, #6]
 8000a76:	705a      	strb	r2, [r3, #1]
    event->data2 = data2;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	797a      	ldrb	r2, [r7, #5]
 8000a7c:	709a      	strb	r2, [r3, #2]
    event->data3 = data3;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	793a      	ldrb	r2, [r7, #4]
 8000a82:	70da      	strb	r2, [r3, #3]
    event->timestamp = HAL_GetTick();
 8000a84:	f002 fdf6 	bl	8003674 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	605a      	str	r2, [r3, #4]
    
    g_local_bb.event_tail = (g_local_bb.event_tail + 1) % MAX_EVENT_QUEUE;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <PushEvent+0xec>)
 8000a90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	425a      	negs	r2, r3
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	f002 020f 	and.w	r2, r2, #15
 8000aa2:	bf58      	it	pl
 8000aa4:	4253      	negpl	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <PushEvent+0xec>)
 8000aaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count++;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <PushEvent+0xec>)
 8000ab0:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <PushEvent+0xec>)
 8000abc:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f383 8810 	msr	PRIMASK, r3
}
 8000aca:	bf00      	nop
    
    __set_PRIMASK(primask);
    return true;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	08006fbc 	.word	0x08006fbc

08000ae0 <PopEvent>:

static bool PopEvent(LocalEvent_t* event) {
 8000ae0:	b490      	push	{r4, r7}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8000aec:	613b      	str	r3, [r7, #16]
  return(result);
 8000aee:	693b      	ldr	r3, [r7, #16]
    /* 临界区保护 */
    uint32_t primask = __get_PRIMASK();
 8000af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	bf00      	nop
    __disable_irq();
    
    if (g_local_bb.event_count == 0) {
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <PopEvent+0x98>)
 8000af8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <PopEvent+0x32>
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f383 8810 	msr	PRIMASK, r3
}
 8000b0c:	bf00      	nop
        __set_PRIMASK(primask);
        return false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e02c      	b.n	8000b6c <PopEvent+0x8c>
    }
    
    *event = g_local_bb.event_queue[g_local_bb.event_head];
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <PopEvent+0x98>)
 8000b14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	@ (8000b78 <PopEvent+0x98>)
 8000b1e:	460c      	mov	r4, r1
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	4413      	add	r3, r2
 8000b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b28:	e884 0003 	stmia.w	r4, {r0, r1}
    g_local_bb.event_head = (g_local_bb.event_head + 1) % MAX_EVENT_QUEUE;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <PopEvent+0x98>)
 8000b2e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3301      	adds	r3, #1
 8000b36:	425a      	negs	r2, r3
 8000b38:	f003 030f 	and.w	r3, r3, #15
 8000b3c:	f002 020f 	and.w	r2, r2, #15
 8000b40:	bf58      	it	pl
 8000b42:	4253      	negpl	r3, r2
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <PopEvent+0x98>)
 8000b48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_count--;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <PopEvent+0x98>)
 8000b4e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <PopEvent+0x98>)
 8000b5a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	f383 8810 	msr	PRIMASK, r3
}
 8000b68:	bf00      	nop
    
    __set_PRIMASK(primask);
    return true;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc90      	pop	{r4, r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200000a8 	.word	0x200000a8

08000b7c <LocalBB_AddCabinCall>:

/* ==================== 事件输入接口 ==================== */

void LocalBB_AddCabinCall(uint8_t floor) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d055      	beq.n	8000c38 <LocalBB_AddCabinCall+0xbc>
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d852      	bhi.n	8000c38 <LocalBB_AddCabinCall+0xbc>
    
    uint32_t current_time = HAL_GetTick();
 8000b92:	f002 fd6f 	bl	8003674 <HAL_GetTick>
 8000b96:	60f8      	str	r0, [r7, #12]
     * 2. 不同层呼叫：使用极短的防抖时间（3ms），确保快速响应
     * 3. 超过1秒后：认为是新的操作周期，重置防抖
     */
    
    /* 如果距离上次发送超过1秒，重置记录（新的操作周期） */
    if ((current_time - g_local_bb.last_cabin_call_time) > 1000) {
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ba6:	d903      	bls.n	8000bb0 <LocalBB_AddCabinCall+0x34>
        g_local_bb.last_sent_cabin_call = 0;  /* 重置记录 */
 8000ba8:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    }
    
    /* 防抖检查 */
    if (floor == g_local_bb.last_sent_cabin_call) {
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000bb2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000bb6:	79fa      	ldrb	r2, [r7, #7]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d126      	bne.n	8000c0a <LocalBB_AddCabinCall+0x8e>
        /* 同楼层呼叫 */
        if (floor == g_local_bb.current_floor) {
 8000bbc:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000bbe:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d112      	bne.n	8000bf0 <LocalBB_AddCabinCall+0x74>
            /* 同层呼叫：使用50ms防抖，平衡响应速度 */
            if ((current_time - g_local_bb.last_cabin_call_time) < 50) {
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	2b31      	cmp	r3, #49	@ 0x31
 8000bd6:	d818      	bhi.n	8000c0a <LocalBB_AddCabinCall+0x8e>
                printf("[LocalBB] Same floor cabin call %d debounced (wait %lums)\r\n", 
 8000bd8:	79f9      	ldrb	r1, [r7, #7]
                       floor, 50 - (current_time - g_local_bb.last_cabin_call_time));
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000bdc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	1ad3      	subs	r3, r2, r3
                printf("[LocalBB] Same floor cabin call %d debounced (wait %lums)\r\n", 
 8000be4:	3332      	adds	r3, #50	@ 0x32
 8000be6:	461a      	mov	r2, r3
 8000be8:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <LocalBB_AddCabinCall+0xc8>)
 8000bea:	f005 f91b 	bl	8005e24 <iprintf>
                return;
 8000bee:	e024      	b.n	8000c3a <LocalBB_AddCabinCall+0xbe>
            }
        } else {
            /* 不同层但相同呼叫：使用3ms防抖 */
            if ((current_time - g_local_bb.last_cabin_call_time) < DEBOUNCE_TIME_MS) {
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d805      	bhi.n	8000c0a <LocalBB_AddCabinCall+0x8e>
                printf("[LocalBB] Cabin call %d debounced\r\n", floor);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4811      	ldr	r0, [pc, #68]	@ (8000c48 <LocalBB_AddCabinCall+0xcc>)
 8000c04:	f005 f90e 	bl	8005e24 <iprintf>
                return;
 8000c08:	e017      	b.n	8000c3a <LocalBB_AddCabinCall+0xbe>
            }
        }
    }
    
    /* 发送事件 */
    PushEvent(LOCAL_EVENT_CABIN_CALL, floor, 0, 0);
 8000c0a:	79f9      	ldrb	r1, [r7, #7]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff feeb 	bl	80009ec <PushEvent>
    g_local_bb.cabin_call_count++;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000c20:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    printf("[LocalBB] Cabin call queued: floor %d (current: %d)\r\n", floor, g_local_bb.current_floor);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <LocalBB_AddCabinCall+0xc4>)
 8000c28:	f892 2083 	ldrb.w	r2, [r2, #131]	@ 0x83
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <LocalBB_AddCabinCall+0xd0>)
 8000c32:	f005 f8f7 	bl	8005e24 <iprintf>
 8000c36:	e000      	b.n	8000c3a <LocalBB_AddCabinCall+0xbe>
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000c38:	bf00      	nop
}
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000a8 	.word	0x200000a8
 8000c44:	08006fec 	.word	0x08006fec
 8000c48:	08007028 	.word	0x08007028
 8000c4c:	0800704c 	.word	0x0800704c

08000c50 <LocalBB_AddPhotoSensor>:

void LocalBB_AddPhotoSensor(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
    /* 使用预期楼层 */
    uint8_t floor = g_local_bb.expected_next_floor;
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000c58:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000c5c:	71fb      	strb	r3, [r7, #7]
    
    PushEvent(LOCAL_EVENT_PHOTO_SENSOR, floor, 0, 0);
 8000c5e:	79f9      	ldrb	r1, [r7, #7]
 8000c60:	2300      	movs	r3, #0
 8000c62:	2200      	movs	r2, #0
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff fec1 	bl	80009ec <PushEvent>
    g_local_bb.photo_trigger_count++;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000c6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000c74:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    printf("[LocalBB] Photo sensor queued: floor %d\r\n", floor);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481b      	ldr	r0, [pc, #108]	@ (8000cec <LocalBB_AddPhotoSensor+0x9c>)
 8000c7e:	f005 f8d1 	bl	8005e24 <iprintf>
    
    /* 更新当前楼层 */
    g_local_bb.current_floor = floor;
 8000c82:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    
    /* 根据方向更新预期楼层 */
    if (g_local_bb.direction == DIR_UP) {
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000c8c:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d110      	bne.n	8000cb8 <LocalBB_AddPhotoSensor+0x68>
        g_local_bb.expected_next_floor = floor + 1;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000c9e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        if (g_local_bb.expected_next_floor > MAX_FLOORS) {
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000ca4:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d918      	bls.n	8000ce0 <LocalBB_AddPhotoSensor+0x90>
            g_local_bb.expected_next_floor = MAX_FLOORS;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
            g_local_bb.expected_next_floor = floor - 1;
        } else {
            g_local_bb.expected_next_floor = 1;
        }
    }
}
 8000cb6:	e013      	b.n	8000ce0 <LocalBB_AddPhotoSensor+0x90>
    } else if (g_local_bb.direction == DIR_DOWN) {
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000cba:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d10d      	bne.n	8000ce0 <LocalBB_AddPhotoSensor+0x90>
        if (floor > 1) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d906      	bls.n	8000cd8 <LocalBB_AddPhotoSensor+0x88>
            g_local_bb.expected_next_floor = floor - 1;
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000cd2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 8000cd6:	e003      	b.n	8000ce0 <LocalBB_AddPhotoSensor+0x90>
            g_local_bb.expected_next_floor = 1;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	@ (8000ce8 <LocalBB_AddPhotoSensor+0x98>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000a8 	.word	0x200000a8
 8000cec:	08007084 	.word	0x08007084

08000cf0 <LocalBB_SetDirection>:

void LocalBB_SetDirection(uint8_t dir, uint8_t current, uint8_t target) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af02      	add	r7, sp, #8
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71bb      	strb	r3, [r7, #6]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	717b      	strb	r3, [r7, #5]
    g_local_bb.direction = dir;
 8000d02:	4a23      	ldr	r2, [pc, #140]	@ (8000d90 <LocalBB_SetDirection+0xa0>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f882 3085 	strb.w	r3, [r2, #133]	@ 0x85
    g_local_bb.current_floor = current;
 8000d0a:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <LocalBB_SetDirection+0xa0>)
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    g_local_bb.target_floor = target;
 8000d12:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <LocalBB_SetDirection+0xa0>)
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
    
    /* 设置预期楼层 */
    if (dir == DIR_UP) {
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d106      	bne.n	8000d2e <LocalBB_SetDirection+0x3e>
        g_local_bb.expected_next_floor = current + 1;
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	3301      	adds	r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <LocalBB_SetDirection+0xa0>)
 8000d28:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000d2c:	e010      	b.n	8000d50 <LocalBB_SetDirection+0x60>
    } else if (dir == DIR_DOWN && current > 1) {
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d109      	bne.n	8000d48 <LocalBB_SetDirection+0x58>
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d906      	bls.n	8000d48 <LocalBB_SetDirection+0x58>
        g_local_bb.expected_next_floor = current - 1;
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <LocalBB_SetDirection+0xa0>)
 8000d42:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000d46:	e003      	b.n	8000d50 <LocalBB_SetDirection+0x60>
    } else {
        g_local_bb.expected_next_floor = current;
 8000d48:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <LocalBB_SetDirection+0xa0>)
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
    }
    
    PushEvent(LOCAL_EVENT_DIRECTION_SET, dir, current, target);
 8000d50:	797b      	ldrb	r3, [r7, #5]
 8000d52:	79ba      	ldrb	r2, [r7, #6]
 8000d54:	79f9      	ldrb	r1, [r7, #7]
 8000d56:	2003      	movs	r0, #3
 8000d58:	f7ff fe48 	bl	80009ec <PushEvent>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d006      	beq.n	8000d70 <LocalBB_SetDirection+0x80>
           dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DOWN" : "STOP",
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d101      	bne.n	8000d6c <LocalBB_SetDirection+0x7c>
 8000d68:	490a      	ldr	r1, [pc, #40]	@ (8000d94 <LocalBB_SetDirection+0xa4>)
 8000d6a:	e002      	b.n	8000d72 <LocalBB_SetDirection+0x82>
 8000d6c:	490a      	ldr	r1, [pc, #40]	@ (8000d98 <LocalBB_SetDirection+0xa8>)
 8000d6e:	e000      	b.n	8000d72 <LocalBB_SetDirection+0x82>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000d70:	490a      	ldr	r1, [pc, #40]	@ (8000d9c <LocalBB_SetDirection+0xac>)
 8000d72:	79ba      	ldrb	r2, [r7, #6]
 8000d74:	797b      	ldrb	r3, [r7, #5]
           current, target, g_local_bb.expected_next_floor);
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <LocalBB_SetDirection+0xa0>)
 8000d78:	f890 0086 	ldrb.w	r0, [r0, #134]	@ 0x86
 8000d7c:	b2c0      	uxtb	r0, r0
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000d7e:	9000      	str	r0, [sp, #0]
 8000d80:	4807      	ldr	r0, [pc, #28]	@ (8000da0 <LocalBB_SetDirection+0xb0>)
 8000d82:	f005 f84f 	bl	8005e24 <iprintf>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000a8 	.word	0x200000a8
 8000d94:	080070b0 	.word	0x080070b0
 8000d98:	080070b8 	.word	0x080070b8
 8000d9c:	080070c0 	.word	0x080070c0
 8000da0:	080070c4 	.word	0x080070c4

08000da4 <LocalBB_AddDoorCommand>:

void LocalBB_AddDoorCommand(bool open) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
    PushEvent(LOCAL_EVENT_DOOR_CMD, open ? 1 : 0, 0, 0);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2300      	movs	r3, #0
 8000db4:	2200      	movs	r2, #0
 8000db6:	2004      	movs	r0, #4
 8000db8:	f7ff fe18 	bl	80009ec <PushEvent>
    g_local_bb.door_state = open ? LOCAL_DOOR_OPENING : LOCAL_DOOR_CLOSING;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <LocalBB_AddDoorCommand+0x22>
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	e000      	b.n	8000dc8 <LocalBB_AddDoorCommand+0x24>
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <LocalBB_AddDoorCommand+0x54>)
 8000dca:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    g_local_bb.door_cmd_time = HAL_GetTick();
 8000dce:	f002 fc51 	bl	8003674 <HAL_GetTick>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <LocalBB_AddDoorCommand+0x54>)
 8000dd6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    printf("[LocalBB] Door command queued: %s\r\n", open ? "OPEN" : "CLOSE");
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <LocalBB_AddDoorCommand+0x40>
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <LocalBB_AddDoorCommand+0x58>)
 8000de2:	e000      	b.n	8000de6 <LocalBB_AddDoorCommand+0x42>
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <LocalBB_AddDoorCommand+0x5c>)
 8000de6:	4619      	mov	r1, r3
 8000de8:	4806      	ldr	r0, [pc, #24]	@ (8000e04 <LocalBB_AddDoorCommand+0x60>)
 8000dea:	f005 f81b 	bl	8005e24 <iprintf>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a8 	.word	0x200000a8
 8000dfc:	080070f8 	.word	0x080070f8
 8000e00:	08007100 	.word	0x08007100
 8000e04:	08007108 	.word	0x08007108

08000e08 <LocalBB_Process>:

/* ==================== 事件处理主函数 ==================== */

void LocalBB_Process(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af02      	add	r7, sp, #8
    LocalEvent_t event;
    uint32_t current_time = HAL_GetTick();
 8000e0e:	f002 fc31 	bl	8003674 <HAL_GetTick>
 8000e12:	6178      	str	r0, [r7, #20]
    
    while (PopEvent(&event)) {
 8000e14:	e08e      	b.n	8000f34 <LocalBB_Process+0x12c>
        switch (event.type) {
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	f200 8087 	bhi.w	8000f2e <LocalBB_Process+0x126>
 8000e20:	a201      	add	r2, pc, #4	@ (adr r2, 8000e28 <LocalBB_Process+0x20>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e7f 	.word	0x08000e7f
 8000e30:	08000edd 	.word	0x08000edd
 8000e34:	08000f07 	.word	0x08000f07
                /* 内呼总是发送，让Master决定如何处理 */
                /* 同层按钮需要立即响应，不能被防重复机制阻止 */
                {
                    /* 发送内呼命令 */
                    uint8_t tx_buffer[4];
                    tx_buffer[0] = CMD_CABIN_CALL;
 8000e38:	2331      	movs	r3, #49	@ 0x31
 8000e3a:	723b      	strb	r3, [r7, #8]
                    tx_buffer[1] = event.data1;  // 楼层
 8000e3c:	7b7b      	ldrb	r3, [r7, #13]
 8000e3e:	727b      	strb	r3, [r7, #9]
                    tx_buffer[2] = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	72bb      	strb	r3, [r7, #10]
                    tx_buffer[3] = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	72fb      	strb	r3, [r7, #11]
                    
                    rs485_send_packet_dma(tx_buffer, 4);
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f956 	bl	8001100 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 8000e54:	4b3e      	ldr	r3, [pc, #248]	@ (8000f50 <LocalBB_Process+0x148>)
 8000e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f50 <LocalBB_Process+0x148>)
 8000e5e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    
                    g_local_bb.last_sent_cabin_call = event.data1;
 8000e62:	7b7a      	ldrb	r2, [r7, #13]
 8000e64:	4b3a      	ldr	r3, [pc, #232]	@ (8000f50 <LocalBB_Process+0x148>)
 8000e66:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
                    g_local_bb.last_cabin_call_time = current_time;
 8000e6a:	4a39      	ldr	r2, [pc, #228]	@ (8000f50 <LocalBB_Process+0x148>)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                    
                    printf("[LocalBB] RS485 TX: Cabin call floor %d\r\n", event.data1);
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4837      	ldr	r0, [pc, #220]	@ (8000f54 <LocalBB_Process+0x14c>)
 8000e78:	f004 ffd4 	bl	8005e24 <iprintf>
                }
                break;
 8000e7c:	e05a      	b.n	8000f34 <LocalBB_Process+0x12c>
                
            case LOCAL_EVENT_PHOTO_SENSOR:
                /* 智能判断是否需要发送 */
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000e7e:	7b7a      	ldrb	r2, [r7, #13]
 8000e80:	4b33      	ldr	r3, [pc, #204]	@ (8000f50 <LocalBB_Process+0x148>)
 8000e82:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d106      	bne.n	8000e98 <LocalBB_Process+0x90>
                    (current_time - g_local_bb.last_photo_send_time) > 200) {  // 光电允许更快
 8000e8a:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <LocalBB_Process+0x148>)
 8000e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000e94:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e96:	d94c      	bls.n	8000f32 <LocalBB_Process+0x12a>
                    
                    /* 发送光电传感器触发 */
                    uint8_t tx_buffer[4];
                    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	713b      	strb	r3, [r7, #4]
                    tx_buffer[1] = event.data1;  // 楼层
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	717b      	strb	r3, [r7, #5]
                    tx_buffer[2] = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71bb      	strb	r3, [r7, #6]
                    tx_buffer[3] = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	71fb      	strb	r3, [r7, #7]
                    
                    rs485_send_packet_dma(tx_buffer, 4);
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f927 	bl	8001100 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 8000eb2:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <LocalBB_Process+0x148>)
 8000eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a25      	ldr	r2, [pc, #148]	@ (8000f50 <LocalBB_Process+0x148>)
 8000ebc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    
                    g_local_bb.last_sent_photo_floor = event.data1;
 8000ec0:	7b7a      	ldrb	r2, [r7, #13]
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <LocalBB_Process+0x148>)
 8000ec4:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
                    g_local_bb.last_photo_send_time = current_time;
 8000ec8:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <LocalBB_Process+0x148>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
                    
                    printf("[LocalBB] RS485 TX: Photo sensor floor %d\r\n", event.data1);
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4820      	ldr	r0, [pc, #128]	@ (8000f58 <LocalBB_Process+0x150>)
 8000ed6:	f004 ffa5 	bl	8005e24 <iprintf>
                }
                break;
 8000eda:	e02a      	b.n	8000f32 <LocalBB_Process+0x12a>
                
            case LOCAL_EVENT_DIRECTION_SET:
                /* 方向设置只更新内部状态，不需要回传 */
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
                        event.data1 == DIR_UP ? "UP" : 
 8000edc:	7b7b      	ldrb	r3, [r7, #13]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d006      	beq.n	8000ef0 <LocalBB_Process+0xe8>
                        event.data1 == DIR_DOWN ? "DN" : "ST",
 8000ee2:	7b7b      	ldrb	r3, [r7, #13]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d101      	bne.n	8000eec <LocalBB_Process+0xe4>
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <LocalBB_Process+0x154>)
 8000eea:	e002      	b.n	8000ef2 <LocalBB_Process+0xea>
 8000eec:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <LocalBB_Process+0x158>)
 8000eee:	e000      	b.n	8000ef2 <LocalBB_Process+0xea>
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <LocalBB_Process+0x15c>)
                        event.data2, event.data3);
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000ef4:	4619      	mov	r1, r3
                        event.data2, event.data3);
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	460b      	mov	r3, r1
 8000efc:	491a      	ldr	r1, [pc, #104]	@ (8000f68 <LocalBB_Process+0x160>)
 8000efe:	481b      	ldr	r0, [pc, #108]	@ (8000f6c <LocalBB_Process+0x164>)
 8000f00:	f005 f800 	bl	8005f04 <siprintf>
                break;
 8000f04:	e016      	b.n	8000f34 <LocalBB_Process+0x12c>
                
            case LOCAL_EVENT_DOOR_CMD:
                /* 设置门控命令 */
                pending_door_cmd = event.data1 ? DOOR_CMD_OPEN : DOOR_CMD_CLOSE;
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <LocalBB_Process+0x108>
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	e000      	b.n	8000f12 <LocalBB_Process+0x10a>
 8000f10:	2202      	movs	r2, #2
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <LocalBB_Process+0x168>)
 8000f14:	701a      	strb	r2, [r3, #0]
                printf("[LocalBB] Door command ready: %s\r\n", 
                       pending_door_cmd == DOOR_CMD_OPEN ? "OPEN" : "CLOSE");
 8000f16:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <LocalBB_Process+0x168>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
                printf("[LocalBB] Door command ready: %s\r\n", 
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <LocalBB_Process+0x11a>
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <LocalBB_Process+0x16c>)
 8000f20:	e000      	b.n	8000f24 <LocalBB_Process+0x11c>
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <LocalBB_Process+0x170>)
 8000f24:	4619      	mov	r1, r3
 8000f26:	4815      	ldr	r0, [pc, #84]	@ (8000f7c <LocalBB_Process+0x174>)
 8000f28:	f004 ff7c 	bl	8005e24 <iprintf>
                break;
 8000f2c:	e002      	b.n	8000f34 <LocalBB_Process+0x12c>
                
            default:
                break;
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <LocalBB_Process+0x12c>
                break;
 8000f32:	bf00      	nop
    while (PopEvent(&event)) {
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fdd1 	bl	8000ae0 <PopEvent>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f af68 	bne.w	8000e16 <LocalBB_Process+0xe>
        }
    }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000a8 	.word	0x200000a8
 8000f54:	0800712c 	.word	0x0800712c
 8000f58:	08007158 	.word	0x08007158
 8000f5c:	08007184 	.word	0x08007184
 8000f60:	08007188 	.word	0x08007188
 8000f64:	080070c0 	.word	0x080070c0
 8000f68:	0800718c 	.word	0x0800718c
 8000f6c:	20000150 	.word	0x20000150
 8000f70:	20000170 	.word	0x20000170
 8000f74:	080070f8 	.word	0x080070f8
 8000f78:	08007100 	.word	0x08007100
 8000f7c:	0800719c 	.word	0x0800719c

08000f80 <LocalBB_PrintStatus>:
    return g_local_bb.direction;
}

/* ==================== 调试输出 ==================== */

void LocalBB_PrintStatus(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    printf("\r\n=== LocalBB Status ===\r\n");
 8000f84:	4822      	ldr	r0, [pc, #136]	@ (8001010 <LocalBB_PrintStatus+0x90>)
 8000f86:	f004 ffb5 	bl	8005ef4 <puts>
    printf("Floor: %d (expect: %d)\r\n", 
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000f8c:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8000f90:	b2db      	uxtb	r3, r3
    printf("Floor: %d (expect: %d)\r\n", 
 8000f92:	4619      	mov	r1, r3
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000f96:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000f9a:	b2db      	uxtb	r3, r3
    printf("Floor: %d (expect: %d)\r\n", 
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	481e      	ldr	r0, [pc, #120]	@ (8001018 <LocalBB_PrintStatus+0x98>)
 8000fa0:	f004 ff40 	bl	8005e24 <iprintf>
    printf("Direction: %s, Target: %d\r\n",
           g_local_bb.direction == DIR_UP ? "UP" : 
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000fa6:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000faa:	b2db      	uxtb	r3, r3
    printf("Direction: %s, Target: %d\r\n",
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d009      	beq.n	8000fc4 <LocalBB_PrintStatus+0x44>
           g_local_bb.direction == DIR_DOWN ? "DOWN" : "STOP",
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000fb2:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d101      	bne.n	8000fc0 <LocalBB_PrintStatus+0x40>
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <LocalBB_PrintStatus+0x9c>)
 8000fbe:	e002      	b.n	8000fc6 <LocalBB_PrintStatus+0x46>
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <LocalBB_PrintStatus+0xa0>)
 8000fc2:	e000      	b.n	8000fc6 <LocalBB_PrintStatus+0x46>
    printf("Direction: %s, Target: %d\r\n",
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <LocalBB_PrintStatus+0xa4>)
           g_local_bb.target_floor);
 8000fc6:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000fc8:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8000fcc:	b2d2      	uxtb	r2, r2
    printf("Direction: %s, Target: %d\r\n",
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4815      	ldr	r0, [pc, #84]	@ (8001028 <LocalBB_PrintStatus+0xa8>)
 8000fd2:	f004 ff27 	bl	8005e24 <iprintf>
    printf("Events: %d in queue\r\n", g_local_bb.event_count);
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000fd8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4812      	ldr	r0, [pc, #72]	@ (800102c <LocalBB_PrintStatus+0xac>)
 8000fe2:	f004 ff1f 	bl	8005e24 <iprintf>
    printf("Stats: Cabin=%lu, Photo=%lu, RS485=%lu\r\n",
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000fe8:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000fee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <LocalBB_PrintStatus+0x94>)
 8000ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <LocalBB_PrintStatus+0xb0>)
 8000ffa:	f004 ff13 	bl	8005e24 <iprintf>
           g_local_bb.cabin_call_count,
           g_local_bb.photo_trigger_count,
           g_local_bb.rs485_send_count);
    printf("Debug: %s\r\n", g_local_bb.debug_msg);
 8000ffe:	490d      	ldr	r1, [pc, #52]	@ (8001034 <LocalBB_PrintStatus+0xb4>)
 8001000:	480d      	ldr	r0, [pc, #52]	@ (8001038 <LocalBB_PrintStatus+0xb8>)
 8001002:	f004 ff0f 	bl	8005e24 <iprintf>
    printf("======================\r\n");
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <LocalBB_PrintStatus+0xbc>)
 8001008:	f004 ff74 	bl	8005ef4 <puts>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	080071c0 	.word	0x080071c0
 8001014:	200000a8 	.word	0x200000a8
 8001018:	080071dc 	.word	0x080071dc
 800101c:	080070b0 	.word	0x080070b0
 8001020:	080070b8 	.word	0x080070b8
 8001024:	080070c0 	.word	0x080070c0
 8001028:	080071f8 	.word	0x080071f8
 800102c:	08007214 	.word	0x08007214
 8001030:	0800722c 	.word	0x0800722c
 8001034:	20000150 	.word	0x20000150
 8001038:	08007258 	.word	0x08007258
 800103c:	08007264 	.word	0x08007264

08001040 <LocalBB_GetDoorCommand>:

/* ==================== 门控命令接口 ==================== */

LocalBB_DoorCommand_t LocalBB_GetDoorCommand(void) {
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
    return pending_door_cmd;
 8001044:	4b02      	ldr	r3, [pc, #8]	@ (8001050 <LocalBB_GetDoorCommand+0x10>)
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000170 	.word	0x20000170

08001054 <LocalBB_ClearDoorCommand>:

void LocalBB_ClearDoorCommand(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
    pending_door_cmd = DOOR_CMD_NONE;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <LocalBB_ClearDoorCommand+0x14>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000170 	.word	0x20000170

0800106c <rs485_init>:

/**
 * @brief Initialize RS485 driver
 */
rs485_status_t rs485_init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    /* Clear driver structure */
    memset(&rs485_driver, 0, sizeof(rs485_driver));
 8001070:	2248      	movs	r2, #72	@ 0x48
 8001072:	2100      	movs	r1, #0
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <rs485_init+0x78>)
 8001076:	f005 f83f 	bl	80060f8 <memset>
    
    /* Set buffer pointers */
    rs485_driver.dma_rx_buffer = rs485_dma_rx_buffer;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <rs485_init+0x78>)
 800107c:	4a1a      	ldr	r2, [pc, #104]	@ (80010e8 <rs485_init+0x7c>)
 800107e:	605a      	str	r2, [r3, #4]
    rs485_driver.rx_buffer = rs485_rx_ring_buffer;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <rs485_init+0x78>)
 8001082:	4a1a      	ldr	r2, [pc, #104]	@ (80010ec <rs485_init+0x80>)
 8001084:	609a      	str	r2, [r3, #8]
    rs485_driver.tx_buffer = rs485_tx_ring_buffer;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <rs485_init+0x78>)
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <rs485_init+0x84>)
 800108a:	60da      	str	r2, [r3, #12]
    
    /* Initialize ring buffers */
    ring_buffer_init(&rs485_driver.rx_ring, rs485_rx_ring_buffer, RS485_RX_BUFFER_SIZE);
 800108c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001090:	4916      	ldr	r1, [pc, #88]	@ (80010ec <rs485_init+0x80>)
 8001092:	4818      	ldr	r0, [pc, #96]	@ (80010f4 <rs485_init+0x88>)
 8001094:	f000 f90a 	bl	80012ac <ring_buffer_init>
    ring_buffer_init(&rs485_driver.tx_ring, rs485_tx_ring_buffer, RS485_TX_BUFFER_SIZE);
 8001098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800109c:	4914      	ldr	r1, [pc, #80]	@ (80010f0 <rs485_init+0x84>)
 800109e:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <rs485_init+0x8c>)
 80010a0:	f000 f904 	bl	80012ac <ring_buffer_init>
    
    /* Set UART handle */
    rs485_driver.huart = &huart2;  /* slavemcu uses USART2 */
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <rs485_init+0x78>)
 80010a6:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <rs485_init+0x90>)
 80010a8:	601a      	str	r2, [r3, #0]
    
    /* Clear DMA buffer */
    memset(rs485_dma_rx_buffer, 0, RS485_DMA_RX_BUFFER_SIZE);
 80010aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ae:	2100      	movs	r1, #0
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <rs485_init+0x7c>)
 80010b2:	f005 f821 	bl	80060f8 <memset>
    
    /* Start DMA reception (already configured as circular in HAL_MspInit) */
    HAL_UART_Receive_DMA(rs485_driver.huart, rs485_dma_rx_buffer, RS485_DMA_RX_BUFFER_SIZE);
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <rs485_init+0x78>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010be:	490a      	ldr	r1, [pc, #40]	@ (80010e8 <rs485_init+0x7c>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 fe73 	bl	8004dac <HAL_UART_Receive_DMA>
    
    /* Enable IDLE interrupt */
     __HAL_UART_ENABLE_IT(rs485_driver.huart, UART_IT_IDLE);
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <rs485_init+0x78>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <rs485_init+0x78>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0210 	orr.w	r2, r2, #16
 80010d8:	60da      	str	r2, [r3, #12]
    
    /* Reset statistics */
    rs485_reset_stats();
 80010da:	f000 f8db 	bl	8001294 <rs485_reset_stats>
    
    return RS485_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000174 	.word	0x20000174
 80010e8:	200001bc 	.word	0x200001bc
 80010ec:	200002bc 	.word	0x200002bc
 80010f0:	200004bc 	.word	0x200004bc
 80010f4:	20000184 	.word	0x20000184
 80010f8:	20000190 	.word	0x20000190
 80010fc:	2000075c 	.word	0x2000075c

08001100 <rs485_send_packet_dma>:

/**
 * @brief Send packet via RS485 using DMA (non-blocking)
 */
rs485_status_t rs485_send_packet_dma(const uint8_t *data, uint16_t length)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    
    if (data == NULL || length == 0 || length > RS485_TX_BUFFER_SIZE) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <rs485_send_packet_dma+0x20>
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <rs485_send_packet_dma+0x20>
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800111e:	d901      	bls.n	8001124 <rs485_send_packet_dma+0x24>
        return RS485_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e036      	b.n	8001192 <rs485_send_packet_dma+0x92>
    }
    
    if (rs485_driver.tx_pending) {
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <rs485_send_packet_dma+0x34>
        return RS485_BUSY;
 8001130:	2302      	movs	r3, #2
 8001132:	e02e      	b.n	8001192 <rs485_send_packet_dma+0x92>
    }
    
    /* Set pending flag */
    rs485_driver.tx_pending = 1;
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    
    /* Copy data to TX buffer */
    memcpy(rs485_driver.tx_buffer, data, length);
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <rs485_send_packet_dma+0x9c>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	f005 f852 	bl	80061ee <memcpy>
    
    /* Send data via DMA */
    status = HAL_UART_Transmit_DMA(rs485_driver.huart, rs485_driver.tx_buffer, length);
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <rs485_send_packet_dma+0x9c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a13      	ldr	r2, [pc, #76]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001150:	68d1      	ldr	r1, [r2, #12]
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fdb9 	bl	8004ccc <HAL_UART_Transmit_DMA>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
    
    if (status == HAL_OK) {
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10c      	bne.n	800117e <rs485_send_packet_dma+0x7e>
        rs485_driver.stats.tx_packets++;
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	3301      	adds	r3, #1
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <rs485_send_packet_dma+0x9c>)
 800116c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        rs485_driver.stats.tx_bytes += length;
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	4413      	add	r3, r2
 8001176:	4a09      	ldr	r2, [pc, #36]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001178:	6353      	str	r3, [r2, #52]	@ 0x34
        return RS485_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e009      	b.n	8001192 <rs485_send_packet_dma+0x92>
    } else {
        rs485_driver.stats.tx_errors++;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	3301      	adds	r3, #1
 8001184:	4a05      	ldr	r2, [pc, #20]	@ (800119c <rs485_send_packet_dma+0x9c>)
 8001186:	6413      	str	r3, [r2, #64]	@ 0x40
        rs485_driver.tx_pending = 0;
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <rs485_send_packet_dma+0x9c>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        return RS485_ERROR;
 8001190:	2301      	movs	r3, #1
    }
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000174 	.word	0x20000174

080011a0 <rs485_receive_packet>:

/**
 * @brief Receive packet from RS485
 */
uint16_t rs485_receive_packet(uint8_t *buffer, uint16_t max_length)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
    if (buffer == NULL || max_length == 0) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <rs485_receive_packet+0x18>
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <rs485_receive_packet+0x1c>
        return 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e013      	b.n	80011e4 <rs485_receive_packet+0x44>
    }
    
    /* Process any pending DMA data */
    rs485_process_dma_rx();
 80011bc:	f000 f926 	bl	800140c <rs485_process_dma_rx>
    
    /* Read from ring buffer */
    uint16_t received = ring_buffer_read(&rs485_driver.rx_ring, buffer, max_length);
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	461a      	mov	r2, r3
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4809      	ldr	r0, [pc, #36]	@ (80011ec <rs485_receive_packet+0x4c>)
 80011c8:	f000 f8c1 	bl	800134e <ring_buffer_read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	81fb      	strh	r3, [r7, #14]
    
    if (received > 0) {
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <rs485_receive_packet+0x42>
        rs485_driver.stats.rx_bytes += received;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <rs485_receive_packet+0x50>)
 80011d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	4413      	add	r3, r2
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <rs485_receive_packet+0x50>)
 80011e0:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    
    return received;
 80011e2:	89fb      	ldrh	r3, [r7, #14]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000184 	.word	0x20000184
 80011f0:	20000174 	.word	0x20000174

080011f4 <rs485_idle_interrupt_handler>:

/**
 * @brief Handle IDLE interrupt for RS485
 */
void rs485_idle_interrupt_handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80011fa:	af00      	add	r7, sp, #0
    /* Clear IDLE flag */
    __HAL_UART_CLEAR_IDLEFLAG(rs485_driver.huart);
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001202:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <rs485_idle_interrupt_handler+0x80>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <rs485_idle_interrupt_handler+0x80>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800121a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
    
    /* Process received data */
    rs485_process_dma_rx();
 800121e:	f000 f8f5 	bl	800140c <rs485_process_dma_rx>
    
    rs485_driver.stats.rx_packets++;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <rs485_idle_interrupt_handler+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	3301      	adds	r3, #1
 8001228:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <rs485_idle_interrupt_handler+0x80>)
 800122a:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Call packet callback if set */
    if (rs485_driver.packet_received_callback != NULL) {
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <rs485_idle_interrupt_handler+0x80>)
 800122e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01a      	beq.n	800126a <rs485_idle_interrupt_handler+0x76>
        uint16_t available = ring_buffer_available(&rs485_driver.rx_ring);
 8001234:	4810      	ldr	r0, [pc, #64]	@ (8001278 <rs485_idle_interrupt_handler+0x84>)
 8001236:	f000 f8c2 	bl	80013be <ring_buffer_available>
 800123a:	4603      	mov	r3, r0
 800123c:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        if (available > 0) {
 8001240:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8001244:	2b00      	cmp	r3, #0
 8001246:	d010      	beq.n	800126a <rs485_idle_interrupt_handler+0x76>
            uint8_t temp_buffer[RS485_RX_BUFFER_SIZE];
            uint16_t length = ring_buffer_read(&rs485_driver.rx_ring, temp_buffer, available);
 8001248:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <rs485_idle_interrupt_handler+0x84>)
 8001252:	f000 f87c 	bl	800134e <ring_buffer_read>
 8001256:	4603      	mov	r3, r0
 8001258:	f8a7 3204 	strh.w	r3, [r7, #516]	@ 0x204
            rs485_driver.packet_received_callback(temp_buffer, length);
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <rs485_idle_interrupt_handler+0x80>)
 800125e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001260:	f8b7 1204 	ldrh.w	r1, [r7, #516]	@ 0x204
 8001264:	463a      	mov	r2, r7
 8001266:	4610      	mov	r0, r2
 8001268:	4798      	blx	r3
        }
    }
}
 800126a:	bf00      	nop
 800126c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000174 	.word	0x20000174
 8001278:	20000184 	.word	0x20000184

0800127c <rs485_tx_complete_callback>:

/**
 * @brief TX complete callback
 */
void rs485_tx_complete_callback(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
    /* Clear pending flag */
    rs485_driver.tx_pending = 0;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <rs485_tx_complete_callback+0x14>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000174 	.word	0x20000174

08001294 <rs485_reset_stats>:

/**
 * @brief Reset RS485 statistics
 */
void rs485_reset_stats(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    memset(&rs485_driver.stats, 0, sizeof(rs485_stats_t));
 8001298:	2218      	movs	r2, #24
 800129a:	2100      	movs	r1, #0
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <rs485_reset_stats+0x14>)
 800129e:	f004 ff2b 	bl	80060f8 <memset>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001a0 	.word	0x200001a0

080012ac <ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
static void ring_buffer_init(ring_buffer_t *rb, uint8_t *buffer, uint16_t size)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4613      	mov	r3, r2
 80012b8:	80fb      	strh	r3, [r7, #6]
    rb->buffer = buffer;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	601a      	str	r2, [r3, #0]
    rb->size = size;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	809a      	strh	r2, [r3, #4]
    rb->head = 0;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	80da      	strh	r2, [r3, #6]
    rb->tail = 0;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	811a      	strh	r2, [r3, #8]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <ring_buffer_write>:

/**
 * @brief Write data to ring buffer
 */
static uint16_t ring_buffer_write(ring_buffer_t *rb, const uint8_t *data, uint16_t length)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	4613      	mov	r3, r2
 80012e8:	80fb      	strh	r3, [r7, #6]
    uint16_t written = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	82fb      	strh	r3, [r7, #22]
    
    while (written < length) {
 80012ee:	e022      	b.n	8001336 <ring_buffer_write+0x5a>
        uint16_t next_head = (rb->head + 1) % rb->size;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	88db      	ldrh	r3, [r3, #6]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	8892      	ldrh	r2, [r2, #4]
 80012fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001300:	fb01 f202 	mul.w	r2, r1, r2
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	82bb      	strh	r3, [r7, #20]
        
        /* Check if buffer is full */
        if (next_head == rb->tail) {
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	891b      	ldrh	r3, [r3, #8]
 800130c:	b29b      	uxth	r3, r3
 800130e:	8aba      	ldrh	r2, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	d015      	beq.n	8001340 <ring_buffer_write+0x64>
            break;  /* Buffer full */
        }
        
        rb->buffer[rb->head] = data[written];
 8001314:	8afb      	ldrh	r3, [r7, #22]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	441a      	add	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	88c9      	ldrh	r1, [r1, #6]
 8001322:	b289      	uxth	r1, r1
 8001324:	440b      	add	r3, r1
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	701a      	strb	r2, [r3, #0]
        rb->head = next_head;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8aba      	ldrh	r2, [r7, #20]
 800132e:	80da      	strh	r2, [r3, #6]
        written++;
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	3301      	adds	r3, #1
 8001334:	82fb      	strh	r3, [r7, #22]
    while (written < length) {
 8001336:	8afa      	ldrh	r2, [r7, #22]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3d8      	bcc.n	80012f0 <ring_buffer_write+0x14>
 800133e:	e000      	b.n	8001342 <ring_buffer_write+0x66>
            break;  /* Buffer full */
 8001340:	bf00      	nop
    }
    
    return written;
 8001342:	8afb      	ldrh	r3, [r7, #22]
}
 8001344:	4618      	mov	r0, r3
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <ring_buffer_read>:

/**
 * @brief Read data from ring buffer
 */
static uint16_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data, uint16_t length)
{
 800134e:	b480      	push	{r7}
 8001350:	b087      	sub	sp, #28
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	4613      	mov	r3, r2
 800135a:	80fb      	strh	r3, [r7, #6]
    uint16_t read = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	82fb      	strh	r3, [r7, #22]
    
    while (read < length && rb->tail != rb->head) {
 8001360:	e01b      	b.n	800139a <ring_buffer_read+0x4c>
        data[read] = rb->buffer[rb->tail];
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	8912      	ldrh	r2, [r2, #8]
 800136a:	b292      	uxth	r2, r2
 800136c:	441a      	add	r2, r3
 800136e:	8afb      	ldrh	r3, [r7, #22]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	440b      	add	r3, r1
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	701a      	strb	r2, [r3, #0]
        rb->tail = (rb->tail + 1) % rb->size;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	891b      	ldrh	r3, [r3, #8]
 800137c:	b29b      	uxth	r3, r3
 800137e:	3301      	adds	r3, #1
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	8892      	ldrh	r2, [r2, #4]
 8001384:	fb93 f1f2 	sdiv	r1, r3, r2
 8001388:	fb01 f202 	mul.w	r2, r1, r2
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	811a      	strh	r2, [r3, #8]
        read++;
 8001394:	8afb      	ldrh	r3, [r7, #22]
 8001396:	3301      	adds	r3, #1
 8001398:	82fb      	strh	r3, [r7, #22]
    while (read < length && rb->tail != rb->head) {
 800139a:	8afa      	ldrh	r2, [r7, #22]
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d207      	bcs.n	80013b2 <ring_buffer_read+0x64>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	891b      	ldrh	r3, [r3, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	88db      	ldrh	r3, [r3, #6]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d1d7      	bne.n	8001362 <ring_buffer_read+0x14>
    }
    
    return read;
 80013b2:	8afb      	ldrh	r3, [r7, #22]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <ring_buffer_available>:

/**
 * @brief Get available data in ring buffer
 */
static uint16_t ring_buffer_available(ring_buffer_t *rb)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
    if (rb->head >= rb->tail) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	88db      	ldrh	r3, [r3, #6]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	891b      	ldrh	r3, [r3, #8]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d308      	bcc.n	80013e8 <ring_buffer_available+0x2a>
        return rb->head - rb->tail;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	88db      	ldrh	r3, [r3, #6]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	891b      	ldrh	r3, [r3, #8]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	e00b      	b.n	8001400 <ring_buffer_available+0x42>
    } else {
        return rb->size - rb->tail + rb->head;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	889a      	ldrh	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	891b      	ldrh	r3, [r3, #8]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	88db      	ldrh	r3, [r3, #6]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b29b      	uxth	r3, r3
    }
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
	...

0800140c <rs485_process_dma_rx>:

/**
 * @brief Process DMA received data
 */
static void rs485_process_dma_rx(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
    /* Get current DMA position */
    uint16_t dma_pos = RS485_DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(rs485_driver.huart->hdmarx);
 8001412:	4b2c      	ldr	r3, [pc, #176]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	b29b      	uxth	r3, r3
 800141e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001422:	80bb      	strh	r3, [r7, #4]
    
    /* Calculate received bytes */
    uint16_t length;
    if (dma_pos >= rs485_driver.last_dma_pos) {
 8001424:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 8001426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	88ba      	ldrh	r2, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d306      	bcc.n	800143e <rs485_process_dma_rx+0x32>
        length = dma_pos - rs485_driver.last_dma_pos;
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 8001432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	88ba      	ldrh	r2, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	80fb      	strh	r3, [r7, #6]
 800143c:	e008      	b.n	8001450 <rs485_process_dma_rx+0x44>
    } else {
        /* DMA wrapped around */
        length = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos + dma_pos;
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 8001440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001442:	b29b      	uxth	r3, r3
 8001444:	88ba      	ldrh	r2, [r7, #4]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800144e:	80fb      	strh	r3, [r7, #6]
    }
    
    if (length > 0) {
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d031      	beq.n	80014ba <rs485_process_dma_rx+0xae>
        /* Copy data to ring buffer */
        if (rs485_driver.last_dma_pos + length <= RS485_DMA_RX_BUFFER_SIZE) {
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 8001458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4413      	add	r3, r2
 8001462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001466:	dc0b      	bgt.n	8001480 <rs485_process_dma_rx+0x74>
            /* Simple copy */
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 800146a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <rs485_process_dma_rx+0xbc>)
 8001472:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	4619      	mov	r1, r3
 8001478:	4814      	ldr	r0, [pc, #80]	@ (80014cc <rs485_process_dma_rx+0xc0>)
 800147a:	f7ff ff2f 	bl	80012dc <ring_buffer_write>
 800147e:	e019      	b.n	80014b4 <rs485_process_dma_rx+0xa8>
                            length);
        } else {
            /* Wrapped copy */
            uint16_t first_part = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos;
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 8001482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001484:	b29b      	uxth	r3, r3
 8001486:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800148a:	807b      	strh	r3, [r7, #2]
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 800148e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <rs485_process_dma_rx+0xbc>)
 8001496:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 8001498:	887a      	ldrh	r2, [r7, #2]
 800149a:	4619      	mov	r1, r3
 800149c:	480b      	ldr	r0, [pc, #44]	@ (80014cc <rs485_process_dma_rx+0xc0>)
 800149e:	f7ff ff1d 	bl	80012dc <ring_buffer_write>
                            first_part);
            ring_buffer_write(&rs485_driver.rx_ring, 
 80014a2:	88fa      	ldrh	r2, [r7, #6]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	4906      	ldr	r1, [pc, #24]	@ (80014c8 <rs485_process_dma_rx+0xbc>)
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <rs485_process_dma_rx+0xc0>)
 80014b0:	f7ff ff14 	bl	80012dc <ring_buffer_write>
                            &rs485_dma_rx_buffer[0], 
                            length - first_part);
        }
        
        /* Update last position */
        rs485_driver.last_dma_pos = dma_pos;
 80014b4:	4a03      	ldr	r2, [pc, #12]	@ (80014c4 <rs485_process_dma_rx+0xb8>)
 80014b6:	88bb      	ldrh	r3, [r7, #4]
 80014b8:	8553      	strh	r3, [r2, #42]	@ 0x2a
    }
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000174 	.word	0x20000174
 80014c8:	200001bc 	.word	0x200001bc
 80014cc:	20000184 	.word	0x20000184

080014d0 <Keyboard_Init>:

// 全局键盘实例
Keyboard_t g_keyboard;

// 初始化键盘模块
void Keyboard_Init(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    // 清零结构体
    memset(&g_keyboard, 0, sizeof(Keyboard_t));
 80014d4:	2228      	movs	r2, #40	@ 0x28
 80014d6:	2100      	movs	r1, #0
 80014d8:	4811      	ldr	r0, [pc, #68]	@ (8001520 <Keyboard_Init+0x50>)
 80014da:	f004 fe0d 	bl	80060f8 <memset>
    
    // 初始化变量
    g_keyboard.current_key = KEY_NONE;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <Keyboard_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
    g_keyboard.last_key = KEY_NONE;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <Keyboard_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	705a      	strb	r2, [r3, #1]
    g_keyboard.last_scan_time = HAL_GetTick();
 80014ea:	f002 f8c3 	bl	8003674 <HAL_GetTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <Keyboard_Init+0x50>)
 80014f2:	6053      	str	r3, [r2, #4]
    g_keyboard.key_stable = false;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <Keyboard_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	735a      	strb	r2, [r3, #13]
    g_keyboard.buffer_head = 0;
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <Keyboard_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <Keyboard_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <Keyboard_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	761a      	strb	r2, [r3, #24]
    g_keyboard.interrupt_flag = false;
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <Keyboard_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = 0;
 8001512:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <Keyboard_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
    
    // 初始化GPIO
    Keyboard_GPIO_Init();
 8001518:	f000 f9f6 	bl	8001908 <Keyboard_GPIO_Init>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200006bc 	.word	0x200006bc

08001524 <Keyboard_Handler>:

// 主处理函数 - 中断模式
void Keyboard_Handler(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
    // 检查中断标志
    if (g_keyboard.interrupt_flag) {
 800152a:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <Keyboard_Handler+0x90>)
 800152c:	7e5b      	ldrb	r3, [r3, #25]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d02a      	beq.n	800158a <Keyboard_Handler+0x66>
        g_keyboard.interrupt_flag = false;
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <Keyboard_Handler+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	765a      	strb	r2, [r3, #25]
        
        uint32_t current_time = HAL_GetTick();
 800153a:	f002 f89b 	bl	8003674 <HAL_GetTick>
 800153e:	60f8      	str	r0, [r7, #12]
        
        // 去抖处理 - 两次按键间隔至少 KEYBOARD_DEBOUNCE_TIME
        if (current_time - g_keyboard.last_scan_time >= KEYBOARD_DEBOUNCE_TIME) {
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <Keyboard_Handler+0x90>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d91e      	bls.n	800158a <Keyboard_Handler+0x66>
            g_keyboard.last_scan_time = current_time;
 800154c:	4a19      	ldr	r2, [pc, #100]	@ (80015b4 <Keyboard_Handler+0x90>)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6053      	str	r3, [r2, #4]
            
            // 删除延时，GPIO读取足够快
            
            // 扫描键盘确定哪个按键被按下
            uint8_t key = Keyboard_ScanInterrupt();
 8001552:	f000 f831 	bl	80015b8 <Keyboard_ScanInterrupt>
 8001556:	4603      	mov	r3, r0
 8001558:	72fb      	strb	r3, [r7, #11]
            
            // 处理按键 - 允许重复按键
            if (key != KEY_NONE) {
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d014      	beq.n	800158a <Keyboard_Handler+0x66>
                // 只在按键不同或超过释放时间后才处理
                if (key != g_keyboard.last_key || 
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <Keyboard_Handler+0x90>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	7afa      	ldrb	r2, [r7, #11]
 8001566:	429a      	cmp	r2, r3
 8001568:	d105      	bne.n	8001576 <Keyboard_Handler+0x52>
                    (current_time - g_keyboard.key_press_time) > KEYBOARD_RELEASE_TIME) {
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <Keyboard_Handler+0x90>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
                if (key != g_keyboard.last_key || 
 8001572:	2b05      	cmp	r3, #5
 8001574:	d909      	bls.n	800158a <Keyboard_Handler+0x66>
                    Keyboard_ProcessKey(key);
 8001576:	7afb      	ldrb	r3, [r7, #11]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f99d 	bl	80018b8 <Keyboard_ProcessKey>
                    g_keyboard.last_key = key;
 800157e:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <Keyboard_Handler+0x90>)
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	7053      	strb	r3, [r2, #1]
                    // 只在按键被处理时更新时间
                    g_keyboard.key_press_time = current_time;
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <Keyboard_Handler+0x90>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6093      	str	r3, [r2, #8]
            }
        }
    }
    
    // 检查按键释放
    uint32_t current_time = HAL_GetTick();
 800158a:	f002 f873 	bl	8003674 <HAL_GetTick>
 800158e:	6078      	str	r0, [r7, #4]
    if (g_keyboard.last_key != KEY_NONE) {
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <Keyboard_Handler+0x90>)
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d008      	beq.n	80015aa <Keyboard_Handler+0x86>
        if (current_time - g_keyboard.key_press_time > KEYBOARD_RELEASE_TIME) {
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <Keyboard_Handler+0x90>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d902      	bls.n	80015aa <Keyboard_Handler+0x86>
            g_keyboard.last_key = KEY_NONE;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <Keyboard_Handler+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	705a      	strb	r2, [r3, #1]
        }
    }
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200006bc 	.word	0x200006bc

080015b8 <Keyboard_ScanInterrupt>:
    
    return KEY_NONE;
}

// Scan keyboard when interrupt triggered
uint8_t Keyboard_ScanInterrupt(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
    uint8_t key = KEY_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t confirm_count = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    // First set all columns HIGH to prepare for scanning
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 80015ca:	2201      	movs	r2, #1
 80015cc:	f241 1130 	movw	r1, #4400	@ 0x1130
 80015d0:	4881      	ldr	r0, [pc, #516]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 80015d2:	f002 fdc8 	bl	8004166 <HAL_GPIO_WritePin>
    // S13 -> PA12 -> Not used
    
    // Test each column one by one with confirmation
    
    // Test PA4 (COL4_PIN) for S16 -> Floor 1
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_RESET);  // PA4
 80015d6:	2200      	movs	r2, #0
 80015d8:	2110      	movs	r1, #16
 80015da:	487f      	ldr	r0, [pc, #508]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 80015dc:	f002 fdc3 	bl	8004166 <HAL_GPIO_WritePin>
    // 无需延时
    // 连续读取3次确认
    confirm_count = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < 3; i++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	e00f      	b.n	800160c <Keyboard_ScanInterrupt+0x54>
        if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 80015ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015f0:	4879      	ldr	r0, [pc, #484]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 80015f2:	f002 fda1 	bl	8004138 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d104      	bne.n	8001606 <Keyboard_ScanInterrupt+0x4e>
            confirm_count++;
 80015fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001600:	3301      	adds	r3, #1
 8001602:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < 3; i++) {
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	3301      	adds	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	2b02      	cmp	r3, #2
 8001610:	ddec      	ble.n	80015ec <Keyboard_ScanInterrupt+0x34>
        }
        // 无需延时
    }
    if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 8001612:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <Keyboard_ScanInterrupt+0x68>
        key = KEY_S16;  // Floor 1
 800161a:	2310      	movs	r3, #16
 800161c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	486c      	ldr	r0, [pc, #432]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 8001626:	f002 fd9e 	bl	8004166 <HAL_GPIO_WritePin>
    
    if (key == KEY_NONE) {
 800162a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800162e:	2b00      	cmp	r3, #0
 8001630:	d135      	bne.n	800169e <Keyboard_ScanInterrupt+0xe6>
        // Test PA8 (COL1_PIN) for S15 -> Floor 2
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_RESET);  // PA8
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001638:	4867      	ldr	r0, [pc, #412]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 800163a:	f002 fd94 	bl	8004166 <HAL_GPIO_WritePin>
        for(volatile int delay = 0; delay < 1000; delay++);
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	e002      	b.n	800164a <Keyboard_ScanInterrupt+0x92>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001650:	dbf8      	blt.n	8001644 <Keyboard_ScanInterrupt+0x8c>
        confirm_count = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	e00f      	b.n	800167e <Keyboard_ScanInterrupt+0xc6>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 800165e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001662:	485d      	ldr	r0, [pc, #372]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 8001664:	f002 fd68 	bl	8004138 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <Keyboard_ScanInterrupt+0xc0>
                confirm_count++;
 800166e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001672:	3301      	adds	r3, #1
 8001674:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	3301      	adds	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b02      	cmp	r3, #2
 8001682:	ddec      	ble.n	800165e <Keyboard_ScanInterrupt+0xa6>
            }
            // 无需延时
        }
        if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 8001684:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <Keyboard_ScanInterrupt+0xda>
            key = KEY_S15;  // Floor 2
 800168c:	230f      	movs	r3, #15
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001698:	484f      	ldr	r0, [pc, #316]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 800169a:	f002 fd64 	bl	8004166 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 800169e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d133      	bne.n	800170e <Keyboard_ScanInterrupt+0x156>
        // Test PA5 (COL3_PIN) for S14 -> Floor 3
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_RESET);  // PA5
 80016a6:	2200      	movs	r2, #0
 80016a8:	2120      	movs	r1, #32
 80016aa:	484b      	ldr	r0, [pc, #300]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 80016ac:	f002 fd5b 	bl	8004166 <HAL_GPIO_WritePin>
        for(volatile int delay = 0; delay < 1000; delay++);
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	e002      	b.n	80016bc <Keyboard_ScanInterrupt+0x104>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016c2:	dbf8      	blt.n	80016b6 <Keyboard_ScanInterrupt+0xfe>
        confirm_count = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	e00f      	b.n	80016f0 <Keyboard_ScanInterrupt+0x138>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 80016d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016d4:	4840      	ldr	r0, [pc, #256]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 80016d6:	f002 fd2f 	bl	8004138 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <Keyboard_ScanInterrupt+0x132>
                confirm_count++;
 80016e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016e4:	3301      	adds	r3, #1
 80016e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	3301      	adds	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	ddec      	ble.n	80016d0 <Keyboard_ScanInterrupt+0x118>
            }
            // 无需延时
        }
        if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 80016f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <Keyboard_ScanInterrupt+0x14c>
            key = KEY_S14;  // Floor 3
 80016fe:	230e      	movs	r3, #14
 8001700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2120      	movs	r1, #32
 8001708:	4833      	ldr	r0, [pc, #204]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 800170a:	f002 fd2c 	bl	8004166 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 800170e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001712:	2b00      	cmp	r3, #0
 8001714:	d135      	bne.n	8001782 <Keyboard_ScanInterrupt+0x1ca>
        // Test PA12 (COL2_PIN) for S13 -> Not used
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_RESET);  // PA12
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800171c:	482e      	ldr	r0, [pc, #184]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 800171e:	f002 fd22 	bl	8004166 <HAL_GPIO_WritePin>
        for(volatile int delay = 0; delay < 1000; delay++);
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	e002      	b.n	800172e <Keyboard_ScanInterrupt+0x176>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3301      	adds	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001734:	dbf8      	blt.n	8001728 <Keyboard_ScanInterrupt+0x170>
        confirm_count = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00f      	b.n	8001762 <Keyboard_ScanInterrupt+0x1aa>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8001742:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001746:	4824      	ldr	r0, [pc, #144]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 8001748:	f002 fcf6 	bl	8004138 <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d104      	bne.n	800175c <Keyboard_ScanInterrupt+0x1a4>
                confirm_count++;
 8001752:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001756:	3301      	adds	r3, #1
 8001758:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b02      	cmp	r3, #2
 8001766:	ddec      	ble.n	8001742 <Keyboard_ScanInterrupt+0x18a>
            }
            // 无需延时
        }
        if (confirm_count >= 1) {  // 放宽条件：1次即可触发
 8001768:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <Keyboard_ScanInterrupt+0x1be>
            key = KEY_S13;  // S13 detected but not used in elevator logic
 8001770:	230d      	movs	r3, #13
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800177c:	4816      	ldr	r0, [pc, #88]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 800177e:	f002 fcf2 	bl	8004166 <HAL_GPIO_WritePin>
    }
    
    // 等待按键释放
    if (key != KEY_NONE) {
 8001782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01a      	beq.n	80017c0 <Keyboard_ScanInterrupt+0x208>
        // 等待按键释放（最多等10ms）- 进一步缩短
        uint32_t wait_start = HAL_GetTick();
 800178a:	f001 ff73 	bl	8003674 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]
        while ((HAL_GetTick() - wait_start) < 10) {
 8001790:	e00d      	b.n	80017ae <Keyboard_ScanInterrupt+0x1f6>
            // 设置所有列为HIGH
            HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8001792:	2201      	movs	r2, #1
 8001794:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001798:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 800179a:	f002 fce4 	bl	8004166 <HAL_GPIO_WritePin>
                              KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                              GPIO_PIN_SET);
            // 无需延时
            
            // 检查是否释放
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_SET) {
 800179e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017a2:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 80017a4:	f002 fcc8 	bl	8004138 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d007      	beq.n	80017be <Keyboard_ScanInterrupt+0x206>
        while ((HAL_GetTick() - wait_start) < 10) {
 80017ae:	f001 ff61 	bl	8003674 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d9ea      	bls.n	8001792 <Keyboard_ScanInterrupt+0x1da>
 80017bc:	e000      	b.n	80017c0 <Keyboard_ScanInterrupt+0x208>
                // 按键已释放
                // 无需额外延时
                break;
 80017be:	bf00      	nop
            }
        }
    }
    
    // After scanning, set all columns LOW again for next interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 80017c0:	2200      	movs	r2, #0
 80017c2:	f241 1130 	movw	r1, #4400	@ 0x1130
 80017c6:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <Keyboard_ScanInterrupt+0x220>)
 80017c8:	f002 fccd 	bl	8004166 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
    
    return key;
 80017cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3728      	adds	r7, #40	@ 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010800 	.word	0x40010800

080017dc <Keyboard_PushKey>:
bool Keyboard_IsKeyPressed(uint8_t key) {
    return (g_keyboard.current_key == key && g_keyboard.key_stable);
}

// 将按键推入缓冲区
bool Keyboard_PushKey(uint8_t key) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
    if (g_keyboard.buffer_count >= KEYBOARD_BUFFER_SIZE) {
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <Keyboard_PushKey+0x58>)
 80017e8:	7e1b      	ldrb	r3, [r3, #24]
 80017ea:	2b07      	cmp	r3, #7
 80017ec:	d901      	bls.n	80017f2 <Keyboard_PushKey+0x16>
        return false;  // 缓冲区满
 80017ee:	2300      	movs	r3, #0
 80017f0:	e01a      	b.n	8001828 <Keyboard_PushKey+0x4c>
    }
    
    g_keyboard.key_buffer[g_keyboard.buffer_tail] = key;
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <Keyboard_PushKey+0x58>)
 80017f4:	7ddb      	ldrb	r3, [r3, #23]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <Keyboard_PushKey+0x58>)
 80017fa:	4413      	add	r3, r2
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	739a      	strb	r2, [r3, #14]
    g_keyboard.buffer_tail = (g_keyboard.buffer_tail + 1) % KEYBOARD_BUFFER_SIZE;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <Keyboard_PushKey+0x58>)
 8001802:	7ddb      	ldrb	r3, [r3, #23]
 8001804:	3301      	adds	r3, #1
 8001806:	425a      	negs	r2, r3
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	f002 0207 	and.w	r2, r2, #7
 8001810:	bf58      	it	pl
 8001812:	4253      	negpl	r3, r2
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <Keyboard_PushKey+0x58>)
 8001818:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count++;
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <Keyboard_PushKey+0x58>)
 800181c:	7e1b      	ldrb	r3, [r3, #24]
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <Keyboard_PushKey+0x58>)
 8001824:	761a      	strb	r2, [r3, #24]
    
    return true;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200006bc 	.word	0x200006bc

08001838 <Keyboard_PopKey>:

// 从缓冲区弹出按键
bool Keyboard_PopKey(uint8_t* key) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    if (g_keyboard.buffer_count == 0) {
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <Keyboard_PopKey+0x58>)
 8001842:	7e1b      	ldrb	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <Keyboard_PopKey+0x14>
        return false;  // 缓冲区空
 8001848:	2300      	movs	r3, #0
 800184a:	e01b      	b.n	8001884 <Keyboard_PopKey+0x4c>
    }
    
    *key = g_keyboard.key_buffer[g_keyboard.buffer_head];
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <Keyboard_PopKey+0x58>)
 800184e:	7d9b      	ldrb	r3, [r3, #22]
 8001850:	461a      	mov	r2, r3
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <Keyboard_PopKey+0x58>)
 8001854:	4413      	add	r3, r2
 8001856:	7b9a      	ldrb	r2, [r3, #14]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	701a      	strb	r2, [r3, #0]
    g_keyboard.buffer_head = (g_keyboard.buffer_head + 1) % KEYBOARD_BUFFER_SIZE;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <Keyboard_PopKey+0x58>)
 800185e:	7d9b      	ldrb	r3, [r3, #22]
 8001860:	3301      	adds	r3, #1
 8001862:	425a      	negs	r2, r3
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	f002 0207 	and.w	r2, r2, #7
 800186c:	bf58      	it	pl
 800186e:	4253      	negpl	r3, r2
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <Keyboard_PopKey+0x58>)
 8001874:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_count--;
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <Keyboard_PopKey+0x58>)
 8001878:	7e1b      	ldrb	r3, [r3, #24]
 800187a:	3b01      	subs	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <Keyboard_PopKey+0x58>)
 8001880:	761a      	strb	r2, [r3, #24]
    
    return true;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	200006bc 	.word	0x200006bc

08001894 <Keyboard_ClearBuffer>:
bool Keyboard_HasKey(void) {
    return g_keyboard.buffer_count > 0;
}

// 清空缓冲区
void Keyboard_ClearBuffer(void) {
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
    g_keyboard.buffer_head = 0;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <Keyboard_ClearBuffer+0x20>)
 800189a:	2200      	movs	r2, #0
 800189c:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <Keyboard_ClearBuffer+0x20>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <Keyboard_ClearBuffer+0x20>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	761a      	strb	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200006bc 	.word	0x200006bc

080018b8 <Keyboard_ProcessKey>:

// 处理按键
void Keyboard_ProcessKey(uint8_t key) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    if (key != KEY_NONE) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d019      	beq.n	80018fc <Keyboard_ProcessKey+0x44>
        g_keyboard.total_key_presses++;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <Keyboard_ProcessKey+0x4c>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	3301      	adds	r3, #1
 80018ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <Keyboard_ProcessKey+0x4c>)
 80018d0:	6213      	str	r3, [r2, #32]
        g_keyboard.key_press_time = HAL_GetTick();
 80018d2:	f001 fecf 	bl	8003674 <HAL_GetTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <Keyboard_ProcessKey+0x4c>)
 80018da:	6093      	str	r3, [r2, #8]
        
        // 推入缓冲区
        if (!Keyboard_PushKey(key)) {
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff7c 	bl	80017dc <Keyboard_PushKey>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f083 0301 	eor.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <Keyboard_ProcessKey+0x44>
            // 缓冲区满，清空后再推入
            Keyboard_ClearBuffer();
 80018f0:	f7ff ffd0 	bl	8001894 <Keyboard_ClearBuffer>
            Keyboard_PushKey(key);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff70 	bl	80017dc <Keyboard_PushKey>
        }
        
    }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200006bc 	.word	0x200006bc

08001908 <Keyboard_GPIO_Init>:


// GPIO Init
void Keyboard_GPIO_Init(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    // GPIO is already initialized in gpio.c
    // Set all columns LOW initially for interrupt mode
    // When any button is pressed, it will pull PA11 LOW and trigger interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 800190c:	2200      	movs	r2, #0
 800190e:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001912:	4802      	ldr	r0, [pc, #8]	@ (800191c <Keyboard_GPIO_Init+0x14>)
 8001914:	f002 fc27 	bl	8004166 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010800 	.word	0x40010800

08001920 <Keyboard_IRQHandler>:


// 中断处理函数
void Keyboard_IRQHandler(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    // 设置中断标志
    g_keyboard.interrupt_flag = true;
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <Keyboard_IRQHandler+0x18>)
 8001926:	2201      	movs	r2, #1
 8001928:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = HAL_GetTick();
 800192a:	f001 fea3 	bl	8003674 <HAL_GetTick>
 800192e:	4603      	mov	r3, r0
 8001930:	4a01      	ldr	r2, [pc, #4]	@ (8001938 <Keyboard_IRQHandler+0x18>)
 8001932:	61d3      	str	r3, [r2, #28]
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200006bc 	.word	0x200006bc

0800193c <PhotoSensor_Init>:

/**
 * @brief Initialize photo sensor on PB5 with interrupt
 */
void PhotoSensor_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
    
    /* Enable GPIOB clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <PhotoSensor_Init+0x68>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a13      	ldr	r2, [pc, #76]	@ (80019a4 <PhotoSensor_Init+0x68>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <PhotoSensor_Init+0x68>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
    
    /* Configure PB5 as input with pull-up */
    GPIO_InitStruct.Pin = PHOTO_SENSOR_GPIO_PIN;  // GPIO_PIN_5
 8001968:	2320      	movs	r3, #32
 800196a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;   /* Interrupt on rising edge only */
 800196c:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <PhotoSensor_Init+0x6c>)
 800196e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;           /* Internal pull-up resistor */
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PHOTO_SENSOR_GPIO_PORT, &GPIO_InitStruct);
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4619      	mov	r1, r3
 800197a:	480c      	ldr	r0, [pc, #48]	@ (80019ac <PhotoSensor_Init+0x70>)
 800197c:	f002 fa58 	bl	8003e30 <HAL_GPIO_Init>
    
    /* Enable and set EXTI9_5 interrupt priority (PB5 uses this) */
    HAL_NVIC_SetPriority(PHOTO_SENSOR_IRQn, 2, 0);  // EXTI9_5_IRQn
 8001980:	2200      	movs	r2, #0
 8001982:	2102      	movs	r1, #2
 8001984:	2017      	movs	r0, #23
 8001986:	f001 ff7a 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PHOTO_SENSOR_IRQn);
 800198a:	2017      	movs	r0, #23
 800198c:	f001 ff93 	bl	80038b6 <HAL_NVIC_EnableIRQ>
    
    /* Reset counter */
    trigger_count = 0;
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <PhotoSensor_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
    last_trigger_time = 0;
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <PhotoSensor_Init+0x78>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	10110000 	.word	0x10110000
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	200006e4 	.word	0x200006e4
 80019b4:	200006e8 	.word	0x200006e8

080019b8 <PhotoSensor_GetState>:
/**
 * @brief Get current state of photo sensor
 * @return PHOTO_SENSOR_BLOCKED if object detected, PHOTO_SENSOR_CLEAR if no object
 */
photo_sensor_state_t PhotoSensor_GetState(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
    /* Read GPIO pin state */
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(PHOTO_SENSOR_GPIO_PORT, PHOTO_SENSOR_GPIO_PIN);
 80019be:	2120      	movs	r1, #32
 80019c0:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <PhotoSensor_GetState+0x28>)
 80019c2:	f002 fbb9 	bl	8004138 <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
    
    /* White line (Dark-ON): LOW = object detected, HIGH = no object */
    if (pin_state == GPIO_PIN_RESET) {
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <PhotoSensor_GetState+0x1c>
        return PHOTO_SENSOR_BLOCKED;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <PhotoSensor_GetState+0x1e>
    } else {
        return PHOTO_SENSOR_CLEAR;
 80019d4:	2301      	movs	r3, #1
    }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40010c00 	.word	0x40010c00

080019e4 <PhotoSensor_IRQHandler>:
/**
 * @brief Photo sensor interrupt handler
 * @note Called from HAL_GPIO_EXTI_Callback
 */
void PhotoSensor_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
    /* Simple debounce: ignore triggers within 50ms */
    uint32_t current_time = HAL_GetTick();
 80019ea:	f001 fe43 	bl	8003674 <HAL_GetTick>
 80019ee:	6078      	str	r0, [r7, #4]
    if (current_time - last_trigger_time > 50) {
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <PhotoSensor_IRQHandler+0x34>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b32      	cmp	r3, #50	@ 0x32
 80019fa:	d909      	bls.n	8001a10 <PhotoSensor_IRQHandler+0x2c>
        trigger_count++;
 80019fc:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <PhotoSensor_IRQHandler+0x38>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <PhotoSensor_IRQHandler+0x38>)
 8001a04:	6013      	str	r3, [r2, #0]
        last_trigger_time = current_time;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <PhotoSensor_IRQHandler+0x34>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6013      	str	r3, [r2, #0]
        
        /* Call user callback */
        PhotoSensor_TriggerCallback();
 8001a0c:	f001 faa4 	bl	8002f58 <PhotoSensor_TriggerCallback>
    }
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200006e8 	.word	0x200006e8
 8001a1c:	200006e4 	.word	0x200006e4

08001a20 <DoorControl_Init>:
static uint32_t update_count = 0;

/**
 * @brief 初始化门控系统 - 4状态机版本
 */
void DoorControl_Init(DoorControl_t *door, uint8_t servo_id) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
    printf("[DOOR] Initializing door control system (4-State FSM)...\r\n");
 8001a2c:	4845      	ldr	r0, [pc, #276]	@ (8001b44 <DoorControl_Init+0x124>)
 8001a2e:	f004 fa61 	bl	8005ef4 <puts>
    
    door->servo_id = servo_id;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	701a      	strb	r2, [r3, #0]
    
    /* 初始化舵机 */
    servo_set_speed(servo_id, 500);
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fd57 	bl	80024f2 <servo_set_speed>
    servo_set_torque_enable(servo_id, 1);
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fd3d 	bl	80024c8 <servo_set_torque_enable>
    // 初始化时使用HAL_Delay可以接受（不在中断中）
    HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	@ 0x64
 8001a50:	f001 fe1a 	bl	8003688 <HAL_Delay>
    
    /* 读取当前位置 */
    uint8_t rx_data[2];
    servo_read_reg(servo_id, 0x38, 2, rx_data);
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	78f8      	ldrb	r0, [r7, #3]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	2138      	movs	r1, #56	@ 0x38
 8001a5e:	f000 fc86 	bl	800236e <servo_read_reg>
    door->current_pos = rx_data[0] | (rx_data[1] << 8);
 8001a62:	7b3b      	ldrb	r3, [r7, #12]
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	805a      	strh	r2, [r3, #2]
    
    /* 读取移动标志 */
    uint8_t moving_flag;
    servo_read_reg(servo_id, 0x42, 1, &moving_flag);
 8001a78:	f107 030b 	add.w	r3, r7, #11
 8001a7c:	78f8      	ldrb	r0, [r7, #3]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2142      	movs	r1, #66	@ 0x42
 8001a82:	f000 fc74 	bl	800236e <servo_read_reg>
    
    printf("[DOOR] Initial position: %u (target OPEN=%u, CLOSED=%u)\r\n", 
           door->current_pos, DOOR_POS_OPEN, DOOR_POS_CLOSED);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR] Initial position: %u (target OPEN=%u, CLOSED=%u)\r\n", 
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f640 13de 	movw	r3, #2526	@ 0x9de
 8001a90:	2200      	movs	r2, #0
 8001a92:	482d      	ldr	r0, [pc, #180]	@ (8001b48 <DoorControl_Init+0x128>)
 8001a94:	f004 f9c6 	bl	8005e24 <iprintf>
    printf("[DOOR] Moving flag: %u\r\n", moving_flag);
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	482b      	ldr	r0, [pc, #172]	@ (8001b4c <DoorControl_Init+0x12c>)
 8001a9e:	f004 f9c1 	bl	8005e24 <iprintf>
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
           abs((int)door->current_pos - DOOR_POS_OPEN),
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
 8001aa6:	4619      	mov	r1, r3
           abs((int)door->current_pos - DOOR_POS_CLOSED));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	885b      	ldrh	r3, [r3, #2]
 8001aac:	f6a3 13de 	subw	r3, r3, #2526	@ 0x9de
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bfb8      	it	lt
 8001ab4:	425b      	neglt	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4825      	ldr	r0, [pc, #148]	@ (8001b50 <DoorControl_Init+0x130>)
 8001aba:	f004 f9b3 	bl	8005e24 <iprintf>
    
    /* 处理位置环绕：4093-4095接近0 */
    if (door->current_pos > 4090) {
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	885b      	ldrh	r3, [r3, #2]
 8001ac2:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d908      	bls.n	8001adc <DoorControl_Init+0xbc>
        printf("[DOOR] Position wrap-around detected (%u -> 0)\r\n", door->current_pos);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4820      	ldr	r0, [pc, #128]	@ (8001b54 <DoorControl_Init+0x134>)
 8001ad2:	f004 f9a7 	bl	8005e24 <iprintf>
        door->current_pos = 0;  // 修正为0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	805a      	strh	r2, [r3, #2]
    }
    
    /* 判断初始状态 */
    if (moving_flag) {
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <DoorControl_Init+0xd8>
        /* 正在移动，无法确定方向，默认认为在关门 */
        printf("[DOOR] Motor is moving at startup, assuming closing...\r\n");
 8001ae2:	481d      	ldr	r0, [pc, #116]	@ (8001b58 <DoorControl_Init+0x138>)
 8001ae4:	f004 fa06 	bl	8005ef4 <puts>
        door->state = DOOR_STATE_CLOSING;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2203      	movs	r2, #3
 8001aec:	705a      	strb	r2, [r3, #1]
        door->target_pos = DOOR_POS_CLOSED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001af4:	809a      	strh	r2, [r3, #4]
 8001af6:	e00f      	b.n	8001b18 <DoorControl_Init+0xf8>
    } else {
        /* 静止状态，默认认为是关闭的 */
        door->state = DOOR_STATE_CLOSED;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	705a      	strb	r2, [r3, #1]
        door->target_pos = DOOR_POS_CLOSED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001b04:	809a      	strh	r2, [r3, #4]
        printf("[DOOR] Motor is stopped, assuming door is closed\r\n");
 8001b06:	4815      	ldr	r0, [pc, #84]	@ (8001b5c <DoorControl_Init+0x13c>)
 8001b08:	f004 f9f4 	bl	8005ef4 <puts>
        
        /* 为了安全，发送一次关门命令确保门关闭 */
        servo_set_position(servo_id, DOOR_POS_CLOSED);
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd09 	bl	800252a <servo_set_position>
    }
    
    door->last_update_time = HAL_GetTick();
 8001b18:	f001 fdac 	bl	8003674 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]
    printf("[DOOR] Initial state: %s\r\n", DoorControl_GetStateName(door->state));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	785b      	ldrb	r3, [r3, #1]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fa94 	bl	8002054 <DoorControl_GetStateName>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480b      	ldr	r0, [pc, #44]	@ (8001b60 <DoorControl_Init+0x140>)
 8001b32:	f004 f977 	bl	8005e24 <iprintf>
    printf("[DOOR] Initialization complete\r\n");
 8001b36:	480b      	ldr	r0, [pc, #44]	@ (8001b64 <DoorControl_Init+0x144>)
 8001b38:	f004 f9dc 	bl	8005ef4 <puts>
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	0800727c 	.word	0x0800727c
 8001b48:	080072b8 	.word	0x080072b8
 8001b4c:	080072f4 	.word	0x080072f4
 8001b50:	08007310 	.word	0x08007310
 8001b54:	08007348 	.word	0x08007348
 8001b58:	0800737c 	.word	0x0800737c
 8001b5c:	080073b4 	.word	0x080073b4
 8001b60:	080073e8 	.word	0x080073e8
 8001b64:	08007404 	.word	0x08007404

08001b68 <DoorControl_Open>:

/**
 * @brief 开门命令
 */
void DoorControl_Open(DoorControl_t *door) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    printf("\r\n[DOOR_DEBUG] ===== OPEN COMMAND =====\r\n");
 8001b70:	482e      	ldr	r0, [pc, #184]	@ (8001c2c <DoorControl_Open+0xc4>)
 8001b72:	f004 f9bf 	bl	8005ef4 <puts>
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fa6a 	bl	8002054 <DoorControl_GetStateName>
 8001b80:	4601      	mov	r1, r0
           DoorControl_GetStateName(door->state), door->current_pos);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001b86:	461a      	mov	r2, r3
 8001b88:	4829      	ldr	r0, [pc, #164]	@ (8001c30 <DoorControl_Open+0xc8>)
 8001b8a:	f004 f94b 	bl	8005e24 <iprintf>
    
    if (door->state == DOOR_STATE_CLOSED || door->state == DOOR_STATE_CLOSING) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	785b      	ldrb	r3, [r3, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <DoorControl_Open+0x36>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d137      	bne.n	8001c0e <DoorControl_Open+0xa6>
        printf("[CMD] Sending OPEN command (target: %u)\r\n", DOOR_POS_OPEN);
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4824      	ldr	r0, [pc, #144]	@ (8001c34 <DoorControl_Open+0xcc>)
 8001ba2:	f004 f93f 	bl	8005e24 <iprintf>
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
               door->current_pos, DOOR_POS_OPEN, 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001baa:	4619      	mov	r1, r3
               (int)DOOR_POS_OPEN - (int)door->current_pos);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001bb0:	425b      	negs	r3, r3
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4820      	ldr	r0, [pc, #128]	@ (8001c38 <DoorControl_Open+0xd0>)
 8001bb6:	f004 f935 	bl	8005e24 <iprintf>
        
        /* 使用循环延时避免阻塞 */
        for(volatile int i = 0; i < 50000; i++);  // 短延时
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e002      	b.n	8001bc6 <DoorControl_Open+0x5e>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	ddf7      	ble.n	8001bc0 <DoorControl_Open+0x58>
        servo_set_position(door->servo_id, DOOR_POS_OPEN);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fca7 	bl	800252a <servo_set_position>
        for(volatile int i = 0; i < 50000; i++);  // 给舵机时间处理命令
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	e002      	b.n	8001be8 <DoorControl_Open+0x80>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	ddf7      	ble.n	8001be2 <DoorControl_Open+0x7a>
        
        door->target_pos = DOOR_POS_OPEN;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	809a      	strh	r2, [r3, #4]
        door->state = DOOR_STATE_OPENING;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
        
        printf("[DOOR_DEBUG] State changed to OPENING at tick %lu\r\n", HAL_GetTick());
 8001bfe:	f001 fd39 	bl	8003674 <HAL_GetTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4619      	mov	r1, r3
 8001c06:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <DoorControl_Open+0xd4>)
 8001c08:	f004 f90c 	bl	8005e24 <iprintf>
 8001c0c:	e00a      	b.n	8001c24 <DoorControl_Open+0xbc>
    } else {
        printf("[CMD] Cannot open - current state: %s\r\n", 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	785b      	ldrb	r3, [r3, #1]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fa1e 	bl	8002054 <DoorControl_GetStateName>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4808      	ldr	r0, [pc, #32]	@ (8001c40 <DoorControl_Open+0xd8>)
 8001c1e:	f004 f901 	bl	8005e24 <iprintf>
               DoorControl_GetStateName(door->state));
    }
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	08007424 	.word	0x08007424
 8001c30:	08007450 	.word	0x08007450
 8001c34:	08007484 	.word	0x08007484
 8001c38:	080074b0 	.word	0x080074b0
 8001c3c:	080074e8 	.word	0x080074e8
 8001c40:	0800751c 	.word	0x0800751c

08001c44 <DoorControl_Close>:

/**
 * @brief 关门命令
 */
void DoorControl_Close(DoorControl_t *door) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    printf("\r\n[DOOR_DEBUG] ===== CLOSE COMMAND =====\r\n");
 8001c4c:	4831      	ldr	r0, [pc, #196]	@ (8001d14 <DoorControl_Close+0xd0>)
 8001c4e:	f004 f951 	bl	8005ef4 <puts>
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f9fc 	bl	8002054 <DoorControl_GetStateName>
 8001c5c:	4601      	mov	r1, r0
           DoorControl_GetStateName(door->state), door->current_pos);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001c62:	461a      	mov	r2, r3
 8001c64:	482c      	ldr	r0, [pc, #176]	@ (8001d18 <DoorControl_Close+0xd4>)
 8001c66:	f004 f8dd 	bl	8005e24 <iprintf>
    
    if (door->state == DOOR_STATE_OPEN || door->state == DOOR_STATE_OPENING) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <DoorControl_Close+0x36>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d13d      	bne.n	8001cf6 <DoorControl_Close+0xb2>
        printf("[CMD] Sending CLOSE command (target: %u)\r\n", DOOR_POS_CLOSED);
 8001c7a:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001c7e:	4827      	ldr	r0, [pc, #156]	@ (8001d1c <DoorControl_Close+0xd8>)
 8001c80:	f004 f8d0 	bl	8005e24 <iprintf>
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
               door->current_pos, DOOR_POS_CLOSED, 
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001c88:	4619      	mov	r1, r3
               (int)DOOR_POS_CLOSED - (int)door->current_pos);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001c8e:	f5c3 631d 	rsb	r3, r3, #2512	@ 0x9d0
 8001c92:	330e      	adds	r3, #14
 8001c94:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001c98:	4821      	ldr	r0, [pc, #132]	@ (8001d20 <DoorControl_Close+0xdc>)
 8001c9a:	f004 f8c3 	bl	8005e24 <iprintf>
        
        /* 使用循环延时避免阻塞 */
        for(volatile int i = 0; i < 50000; i++);  // 短延时
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e002      	b.n	8001caa <DoorControl_Close+0x66>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	ddf7      	ble.n	8001ca4 <DoorControl_Close+0x60>
        servo_set_position(door->servo_id, DOOR_POS_CLOSED);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fc34 	bl	800252a <servo_set_position>
        for(volatile int i = 0; i < 50000; i++);  // 给舵机时间处理命令
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	e002      	b.n	8001cce <DoorControl_Close+0x8a>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	ddf7      	ble.n	8001cc8 <DoorControl_Close+0x84>
        
        door->target_pos = DOOR_POS_CLOSED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001cde:	809a      	strh	r2, [r3, #4]
        door->state = DOOR_STATE_CLOSING;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	705a      	strb	r2, [r3, #1]
        
        printf("[DOOR_DEBUG] State changed to CLOSING at tick %lu\r\n", HAL_GetTick());
 8001ce6:	f001 fcc5 	bl	8003674 <HAL_GetTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	480d      	ldr	r0, [pc, #52]	@ (8001d24 <DoorControl_Close+0xe0>)
 8001cf0:	f004 f898 	bl	8005e24 <iprintf>
 8001cf4:	e00a      	b.n	8001d0c <DoorControl_Close+0xc8>
    } else {
        printf("[CMD] Cannot close - current state: %s\r\n", 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	785b      	ldrb	r3, [r3, #1]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f9aa 	bl	8002054 <DoorControl_GetStateName>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4808      	ldr	r0, [pc, #32]	@ (8001d28 <DoorControl_Close+0xe4>)
 8001d06:	f004 f88d 	bl	8005e24 <iprintf>
               DoorControl_GetStateName(door->state));
    }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	08007544 	.word	0x08007544
 8001d18:	08007450 	.word	0x08007450
 8001d1c:	08007570 	.word	0x08007570
 8001d20:	080074b0 	.word	0x080074b0
 8001d24:	0800759c 	.word	0x0800759c
 8001d28:	080075d0 	.word	0x080075d0

08001d2c <DoorControl_Update>:

/**
 * @brief 更新门控状态（核心状态机 - 使用移动标志）
 */
void DoorControl_Update(DoorControl_t *door) {
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	b091      	sub	sp, #68	@ 0x44
 8001d30:	af04      	add	r7, sp, #16
 8001d32:	6078      	str	r0, [r7, #4]
    update_count++;
 8001d34:	4ba3      	ldr	r3, [pc, #652]	@ (8001fc4 <DoorControl_Update+0x298>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4aa2      	ldr	r2, [pc, #648]	@ (8001fc4 <DoorControl_Update+0x298>)
 8001d3c:	6013      	str	r3, [r2, #0]
    
    /* 读取当前位置 - 带重试和验证 */
    uint8_t rx_data[2];
    uint16_t new_pos = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    bool pos_valid = false;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    for (int retry = 0; retry < 3; retry++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d4c:	e029      	b.n	8001da2 <DoorControl_Update+0x76>
        if (servo_read_reg(door->servo_id, 0x38, 2, rx_data) == 1) {  /* 返回1表示成功 */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7818      	ldrb	r0, [r3, #0]
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2202      	movs	r2, #2
 8001d58:	2138      	movs	r1, #56	@ 0x38
 8001d5a:	f000 fb08 	bl	800236e <servo_read_reg>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d110      	bne.n	8001d86 <DoorControl_Update+0x5a>
            new_pos = rx_data[0] | (rx_data[1] << 8);
 8001d64:	7d3b      	ldrb	r3, [r7, #20]
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	7d7b      	ldrb	r3, [r7, #21]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            
            /* 验证位置值是否合理（0-4095范围） */
            if (new_pos <= 4095) {
 8001d76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d7c:	d203      	bcs.n	8001d86 <DoorControl_Update+0x5a>
                pos_valid = true;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                break;
 8001d84:	e010      	b.n	8001da8 <DoorControl_Update+0x7c>
            }
        }
        for(volatile int i = 0; i < 20000; i++);  /* 短暂延时后重试 */
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e002      	b.n	8001d92 <DoorControl_Update+0x66>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	ddf7      	ble.n	8001d8c <DoorControl_Update+0x60>
    for (int retry = 0; retry < 3; retry++) {
 8001d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9e:	3301      	adds	r3, #1
 8001da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	ddd2      	ble.n	8001d4e <DoorControl_Update+0x22>
    }
    
    uint16_t old_pos = door->current_pos;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	83fb      	strh	r3, [r7, #30]
    if (pos_valid) {
 8001dae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <DoorControl_Update+0xa4>
        door->current_pos = new_pos;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001dba:	805a      	strh	r2, [r3, #2]
        
        /* 处理位置环绕 */
        if (door->current_pos > 4090) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	885b      	ldrh	r3, [r3, #2]
 8001dc0:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d908      	bls.n	8001dda <DoorControl_Update+0xae>
            door->current_pos = 0;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	805a      	strh	r2, [r3, #2]
 8001dce:	e004      	b.n	8001dda <DoorControl_Update+0xae>
        }
    } else {
        printf("[DOOR] Warning: Failed to read position, keeping old value %u\r\n", old_pos);
 8001dd0:	8bfb      	ldrh	r3, [r7, #30]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	487c      	ldr	r0, [pc, #496]	@ (8001fc8 <DoorControl_Update+0x29c>)
 8001dd6:	f004 f825 	bl	8005e24 <iprintf>
    }
    
    /* 读取移动标志 - 带重试和验证 */
    uint8_t moving_flag = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool flag_valid = false;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    for (int retry = 0; retry < 3; retry++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	e036      	b.n	8001e5a <DoorControl_Update+0x12e>
        uint8_t temp_flag;
        if (servo_read_reg(door->servo_id, 0x42, 1, &temp_flag) == 1) {  /* 返回1表示成功 */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7818      	ldrb	r0, [r3, #0]
 8001df0:	f107 030f 	add.w	r3, r7, #15
 8001df4:	2201      	movs	r2, #1
 8001df6:	2142      	movs	r1, #66	@ 0x42
 8001df8:	f000 fab9 	bl	800236e <servo_read_reg>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d11d      	bne.n	8001e3e <DoorControl_Update+0x112>
            /* 验证标志值（应该是0或1） */
            if (temp_flag <= 1) {
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d806      	bhi.n	8001e16 <DoorControl_Update+0xea>
                moving_flag = temp_flag;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                flag_valid = true;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                break;
 8001e14:	e024      	b.n	8001e60 <DoorControl_Update+0x134>
            } else if (temp_flag & 0x01) {
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <DoorControl_Update+0x112>
                /* 如果是其他位被设置，只看最低位 */
                moving_flag = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                flag_valid = true;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                printf("[DOOR] Moving flag raw value: 0x%02X, using bit 0: %d\r\n", temp_flag, moving_flag);
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e34:	461a      	mov	r2, r3
 8001e36:	4865      	ldr	r0, [pc, #404]	@ (8001fcc <DoorControl_Update+0x2a0>)
 8001e38:	f003 fff4 	bl	8005e24 <iprintf>
                break;
 8001e3c:	e010      	b.n	8001e60 <DoorControl_Update+0x134>
            }
        }
        for(volatile int i = 0; i < 20000; i++);  /* 短暂延时后重试 */
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	e002      	b.n	8001e4a <DoorControl_Update+0x11e>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	3301      	adds	r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e50:	4293      	cmp	r3, r2
 8001e52:	ddf7      	ble.n	8001e44 <DoorControl_Update+0x118>
    for (int retry = 0; retry < 3; retry++) {
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	3301      	adds	r3, #1
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	ddc5      	ble.n	8001dec <DoorControl_Update+0xc0>
    }
    
    if (!flag_valid) {
 8001e60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <DoorControl_Update+0x14e>
        printf("[DOOR] Warning: Failed to read moving flag, assuming stopped\r\n");
 8001e6e:	4858      	ldr	r0, [pc, #352]	@ (8001fd0 <DoorControl_Update+0x2a4>)
 8001e70:	f004 f840 	bl	8005ef4 <puts>
        moving_flag = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    /* 调试输出 - 每500ms或状态变化时 */
    static uint32_t last_debug_time = 0;
    static uint8_t last_moving_flag = 0xFF;
    uint32_t now = HAL_GetTick();
 8001e7a:	f001 fbfb 	bl	8003674 <HAL_GetTick>
 8001e7e:	61b8      	str	r0, [r7, #24]
    
    if ((now - last_debug_time >= 500) || 
 8001e80:	4b54      	ldr	r3, [pc, #336]	@ (8001fd4 <DoorControl_Update+0x2a8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e8c:	d20f      	bcs.n	8001eae <DoorControl_Update+0x182>
        (moving_flag != last_moving_flag) ||
 8001e8e:	4b52      	ldr	r3, [pc, #328]	@ (8001fd8 <DoorControl_Update+0x2ac>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
    if ((now - last_debug_time >= 500) || 
 8001e92:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d109      	bne.n	8001eae <DoorControl_Update+0x182>
        (abs((int)door->current_pos - (int)old_pos) > 100)) {
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	885b      	ldrh	r3, [r3, #2]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	8bfb      	ldrh	r3, [r7, #30]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bfb8      	it	lt
 8001ea8:	425b      	neglt	r3, r3
        (moving_flag != last_moving_flag) ||
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	dd22      	ble.n	8001ef4 <DoorControl_Update+0x1c8>
        
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	785b      	ldrb	r3, [r3, #1]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f8ce 	bl	8002054 <DoorControl_GetStateName>
 8001eb8:	4601      	mov	r1, r0
               now, DoorControl_GetStateName(door->state),
               door->current_pos, door->target_pos, 
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	885b      	ldrh	r3, [r3, #2]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001ebe:	461d      	mov	r5, r3
               door->current_pos, door->target_pos, 
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	889b      	ldrh	r3, [r3, #4]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
               moving_flag, (int)door->current_pos - (int)old_pos);
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	8852      	ldrh	r2, [r2, #2]
 8001ece:	4614      	mov	r4, r2
 8001ed0:	8bfa      	ldrh	r2, [r7, #30]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001ed2:	1aa2      	subs	r2, r4, r2
 8001ed4:	9202      	str	r2, [sp, #8]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	9000      	str	r0, [sp, #0]
 8001eda:	462b      	mov	r3, r5
 8001edc:	460a      	mov	r2, r1
 8001ede:	69b9      	ldr	r1, [r7, #24]
 8001ee0:	483e      	ldr	r0, [pc, #248]	@ (8001fdc <DoorControl_Update+0x2b0>)
 8001ee2:	f003 ff9f 	bl	8005e24 <iprintf>
        
        last_debug_time = now;
 8001ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fd4 <DoorControl_Update+0x2a8>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6013      	str	r3, [r2, #0]
        last_moving_flag = moving_flag;
 8001eec:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd8 <DoorControl_Update+0x2ac>)
 8001eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef2:	7013      	strb	r3, [r2, #0]
    }
    
    /* 保存旧状态 */
    DoorState_t old_state = door->state;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	785b      	ldrb	r3, [r3, #1]
 8001ef8:	75fb      	strb	r3, [r7, #23]
    
    /* 状态机逻辑 */
    switch (door->state) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d87b      	bhi.n	8001ffa <DoorControl_Update+0x2ce>
 8001f02:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <DoorControl_Update+0x1dc>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001ffb 	.word	0x08001ffb
 8001f0c:	08001f19 	.word	0x08001f19
 8001f10:	08001ffb 	.word	0x08001ffb
 8001f14:	08001f6d 	.word	0x08001f6d
            // 命令在外部发送
            break;
            
        case DOOR_STATE_OPENING:
            /* 正在开门 - 检查是否停止 */
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f18:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
                   moving_flag, door->current_pos, door->target_pos,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	885b      	ldrh	r3, [r3, #2]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f20:	461d      	mov	r5, r3
                   moving_flag, door->current_pos, door->target_pos,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	889b      	ldrh	r3, [r3, #4]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f26:	461e      	mov	r6, r3
                   HAL_GetTick() - door->last_update_time);
 8001f28:	f001 fba4 	bl	8003674 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	4633      	mov	r3, r6
 8001f38:	462a      	mov	r2, r5
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	4828      	ldr	r0, [pc, #160]	@ (8001fe0 <DoorControl_Update+0x2b4>)
 8001f3e:	f003 ff71 	bl	8005e24 <iprintf>
            
            if (!moving_flag) {
 8001f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d13a      	bne.n	8001fc0 <DoorControl_Update+0x294>
                /* 舵机停止了，假设门已开 */
                door->state = DOOR_STATE_OPEN;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	705a      	strb	r2, [r3, #1]
                printf("[STATE] OPENING -> OPEN (motor stopped at pos %u)\r\n", door->current_pos);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	885b      	ldrh	r3, [r3, #2]
 8001f54:	4619      	mov	r1, r3
 8001f56:	4823      	ldr	r0, [pc, #140]	@ (8001fe4 <DoorControl_Update+0x2b8>)
 8001f58:	f003 ff64 	bl	8005e24 <iprintf>
                printf("[DOOR_DEBUG] Door OPEN detected at tick %lu\r\n", HAL_GetTick());
 8001f5c:	f001 fb8a 	bl	8003674 <HAL_GetTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4619      	mov	r1, r3
 8001f64:	4820      	ldr	r0, [pc, #128]	@ (8001fe8 <DoorControl_Update+0x2bc>)
 8001f66:	f003 ff5d 	bl	8005e24 <iprintf>
            }
            break;
 8001f6a:	e029      	b.n	8001fc0 <DoorControl_Update+0x294>
            // 命令在外部发送
            break;
            
        case DOOR_STATE_CLOSING:
            /* 正在关门 - 检查是否停止 */
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f6c:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
                   moving_flag, door->current_pos, door->target_pos,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	885b      	ldrh	r3, [r3, #2]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f74:	461d      	mov	r5, r3
                   moving_flag, door->current_pos, door->target_pos,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	889b      	ldrh	r3, [r3, #4]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f7a:	461e      	mov	r6, r3
                   HAL_GetTick() - door->last_update_time);
 8001f7c:	f001 fb7a 	bl	8003674 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	4633      	mov	r3, r6
 8001f8c:	462a      	mov	r2, r5
 8001f8e:	4621      	mov	r1, r4
 8001f90:	4816      	ldr	r0, [pc, #88]	@ (8001fec <DoorControl_Update+0x2c0>)
 8001f92:	f003 ff47 	bl	8005e24 <iprintf>
            
            if (!moving_flag) {
 8001f96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12c      	bne.n	8001ff8 <DoorControl_Update+0x2cc>
                /* 舵机停止了，假设门已关 */
                door->state = DOOR_STATE_CLOSED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	705a      	strb	r2, [r3, #1]
                printf("[STATE] CLOSING -> CLOSED (motor stopped at pos %u)\r\n", door->current_pos);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	885b      	ldrh	r3, [r3, #2]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4811      	ldr	r0, [pc, #68]	@ (8001ff0 <DoorControl_Update+0x2c4>)
 8001fac:	f003 ff3a 	bl	8005e24 <iprintf>
                printf("[DOOR_DEBUG] Door CLOSED detected at tick %lu\r\n", HAL_GetTick());
 8001fb0:	f001 fb60 	bl	8003674 <HAL_GetTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480e      	ldr	r0, [pc, #56]	@ (8001ff4 <DoorControl_Update+0x2c8>)
 8001fba:	f003 ff33 	bl	8005e24 <iprintf>
            }
            break;
 8001fbe:	e01b      	b.n	8001ff8 <DoorControl_Update+0x2cc>
            break;
 8001fc0:	bf00      	nop
 8001fc2:	e01a      	b.n	8001ffa <DoorControl_Update+0x2ce>
 8001fc4:	200006ec 	.word	0x200006ec
 8001fc8:	080075fc 	.word	0x080075fc
 8001fcc:	0800763c 	.word	0x0800763c
 8001fd0:	08007674 	.word	0x08007674
 8001fd4:	200006f0 	.word	0x200006f0
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	080076b4 	.word	0x080076b4
 8001fe0:	080076f8 	.word	0x080076f8
 8001fe4:	08007740 	.word	0x08007740
 8001fe8:	08007774 	.word	0x08007774
 8001fec:	080077a4 	.word	0x080077a4
 8001ff0:	080077ec 	.word	0x080077ec
 8001ff4:	08007824 	.word	0x08007824
            break;
 8001ff8:	bf00      	nop
    }
    
    /* 状态变化时输出 */
    if (door->state != old_state) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	7dfa      	ldrb	r2, [r7, #23]
 8002000:	429a      	cmp	r2, r3
 8002002:	d00f      	beq.n	8002024 <DoorControl_Update+0x2f8>
        printf("\r\n[TRANSITION] %s -> %s\r\n", 
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f824 	bl	8002054 <DoorControl_GetStateName>
 800200c:	4604      	mov	r4, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f81e 	bl	8002054 <DoorControl_GetStateName>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	4621      	mov	r1, r4
 800201e:	4806      	ldr	r0, [pc, #24]	@ (8002038 <DoorControl_Update+0x30c>)
 8002020:	f003 ff00 	bl	8005e24 <iprintf>
               DoorControl_GetStateName(old_state),
               DoorControl_GetStateName(door->state));
    }
    
    door->last_update_time = HAL_GetTick();
 8002024:	f001 fb26 	bl	8003674 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]
}
 800202e:	bf00      	nop
 8002030:	3734      	adds	r7, #52	@ 0x34
 8002032:	46bd      	mov	sp, r7
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002036:	bf00      	nop
 8002038:	08007854 	.word	0x08007854

0800203c <DoorControl_GetState>:

/**
 * @brief 获取当前状态
 */
DoorState_t DoorControl_GetState(DoorControl_t *door) {
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
    return door->state;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	785b      	ldrb	r3, [r3, #1]
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
	...

08002054 <DoorControl_GetStateName>:

/**
 * @brief 获取状态名称字符串
 */
const char* DoorControl_GetStateName(DoorState_t state) {
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d813      	bhi.n	800208c <DoorControl_GetStateName+0x38>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <DoorControl_GetStateName+0x18>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	0800207d 	.word	0x0800207d
 8002070:	08002081 	.word	0x08002081
 8002074:	08002085 	.word	0x08002085
 8002078:	08002089 	.word	0x08002089
        case DOOR_STATE_CLOSED:  return "CLOSED";
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <DoorControl_GetStateName+0x44>)
 800207e:	e006      	b.n	800208e <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_OPENING: return "OPENING";
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <DoorControl_GetStateName+0x48>)
 8002082:	e004      	b.n	800208e <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_OPEN:    return "OPEN";
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <DoorControl_GetStateName+0x4c>)
 8002086:	e002      	b.n	800208e <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_CLOSING: return "CLOSING";
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <DoorControl_GetStateName+0x50>)
 800208a:	e000      	b.n	800208e <DoorControl_GetStateName+0x3a>
        default: return "UNKNOWN";
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <DoorControl_GetStateName+0x54>)
    }
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	08007870 	.word	0x08007870
 800209c:	08007878 	.word	0x08007878
 80020a0:	08007880 	.word	0x08007880
 80020a4:	08007888 	.word	0x08007888
 80020a8:	08007890 	.word	0x08007890

080020ac <calculate_checksum>:
#include <stdio.h>   // 用于printf调试

static UART_HandleTypeDef *servo_uart;  // USART句柄

// 函数：计算校验和
static uint8_t calculate_checksum(uint8_t *packet, uint8_t len) {
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 80020bc:	2302      	movs	r3, #2
 80020be:	73bb      	strb	r3, [r7, #14]
 80020c0:	e009      	b.n	80020d6 <calculate_checksum+0x2a>
        sum += packet[i];
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4413      	add	r3, r2
 80020ce:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 80020d0:	7bbb      	ldrb	r3, [r7, #14]
 80020d2:	3301      	adds	r3, #1
 80020d4:	73bb      	strb	r3, [r7, #14]
 80020d6:	7bba      	ldrb	r2, [r7, #14]
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	3b01      	subs	r3, #1
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf0      	blt.n	80020c2 <calculate_checksum+0x16>
    }
    return ~sum;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <send_packet>:

// 函数：发送包
static void send_packet(uint8_t *packet, uint8_t len) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(servo_uart, packet, len, 50);  // 50ms超时，避免永久阻塞
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <send_packet+0x24>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	b29a      	uxth	r2, r3
 8002104:	2332      	movs	r3, #50	@ 0x32
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f002 fcbe 	bl	8004a88 <HAL_UART_Transmit>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200006f4 	.word	0x200006f4

08002118 <receive_packet>:

// 函数：接收包（简单阻塞式，假设响应快速；实际可加超时/DMA）
static HAL_StatusTypeDef receive_packet(uint8_t *rx_packet, uint8_t expected_len) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Receive(servo_uart, rx_packet, expected_len, 100);  // 返回状态，超时100ms
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <receive_packet+0x28>)
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	b29a      	uxth	r2, r3
 800212c:	2364      	movs	r3, #100	@ 0x64
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f002 fd35 	bl	8004b9e <HAL_UART_Receive>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200006f4 	.word	0x200006f4

08002144 <servo_init>:

// 初始化（默认波特率1M，无需设置寄存器0x06，因为初始值0=1M）
void servo_init(UART_HandleTypeDef *huart) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    servo_uart = huart;
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <servo_init+0x28>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
    // 可在此PING舵机确认连接
    servo_ping(SERVO_DEFAULT_ID);
 8002152:	2001      	movs	r0, #1
 8002154:	f000 f80c 	bl	8002170 <servo_ping>
    
    // 设置默认最大速度
    servo_set_speed(SERVO_DEFAULT_ID, 4095);  // 最大速度
 8002158:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800215c:	2001      	movs	r0, #1
 800215e:	f000 f9c8 	bl	80024f2 <servo_set_speed>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200006f4 	.word	0x200006f4

08002170 <servo_ping>:

// PING
uint8_t servo_ping(uint8_t id) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
    uint8_t packet[6] = {0xFF, 0xFF, id, 0x02, SERVO_INST_PING, 0x00};
 800217a:	23ff      	movs	r3, #255	@ 0xff
 800217c:	743b      	strb	r3, [r7, #16]
 800217e:	23ff      	movs	r3, #255	@ 0xff
 8002180:	747b      	strb	r3, [r7, #17]
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	74bb      	strb	r3, [r7, #18]
 8002186:	2302      	movs	r3, #2
 8002188:	74fb      	strb	r3, [r7, #19]
 800218a:	2301      	movs	r3, #1
 800218c:	753b      	strb	r3, [r7, #20]
 800218e:	2300      	movs	r3, #0
 8002190:	757b      	strb	r3, [r7, #21]
    packet[5] = calculate_checksum(packet, 6);
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	2106      	movs	r1, #6
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff87 	bl	80020ac <calculate_checksum>
 800219e:	4603      	mov	r3, r0
 80021a0:	757b      	strb	r3, [r7, #21]
    send_packet(packet, 6);
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	2106      	movs	r1, #6
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ffa1 	bl	80020f0 <send_packet>

    uint8_t rx_packet[6];
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	2106      	movs	r1, #6
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ffaf 	bl	8002118 <receive_packet>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d111      	bne.n	80021e4 <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80021c0:	7a3b      	ldrb	r3, [r7, #8]
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 80021c2:	2bff      	cmp	r3, #255	@ 0xff
 80021c4:	d10e      	bne.n	80021e4 <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80021c6:	7a7b      	ldrb	r3, [r7, #9]
 80021c8:	2bff      	cmp	r3, #255	@ 0xff
 80021ca:	d10b      	bne.n	80021e4 <servo_ping+0x74>
 80021cc:	7abb      	ldrb	r3, [r7, #10]
 80021ce:	79fa      	ldrb	r2, [r7, #7]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 80021d4:	7afb      	ldrb	r3, [r7, #11]
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d104      	bne.n	80021e4 <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 80021da:	7b3b      	ldrb	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <servo_ping+0x74>
        return 1;  // 成功
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <servo_ping+0x76>
    }
    return 0;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <servo_write_reg>:

// 写寄存器（低字节在前）
void servo_write_reg(uint8_t id, uint8_t reg_addr, uint8_t *data, uint8_t data_len) {
 80021ee:	b590      	push	{r4, r7, lr}
 80021f0:	b0c7      	sub	sp, #284	@ 0x11c
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4604      	mov	r4, r0
 80021f6:	4608      	mov	r0, r1
 80021f8:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80021fc:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8002200:	600a      	str	r2, [r1, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002208:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800220c:	4622      	mov	r2, r4
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002214:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002218:	4602      	mov	r2, r0
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002220:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002224:	460a      	mov	r2, r1
 8002226:	701a      	strb	r2, [r3, #0]
    uint8_t packet[256];
    uint8_t idx = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx++] = 0xFF;
 800222e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002238:	461a      	mov	r2, r3
 800223a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800223e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002242:	21ff      	movs	r1, #255	@ 0xff
 8002244:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0xFF;
 8002246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002250:	461a      	mov	r2, r3
 8002252:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800225a:	21ff      	movs	r1, #255	@ 0xff
 800225c:	5499      	strb	r1, [r3, r2]
    packet[idx++] = id;
 800225e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002268:	4619      	mov	r1, r3
 800226a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800226e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002272:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002276:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	545a      	strb	r2, [r3, r1]
    packet[idx++] = data_len + 3;  // Length = Instr + Addr + Data
 800227e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002288:	461a      	mov	r2, r3
 800228a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800228e:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	3303      	adds	r3, #3
 8002296:	b2d9      	uxtb	r1, r3
 8002298:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800229c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022a0:	5499      	strb	r1, [r3, r2]
    packet[idx++] = SERVO_INST_WRITE;
 80022a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80022ac:	461a      	mov	r2, r3
 80022ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022b6:	2103      	movs	r1, #3
 80022b8:	5499      	strb	r1, [r3, r2]
    packet[idx++] = reg_addr;
 80022ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80022c4:	4619      	mov	r1, r3
 80022c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022ce:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80022d2:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	545a      	strb	r2, [r3, r1]
    memcpy(&packet[idx], data, data_len);
 80022da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022de:	f107 0214 	add.w	r2, r7, #20
 80022e2:	18d0      	adds	r0, r2, r3
 80022e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e8:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	f003 ff79 	bl	80061ee <memcpy>
    idx += data_len;
 80022fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002300:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002304:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx] = calculate_checksum(packet, idx + 1);
 8002310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002314:	3301      	adds	r3, #1
 8002316:	b2da      	uxtb	r2, r3
 8002318:	f897 4117 	ldrb.w	r4, [r7, #279]	@ 0x117
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fec2 	bl	80020ac <calculate_checksum>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002334:	551a      	strb	r2, [r3, r4]
    send_packet(packet, idx + 1);
 8002336:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800233a:	3301      	adds	r3, #1
 800233c:	b2da      	uxtb	r2, r3
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fed3 	bl	80020f0 <send_packet>

    // 忽略响应（若非广播），实际可检查
    if (id != SERVO_BROADCAST_ID) {
 800234a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800234e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2bfe      	cmp	r3, #254	@ 0xfe
 8002356:	d005      	beq.n	8002364 <servo_write_reg+0x176>
        uint8_t rx_packet[6];
        receive_packet(rx_packet, 6);  // 预期响应Length=2, Error+Checksum
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2106      	movs	r1, #6
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff feda 	bl	8002118 <receive_packet>
    }
}
 8002364:	bf00      	nop
 8002366:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800236a:	46bd      	mov	sp, r7
 800236c:	bd90      	pop	{r4, r7, pc}

0800236e <servo_read_reg>:

// 读寄存器  
uint8_t servo_read_reg(uint8_t id, uint8_t reg_addr, uint8_t data_len, uint8_t *rx_data) {
 800236e:	b590      	push	{r4, r7, lr}
 8002370:	b0c7      	sub	sp, #284	@ 0x11c
 8002372:	af00      	add	r7, sp, #0
 8002374:	4604      	mov	r4, r0
 8002376:	4608      	mov	r0, r1
 8002378:	4611      	mov	r1, r2
 800237a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800237e:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002388:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800238c:	4622      	mov	r2, r4
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002394:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002398:	4602      	mov	r2, r0
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023a0:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80023a4:	460a      	mov	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
    uint8_t packet[8] = {0xFF, 0xFF, id, 0x04, SERVO_INST_READ, reg_addr, data_len, 0x00};
 80023a8:	23ff      	movs	r3, #255	@ 0xff
 80023aa:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80023ae:	23ff      	movs	r3, #255	@ 0xff
 80023b0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80023b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023b8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80023c2:	2304      	movs	r3, #4
 80023c4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80023c8:	2302      	movs	r3, #2
 80023ca:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
 80023ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023d2:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
 80023dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023e0:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 80023ea:	2300      	movs	r3, #0
 80023ec:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    packet[7] = calculate_checksum(packet, 8);
 80023f0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023f4:	2108      	movs	r1, #8
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fe58 	bl	80020ac <calculate_checksum>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    send_packet(packet, 8);
 8002402:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002406:	2108      	movs	r1, #8
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fe71 	bl	80020f0 <send_packet>

    uint8_t expected_len = data_len + 6;  // FF FF ID Len Error Params... Checksum
 800240e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002412:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	3306      	adds	r3, #6
 800241a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t rx_packet[256];
    
    HAL_StatusTypeDef status = receive_packet(rx_packet, expected_len);
 800241e:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe75 	bl	8002118 <receive_packet>
 800242e:	4603      	mov	r3, r0
 8002430:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    if (status == HAL_OK) {
 8002434:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002438:	2b00      	cmp	r3, #0
 800243a:	d13f      	bne.n	80024bc <servo_read_reg+0x14e>
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 800243c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002440:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2bff      	cmp	r3, #255	@ 0xff
 8002448:	d138      	bne.n	80024bc <servo_read_reg+0x14e>
 800244a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800244e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	2bff      	cmp	r3, #255	@ 0xff
 8002456:	d131      	bne.n	80024bc <servo_read_reg+0x14e>
 8002458:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800245c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002460:	789b      	ldrb	r3, [r3, #2]
 8002462:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002466:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d125      	bne.n	80024bc <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 8002470:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002474:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	461a      	mov	r2, r3
 800247c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002480:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	3302      	adds	r3, #2
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8002488:	429a      	cmp	r2, r3
 800248a:	d117      	bne.n	80024bc <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 800248c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002490:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002494:	791b      	ldrb	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d110      	bne.n	80024bc <servo_read_reg+0x14e>
            memcpy(rx_data, &rx_packet[5], data_len);
 800249a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800249e:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	1d59      	adds	r1, r3, #5
 80024aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	f003 fe9b 	bl	80061ee <memcpy>
            return 1;  // 成功
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <servo_read_reg+0x150>
        }
    }
    return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}

080024c8 <servo_set_torque_enable>:

// 扭矩开关
void servo_set_torque_enable(uint8_t id, uint8_t enable) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	460a      	mov	r2, r1
 80024d2:	71fb      	strb	r3, [r7, #7]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71bb      	strb	r3, [r7, #6]
    uint8_t data = enable;
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	73fb      	strb	r3, [r7, #15]
    servo_write_reg(id, SERVO_REG_TORQUE_ENABLE, &data, 1);
 80024dc:	f107 020f 	add.w	r2, r7, #15
 80024e0:	79f8      	ldrb	r0, [r7, #7]
 80024e2:	2301      	movs	r3, #1
 80024e4:	2128      	movs	r1, #40	@ 0x28
 80024e6:	f7ff fe82 	bl	80021ee <servo_write_reg>
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <servo_set_speed>:

// 设置速度 (2字节，低在前)
void servo_set_speed(uint8_t id, int16_t speed) {
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	460a      	mov	r2, r1
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	4613      	mov	r3, r2
 8002500:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = speed & 0xFF;  // 低
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	733b      	strb	r3, [r7, #12]
    data[1] = (speed >> 8) & 0xFF;  // 高
 8002508:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800250c:	121b      	asrs	r3, r3, #8
 800250e:	b21b      	sxth	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_SPEED, data, 2);
 8002514:	f107 020c 	add.w	r2, r7, #12
 8002518:	79f8      	ldrb	r0, [r7, #7]
 800251a:	2302      	movs	r3, #2
 800251c:	212e      	movs	r1, #46	@ 0x2e
 800251e:	f7ff fe66 	bl	80021ee <servo_write_reg>
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <servo_set_position>:

// 设置位置 (2字节，低在前)
void servo_set_position(uint8_t id, int16_t position) {
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	460a      	mov	r2, r1
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	4613      	mov	r3, r2
 8002538:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = position & 0xFF;
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	733b      	strb	r3, [r7, #12]
    data[1] = (position >> 8) & 0xFF;
 8002540:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002544:	121b      	asrs	r3, r3, #8
 8002546:	b21b      	sxth	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_TARGET_POS, data, 2);
 800254c:	f107 020c 	add.w	r2, r7, #12
 8002550:	79f8      	ldrb	r0, [r7, #7]
 8002552:	2302      	movs	r3, #2
 8002554:	212a      	movs	r1, #42	@ 0x2a
 8002556:	f7ff fe4a 	bl	80021ee <servo_write_reg>
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <MX_DMA_Init+0x48>)
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <MX_DMA_Init+0x48>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6153      	str	r3, [r2, #20]
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <MX_DMA_Init+0x48>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2010      	movs	r0, #16
 8002588:	f001 f979 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800258c:	2010      	movs	r0, #16
 800258e:	f001 f992 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2011      	movs	r0, #17
 8002598:	f001 f971 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800259c:	2011      	movs	r0, #17
 800259e:	f001 f98a 	bl	80038b6 <HAL_NVIC_EnableIRQ>

}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c4:	4b38      	ldr	r3, [pc, #224]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a37      	ldr	r2, [pc, #220]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b35      	ldr	r3, [pc, #212]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	4b32      	ldr	r3, [pc, #200]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a31      	ldr	r2, [pc, #196]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b2f      	ldr	r3, [pc, #188]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a2b      	ldr	r2, [pc, #172]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b29      	ldr	r3, [pc, #164]	@ (80026a8 <MX_GPIO_Init+0xf8>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	2102      	movs	r1, #2
 8002610:	4826      	ldr	r0, [pc, #152]	@ (80026ac <MX_GPIO_Init+0xfc>)
 8002612:	f001 fda8 	bl	8004166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_SET);
 8002616:	2201      	movs	r2, #1
 8002618:	f241 1130 	movw	r1, #4400	@ 0x1130
 800261c:	4823      	ldr	r0, [pc, #140]	@ (80026ac <MX_GPIO_Init+0xfc>)
 800261e:	f001 fda2 	bl	8004166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002622:	2302      	movs	r3, #2
 8002624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002626:	2301      	movs	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2302      	movs	r3, #2
 8002630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	4619      	mov	r1, r3
 8002638:	481c      	ldr	r0, [pc, #112]	@ (80026ac <MX_GPIO_Init+0xfc>)
 800263a:	f001 fbf9 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA12 (Keyboard columns - output) */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12;
 800263e:	f241 1330 	movw	r3, #4400	@ 0x1130
 8002642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2302      	movs	r3, #2
 800264e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4619      	mov	r1, r3
 8002656:	4815      	ldr	r0, [pc, #84]	@ (80026ac <MX_GPIO_Init+0xfc>)
 8002658:	f001 fbea 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 (Keyboard row r4 - input with interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800265c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002662:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <MX_GPIO_Init+0x100>)
 8002664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002666:	2301      	movs	r3, #1
 8002668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4619      	mov	r1, r3
 8002670:	480e      	ldr	r0, [pc, #56]	@ (80026ac <MX_GPIO_Init+0xfc>)
 8002672:	f001 fbdd 	bl	8003e30 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2102      	movs	r1, #2
 800267a:	2028      	movs	r0, #40	@ 0x28
 800267c:	f001 f8ff 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002680:	2028      	movs	r0, #40	@ 0x28
 8002682:	f001 f918 	bl	80038b6 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002686:	2301      	movs	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2302      	movs	r3, #2
 8002690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	4619      	mov	r1, r3
 8002698:	4806      	ldr	r0, [pc, #24]	@ (80026b4 <MX_GPIO_Init+0x104>)
 800269a:	f001 fbc9 	bl	8003e30 <HAL_GPIO_Init>
  
  /* PB5 is configured by PhotoSensor_Init() as input with interrupt */

}
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010800 	.word	0x40010800
 80026b0:	10210000 	.word	0x10210000
 80026b4:	40010c00 	.word	0x40010c00

080026b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b08b      	sub	sp, #44	@ 0x2c
 80026bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026be:	f000 ff81 	bl	80035c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c2:	f000 f9a7 	bl	8002a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026c6:	f7ff ff73 	bl	80025b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80026ca:	f7ff ff4b 	bl	8002564 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80026ce:	f000 fdf5 	bl	80032bc <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80026d2:	f000 fd9f 	bl	8003214 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80026d6:	f000 fdc7 	bl	8003268 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  printf("\r\n=== SLAVE MCU - ELEVATOR CONTROL SYSTEM ===\r\n");
 80026da:	48a1      	ldr	r0, [pc, #644]	@ (8002960 <main+0x2a8>)
 80026dc:	f003 fc0a 	bl	8005ef4 <puts>
  printf("Full Control with Door Module Enabled\r\n");
 80026e0:	48a0      	ldr	r0, [pc, #640]	@ (8002964 <main+0x2ac>)
 80026e2:	f003 fc07 	bl	8005ef4 <puts>
  printf("Features: Cabin Calls + Photo Sensor + RS485 + Door Control\r\n\r\n");
 80026e6:	48a0      	ldr	r0, [pc, #640]	@ (8002968 <main+0x2b0>)
 80026e8:	f003 fc04 	bl	8005ef4 <puts>
  
  /* 初始化RS485通信 */
  rs485_init();
 80026ec:	f7fe fcbe 	bl	800106c <rs485_init>
  printf("[RS485] Initialized on USART2\r\n");
 80026f0:	489e      	ldr	r0, [pc, #632]	@ (800296c <main+0x2b4>)
 80026f2:	f003 fbff 	bl	8005ef4 <puts>
  
  /* 初始化键盘 - 中断模式 */
  Keyboard_Init();
 80026f6:	f7fe feeb 	bl	80014d0 <Keyboard_Init>
  printf("[KEYBOARD] Initialized (PA11 EXTI)\r\n");
 80026fa:	489d      	ldr	r0, [pc, #628]	@ (8002970 <main+0x2b8>)
 80026fc:	f003 fbfa 	bl	8005ef4 <puts>
  printf("  S16 (PA4)  -> Floor 1 (Cabin Call)\r\n");
 8002700:	489c      	ldr	r0, [pc, #624]	@ (8002974 <main+0x2bc>)
 8002702:	f003 fbf7 	bl	8005ef4 <puts>
  printf("  S15 (PA8)  -> Floor 2 (Cabin Call)\r\n");
 8002706:	489c      	ldr	r0, [pc, #624]	@ (8002978 <main+0x2c0>)
 8002708:	f003 fbf4 	bl	8005ef4 <puts>
  printf("  S14 (PA5)  -> Floor 3 (Cabin Call)\r\n");
 800270c:	489b      	ldr	r0, [pc, #620]	@ (800297c <main+0x2c4>)
 800270e:	f003 fbf1 	bl	8005ef4 <puts>
  printf("  S13 (PA12) -> Not Used\r\n\r\n");
 8002712:	489b      	ldr	r0, [pc, #620]	@ (8002980 <main+0x2c8>)
 8002714:	f003 fbee 	bl	8005ef4 <puts>
  
  /* 初始化光电传感器 - 中断模式 */
  PhotoSensor_Init();
 8002718:	f7ff f910 	bl	800193c <PhotoSensor_Init>
  photo_sensor_state_t initial_state = PhotoSensor_GetState();
 800271c:	f7ff f94c 	bl	80019b8 <PhotoSensor_GetState>
 8002720:	4603      	mov	r3, r0
 8002722:	74fb      	strb	r3, [r7, #19]
  last_sensor_state = initial_state;
 8002724:	4a97      	ldr	r2, [pc, #604]	@ (8002984 <main+0x2cc>)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	7013      	strb	r3, [r2, #0]
  printf("[PHOTO] Initialized (PB5 EXTI) - State: %s\r\n", 
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <main+0x7c>
 8002730:	4b95      	ldr	r3, [pc, #596]	@ (8002988 <main+0x2d0>)
 8002732:	e000      	b.n	8002736 <main+0x7e>
 8002734:	4b95      	ldr	r3, [pc, #596]	@ (800298c <main+0x2d4>)
 8002736:	4619      	mov	r1, r3
 8002738:	4895      	ldr	r0, [pc, #596]	@ (8002990 <main+0x2d8>)
 800273a:	f003 fb73 	bl	8005e24 <iprintf>
         initial_state == PHOTO_SENSOR_BLOCKED ? "BLOCKED" : "CLEAR");
  
  /* 验证初始状态 */
  if (initial_state != PHOTO_SENSOR_BLOCKED) {
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <main+0x98>
      printf("[WARNING] Photo sensor should be BLOCKED at floor 1!\r\n");
 8002744:	4893      	ldr	r0, [pc, #588]	@ (8002994 <main+0x2dc>)
 8002746:	f003 fbd5 	bl	8005ef4 <puts>
      printf("         Please check elevator position.\r\n");
 800274a:	4893      	ldr	r0, [pc, #588]	@ (8002998 <main+0x2e0>)
 800274c:	f003 fbd2 	bl	8005ef4 <puts>
  }
  
  /* 初始化舵机门控系统 */
  printf("[SERVO] Initializing servo communication...\r\n");
 8002750:	4892      	ldr	r0, [pc, #584]	@ (800299c <main+0x2e4>)
 8002752:	f003 fbcf 	bl	8005ef4 <puts>
  servo_init(&huart3);
 8002756:	4892      	ldr	r0, [pc, #584]	@ (80029a0 <main+0x2e8>)
 8002758:	f7ff fcf4 	bl	8002144 <servo_init>
  HAL_Delay(100);
 800275c:	2064      	movs	r0, #100	@ 0x64
 800275e:	f000 ff93 	bl	8003688 <HAL_Delay>
  
  /* 舵机通信测试 */
  printf("\r\n=== SERVO COMMUNICATION TEST ===\r\n");
 8002762:	4890      	ldr	r0, [pc, #576]	@ (80029a4 <main+0x2ec>)
 8002764:	f003 fbc6 	bl	8005ef4 <puts>
  
  /* 测试1: PING */
  printf("1. Testing PING...\r\n");
 8002768:	488f      	ldr	r0, [pc, #572]	@ (80029a8 <main+0x2f0>)
 800276a:	f003 fbc3 	bl	8005ef4 <puts>
  if (servo_ping(1)) {
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff fcfe 	bl	8002170 <servo_ping>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <main+0xca>
      printf("   SUCCESS: Servo responded to PING\r\n");
 800277a:	488c      	ldr	r0, [pc, #560]	@ (80029ac <main+0x2f4>)
 800277c:	f003 fbba 	bl	8005ef4 <puts>
 8002780:	e002      	b.n	8002788 <main+0xd0>
  } else {
      printf("   FAILED: No response to PING\r\n");
 8002782:	488b      	ldr	r0, [pc, #556]	@ (80029b0 <main+0x2f8>)
 8002784:	f003 fbb6 	bl	8005ef4 <puts>
  }
  
  /* 测试2: 读取位置 */
  printf("2. Reading position (0x38)...\r\n");
 8002788:	488a      	ldr	r0, [pc, #552]	@ (80029b4 <main+0x2fc>)
 800278a:	f003 fbb3 	bl	8005ef4 <puts>
  uint8_t pos_data[2];
  for(int i = 0; i < 3; i++) {
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e026      	b.n	80027e2 <main+0x12a>
      if (servo_read_reg(1, 0x38, 2, pos_data) == 1) {
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	2202      	movs	r2, #2
 800279a:	2138      	movs	r1, #56	@ 0x38
 800279c:	2001      	movs	r0, #1
 800279e:	f7ff fde6 	bl	800236e <servo_read_reg>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d110      	bne.n	80027ca <main+0x112>
          uint16_t pos = pos_data[0] | (pos_data[1] << 8);
 80027a8:	7a3b      	ldrb	r3, [r7, #8]
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	7a7b      	ldrb	r3, [r7, #9]
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	817b      	strh	r3, [r7, #10]
          printf("   Try %d: SUCCESS, Position = %u\r\n", i+1, pos);
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	897a      	ldrh	r2, [r7, #10]
 80027c0:	4619      	mov	r1, r3
 80027c2:	487d      	ldr	r0, [pc, #500]	@ (80029b8 <main+0x300>)
 80027c4:	f003 fb2e 	bl	8005e24 <iprintf>
 80027c8:	e005      	b.n	80027d6 <main+0x11e>
      } else {
          printf("   Try %d: FAILED\r\n", i+1);
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	4619      	mov	r1, r3
 80027d0:	487a      	ldr	r0, [pc, #488]	@ (80029bc <main+0x304>)
 80027d2:	f003 fb27 	bl	8005e24 <iprintf>
      }
      HAL_Delay(50);
 80027d6:	2032      	movs	r0, #50	@ 0x32
 80027d8:	f000 ff56 	bl	8003688 <HAL_Delay>
  for(int i = 0; i < 3; i++) {
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3301      	adds	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	ddd5      	ble.n	8002794 <main+0xdc>
  }
  
  /* 测试3: 读取移动标志 */
  printf("3. Reading moving flag (0x42)...\r\n");
 80027e8:	4875      	ldr	r0, [pc, #468]	@ (80029c0 <main+0x308>)
 80027ea:	f003 fb83 	bl	8005ef4 <puts>
  uint8_t moving_flag;
  for(int i = 0; i < 3; i++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	e01c      	b.n	800282e <main+0x176>
      if (servo_read_reg(1, 0x42, 1, &moving_flag) == 1) {
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	2201      	movs	r2, #1
 80027f8:	2142      	movs	r1, #66	@ 0x42
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff fdb7 	bl	800236e <servo_read_reg>
 8002800:	4603      	mov	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <main+0x15e>
          printf("   Try %d: SUCCESS, Moving = %d\r\n", i+1, moving_flag);
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	3301      	adds	r3, #1
 800280a:	79fa      	ldrb	r2, [r7, #7]
 800280c:	4619      	mov	r1, r3
 800280e:	486d      	ldr	r0, [pc, #436]	@ (80029c4 <main+0x30c>)
 8002810:	f003 fb08 	bl	8005e24 <iprintf>
 8002814:	e005      	b.n	8002822 <main+0x16a>
      } else {
          printf("   Try %d: FAILED\r\n", i+1);
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3301      	adds	r3, #1
 800281a:	4619      	mov	r1, r3
 800281c:	4867      	ldr	r0, [pc, #412]	@ (80029bc <main+0x304>)
 800281e:	f003 fb01 	bl	8005e24 <iprintf>
      }
      HAL_Delay(50);
 8002822:	2032      	movs	r0, #50	@ 0x32
 8002824:	f000 ff30 	bl	8003688 <HAL_Delay>
  for(int i = 0; i < 3; i++) {
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	3301      	adds	r3, #1
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b02      	cmp	r3, #2
 8002832:	dddf      	ble.n	80027f4 <main+0x13c>
  }
  
  /* 测试4: 读取电压 */
  printf("4. Reading voltage (0x3E)...\r\n");
 8002834:	4864      	ldr	r0, [pc, #400]	@ (80029c8 <main+0x310>)
 8002836:	f003 fb5d 	bl	8005ef4 <puts>
  uint8_t voltage;
  if (servo_read_reg(1, 0x3E, 1, &voltage) == 1) {
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	2201      	movs	r2, #1
 800283e:	213e      	movs	r1, #62	@ 0x3e
 8002840:	2001      	movs	r0, #1
 8002842:	f7ff fd94 	bl	800236e <servo_read_reg>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d112      	bne.n	8002872 <main+0x1ba>
      printf("   SUCCESS: Voltage = %.1fV\r\n", voltage * 0.1f);
 800284c:	79bb      	ldrb	r3, [r7, #6]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fef2 	bl	8000638 <__aeabi_i2f>
 8002854:	4603      	mov	r3, r0
 8002856:	495d      	ldr	r1, [pc, #372]	@ (80029cc <main+0x314>)
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd ff41 	bl	80006e0 <__aeabi_fmul>
 800285e:	4603      	mov	r3, r0
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fdd7 	bl	8000414 <__aeabi_f2d>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4859      	ldr	r0, [pc, #356]	@ (80029d0 <main+0x318>)
 800286c:	f003 fada 	bl	8005e24 <iprintf>
 8002870:	e002      	b.n	8002878 <main+0x1c0>
  } else {
      printf("   FAILED\r\n");
 8002872:	4858      	ldr	r0, [pc, #352]	@ (80029d4 <main+0x31c>)
 8002874:	f003 fb3e 	bl	8005ef4 <puts>
  }
  
  /* 测试5: 读取温度 */
  printf("5. Reading temperature (0x3F)...\r\n");
 8002878:	4857      	ldr	r0, [pc, #348]	@ (80029d8 <main+0x320>)
 800287a:	f003 fb3b 	bl	8005ef4 <puts>
  uint8_t temp;
  if (servo_read_reg(1, 0x3F, 1, &temp) == 1) {
 800287e:	1d7b      	adds	r3, r7, #5
 8002880:	2201      	movs	r2, #1
 8002882:	213f      	movs	r1, #63	@ 0x3f
 8002884:	2001      	movs	r0, #1
 8002886:	f7ff fd72 	bl	800236e <servo_read_reg>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <main+0x1e4>
      printf("   SUCCESS: Temperature = %d°C\r\n", temp);
 8002890:	797b      	ldrb	r3, [r7, #5]
 8002892:	4619      	mov	r1, r3
 8002894:	4851      	ldr	r0, [pc, #324]	@ (80029dc <main+0x324>)
 8002896:	f003 fac5 	bl	8005e24 <iprintf>
 800289a:	e002      	b.n	80028a2 <main+0x1ea>
  } else {
      printf("   FAILED\r\n");
 800289c:	484d      	ldr	r0, [pc, #308]	@ (80029d4 <main+0x31c>)
 800289e:	f003 fb29 	bl	8005ef4 <puts>
  }
  
  printf("=== TEST COMPLETE ===\r\n\r\n");
 80028a2:	484f      	ldr	r0, [pc, #316]	@ (80029e0 <main+0x328>)
 80028a4:	f003 fb26 	bl	8005ef4 <puts>
  
  /* 继续正常初始化 */
  DoorControl_Init(&door_controller, 1);  // 使用舵机ID 1
 80028a8:	2101      	movs	r1, #1
 80028aa:	484e      	ldr	r0, [pc, #312]	@ (80029e4 <main+0x32c>)
 80028ac:	f7ff f8b8 	bl	8001a20 <DoorControl_Init>
  
  /* 初始化Local Blackboard - 中央事件管理 */
  LocalBB_Init();
 80028b0:	f7fe f866 	bl	8000980 <LocalBB_Init>
  printf("[LocalBB] Initialized - Event queue ready\r\n");
 80028b4:	484c      	ldr	r0, [pc, #304]	@ (80029e8 <main+0x330>)
 80028b6:	f003 fb1d 	bl	8005ef4 <puts>
  
  printf("\r\nSystem ready. Waiting for commands...\r\n\r\n");
 80028ba:	484c      	ldr	r0, [pc, #304]	@ (80029ec <main+0x334>)
 80028bc:	f003 fb1a 	bl	8005ef4 <puts>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_status_time = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 80028c4:	f000 fed6 	bl	8003674 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]
    
    /* 测试模式已禁用，使用按键测试 */
    
    /* 处理键盘输入 */
    ProcessKeyboard();
 80028ca:	f000 f8e9 	bl	8002aa0 <ProcessKeyboard>
    
    /* 处理光电传感器 */
    ProcessPhotoSensor();
 80028ce:	f000 f949 	bl	8002b64 <ProcessPhotoSensor>
    
    /* 处理RS485接收 */
    ProcessRS485();
 80028d2:	f000 f9cd 	bl	8002c70 <ProcessRS485>
    
    /* 处理门控（每50ms更新） */
    static uint32_t last_door_update = 0;
    if (current_time - last_door_update >= 50) {
 80028d6:	4b46      	ldr	r3, [pc, #280]	@ (80029f0 <main+0x338>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b31      	cmp	r3, #49	@ 0x31
 80028e0:	d904      	bls.n	80028ec <main+0x234>
        last_door_update = current_time;
 80028e2:	4a43      	ldr	r2, [pc, #268]	@ (80029f0 <main+0x338>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6013      	str	r3, [r2, #0]
        ProcessDoorControl();
 80028e8:	f000 fa84 	bl	8002df4 <ProcessDoorControl>
    }
    
    /* 处理LocalBB事件队列 */
    LocalBB_Process();
 80028ec:	f7fe fa8c 	bl	8000e08 <LocalBB_Process>
    
    /* 每5秒打印一次状态 */
    if (current_time - last_status_time >= 5000) {
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d9e2      	bls.n	80028c4 <main+0x20c>
        last_status_time = current_time;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	617b      	str	r3, [r7, #20]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
               system_state.current_floor,
 8002902:	4b3c      	ldr	r3, [pc, #240]	@ (80029f4 <main+0x33c>)
 8002904:	781b      	ldrb	r3, [r3, #0]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8002906:	4619      	mov	r1, r3
               system_state.direction == DIR_UP ? "UP" : 
 8002908:	4b3a      	ldr	r3, [pc, #232]	@ (80029f4 <main+0x33c>)
 800290a:	785b      	ldrb	r3, [r3, #1]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 800290c:	2b01      	cmp	r3, #1
 800290e:	d007      	beq.n	8002920 <main+0x268>
               system_state.direction == DIR_DOWN ? "DN" : "STOP",
 8002910:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <main+0x33c>)
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d101      	bne.n	800291c <main+0x264>
 8002918:	4a37      	ldr	r2, [pc, #220]	@ (80029f8 <main+0x340>)
 800291a:	e002      	b.n	8002922 <main+0x26a>
 800291c:	4a37      	ldr	r2, [pc, #220]	@ (80029fc <main+0x344>)
 800291e:	e000      	b.n	8002922 <main+0x26a>
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8002920:	4a37      	ldr	r2, [pc, #220]	@ (8002a00 <main+0x348>)
               system_state.door_is_open ? "OPEN" : "CLOSED");
 8002922:	4b34      	ldr	r3, [pc, #208]	@ (80029f4 <main+0x33c>)
 8002924:	78db      	ldrb	r3, [r3, #3]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <main+0x276>
 800292a:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <main+0x34c>)
 800292c:	e000      	b.n	8002930 <main+0x278>
 800292e:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <main+0x350>)
 8002930:	4836      	ldr	r0, [pc, #216]	@ (8002a0c <main+0x354>)
 8002932:	f003 fa77 	bl	8005e24 <iprintf>
        printf("  Keyboard=%lu, Photo=%lu, RS485_RX=%lu, TX=%lu, DoorCmd=%lu\r\n",
 8002936:	4b2f      	ldr	r3, [pc, #188]	@ (80029f4 <main+0x33c>)
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <main+0x33c>)
 800293c:	6898      	ldr	r0, [r3, #8]
 800293e:	4b2d      	ldr	r3, [pc, #180]	@ (80029f4 <main+0x33c>)
 8002940:	68dc      	ldr	r4, [r3, #12]
 8002942:	4b2c      	ldr	r3, [pc, #176]	@ (80029f4 <main+0x33c>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4a2b      	ldr	r2, [pc, #172]	@ (80029f4 <main+0x33c>)
 8002948:	6952      	ldr	r2, [r2, #20]
 800294a:	9201      	str	r2, [sp, #4]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4623      	mov	r3, r4
 8002950:	4602      	mov	r2, r0
 8002952:	482f      	ldr	r0, [pc, #188]	@ (8002a10 <main+0x358>)
 8002954:	f003 fa66 	bl	8005e24 <iprintf>
               system_state.keyboard_count,
               system_state.photo_count,
               system_state.rs485_rx_count,
               system_state.rs485_tx_count,
               system_state.door_cmd_count);
        LocalBB_PrintStatus();
 8002958:	f7fe fb12 	bl	8000f80 <LocalBB_PrintStatus>
  {
 800295c:	e7b2      	b.n	80028c4 <main+0x20c>
 800295e:	bf00      	nop
 8002960:	080078d8 	.word	0x080078d8
 8002964:	08007908 	.word	0x08007908
 8002968:	08007930 	.word	0x08007930
 800296c:	08007970 	.word	0x08007970
 8002970:	08007990 	.word	0x08007990
 8002974:	080079b4 	.word	0x080079b4
 8002978:	080079dc 	.word	0x080079dc
 800297c:	08007a04 	.word	0x08007a04
 8002980:	08007a2c 	.word	0x08007a2c
 8002984:	20000020 	.word	0x20000020
 8002988:	08007a48 	.word	0x08007a48
 800298c:	08007a50 	.word	0x08007a50
 8002990:	08007a58 	.word	0x08007a58
 8002994:	08007a88 	.word	0x08007a88
 8002998:	08007ac0 	.word	0x08007ac0
 800299c:	08007aec 	.word	0x08007aec
 80029a0:	200007a4 	.word	0x200007a4
 80029a4:	08007b1c 	.word	0x08007b1c
 80029a8:	08007b40 	.word	0x08007b40
 80029ac:	08007b54 	.word	0x08007b54
 80029b0:	08007b7c 	.word	0x08007b7c
 80029b4:	08007b9c 	.word	0x08007b9c
 80029b8:	08007bbc 	.word	0x08007bbc
 80029bc:	08007be0 	.word	0x08007be0
 80029c0:	08007bf4 	.word	0x08007bf4
 80029c4:	08007c18 	.word	0x08007c18
 80029c8:	08007c3c 	.word	0x08007c3c
 80029cc:	3dcccccd 	.word	0x3dcccccd
 80029d0:	08007c5c 	.word	0x08007c5c
 80029d4:	08007c7c 	.word	0x08007c7c
 80029d8:	08007c88 	.word	0x08007c88
 80029dc:	08007cac 	.word	0x08007cac
 80029e0:	08007cd0 	.word	0x08007cd0
 80029e4:	200006fc 	.word	0x200006fc
 80029e8:	08007cec 	.word	0x08007cec
 80029ec:	08007d18 	.word	0x08007d18
 80029f0:	20000708 	.word	0x20000708
 80029f4:	20000004 	.word	0x20000004
 80029f8:	08007d44 	.word	0x08007d44
 80029fc:	08007d48 	.word	0x08007d48
 8002a00:	08007d50 	.word	0x08007d50
 8002a04:	08007d54 	.word	0x08007d54
 8002a08:	08007d5c 	.word	0x08007d5c
 8002a0c:	08007d64 	.word	0x08007d64
 8002a10:	08007d8c 	.word	0x08007d8c

08002a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b090      	sub	sp, #64	@ 0x40
 8002a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1a:	f107 0318 	add.w	r3, r7, #24
 8002a1e:	2228      	movs	r2, #40	@ 0x28
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 fb68 	bl	80060f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a44:	2301      	movs	r3, #1
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a52:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fbb3 	bl	80041c8 <HAL_RCC_OscConfig>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002a68:	f000 fab1 	bl	8002fce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a6c:	230f      	movs	r3, #15
 8002a6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a70:	2302      	movs	r3, #2
 8002a72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	2102      	movs	r1, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fe20 	bl	80046cc <HAL_RCC_ClockConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002a92:	f000 fa9c 	bl	8002fce <Error_Handler>
  }
}
 8002a96:	bf00      	nop
 8002a98:	3740      	adds	r7, #64	@ 0x40
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <ProcessKeyboard>:
/* USER CODE BEGIN 4 */

/**
  * @brief  处理键盘输入
  */
void ProcessKeyboard(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
    Keyboard_Handler();
 8002aa6:	f7fe fd3d 	bl	8001524 <Keyboard_Handler>
    
    uint8_t key;
    if (Keyboard_PopKey(&key)) {
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe fec3 	bl	8001838 <Keyboard_PopKey>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d03f      	beq.n	8002b38 <ProcessKeyboard+0x98>
        system_state.keyboard_count++;
 8002ab8:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <ProcessKeyboard+0xa0>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a20      	ldr	r2, [pc, #128]	@ (8002b40 <ProcessKeyboard+0xa0>)
 8002ac0:	6053      	str	r3, [r2, #4]
        
        printf("\r\n========================================\r\n");
 8002ac2:	4820      	ldr	r0, [pc, #128]	@ (8002b44 <ProcessKeyboard+0xa4>)
 8002ac4:	f003 fa16 	bl	8005ef4 <puts>
        printf("[KEYBOARD #%lu] Key detected: 0x%02X\r\n", system_state.keyboard_count, key);
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <ProcessKeyboard+0xa0>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	79fa      	ldrb	r2, [r7, #7]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	481d      	ldr	r0, [pc, #116]	@ (8002b48 <ProcessKeyboard+0xa8>)
 8002ad2:	f003 f9a7 	bl	8005e24 <iprintf>
        
        switch(key) {
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	3b0d      	subs	r3, #13
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d823      	bhi.n	8002b26 <ProcessKeyboard+0x86>
 8002ade:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae4 <ProcessKeyboard+0x44>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b1f 	.word	0x08002b1f
 8002ae8:	08002b11 	.word	0x08002b11
 8002aec:	08002b03 	.word	0x08002b03
 8002af0:	08002af5 	.word	0x08002af5
            case KEY_S16:  // Floor 1
                printf("S16 -> Floor 1 call\r\n");
 8002af4:	4815      	ldr	r0, [pc, #84]	@ (8002b4c <ProcessKeyboard+0xac>)
 8002af6:	f003 f9fd 	bl	8005ef4 <puts>
                // 只使用LocalBB处理，避免重复发送
                LocalBB_AddCabinCall(1);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f7fe f83e 	bl	8000b7c <LocalBB_AddCabinCall>
                break;
 8002b00:	e017      	b.n	8002b32 <ProcessKeyboard+0x92>
                
            case KEY_S15:  // Floor 2
                printf("S15 -> Floor 2 call\r\n");
 8002b02:	4813      	ldr	r0, [pc, #76]	@ (8002b50 <ProcessKeyboard+0xb0>)
 8002b04:	f003 f9f6 	bl	8005ef4 <puts>
                // 只使用LocalBB处理，避免重复发送
                LocalBB_AddCabinCall(2);
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f7fe f837 	bl	8000b7c <LocalBB_AddCabinCall>
                break;
 8002b0e:	e010      	b.n	8002b32 <ProcessKeyboard+0x92>
                
            case KEY_S14:  // Floor 3
                printf("S14 -> Floor 3 call\r\n");
 8002b10:	4810      	ldr	r0, [pc, #64]	@ (8002b54 <ProcessKeyboard+0xb4>)
 8002b12:	f003 f9ef 	bl	8005ef4 <puts>
                // 只使用LocalBB处理，避免重复发送
                LocalBB_AddCabinCall(3);
 8002b16:	2003      	movs	r0, #3
 8002b18:	f7fe f830 	bl	8000b7c <LocalBB_AddCabinCall>
                break;
 8002b1c:	e009      	b.n	8002b32 <ProcessKeyboard+0x92>
                
            case KEY_S13:  // Not used
                printf("S13 pressed (not used)\r\n");
 8002b1e:	480e      	ldr	r0, [pc, #56]	@ (8002b58 <ProcessKeyboard+0xb8>)
 8002b20:	f003 f9e8 	bl	8005ef4 <puts>
                break;
 8002b24:	e005      	b.n	8002b32 <ProcessKeyboard+0x92>
                
            default:
                printf("Unknown key (0x%02X)\r\n", key);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480c      	ldr	r0, [pc, #48]	@ (8002b5c <ProcessKeyboard+0xbc>)
 8002b2c:	f003 f97a 	bl	8005e24 <iprintf>
                break;
 8002b30:	bf00      	nop
        }
        printf("========================================\r\n");
 8002b32:	480b      	ldr	r0, [pc, #44]	@ (8002b60 <ProcessKeyboard+0xc0>)
 8002b34:	f003 f9de 	bl	8005ef4 <puts>
    }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000004 	.word	0x20000004
 8002b44:	08007dcc 	.word	0x08007dcc
 8002b48:	08007df8 	.word	0x08007df8
 8002b4c:	08007e20 	.word	0x08007e20
 8002b50:	08007e38 	.word	0x08007e38
 8002b54:	08007e50 	.word	0x08007e50
 8002b58:	08007e68 	.word	0x08007e68
 8002b5c:	08007e80 	.word	0x08007e80
 8002b60:	08007e98 	.word	0x08007e98

08002b64 <ProcessPhotoSensor>:

/**
  * @brief  处理光电传感器 - 增强版带防抖和智能楼层检测
  */
void ProcessPhotoSensor(void) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af02      	add	r7, sp, #8
    uint32_t current_time = HAL_GetTick();
 8002b6a:	f000 fd83 	bl	8003674 <HAL_GetTick>
 8002b6e:	60b8      	str	r0, [r7, #8]
    
    if (sensor_triggered) {
 8002b70:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <ProcessPhotoSensor+0xec>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d067      	beq.n	8002c4a <ProcessPhotoSensor+0xe6>
        sensor_triggered = false;
 8002b7a:	4b35      	ldr	r3, [pc, #212]	@ (8002c50 <ProcessPhotoSensor+0xec>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
        
        /* 防抖处理 */
        if (current_time - system_state.last_photo_time < PHOTO_SENSOR_DEBOUNCE_MS) {
 8002b80:	4b34      	ldr	r3, [pc, #208]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b8a:	d95d      	bls.n	8002c48 <ProcessPhotoSensor+0xe4>
            return;  // 忽略抖动
        }
        system_state.last_photo_time = current_time;
 8002b8c:	4a31      	ldr	r2, [pc, #196]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6193      	str	r3, [r2, #24]
        
        photo_sensor_state_t current_state = PhotoSensor_GetState();
 8002b92:	f7fe ff11 	bl	80019b8 <PhotoSensor_GetState>
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
        
        /* 只在状态从CLEAR变为BLOCKED时触发（到达楼层） */
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d14f      	bne.n	8002c40 <ProcessPhotoSensor+0xdc>
            last_sensor_state == PHOTO_SENSOR_CLEAR) {
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <ProcessPhotoSensor+0xf4>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d14b      	bne.n	8002c40 <ProcessPhotoSensor+0xdc>
            
            system_state.photo_count++;
 8002ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a29      	ldr	r2, [pc, #164]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bb0:	6093      	str	r3, [r2, #8]
            
            /* 智能楼层检测 - 基于方向和当前楼层 */
            uint8_t detected_floor = system_state.current_floor;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	73fb      	strb	r3, [r7, #15]
            
            if (system_state.direction == DIR_UP) {
 8002bb8:	4b26      	ldr	r3, [pc, #152]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d109      	bne.n	8002bd4 <ProcessPhotoSensor+0x70>
                /* 上行：检测到的是下一个楼层 */
                detected_floor = system_state.current_floor + 1;
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
                if (detected_floor > MAX_FLOORS) {
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d90f      	bls.n	8002bee <ProcessPhotoSensor+0x8a>
                    detected_floor = MAX_FLOORS;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e00c      	b.n	8002bee <ProcessPhotoSensor+0x8a>
                }
            }
            else if (system_state.direction == DIR_DOWN) {
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d108      	bne.n	8002bee <ProcessPhotoSensor+0x8a>
                /* 下行：检测到的是下一个楼层 */
                detected_floor = system_state.current_floor - 1;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
                if (detected_floor < 1) {
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <ProcessPhotoSensor+0x8a>
                    detected_floor = 1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
                }
            }
            /* 如果静止，保持当前楼层不变 */
            
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002bee:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
                   system_state.photo_count, detected_floor,
                   system_state.direction == DIR_UP ? "UP" :
 8002bf4:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bf6:	785b      	ldrb	r3, [r3, #1]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d007      	beq.n	8002c0c <ProcessPhotoSensor+0xa8>
                   system_state.direction == DIR_DOWN ? "DN" : "STOP",
 8002bfc:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d101      	bne.n	8002c08 <ProcessPhotoSensor+0xa4>
 8002c04:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <ProcessPhotoSensor+0xf8>)
 8002c06:	e002      	b.n	8002c0e <ProcessPhotoSensor+0xaa>
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <ProcessPhotoSensor+0xfc>)
 8002c0a:	e000      	b.n	8002c0e <ProcessPhotoSensor+0xaa>
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <ProcessPhotoSensor+0x100>)
                   system_state.current_floor);
 8002c0e:	4811      	ldr	r0, [pc, #68]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002c10:	7800      	ldrb	r0, [r0, #0]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002c12:	9000      	str	r0, [sp, #0]
 8002c14:	4814      	ldr	r0, [pc, #80]	@ (8002c68 <ProcessPhotoSensor+0x104>)
 8002c16:	f003 f905 	bl	8005e24 <iprintf>
            
            /* 立即发送光电传感器事件给Master */
            SendPhotoSensorEvent(detected_floor);
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f975 	bl	8002f0c <SendPhotoSensorEvent>
            
            /* 更新当前楼层 */
            system_state.current_floor = detected_floor;
 8002c22:	4a0c      	ldr	r2, [pc, #48]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	7013      	strb	r3, [r2, #0]
            
            /* 如果到达目标楼层，更新状态 */
            if (detected_floor == system_state.target_floor) {
 8002c28:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <ProcessPhotoSensor+0xf0>)
 8002c2a:	789b      	ldrb	r3, [r3, #2]
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d104      	bne.n	8002c3c <ProcessPhotoSensor+0xd8>
                printf("[PHOTO] Target floor %d reached!\r\n", detected_floor);
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	4619      	mov	r1, r3
 8002c36:	480d      	ldr	r0, [pc, #52]	@ (8002c6c <ProcessPhotoSensor+0x108>)
 8002c38:	f003 f8f4 	bl	8005e24 <iprintf>
                /* Master会处理停止，Slave只报告 */
            }
            
            /* 通过LocalBB处理 */
            LocalBB_AddPhotoSensor();
 8002c3c:	f7fe f808 	bl	8000c50 <LocalBB_AddPhotoSensor>
        }
        
        last_sensor_state = current_state;
 8002c40:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <ProcessPhotoSensor+0xf4>)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	7013      	strb	r3, [r2, #0]
 8002c46:	e000      	b.n	8002c4a <ProcessPhotoSensor+0xe6>
            return;  // 忽略抖动
 8002c48:	bf00      	nop
    }
}
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200006f8 	.word	0x200006f8
 8002c54:	20000004 	.word	0x20000004
 8002c58:	20000020 	.word	0x20000020
 8002c5c:	08007d44 	.word	0x08007d44
 8002c60:	08007d48 	.word	0x08007d48
 8002c64:	08007d50 	.word	0x08007d50
 8002c68:	08007ec4 	.word	0x08007ec4
 8002c6c:	08007ef8 	.word	0x08007ef8

08002c70 <ProcessRS485>:

/**
  * @brief  处理RS485接收
  */
void ProcessRS485(void) {
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b098      	sub	sp, #96	@ 0x60
 8002c74:	af04      	add	r7, sp, #16
    uint8_t rx_buffer[64];
    uint16_t rx_len = rs485_receive_packet(rx_buffer, sizeof(rx_buffer));
 8002c76:	f107 0308 	add.w	r3, r7, #8
 8002c7a:	2140      	movs	r1, #64	@ 0x40
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fa8f 	bl	80011a0 <rs485_receive_packet>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    
    if (rx_len > 0) {
 8002c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 809b 	beq.w	8002dc8 <ProcessRS485+0x158>
        system_state.rs485_rx_count++;
 8002c92:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd0 <ProcessRS485+0x160>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd0 <ProcessRS485+0x160>)
 8002c9a:	60d3      	str	r3, [r2, #12]
        
        /* 调试：打印所有接收到的命令 */
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
               rx_buffer[0], rx_len, 
 8002c9c:	7a3b      	ldrb	r3, [r7, #8]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002c9e:	461c      	mov	r4, r3
 8002ca0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
               rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
 8002ca4:	7a3b      	ldrb	r3, [r7, #8]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002ca6:	461d      	mov	r5, r3
               rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
 8002ca8:	7a7b      	ldrb	r3, [r7, #9]
 8002caa:	7ab9      	ldrb	r1, [r7, #10]
 8002cac:	7af8      	ldrb	r0, [r7, #11]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002cae:	9002      	str	r0, [sp, #8]
 8002cb0:	9101      	str	r1, [sp, #4]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4846      	ldr	r0, [pc, #280]	@ (8002dd4 <ProcessRS485+0x164>)
 8002cba:	f003 f8b3 	bl	8005e24 <iprintf>
        
        /* 方向设置命令 */
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8002cbe:	7a3b      	ldrb	r3, [r7, #8]
 8002cc0:	2b40      	cmp	r3, #64	@ 0x40
 8002cc2:	d137      	bne.n	8002d34 <ProcessRS485+0xc4>
 8002cc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d933      	bls.n	8002d34 <ProcessRS485+0xc4>
            uint8_t dir = rx_buffer[1];
 8002ccc:	7a7b      	ldrb	r3, [r7, #9]
 8002cce:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            uint8_t cur = rx_buffer[2];
 8002cd2:	7abb      	ldrb	r3, [r7, #10]
 8002cd4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            uint8_t target = rx_buffer[3];
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            
            system_state.direction = dir;
 8002cde:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd0 <ProcessRS485+0x160>)
 8002ce0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ce4:	7053      	strb	r3, [r2, #1]
            system_state.current_floor = cur;
 8002ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8002dd0 <ProcessRS485+0x160>)
 8002ce8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002cec:	7013      	strb	r3, [r2, #0]
            system_state.target_floor = target;
 8002cee:	4a38      	ldr	r2, [pc, #224]	@ (8002dd0 <ProcessRS485+0x160>)
 8002cf0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002cf4:	7093      	strb	r3, [r2, #2]
            
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8002cf6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d007      	beq.n	8002d0e <ProcessRS485+0x9e>
                   dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DN" : "STOP",
 8002cfe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d101      	bne.n	8002d0a <ProcessRS485+0x9a>
 8002d06:	4934      	ldr	r1, [pc, #208]	@ (8002dd8 <ProcessRS485+0x168>)
 8002d08:	e002      	b.n	8002d10 <ProcessRS485+0xa0>
 8002d0a:	4934      	ldr	r1, [pc, #208]	@ (8002ddc <ProcessRS485+0x16c>)
 8002d0c:	e000      	b.n	8002d10 <ProcessRS485+0xa0>
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8002d0e:	4934      	ldr	r1, [pc, #208]	@ (8002de0 <ProcessRS485+0x170>)
 8002d10:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002d14:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002d18:	4832      	ldr	r0, [pc, #200]	@ (8002de4 <ProcessRS485+0x174>)
 8002d1a:	f003 f883 	bl	8005e24 <iprintf>
                   cur, target);
            
            /* 通过LocalBB处理 */
            LocalBB_SetDirection(dir, cur, target);
 8002d1e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002d22:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8002d26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd ffe0 	bl	8000cf0 <LocalBB_SetDirection>
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8002d30:	bf00      	nop
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
            rs485_send_packet_dma(tx_buffer, 4);
            system_state.rs485_tx_count++;
        }
    }
}
 8002d32:	e049      	b.n	8002dc8 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_DOOR_OPEN) {
 8002d34:	7a3b      	ldrb	r3, [r7, #8]
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d115      	bne.n	8002d66 <ProcessRS485+0xf6>
            printf("\r\n[RS485 RX] Door OPEN command received at tick %lu\r\n", HAL_GetTick());
 8002d3a:	f000 fc9b 	bl	8003674 <HAL_GetTick>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4619      	mov	r1, r3
 8002d42:	4829      	ldr	r0, [pc, #164]	@ (8002de8 <ProcessRS485+0x178>)
 8002d44:	f003 f86e 	bl	8005e24 <iprintf>
            LocalBB_AddDoorCommand(true);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fe f82b 	bl	8000da4 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <ProcessRS485+0x160>)
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	3301      	adds	r3, #1
 8002d54:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd0 <ProcessRS485+0x160>)
 8002d56:	6153      	str	r3, [r2, #20]
            printf("[RS485 RX] Total door commands: %lu\r\n", system_state.door_cmd_count);
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <ProcessRS485+0x160>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4823      	ldr	r0, [pc, #140]	@ (8002dec <ProcessRS485+0x17c>)
 8002d60:	f003 f860 	bl	8005e24 <iprintf>
}
 8002d64:	e030      	b.n	8002dc8 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_DOOR_CLOSE) {
 8002d66:	7a3b      	ldrb	r3, [r7, #8]
 8002d68:	2b21      	cmp	r3, #33	@ 0x21
 8002d6a:	d115      	bne.n	8002d98 <ProcessRS485+0x128>
            printf("\r\n[RS485 RX] Door CLOSE command received at tick %lu\r\n", HAL_GetTick());
 8002d6c:	f000 fc82 	bl	8003674 <HAL_GetTick>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4619      	mov	r1, r3
 8002d74:	481e      	ldr	r0, [pc, #120]	@ (8002df0 <ProcessRS485+0x180>)
 8002d76:	f003 f855 	bl	8005e24 <iprintf>
            LocalBB_AddDoorCommand(false);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fe f812 	bl	8000da4 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 8002d80:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <ProcessRS485+0x160>)
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <ProcessRS485+0x160>)
 8002d88:	6153      	str	r3, [r2, #20]
            printf("[RS485 RX] Total door commands: %lu\r\n", system_state.door_cmd_count);
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <ProcessRS485+0x160>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4816      	ldr	r0, [pc, #88]	@ (8002dec <ProcessRS485+0x17c>)
 8002d92:	f003 f847 	bl	8005e24 <iprintf>
}
 8002d96:	e017      	b.n	8002dc8 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_STATUS_REQUEST) {
 8002d98:	7a3b      	ldrb	r3, [r7, #8]
 8002d9a:	2b50      	cmp	r3, #80	@ 0x50
 8002d9c:	d114      	bne.n	8002dc8 <ProcessRS485+0x158>
            tx_buffer[0] = CMD_STATUS_RESPONSE;
 8002d9e:	2351      	movs	r3, #81	@ 0x51
 8002da0:	713b      	strb	r3, [r7, #4]
            tx_buffer[1] = system_state.current_floor;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <ProcessRS485+0x160>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	717b      	strb	r3, [r7, #5]
            tx_buffer[2] = system_state.direction;
 8002da8:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <ProcessRS485+0x160>)
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	71bb      	strb	r3, [r7, #6]
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <ProcessRS485+0x160>)
 8002db0:	78db      	ldrb	r3, [r3, #3]
 8002db2:	71fb      	strb	r3, [r7, #7]
            rs485_send_packet_dma(tx_buffer, 4);
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2104      	movs	r1, #4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe f9a1 	bl	8001100 <rs485_send_packet_dma>
            system_state.rs485_tx_count++;
 8002dbe:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <ProcessRS485+0x160>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a02      	ldr	r2, [pc, #8]	@ (8002dd0 <ProcessRS485+0x160>)
 8002dc6:	6113      	str	r3, [r2, #16]
}
 8002dc8:	bf00      	nop
 8002dca:	3750      	adds	r7, #80	@ 0x50
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	08007f1c 	.word	0x08007f1c
 8002dd8:	08007d44 	.word	0x08007d44
 8002ddc:	08007d48 	.word	0x08007d48
 8002de0:	08007d50 	.word	0x08007d50
 8002de4:	08007f64 	.word	0x08007f64
 8002de8:	08007f88 	.word	0x08007f88
 8002dec:	08007fc0 	.word	0x08007fc0
 8002df0:	08007fe8 	.word	0x08007fe8

08002df4 <ProcessDoorControl>:

/**
  * @brief  处理门控制
  */
void ProcessDoorControl(void) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
    /* 更新门控制器状态 */
    DoorControl_Update(&door_controller);
 8002dfa:	4836      	ldr	r0, [pc, #216]	@ (8002ed4 <ProcessDoorControl+0xe0>)
 8002dfc:	f7fe ff96 	bl	8001d2c <DoorControl_Update>
    
    /* 处理来自LocalBB的门控命令 */
    LocalBB_DoorCommand_t door_cmd = LocalBB_GetDoorCommand();
 8002e00:	f7fe f91e 	bl	8001040 <LocalBB_GetDoorCommand>
 8002e04:	4603      	mov	r3, r0
 8002e06:	71fb      	strb	r3, [r7, #7]
    if (door_cmd != DOOR_CMD_NONE) {
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d02d      	beq.n	8002e6a <ProcessDoorControl+0x76>
        printf("\r\n========== DOOR COMMAND RECEIVED ==========\r\n");
 8002e0e:	4832      	ldr	r0, [pc, #200]	@ (8002ed8 <ProcessDoorControl+0xe4>)
 8002e10:	f003 f870 	bl	8005ef4 <puts>
        printf("[MAIN] Tick=%lu, Command=%s\r\n", 
 8002e14:	f000 fc2e 	bl	8003674 <HAL_GetTick>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <ProcessDoorControl+0x30>
 8002e20:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <ProcessDoorControl+0xe8>)
 8002e22:	e000      	b.n	8002e26 <ProcessDoorControl+0x32>
 8002e24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee0 <ProcessDoorControl+0xec>)
 8002e26:	461a      	mov	r2, r3
 8002e28:	482e      	ldr	r0, [pc, #184]	@ (8002ee4 <ProcessDoorControl+0xf0>)
 8002e2a:	f002 fffb 	bl	8005e24 <iprintf>
               HAL_GetTick(), door_cmd == DOOR_CMD_OPEN ? "OPEN" : "CLOSE");
        
        if (door_cmd == DOOR_CMD_OPEN) {
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d109      	bne.n	8002e48 <ProcessDoorControl+0x54>
            printf("[DOOR] Command: OPEN\r\n");
 8002e34:	482c      	ldr	r0, [pc, #176]	@ (8002ee8 <ProcessDoorControl+0xf4>)
 8002e36:	f003 f85d 	bl	8005ef4 <puts>
            DoorControl_Open(&door_controller);
 8002e3a:	4826      	ldr	r0, [pc, #152]	@ (8002ed4 <ProcessDoorControl+0xe0>)
 8002e3c:	f7fe fe94 	bl	8001b68 <DoorControl_Open>
            system_state.door_is_open = true;
 8002e40:	4b2a      	ldr	r3, [pc, #168]	@ (8002eec <ProcessDoorControl+0xf8>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	70da      	strb	r2, [r3, #3]
 8002e46:	e00b      	b.n	8002e60 <ProcessDoorControl+0x6c>
            // TIME BASED模式 - 不发送状态反馈
            // SendDoorStatus(DOOR_STATE_OPENING);
            // printf("[MAIN] Sent OPENING status to Master\r\n");
        } else if (door_cmd == DOOR_CMD_CLOSE) {
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d108      	bne.n	8002e60 <ProcessDoorControl+0x6c>
            printf("[DOOR] Command: CLOSE\r\n");
 8002e4e:	4828      	ldr	r0, [pc, #160]	@ (8002ef0 <ProcessDoorControl+0xfc>)
 8002e50:	f003 f850 	bl	8005ef4 <puts>
            DoorControl_Close(&door_controller);
 8002e54:	481f      	ldr	r0, [pc, #124]	@ (8002ed4 <ProcessDoorControl+0xe0>)
 8002e56:	f7fe fef5 	bl	8001c44 <DoorControl_Close>
            system_state.door_is_open = false;
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <ProcessDoorControl+0xf8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	70da      	strb	r2, [r3, #3]
            // TIME BASED模式 - 不发送状态反馈
            // SendDoorStatus(DOOR_STATE_CLOSING);
            // printf("[MAIN] Sent CLOSING status to Master\r\n");
        }
        LocalBB_ClearDoorCommand();
 8002e60:	f7fe f8f8 	bl	8001054 <LocalBB_ClearDoorCommand>
        printf("============================================\r\n\r\n");
 8002e64:	4823      	ldr	r0, [pc, #140]	@ (8002ef4 <ProcessDoorControl+0x100>)
 8002e66:	f003 f845 	bl	8005ef4 <puts>
    }
    
    /* TIME BASED模式 - 不发送门状态反馈 */
    /* 但仍然更新本地状态用于调试 */
    DoorState_t door_state = DoorControl_GetState(&door_controller);
 8002e6a:	481a      	ldr	r0, [pc, #104]	@ (8002ed4 <ProcessDoorControl+0xe0>)
 8002e6c:	f7ff f8e6 	bl	800203c <DoorControl_GetState>
 8002e70:	4603      	mov	r3, r0
 8002e72:	71bb      	strb	r3, [r7, #6]
    static DoorState_t last_door_state = DOOR_STATE_CLOSED;
    
    if (door_state != last_door_state) {
 8002e74:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <ProcessDoorControl+0x104>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	79ba      	ldrb	r2, [r7, #6]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d026      	beq.n	8002ecc <ProcessDoorControl+0xd8>
        last_door_state = door_state;
 8002e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef8 <ProcessDoorControl+0x104>)
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	7013      	strb	r3, [r2, #0]
        
        switch (door_state) {
 8002e84:	79bb      	ldrb	r3, [r7, #6]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d820      	bhi.n	8002ecc <ProcessDoorControl+0xd8>
 8002e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e90 <ProcessDoorControl+0x9c>)
 8002e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e90:	08002eaf 	.word	0x08002eaf
 8002e94:	08002ebd 	.word	0x08002ebd
 8002e98:	08002ea1 	.word	0x08002ea1
 8002e9c:	08002ec5 	.word	0x08002ec5
            case DOOR_STATE_OPEN:
                printf("[DOOR] Fully opened (local state)\r\n");
 8002ea0:	4816      	ldr	r0, [pc, #88]	@ (8002efc <ProcessDoorControl+0x108>)
 8002ea2:	f003 f827 	bl	8005ef4 <puts>
                system_state.door_is_open = true;
 8002ea6:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <ProcessDoorControl+0xf8>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	70da      	strb	r2, [r3, #3]
                // SendDoorStatus(DOOR_STATE_OPEN);
                break;
 8002eac:	e00e      	b.n	8002ecc <ProcessDoorControl+0xd8>
                
            case DOOR_STATE_CLOSED:
                printf("[DOOR] Fully closed (local state)\r\n");
 8002eae:	4814      	ldr	r0, [pc, #80]	@ (8002f00 <ProcessDoorControl+0x10c>)
 8002eb0:	f003 f820 	bl	8005ef4 <puts>
                system_state.door_is_open = false;
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <ProcessDoorControl+0xf8>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	70da      	strb	r2, [r3, #3]
                // SendDoorStatus(DOOR_STATE_CLOSED);
                break;
 8002eba:	e007      	b.n	8002ecc <ProcessDoorControl+0xd8>
                
            case DOOR_STATE_OPENING:
                printf("[DOOR] Opening (local state)\r\n");
 8002ebc:	4811      	ldr	r0, [pc, #68]	@ (8002f04 <ProcessDoorControl+0x110>)
 8002ebe:	f003 f819 	bl	8005ef4 <puts>
                // SendDoorStatus(DOOR_STATE_OPENING);
                break;
 8002ec2:	e003      	b.n	8002ecc <ProcessDoorControl+0xd8>
            case DOOR_STATE_CLOSING:
                printf("[DOOR] Closing (local state)\r\n");
 8002ec4:	4810      	ldr	r0, [pc, #64]	@ (8002f08 <ProcessDoorControl+0x114>)
 8002ec6:	f003 f815 	bl	8005ef4 <puts>
                // SendDoorStatus(DOOR_STATE_CLOSING);
                break;
 8002eca:	bf00      	nop
        }
    }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200006fc 	.word	0x200006fc
 8002ed8:	08008020 	.word	0x08008020
 8002edc:	08007d54 	.word	0x08007d54
 8002ee0:	08008050 	.word	0x08008050
 8002ee4:	08008058 	.word	0x08008058
 8002ee8:	08008078 	.word	0x08008078
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	08008090 	.word	0x08008090
 8002ef4:	080080a8 	.word	0x080080a8
 8002ef8:	2000070c 	.word	0x2000070c
 8002efc:	080080d8 	.word	0x080080d8
 8002f00:	080080fc 	.word	0x080080fc
 8002f04:	08008120 	.word	0x08008120
 8002f08:	08008140 	.word	0x08008140

08002f0c <SendPhotoSensorEvent>:

/**
  * @brief  发送光电传感器事件
  */
void SendPhotoSensorEvent(uint8_t floor) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8002f16:	2310      	movs	r3, #16
 8002f18:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = floor;
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73bb      	strb	r3, [r7, #14]
    tx_buffer[3] = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
    
    rs485_send_packet_dma(tx_buffer, 4);
 8002f26:	f107 030c 	add.w	r3, r7, #12
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe f8e7 	bl	8001100 <rs485_send_packet_dma>
    system_state.rs485_tx_count++;
 8002f32:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <SendPhotoSensorEvent+0x44>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	3301      	adds	r3, #1
 8002f38:	4a05      	ldr	r2, [pc, #20]	@ (8002f50 <SendPhotoSensorEvent+0x44>)
 8002f3a:	6113      	str	r3, [r2, #16]
    printf("[RS485 TX] Photo sensor floor %d\r\n", floor);
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4804      	ldr	r0, [pc, #16]	@ (8002f54 <SendPhotoSensorEvent+0x48>)
 8002f42:	f002 ff6f 	bl	8005e24 <iprintf>
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000004 	.word	0x20000004
 8002f54:	08008160 	.word	0x08008160

08002f58 <PhotoSensor_TriggerCallback>:
/**
  * @brief  光电传感器触发回调
  * @note   在中断中被调用
  */
void PhotoSensor_TriggerCallback(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
    sensor_triggered = true;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <PhotoSensor_TriggerCallback+0x14>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	200006f8 	.word	0x200006f8

08002f70 <HAL_GPIO_EXTI_Callback>:
  * @brief  HAL GPIO EXTI回调 - 统一处理所有GPIO中断
  * @param  GPIO_Pin: 触发中断的引脚
  * @note   这个函数覆盖HAL库的weak函数
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f80:	d102      	bne.n	8002f88 <HAL_GPIO_EXTI_Callback+0x18>
        // PA11 中断 - 键盘按下
        Keyboard_IRQHandler();
 8002f82:	f7fe fccd 	bl	8001920 <Keyboard_IRQHandler>
    }
    else if (GPIO_Pin == GPIO_PIN_5) {
        // PB5 中断 - 光电传感器
        PhotoSensor_IRQHandler();
    }
}
 8002f86:	e004      	b.n	8002f92 <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_Pin == GPIO_PIN_5) {
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d101      	bne.n	8002f92 <HAL_GPIO_EXTI_Callback+0x22>
        PhotoSensor_IRQHandler();
 8002f8e:	f7fe fd29 	bl	80019e4 <PhotoSensor_IRQHandler>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_UART_TxCpltCallback>:

/**
  * @brief  UART TX DMA完成回调
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    extern void rs485_tx_complete_callback(void);
    if (huart == &huart2) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <HAL_UART_TxCpltCallback+0x1c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_TxCpltCallback+0x14>
        rs485_tx_complete_callback();
 8002fac:	f7fe f966 	bl	800127c <rs485_tx_complete_callback>
    }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	2000075c 	.word	0x2000075c

08002fbc <HAL_UART_RxCpltCallback>:

/**
  * @brief  UART RX DMA完成回调  
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
    // DMA循环模式下不需要处理
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd2:	b672      	cpsid	i
}
 8002fd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <Error_Handler+0x8>
	...

08002fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <HAL_MspInit+0x5c>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	4a14      	ldr	r2, [pc, #80]	@ (8003038 <HAL_MspInit+0x5c>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6193      	str	r3, [r2, #24]
 8002fee:	4b12      	ldr	r3, [pc, #72]	@ (8003038 <HAL_MspInit+0x5c>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8003038 <HAL_MspInit+0x5c>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8003038 <HAL_MspInit+0x5c>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003004:	61d3      	str	r3, [r2, #28]
 8003006:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <HAL_MspInit+0x5c>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003012:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_MspInit+0x60>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_MspInit+0x60>)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40021000 	.word	0x40021000
 800303c:	40010000 	.word	0x40010000

08003040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <NMI_Handler+0x4>

08003048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800304c:	bf00      	nop
 800304e:	e7fd      	b.n	800304c <HardFault_Handler+0x4>

08003050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <MemManage_Handler+0x4>

08003058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <BusFault_Handler+0x4>

08003060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <UsageFault_Handler+0x4>

08003068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003090:	f000 fade 	bl	8003650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}

08003098 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800309c:	4802      	ldr	r0, [pc, #8]	@ (80030a8 <DMA1_Channel6_IRQHandler+0x10>)
 800309e:	f000 fd93 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200007ec 	.word	0x200007ec

080030ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030b0:	4802      	ldr	r0, [pc, #8]	@ (80030bc <DMA1_Channel7_IRQHandler+0x10>)
 80030b2:	f000 fd89 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000830 	.word	0x20000830

080030c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* Check for IDLE interrupt */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <USART2_IRQHandler+0x20>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d101      	bne.n	80030d6 <USART2_IRQHandler+0x16>
  {
    /* Call RS485 IDLE handler */
    extern void rs485_idle_interrupt_handler(void);
    rs485_idle_interrupt_handler();
 80030d2:	f7fe f88f 	bl	80011f4 <rs485_idle_interrupt_handler>
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030d6:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <USART2_IRQHandler+0x20>)
 80030d8:	f001 fe8e 	bl	8004df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	2000075c 	.word	0x2000075c

080030e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts for PB5 (Photo Sensor).
  */
void EXTI9_5_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80030e8:	2020      	movs	r0, #32
 80030ea:	f001 f855 	bl	8004198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts for PA11 (Keyboard).
  */
void EXTI15_10_IRQHandler(void)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80030f6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80030fa:	f001 f84d 	bl	8004198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}

08003102 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e00a      	b.n	800312a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003114:	f3af 8000 	nop.w
 8003118:	4601      	mov	r1, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	60ba      	str	r2, [r7, #8]
 8003120:	b2ca      	uxtb	r2, r1
 8003122:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	dbf0      	blt.n	8003114 <_read+0x12>
  }

  return len;
 8003132:	687b      	ldr	r3, [r7, #4]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <_close>:
  }
  return len;
}

int _close(int file)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003162:	605a      	str	r2, [r3, #4]
  return 0;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <_isatty>:

int _isatty(int file)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003178:	2301      	movs	r3, #1
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a4:	4a14      	ldr	r2, [pc, #80]	@ (80031f8 <_sbrk+0x5c>)
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <_sbrk+0x60>)
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b0:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <_sbrk+0x64>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	@ (8003204 <_sbrk+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d207      	bcs.n	80031dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031cc:	f002 ffe2 	bl	8006194 <__errno>
 80031d0:	4603      	mov	r3, r0
 80031d2:	220c      	movs	r2, #12
 80031d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e009      	b.n	80031f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031dc:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031e2:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <_sbrk+0x64>)
 80031ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20005000 	.word	0x20005000
 80031fc:	00000400 	.word	0x00000400
 8003200:	20000710 	.word	0x20000710
 8003204:	200009c8 	.word	0x200009c8

08003208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003218:	4b11      	ldr	r3, [pc, #68]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 800321a:	4a12      	ldr	r2, [pc, #72]	@ (8003264 <MX_USART1_UART_Init+0x50>)
 800321c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 8003220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003226:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 800322e:	2200      	movs	r2, #0
 8003230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003232:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 800323a:	220c      	movs	r2, #12
 800323c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800323e:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800324a:	4805      	ldr	r0, [pc, #20]	@ (8003260 <MX_USART1_UART_Init+0x4c>)
 800324c:	f001 fbcc 	bl	80049e8 <HAL_UART_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003256:	f7ff feba 	bl	8002fce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000714 	.word	0x20000714
 8003264:	40013800 	.word	0x40013800

08003268 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 800326e:	4a12      	ldr	r2, [pc, #72]	@ (80032b8 <MX_USART2_UART_Init+0x50>)
 8003270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 8003274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800327a:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003280:	4b0c      	ldr	r3, [pc, #48]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 8003282:	2200      	movs	r2, #0
 8003284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003286:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800328c:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 800328e:	220c      	movs	r2, #12
 8003290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003292:	4b08      	ldr	r3, [pc, #32]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 8003294:	2200      	movs	r2, #0
 8003296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800329e:	4805      	ldr	r0, [pc, #20]	@ (80032b4 <MX_USART2_UART_Init+0x4c>)
 80032a0:	f001 fba2 	bl	80049e8 <HAL_UART_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032aa:	f7ff fe90 	bl	8002fce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000075c 	.word	0x2000075c
 80032b8:	40004400 	.word	0x40004400

080032bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032c0:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032c2:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <MX_USART3_UART_Init+0x4c>)
 80032c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80032c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032c8:	4a10      	ldr	r2, [pc, #64]	@ (800330c <MX_USART3_UART_Init+0x50>)
 80032ca:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032de:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032e0:	220c      	movs	r2, #12
 80032e2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e4:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ea:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032f0:	4804      	ldr	r0, [pc, #16]	@ (8003304 <MX_USART3_UART_Init+0x48>)
 80032f2:	f001 fb79 	bl	80049e8 <HAL_UART_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80032fc:	f7ff fe67 	bl	8002fce <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200007a4 	.word	0x200007a4
 8003308:	40004800 	.word	0x40004800
 800330c:	000f4240 	.word	0x000f4240

08003310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	@ 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0320 	add.w	r3, r7, #32
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7e      	ldr	r2, [pc, #504]	@ (8003524 <HAL_UART_MspInit+0x214>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d132      	bne.n	8003396 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003330:	4b7d      	ldr	r3, [pc, #500]	@ (8003528 <HAL_UART_MspInit+0x218>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4a7c      	ldr	r2, [pc, #496]	@ (8003528 <HAL_UART_MspInit+0x218>)
 8003336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800333a:	6193      	str	r3, [r2, #24]
 800333c:	4b7a      	ldr	r3, [pc, #488]	@ (8003528 <HAL_UART_MspInit+0x218>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003348:	4b77      	ldr	r3, [pc, #476]	@ (8003528 <HAL_UART_MspInit+0x218>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a76      	ldr	r2, [pc, #472]	@ (8003528 <HAL_UART_MspInit+0x218>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b74      	ldr	r3, [pc, #464]	@ (8003528 <HAL_UART_MspInit+0x218>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003360:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800336a:	2303      	movs	r3, #3
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336e:	f107 0320 	add.w	r3, r7, #32
 8003372:	4619      	mov	r1, r3
 8003374:	486d      	ldr	r0, [pc, #436]	@ (800352c <HAL_UART_MspInit+0x21c>)
 8003376:	f000 fd5b 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800337a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800337e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	f107 0320 	add.w	r3, r7, #32
 800338c:	4619      	mov	r1, r3
 800338e:	4867      	ldr	r0, [pc, #412]	@ (800352c <HAL_UART_MspInit+0x21c>)
 8003390:	f000 fd4e 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003394:	e0c1      	b.n	800351a <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a65      	ldr	r2, [pc, #404]	@ (8003530 <HAL_UART_MspInit+0x220>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f040 8085 	bne.w	80034ac <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033a2:	4b61      	ldr	r3, [pc, #388]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a60      	ldr	r2, [pc, #384]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ac:	61d3      	str	r3, [r2, #28]
 80033ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	4a5a      	ldr	r2, [pc, #360]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6193      	str	r3, [r2, #24]
 80033c6:	4b58      	ldr	r3, [pc, #352]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033d2:	2304      	movs	r3, #4
 80033d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033de:	f107 0320 	add.w	r3, r7, #32
 80033e2:	4619      	mov	r1, r3
 80033e4:	4851      	ldr	r0, [pc, #324]	@ (800352c <HAL_UART_MspInit+0x21c>)
 80033e6:	f000 fd23 	bl	8003e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033ea:	2308      	movs	r3, #8
 80033ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f6:	f107 0320 	add.w	r3, r7, #32
 80033fa:	4619      	mov	r1, r3
 80033fc:	484b      	ldr	r0, [pc, #300]	@ (800352c <HAL_UART_MspInit+0x21c>)
 80033fe:	f000 fd17 	bl	8003e30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003402:	4b4c      	ldr	r3, [pc, #304]	@ (8003534 <HAL_UART_MspInit+0x224>)
 8003404:	4a4c      	ldr	r2, [pc, #304]	@ (8003538 <HAL_UART_MspInit+0x228>)
 8003406:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003408:	4b4a      	ldr	r3, [pc, #296]	@ (8003534 <HAL_UART_MspInit+0x224>)
 800340a:	2200      	movs	r2, #0
 800340c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800340e:	4b49      	ldr	r3, [pc, #292]	@ (8003534 <HAL_UART_MspInit+0x224>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003414:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <HAL_UART_MspInit+0x224>)
 8003416:	2280      	movs	r2, #128	@ 0x80
 8003418:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800341a:	4b46      	ldr	r3, [pc, #280]	@ (8003534 <HAL_UART_MspInit+0x224>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003420:	4b44      	ldr	r3, [pc, #272]	@ (8003534 <HAL_UART_MspInit+0x224>)
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003426:	4b43      	ldr	r3, [pc, #268]	@ (8003534 <HAL_UART_MspInit+0x224>)
 8003428:	2220      	movs	r2, #32
 800342a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800342c:	4b41      	ldr	r3, [pc, #260]	@ (8003534 <HAL_UART_MspInit+0x224>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003432:	4840      	ldr	r0, [pc, #256]	@ (8003534 <HAL_UART_MspInit+0x224>)
 8003434:	f000 fa5a 	bl	80038ec <HAL_DMA_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_UART_MspInit+0x132>
      Error_Handler();
 800343e:	f7ff fdc6 	bl	8002fce <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a3b      	ldr	r2, [pc, #236]	@ (8003534 <HAL_UART_MspInit+0x224>)
 8003446:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003448:	4a3a      	ldr	r2, [pc, #232]	@ (8003534 <HAL_UART_MspInit+0x224>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800344e:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003450:	4a3b      	ldr	r2, [pc, #236]	@ (8003540 <HAL_UART_MspInit+0x230>)
 8003452:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003454:	4b39      	ldr	r3, [pc, #228]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003456:	2210      	movs	r2, #16
 8003458:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800345a:	4b38      	ldr	r3, [pc, #224]	@ (800353c <HAL_UART_MspInit+0x22c>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003460:	4b36      	ldr	r3, [pc, #216]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003466:	4b35      	ldr	r3, [pc, #212]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800346c:	4b33      	ldr	r3, [pc, #204]	@ (800353c <HAL_UART_MspInit+0x22c>)
 800346e:	2200      	movs	r2, #0
 8003470:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003472:	4b32      	ldr	r3, [pc, #200]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003474:	2200      	movs	r2, #0
 8003476:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003478:	4b30      	ldr	r3, [pc, #192]	@ (800353c <HAL_UART_MspInit+0x22c>)
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800347e:	482f      	ldr	r0, [pc, #188]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003480:	f000 fa34 	bl	80038ec <HAL_DMA_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0x17e>
      Error_Handler();
 800348a:	f7ff fda0 	bl	8002fce <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2a      	ldr	r2, [pc, #168]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003492:	639a      	str	r2, [r3, #56]	@ 0x38
 8003494:	4a29      	ldr	r2, [pc, #164]	@ (800353c <HAL_UART_MspInit+0x22c>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	2026      	movs	r0, #38	@ 0x26
 80034a0:	f000 f9ed 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034a4:	2026      	movs	r0, #38	@ 0x26
 80034a6:	f000 fa06 	bl	80038b6 <HAL_NVIC_EnableIRQ>
}
 80034aa:	e036      	b.n	800351a <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART3)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a24      	ldr	r2, [pc, #144]	@ (8003544 <HAL_UART_MspInit+0x234>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d131      	bne.n	800351a <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c0:	61d3      	str	r3, [r2, #28]
 80034c2:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ce:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	4a15      	ldr	r2, [pc, #84]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	6193      	str	r3, [r2, #24]
 80034da:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <HAL_UART_MspInit+0x218>)
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f4:	f107 0320 	add.w	r3, r7, #32
 80034f8:	4619      	mov	r1, r3
 80034fa:	4813      	ldr	r0, [pc, #76]	@ (8003548 <HAL_UART_MspInit+0x238>)
 80034fc:	f000 fc98 	bl	8003e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003500:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f107 0320 	add.w	r3, r7, #32
 8003512:	4619      	mov	r1, r3
 8003514:	480c      	ldr	r0, [pc, #48]	@ (8003548 <HAL_UART_MspInit+0x238>)
 8003516:	f000 fc8b 	bl	8003e30 <HAL_GPIO_Init>
}
 800351a:	bf00      	nop
 800351c:	3730      	adds	r7, #48	@ 0x30
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40013800 	.word	0x40013800
 8003528:	40021000 	.word	0x40021000
 800352c:	40010800 	.word	0x40010800
 8003530:	40004400 	.word	0x40004400
 8003534:	200007ec 	.word	0x200007ec
 8003538:	4002006c 	.word	0x4002006c
 800353c:	20000830 	.word	0x20000830
 8003540:	40020080 	.word	0x40020080
 8003544:	40004800 	.word	0x40004800
 8003548:	40010c00 	.word	0x40010c00

0800354c <_write>:

/* USER CODE BEGIN 1 */

/* Redirect printf to USART1 for debug output */
int _write(int file, char *ptr, int len)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	b29a      	uxth	r2, r3
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	4804      	ldr	r0, [pc, #16]	@ (8003574 <_write+0x28>)
 8003564:	f001 fa90 	bl	8004a88 <HAL_UART_Transmit>
  return len;
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000714 	.word	0x20000714

08003578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003578:	f7ff fe46 	bl	8003208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800357c:	480b      	ldr	r0, [pc, #44]	@ (80035ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800357e:	490c      	ldr	r1, [pc, #48]	@ (80035b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003580:	4a0c      	ldr	r2, [pc, #48]	@ (80035b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003584:	e002      	b.n	800358c <LoopCopyDataInit>

08003586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358a:	3304      	adds	r3, #4

0800358c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800358c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003590:	d3f9      	bcc.n	8003586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003592:	4a09      	ldr	r2, [pc, #36]	@ (80035b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003594:	4c09      	ldr	r4, [pc, #36]	@ (80035bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003598:	e001      	b.n	800359e <LoopFillZerobss>

0800359a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800359a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800359c:	3204      	adds	r2, #4

0800359e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a0:	d3fb      	bcc.n	800359a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035a2:	f002 fdfd 	bl	80061a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035a6:	f7ff f887 	bl	80026b8 <main>
  bx lr
 80035aa:	4770      	bx	lr
  ldr r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80035b4:	08008310 	.word	0x08008310
  ldr r2, =_sbss
 80035b8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80035bc:	200009c4 	.word	0x200009c4

080035c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035c0:	e7fe      	b.n	80035c0 <ADC1_2_IRQHandler>
	...

080035c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c8:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_Init+0x28>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a07      	ldr	r2, [pc, #28]	@ (80035ec <HAL_Init+0x28>)
 80035ce:	f043 0310 	orr.w	r3, r3, #16
 80035d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d4:	2003      	movs	r0, #3
 80035d6:	f000 f947 	bl	8003868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035da:	200f      	movs	r0, #15
 80035dc:	f000 f808 	bl	80035f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e0:	f7ff fcfc 	bl	8002fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40022000 	.word	0x40022000

080035f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f8:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <HAL_InitTick+0x54>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <HAL_InitTick+0x58>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003606:	fbb3 f3f1 	udiv	r3, r3, r1
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f95f 	bl	80038d2 <HAL_SYSTICK_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e00e      	b.n	800363c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b0f      	cmp	r3, #15
 8003622:	d80a      	bhi.n	800363a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003624:	2200      	movs	r2, #0
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	f000 f927 	bl	800387e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003630:	4a06      	ldr	r2, [pc, #24]	@ (800364c <HAL_InitTick+0x5c>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000024 	.word	0x20000024
 8003648:	2000002c 	.word	0x2000002c
 800364c:	20000028 	.word	0x20000028

08003650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_IncTick+0x1c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_IncTick+0x20>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4413      	add	r3, r2
 8003660:	4a03      	ldr	r2, [pc, #12]	@ (8003670 <HAL_IncTick+0x20>)
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	2000002c 	.word	0x2000002c
 8003670:	20000874 	.word	0x20000874

08003674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return uwTick;
 8003678:	4b02      	ldr	r3, [pc, #8]	@ (8003684 <HAL_GetTick+0x10>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	20000874 	.word	0x20000874

08003688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff fff0 	bl	8003674 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d005      	beq.n	80036ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_Delay+0x44>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ae:	bf00      	nop
 80036b0:	f7ff ffe0 	bl	8003674 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d8f7      	bhi.n	80036b0 <HAL_Delay+0x28>
  {
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	2000002c 	.word	0x2000002c

080036d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003714 <__NVIC_SetPriorityGrouping+0x44>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036ec:	4013      	ands	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003702:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <__NVIC_SetPriorityGrouping+0x44>)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	60d3      	str	r3, [r2, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800371c:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <__NVIC_GetPriorityGrouping+0x18>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 0307 	and.w	r3, r3, #7
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	2b00      	cmp	r3, #0
 8003744:	db0b      	blt.n	800375e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	f003 021f 	and.w	r2, r3, #31
 800374c:	4906      	ldr	r1, [pc, #24]	@ (8003768 <__NVIC_EnableIRQ+0x34>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2001      	movs	r0, #1
 8003756:	fa00 f202 	lsl.w	r2, r0, r2
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	e000e100 	.word	0xe000e100

0800376c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	2b00      	cmp	r3, #0
 800377e:	db0a      	blt.n	8003796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	490c      	ldr	r1, [pc, #48]	@ (80037b8 <__NVIC_SetPriority+0x4c>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	0112      	lsls	r2, r2, #4
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	440b      	add	r3, r1
 8003790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003794:	e00a      	b.n	80037ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4908      	ldr	r1, [pc, #32]	@ (80037bc <__NVIC_SetPriority+0x50>)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	3b04      	subs	r3, #4
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	440b      	add	r3, r1
 80037aa:	761a      	strb	r2, [r3, #24]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000e100 	.word	0xe000e100
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f1c3 0307 	rsb	r3, r3, #7
 80037da:	2b04      	cmp	r3, #4
 80037dc:	bf28      	it	cs
 80037de:	2304      	movcs	r3, #4
 80037e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d902      	bls.n	80037f0 <NVIC_EncodePriority+0x30>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3b03      	subs	r3, #3
 80037ee:	e000      	b.n	80037f2 <NVIC_EncodePriority+0x32>
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43da      	mvns	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	401a      	ands	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003808:	f04f 31ff 	mov.w	r1, #4294967295
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	43d9      	mvns	r1, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	4313      	orrs	r3, r2
         );
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	@ 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003834:	d301      	bcc.n	800383a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003836:	2301      	movs	r3, #1
 8003838:	e00f      	b.n	800385a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800383a:	4a0a      	ldr	r2, [pc, #40]	@ (8003864 <SysTick_Config+0x40>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003842:	210f      	movs	r1, #15
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f7ff ff90 	bl	800376c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800384c:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <SysTick_Config+0x40>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003852:	4b04      	ldr	r3, [pc, #16]	@ (8003864 <SysTick_Config+0x40>)
 8003854:	2207      	movs	r2, #7
 8003856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	e000e010 	.word	0xe000e010

08003868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff2d 	bl	80036d0 <__NVIC_SetPriorityGrouping>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003890:	f7ff ff42 	bl	8003718 <__NVIC_GetPriorityGrouping>
 8003894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	6978      	ldr	r0, [r7, #20]
 800389c:	f7ff ff90 	bl	80037c0 <NVIC_EncodePriority>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff5f 	bl	800376c <__NVIC_SetPriority>
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff35 	bl	8003734 <__NVIC_EnableIRQ>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ffa2 	bl	8003824 <SysTick_Config>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e043      	b.n	800398a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4b22      	ldr	r3, [pc, #136]	@ (8003994 <HAL_DMA_Init+0xa8>)
 800390a:	4413      	add	r3, r2
 800390c:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_Init+0xac>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	009a      	lsls	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1f      	ldr	r2, [pc, #124]	@ (800399c <HAL_DMA_Init+0xb0>)
 800391e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003936:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800393a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	bffdfff8 	.word	0xbffdfff8
 8003998:	cccccccd 	.word	0xcccccccd
 800399c:	40020000 	.word	0x40020000

080039a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA_Start_IT+0x20>
 80039bc:	2302      	movs	r3, #2
 80039be:	e04b      	b.n	8003a58 <HAL_DMA_Start_IT+0xb8>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d13a      	bne.n	8003a4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f9eb 	bl	8003dd4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 020e 	orr.w	r2, r2, #14
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e00f      	b.n	8003a38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0204 	bic.w	r2, r2, #4
 8003a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 020a 	orr.w	r2, r2, #10
 8003a36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e005      	b.n	8003a56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d008      	beq.n	8003a8a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e020      	b.n	8003acc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 020e 	bic.w	r2, r2, #14
 8003a98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d005      	beq.n	8003afc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
 8003afa:	e051      	b.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 020e 	bic.w	r2, r2, #14
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a22      	ldr	r2, [pc, #136]	@ (8003bac <HAL_DMA_Abort_IT+0xd4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d029      	beq.n	8003b7a <HAL_DMA_Abort_IT+0xa2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a21      	ldr	r2, [pc, #132]	@ (8003bb0 <HAL_DMA_Abort_IT+0xd8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x9e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb4 <HAL_DMA_Abort_IT+0xdc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01a      	beq.n	8003b70 <HAL_DMA_Abort_IT+0x98>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb8 <HAL_DMA_Abort_IT+0xe0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d012      	beq.n	8003b6a <HAL_DMA_Abort_IT+0x92>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <HAL_DMA_Abort_IT+0xe4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00a      	beq.n	8003b64 <HAL_DMA_Abort_IT+0x8c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc0 <HAL_DMA_Abort_IT+0xe8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d102      	bne.n	8003b5e <HAL_DMA_Abort_IT+0x86>
 8003b58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b5c:	e00e      	b.n	8003b7c <HAL_DMA_Abort_IT+0xa4>
 8003b5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b62:	e00b      	b.n	8003b7c <HAL_DMA_Abort_IT+0xa4>
 8003b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b68:	e008      	b.n	8003b7c <HAL_DMA_Abort_IT+0xa4>
 8003b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b6e:	e005      	b.n	8003b7c <HAL_DMA_Abort_IT+0xa4>
 8003b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b74:	e002      	b.n	8003b7c <HAL_DMA_Abort_IT+0xa4>
 8003b76:	2310      	movs	r3, #16
 8003b78:	e000      	b.n	8003b7c <HAL_DMA_Abort_IT+0xa4>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4a11      	ldr	r2, [pc, #68]	@ (8003bc4 <HAL_DMA_Abort_IT+0xec>)
 8003b7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
    } 
  }
  return status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40020008 	.word	0x40020008
 8003bb0:	4002001c 	.word	0x4002001c
 8003bb4:	40020030 	.word	0x40020030
 8003bb8:	40020044 	.word	0x40020044
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	4002006c 	.word	0x4002006c
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	2204      	movs	r2, #4
 8003be6:	409a      	lsls	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d04f      	beq.n	8003c90 <HAL_DMA_IRQHandler+0xc8>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d04a      	beq.n	8003c90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0204 	bic.w	r2, r2, #4
 8003c16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a66      	ldr	r2, [pc, #408]	@ (8003db8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d029      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xae>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a65      	ldr	r2, [pc, #404]	@ (8003dbc <HAL_DMA_IRQHandler+0x1f4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d022      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xaa>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a63      	ldr	r2, [pc, #396]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1f8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01a      	beq.n	8003c6c <HAL_DMA_IRQHandler+0xa4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a62      	ldr	r2, [pc, #392]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1fc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d012      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x9e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a60      	ldr	r2, [pc, #384]	@ (8003dc8 <HAL_DMA_IRQHandler+0x200>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00a      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x98>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dcc <HAL_DMA_IRQHandler+0x204>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d102      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x92>
 8003c54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c58:	e00e      	b.n	8003c78 <HAL_DMA_IRQHandler+0xb0>
 8003c5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c5e:	e00b      	b.n	8003c78 <HAL_DMA_IRQHandler+0xb0>
 8003c60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003c64:	e008      	b.n	8003c78 <HAL_DMA_IRQHandler+0xb0>
 8003c66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c6a:	e005      	b.n	8003c78 <HAL_DMA_IRQHandler+0xb0>
 8003c6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c70:	e002      	b.n	8003c78 <HAL_DMA_IRQHandler+0xb0>
 8003c72:	2340      	movs	r3, #64	@ 0x40
 8003c74:	e000      	b.n	8003c78 <HAL_DMA_IRQHandler+0xb0>
 8003c76:	2304      	movs	r3, #4
 8003c78:	4a55      	ldr	r2, [pc, #340]	@ (8003dd0 <HAL_DMA_IRQHandler+0x208>)
 8003c7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8094 	beq.w	8003dae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c8e:	e08e      	b.n	8003dae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	2202      	movs	r2, #2
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d056      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x186>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d051      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 020a 	bic.w	r2, r2, #10
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a38      	ldr	r2, [pc, #224]	@ (8003db8 <HAL_DMA_IRQHandler+0x1f0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d029      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x166>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a37      	ldr	r2, [pc, #220]	@ (8003dbc <HAL_DMA_IRQHandler+0x1f4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d022      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x162>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a35      	ldr	r2, [pc, #212]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1f8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01a      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x15c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a34      	ldr	r2, [pc, #208]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1fc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d012      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x156>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a32      	ldr	r2, [pc, #200]	@ (8003dc8 <HAL_DMA_IRQHandler+0x200>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00a      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x150>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a31      	ldr	r2, [pc, #196]	@ (8003dcc <HAL_DMA_IRQHandler+0x204>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d102      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x14a>
 8003d0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d10:	e00e      	b.n	8003d30 <HAL_DMA_IRQHandler+0x168>
 8003d12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d16:	e00b      	b.n	8003d30 <HAL_DMA_IRQHandler+0x168>
 8003d18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d1c:	e008      	b.n	8003d30 <HAL_DMA_IRQHandler+0x168>
 8003d1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d22:	e005      	b.n	8003d30 <HAL_DMA_IRQHandler+0x168>
 8003d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d28:	e002      	b.n	8003d30 <HAL_DMA_IRQHandler+0x168>
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	e000      	b.n	8003d30 <HAL_DMA_IRQHandler+0x168>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	4a27      	ldr	r2, [pc, #156]	@ (8003dd0 <HAL_DMA_IRQHandler+0x208>)
 8003d32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d034      	beq.n	8003dae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d4c:	e02f      	b.n	8003dae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2208      	movs	r2, #8
 8003d54:	409a      	lsls	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d028      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x1e8>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d023      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 020e 	bic.w	r2, r2, #14
 8003d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	2101      	movs	r1, #1
 8003d82:	fa01 f202 	lsl.w	r2, r1, r2
 8003d86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
    }
  }
  return;
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
}
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40020008 	.word	0x40020008
 8003dbc:	4002001c 	.word	0x4002001c
 8003dc0:	40020030 	.word	0x40020030
 8003dc4:	40020044 	.word	0x40020044
 8003dc8:	40020058 	.word	0x40020058
 8003dcc:	4002006c 	.word	0x4002006c
 8003dd0:	40020000 	.word	0x40020000

08003dd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d108      	bne.n	8003e14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e12:	e007      	b.n	8003e24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
	...

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b08b      	sub	sp, #44	@ 0x2c
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	e169      	b.n	8004118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e44:	2201      	movs	r2, #1
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f040 8158 	bne.w	8004112 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4a9a      	ldr	r2, [pc, #616]	@ (80040d0 <HAL_GPIO_Init+0x2a0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d05e      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e6c:	4a98      	ldr	r2, [pc, #608]	@ (80040d0 <HAL_GPIO_Init+0x2a0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d875      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e72:	4a98      	ldr	r2, [pc, #608]	@ (80040d4 <HAL_GPIO_Init+0x2a4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d058      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e78:	4a96      	ldr	r2, [pc, #600]	@ (80040d4 <HAL_GPIO_Init+0x2a4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d86f      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e7e:	4a96      	ldr	r2, [pc, #600]	@ (80040d8 <HAL_GPIO_Init+0x2a8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d052      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e84:	4a94      	ldr	r2, [pc, #592]	@ (80040d8 <HAL_GPIO_Init+0x2a8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d869      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e8a:	4a94      	ldr	r2, [pc, #592]	@ (80040dc <HAL_GPIO_Init+0x2ac>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d04c      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e90:	4a92      	ldr	r2, [pc, #584]	@ (80040dc <HAL_GPIO_Init+0x2ac>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d863      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e96:	4a92      	ldr	r2, [pc, #584]	@ (80040e0 <HAL_GPIO_Init+0x2b0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d046      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e9c:	4a90      	ldr	r2, [pc, #576]	@ (80040e0 <HAL_GPIO_Init+0x2b0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d85d      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003ea2:	2b12      	cmp	r3, #18
 8003ea4:	d82a      	bhi.n	8003efc <HAL_GPIO_Init+0xcc>
 8003ea6:	2b12      	cmp	r3, #18
 8003ea8:	d859      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <HAL_GPIO_Init+0x80>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003f2b 	.word	0x08003f2b
 8003eb4:	08003f05 	.word	0x08003f05
 8003eb8:	08003f17 	.word	0x08003f17
 8003ebc:	08003f59 	.word	0x08003f59
 8003ec0:	08003f5f 	.word	0x08003f5f
 8003ec4:	08003f5f 	.word	0x08003f5f
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003f5f 	.word	0x08003f5f
 8003ed0:	08003f5f 	.word	0x08003f5f
 8003ed4:	08003f5f 	.word	0x08003f5f
 8003ed8:	08003f5f 	.word	0x08003f5f
 8003edc:	08003f5f 	.word	0x08003f5f
 8003ee0:	08003f5f 	.word	0x08003f5f
 8003ee4:	08003f5f 	.word	0x08003f5f
 8003ee8:	08003f5f 	.word	0x08003f5f
 8003eec:	08003f5f 	.word	0x08003f5f
 8003ef0:	08003f5f 	.word	0x08003f5f
 8003ef4:	08003f0d 	.word	0x08003f0d
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	4a79      	ldr	r2, [pc, #484]	@ (80040e4 <HAL_GPIO_Init+0x2b4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f02:	e02c      	b.n	8003f5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	623b      	str	r3, [r7, #32]
          break;
 8003f0a:	e029      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	3304      	adds	r3, #4
 8003f12:	623b      	str	r3, [r7, #32]
          break;
 8003f14:	e024      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	623b      	str	r3, [r7, #32]
          break;
 8003f1e:	e01f      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	330c      	adds	r3, #12
 8003f26:	623b      	str	r3, [r7, #32]
          break;
 8003f28:	e01a      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f32:	2304      	movs	r3, #4
 8003f34:	623b      	str	r3, [r7, #32]
          break;
 8003f36:	e013      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f40:	2308      	movs	r3, #8
 8003f42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	611a      	str	r2, [r3, #16]
          break;
 8003f4a:	e009      	b.n	8003f60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	615a      	str	r2, [r3, #20]
          break;
 8003f56:	e003      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	623b      	str	r3, [r7, #32]
          break;
 8003f5c:	e000      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          break;
 8003f5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2bff      	cmp	r3, #255	@ 0xff
 8003f64:	d801      	bhi.n	8003f6a <HAL_GPIO_Init+0x13a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	e001      	b.n	8003f6e <HAL_GPIO_Init+0x13e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2bff      	cmp	r3, #255	@ 0xff
 8003f74:	d802      	bhi.n	8003f7c <HAL_GPIO_Init+0x14c>
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	e002      	b.n	8003f82 <HAL_GPIO_Init+0x152>
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	3b08      	subs	r3, #8
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	210f      	movs	r1, #15
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80b1 	beq.w	8004112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80040e8 <HAL_GPIO_Init+0x2b8>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80040e8 <HAL_GPIO_Init+0x2b8>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6193      	str	r3, [r2, #24]
 8003fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80040e8 <HAL_GPIO_Init+0x2b8>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fc8:	4a48      	ldr	r2, [pc, #288]	@ (80040ec <HAL_GPIO_Init+0x2bc>)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	3302      	adds	r3, #2
 8003fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a40      	ldr	r2, [pc, #256]	@ (80040f0 <HAL_GPIO_Init+0x2c0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_GPIO_Init+0x1ec>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80040f4 <HAL_GPIO_Init+0x2c4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00d      	beq.n	8004018 <HAL_GPIO_Init+0x1e8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80040f8 <HAL_GPIO_Init+0x2c8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <HAL_GPIO_Init+0x1e4>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3d      	ldr	r2, [pc, #244]	@ (80040fc <HAL_GPIO_Init+0x2cc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_GPIO_Init+0x1e0>
 800400c:	2303      	movs	r3, #3
 800400e:	e006      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004010:	2304      	movs	r3, #4
 8004012:	e004      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004014:	2302      	movs	r3, #2
 8004016:	e002      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 800401c:	2300      	movs	r3, #0
 800401e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004020:	f002 0203 	and.w	r2, r2, #3
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	4093      	lsls	r3, r2
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800402e:	492f      	ldr	r1, [pc, #188]	@ (80040ec <HAL_GPIO_Init+0x2bc>)
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004048:	4b2d      	ldr	r3, [pc, #180]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	492c      	ldr	r1, [pc, #176]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
 8004054:	e006      	b.n	8004064 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004056:	4b2a      	ldr	r3, [pc, #168]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	43db      	mvns	r3, r3
 800405e:	4928      	ldr	r1, [pc, #160]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 8004060:	4013      	ands	r3, r2
 8004062:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004070:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	4922      	ldr	r1, [pc, #136]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	60cb      	str	r3, [r1, #12]
 800407c:	e006      	b.n	800408c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800407e:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	43db      	mvns	r3, r3
 8004086:	491e      	ldr	r1, [pc, #120]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 8004088:	4013      	ands	r3, r2
 800408a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d006      	beq.n	80040a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	4918      	ldr	r1, [pc, #96]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040a6:	4b16      	ldr	r3, [pc, #88]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	4914      	ldr	r1, [pc, #80]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d021      	beq.n	8004104 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	490e      	ldr	r1, [pc, #56]	@ (8004100 <HAL_GPIO_Init+0x2d0>)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
 80040cc:	e021      	b.n	8004112 <HAL_GPIO_Init+0x2e2>
 80040ce:	bf00      	nop
 80040d0:	10320000 	.word	0x10320000
 80040d4:	10310000 	.word	0x10310000
 80040d8:	10220000 	.word	0x10220000
 80040dc:	10210000 	.word	0x10210000
 80040e0:	10120000 	.word	0x10120000
 80040e4:	10110000 	.word	0x10110000
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010800 	.word	0x40010800
 80040f4:	40010c00 	.word	0x40010c00
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40011400 	.word	0x40011400
 8004100:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <HAL_GPIO_Init+0x304>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	43db      	mvns	r3, r3
 800410c:	4909      	ldr	r1, [pc, #36]	@ (8004134 <HAL_GPIO_Init+0x304>)
 800410e:	4013      	ands	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	3301      	adds	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	f47f ae8e 	bne.w	8003e44 <HAL_GPIO_Init+0x14>
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	372c      	adds	r7, #44	@ 0x2c
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	40010400 	.word	0x40010400

08004138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e001      	b.n	800415a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	807b      	strh	r3, [r7, #2]
 8004172:	4613      	mov	r3, r2
 8004174:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004176:	787b      	ldrb	r3, [r7, #1]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800417c:	887a      	ldrh	r2, [r7, #2]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004182:	e003      	b.n	800418c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	041a      	lsls	r2, r3, #16
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	611a      	str	r2, [r3, #16]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
	...

08004198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041a2:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ae:	4a05      	ldr	r2, [pc, #20]	@ (80041c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe feda 	bl	8002f70 <HAL_GPIO_EXTI_Callback>
  }
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40010400 	.word	0x40010400

080041c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e272      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8087 	beq.w	80042f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041e8:	4b92      	ldr	r3, [pc, #584]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d00c      	beq.n	800420e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d112      	bne.n	8004226 <HAL_RCC_OscConfig+0x5e>
 8004200:	4b8c      	ldr	r3, [pc, #560]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800420c:	d10b      	bne.n	8004226 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420e:	4b89      	ldr	r3, [pc, #548]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d06c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x12c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d168      	bne.n	80042f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e24c      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x76>
 8004230:	4b80      	ldr	r3, [pc, #512]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7f      	ldr	r2, [pc, #508]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e02e      	b.n	800429c <HAL_RCC_OscConfig+0xd4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x98>
 8004246:	4b7b      	ldr	r3, [pc, #492]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7a      	ldr	r2, [pc, #488]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800424c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b78      	ldr	r3, [pc, #480]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a77      	ldr	r2, [pc, #476]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e01d      	b.n	800429c <HAL_RCC_OscConfig+0xd4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0xbc>
 800426a:	4b72      	ldr	r3, [pc, #456]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a71      	ldr	r2, [pc, #452]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b6f      	ldr	r3, [pc, #444]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a6e      	ldr	r2, [pc, #440]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0xd4>
 8004284:	4b6b      	ldr	r3, [pc, #428]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a6a      	ldr	r2, [pc, #424]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b68      	ldr	r3, [pc, #416]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a67      	ldr	r2, [pc, #412]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800429a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d013      	beq.n	80042cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7ff f9e6 	bl	8003674 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7ff f9e2 	bl	8003674 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	@ 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e200      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b5d      	ldr	r3, [pc, #372]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0xe4>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7ff f9d2 	bl	8003674 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d4:	f7ff f9ce 	bl	8003674 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	@ 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1ec      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	4b53      	ldr	r3, [pc, #332]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x10c>
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d063      	beq.n	80043ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004302:	4b4c      	ldr	r3, [pc, #304]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800430e:	4b49      	ldr	r3, [pc, #292]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	2b08      	cmp	r3, #8
 8004318:	d11c      	bne.n	8004354 <HAL_RCC_OscConfig+0x18c>
 800431a:	4b46      	ldr	r3, [pc, #280]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d116      	bne.n	8004354 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	4b43      	ldr	r3, [pc, #268]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x176>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e1c0      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4b3d      	ldr	r3, [pc, #244]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4939      	ldr	r1, [pc, #228]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	e03a      	b.n	80043ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435c:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <HAL_RCC_OscConfig+0x270>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7ff f987 	bl	8003674 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436a:	f7ff f983 	bl	8003674 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e1a1      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	4b2d      	ldr	r3, [pc, #180]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4927      	ldr	r1, [pc, #156]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439e:	4b26      	ldr	r3, [pc, #152]	@ (8004438 <HAL_RCC_OscConfig+0x270>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7ff f966 	bl	8003674 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ac:	f7ff f962 	bl	8003674 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e180      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d03a      	beq.n	800444c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d019      	beq.n	8004412 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043de:	4b17      	ldr	r3, [pc, #92]	@ (800443c <HAL_RCC_OscConfig+0x274>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e4:	f7ff f946 	bl	8003674 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ec:	f7ff f942 	bl	8003674 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e160      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <HAL_RCC_OscConfig+0x26c>)
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800440a:	2001      	movs	r0, #1
 800440c:	f000 face 	bl	80049ac <RCC_Delay>
 8004410:	e01c      	b.n	800444c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_RCC_OscConfig+0x274>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004418:	f7ff f92c 	bl	8003674 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441e:	e00f      	b.n	8004440 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004420:	f7ff f928 	bl	8003674 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d908      	bls.n	8004440 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e146      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	42420000 	.word	0x42420000
 800443c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	4b92      	ldr	r3, [pc, #584]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e9      	bne.n	8004420 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80a6 	beq.w	80045a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445a:	2300      	movs	r3, #0
 800445c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445e:	4b8b      	ldr	r3, [pc, #556]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	4b88      	ldr	r3, [pc, #544]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	4a87      	ldr	r2, [pc, #540]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004474:	61d3      	str	r3, [r2, #28]
 8004476:	4b85      	ldr	r3, [pc, #532]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b82      	ldr	r3, [pc, #520]	@ (8004690 <HAL_RCC_OscConfig+0x4c8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d118      	bne.n	80044c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004492:	4b7f      	ldr	r3, [pc, #508]	@ (8004690 <HAL_RCC_OscConfig+0x4c8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7e      	ldr	r2, [pc, #504]	@ (8004690 <HAL_RCC_OscConfig+0x4c8>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7ff f8e9 	bl	8003674 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7ff f8e5 	bl	8003674 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	@ 0x64
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e103      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b8:	4b75      	ldr	r3, [pc, #468]	@ (8004690 <HAL_RCC_OscConfig+0x4c8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x312>
 80044cc:	4b6f      	ldr	r3, [pc, #444]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a6e      	ldr	r2, [pc, #440]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6213      	str	r3, [r2, #32]
 80044d8:	e02d      	b.n	8004536 <HAL_RCC_OscConfig+0x36e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x334>
 80044e2:	4b6a      	ldr	r3, [pc, #424]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	4a69      	ldr	r2, [pc, #420]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	6213      	str	r3, [r2, #32]
 80044ee:	4b67      	ldr	r3, [pc, #412]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4a66      	ldr	r2, [pc, #408]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6213      	str	r3, [r2, #32]
 80044fa:	e01c      	b.n	8004536 <HAL_RCC_OscConfig+0x36e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b05      	cmp	r3, #5
 8004502:	d10c      	bne.n	800451e <HAL_RCC_OscConfig+0x356>
 8004504:	4b61      	ldr	r3, [pc, #388]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4a60      	ldr	r2, [pc, #384]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	6213      	str	r3, [r2, #32]
 8004510:	4b5e      	ldr	r3, [pc, #376]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4a5d      	ldr	r2, [pc, #372]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6213      	str	r3, [r2, #32]
 800451c:	e00b      	b.n	8004536 <HAL_RCC_OscConfig+0x36e>
 800451e:	4b5b      	ldr	r3, [pc, #364]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	4a5a      	ldr	r2, [pc, #360]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6213      	str	r3, [r2, #32]
 800452a:	4b58      	ldr	r3, [pc, #352]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	4a57      	ldr	r2, [pc, #348]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d015      	beq.n	800456a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7ff f899 	bl	8003674 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7ff f895 	bl	8003674 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0b1      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	4b4b      	ldr	r3, [pc, #300]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ee      	beq.n	8004546 <HAL_RCC_OscConfig+0x37e>
 8004568:	e014      	b.n	8004594 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456a:	f7ff f883 	bl	8003674 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7ff f87f 	bl	8003674 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e09b      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004588:	4b40      	ldr	r3, [pc, #256]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ee      	bne.n	8004572 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b3c      	ldr	r3, [pc, #240]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4a3b      	ldr	r2, [pc, #236]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8087 	beq.w	80046be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045b0:	4b36      	ldr	r3, [pc, #216]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d061      	beq.n	8004680 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d146      	bne.n	8004652 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c4:	4b33      	ldr	r3, [pc, #204]	@ (8004694 <HAL_RCC_OscConfig+0x4cc>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7ff f853 	bl	8003674 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d2:	f7ff f84f 	bl	8003674 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e06d      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e4:	4b29      	ldr	r3, [pc, #164]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f8:	d108      	bne.n	800460c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045fa:	4b24      	ldr	r3, [pc, #144]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4921      	ldr	r1, [pc, #132]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460c:	4b1f      	ldr	r3, [pc, #124]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a19      	ldr	r1, [r3, #32]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	430b      	orrs	r3, r1
 800461e:	491b      	ldr	r1, [pc, #108]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004624:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <HAL_RCC_OscConfig+0x4cc>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462a:	f7ff f823 	bl	8003674 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004632:	f7ff f81f 	bl	8003674 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e03d      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004644:	4b11      	ldr	r3, [pc, #68]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x46a>
 8004650:	e035      	b.n	80046be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <HAL_RCC_OscConfig+0x4cc>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7ff f80c 	bl	8003674 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004660:	f7ff f808 	bl	8003674 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e026      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004672:	4b06      	ldr	r3, [pc, #24]	@ (800468c <HAL_RCC_OscConfig+0x4c4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x498>
 800467e:	e01e      	b.n	80046be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e019      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
 800468c:	40021000 	.word	0x40021000
 8004690:	40007000 	.word	0x40007000
 8004694:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <HAL_RCC_OscConfig+0x500>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d106      	bne.n	80046ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d001      	beq.n	80046be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000

080046cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0d0      	b.n	8004882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e0:	4b6a      	ldr	r3, [pc, #424]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d910      	bls.n	8004710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b67      	ldr	r3, [pc, #412]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0207 	bic.w	r2, r3, #7
 80046f6:	4965      	ldr	r1, [pc, #404]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b63      	ldr	r3, [pc, #396]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0b8      	b.n	8004882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004728:	4b59      	ldr	r3, [pc, #356]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a58      	ldr	r2, [pc, #352]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004740:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a52      	ldr	r2, [pc, #328]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800474a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	4b50      	ldr	r3, [pc, #320]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	494d      	ldr	r1, [pc, #308]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d040      	beq.n	80047ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b47      	ldr	r3, [pc, #284]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d115      	bne.n	80047aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478a:	4b41      	ldr	r3, [pc, #260]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e073      	b.n	8004882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479a:	4b3d      	ldr	r3, [pc, #244]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e06b      	b.n	8004882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047aa:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f023 0203 	bic.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4936      	ldr	r1, [pc, #216]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047bc:	f7fe ff5a 	bl	8003674 <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	e00a      	b.n	80047da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c4:	f7fe ff56 	bl	8003674 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e053      	b.n	8004882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	4b2d      	ldr	r3, [pc, #180]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 020c 	and.w	r2, r3, #12
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1eb      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ec:	4b27      	ldr	r3, [pc, #156]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d210      	bcs.n	800481c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b24      	ldr	r3, [pc, #144]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 0207 	bic.w	r2, r3, #7
 8004802:	4922      	ldr	r1, [pc, #136]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b20      	ldr	r3, [pc, #128]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e032      	b.n	8004882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4916      	ldr	r1, [pc, #88]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004846:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490e      	ldr	r1, [pc, #56]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800485a:	f000 f821 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490a      	ldr	r1, [pc, #40]	@ (8004894 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x1cc>)
 8004874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004876:	4b09      	ldr	r3, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1d0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe feb8 	bl	80035f0 <HAL_InitTick>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40022000 	.word	0x40022000
 8004890:	40021000 	.word	0x40021000
 8004894:	080082a8 	.word	0x080082a8
 8004898:	20000024 	.word	0x20000024
 800489c:	20000028 	.word	0x20000028

080048a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x94>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d002      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x30>
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x36>
 80048ce:	e027      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048d0:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x98>)
 80048d2:	613b      	str	r3, [r7, #16]
      break;
 80048d4:	e027      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	0c9b      	lsrs	r3, r3, #18
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	4a17      	ldr	r2, [pc, #92]	@ (800493c <HAL_RCC_GetSysClockFreq+0x9c>)
 80048e0:	5cd3      	ldrb	r3, [r2, r3]
 80048e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ee:	4b11      	ldr	r3, [pc, #68]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x94>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	0c5b      	lsrs	r3, r3, #17
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048fa:	5cd3      	ldrb	r3, [r2, r3]
 80048fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a0d      	ldr	r2, [pc, #52]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x98>)
 8004902:	fb03 f202 	mul.w	r2, r3, r2
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e004      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	613b      	str	r3, [r7, #16]
      break;
 800491e:	e002      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x98>)
 8004922:	613b      	str	r3, [r7, #16]
      break;
 8004924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004926:	693b      	ldr	r3, [r7, #16]
}
 8004928:	4618      	mov	r0, r3
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
 8004938:	007a1200 	.word	0x007a1200
 800493c:	080082c0 	.word	0x080082c0
 8004940:	080082d0 	.word	0x080082d0
 8004944:	003d0900 	.word	0x003d0900

08004948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b02      	ldr	r3, [pc, #8]	@ (8004958 <HAL_RCC_GetHCLKFreq+0x10>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	20000024 	.word	0x20000024

0800495c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004960:	f7ff fff2 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4903      	ldr	r1, [pc, #12]	@ (8004980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	080082b8 	.word	0x080082b8

08004984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004988:	f7ff ffde 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	0adb      	lsrs	r3, r3, #11
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	@ (80049a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000
 80049a8:	080082b8 	.word	0x080082b8

080049ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <RCC_Delay+0x34>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0a      	ldr	r2, [pc, #40]	@ (80049e4 <RCC_Delay+0x38>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	0a5b      	lsrs	r3, r3, #9
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049c8:	bf00      	nop
  }
  while (Delay --);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1e5a      	subs	r2, r3, #1
 80049ce:	60fa      	str	r2, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f9      	bne.n	80049c8 <RCC_Delay+0x1c>
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	20000024 	.word	0x20000024
 80049e4:	10624dd3 	.word	0x10624dd3

080049e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e042      	b.n	8004a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fe fc7e 	bl	8003310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	@ 0x24
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 f8a9 	bl	8005b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d175      	bne.n	8004b94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UART_Transmit+0x2c>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e06e      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2221      	movs	r2, #33	@ 0x21
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac6:	f7fe fdd5 	bl	8003674 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae0:	d108      	bne.n	8004af4 <HAL_UART_Transmit+0x6c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004afc:	e02e      	b.n	8004b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2180      	movs	r1, #128	@ 0x80
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fd86 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e03a      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3302      	adds	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e007      	b.n	8004b4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1cb      	bne.n	8004afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2140      	movs	r1, #64	@ 0x40
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fd52 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e006      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b08a      	sub	sp, #40	@ 0x28
 8004ba2:	af02      	add	r7, sp, #8
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	f040 8081 	bne.w	8004cc2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Receive+0x2e>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e079      	b.n	8004cc4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2222      	movs	r2, #34	@ 0x22
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be4:	f7fe fd46 	bl	8003674 <HAL_GetTick>
 8004be8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfe:	d108      	bne.n	8004c12 <HAL_UART_Receive+0x74>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e003      	b.n	8004c1a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c1a:	e047      	b.n	8004cac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2120      	movs	r1, #32
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fcf7 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e042      	b.n	8004cc4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10c      	bne.n	8004c5e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	3302      	adds	r3, #2
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	e01f      	b.n	8004c9e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c66:	d007      	beq.n	8004c78 <HAL_UART_Receive+0xda>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <HAL_UART_Receive+0xe8>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e008      	b.n	8004c98 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1b2      	bne.n	8004c1c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	@ 0x30
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d156      	bne.n	8004d94 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Transmit_DMA+0x26>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e04f      	b.n	8004d96 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	88fa      	ldrh	r2, [r7, #6]
 8004d06:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2221      	movs	r2, #33	@ 0x21
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	4a21      	ldr	r2, [pc, #132]	@ (8004da0 <HAL_UART_Transmit_DMA+0xd4>)
 8004d1c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	4a20      	ldr	r2, [pc, #128]	@ (8004da4 <HAL_UART_Transmit_DMA+0xd8>)
 8004d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <HAL_UART_Transmit_DMA+0xdc>)
 8004d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	2200      	movs	r2, #0
 8004d34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	f7fe fe27 	bl	80039a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3314      	adds	r3, #20
 8004d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d7e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6a39      	ldr	r1, [r7, #32]
 8004d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e5      	bne.n	8004d5c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3730      	adds	r7, #48	@ 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	08005369 	.word	0x08005369
 8004da4:	08005403 	.word	0x08005403
 8004da8:	08005587 	.word	0x08005587

08004dac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d112      	bne.n	8004dec <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_UART_Receive_DMA+0x26>
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e00b      	b.n	8004dee <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fc72 	bl	80056cc <UART_Start_Receive_DMA>
 8004de8:	4603      	mov	r3, r0
 8004dea:	e000      	b.n	8004dee <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_UART_IRQHandler+0x66>
 8004e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fdd6 	bl	8005a08 <UART_Receive_IT>
      return;
 8004e5c:	e25b      	b.n	8005316 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80de 	beq.w	8005024 <HAL_UART_IRQHandler+0x22c>
 8004e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80d1 	beq.w	8005024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_UART_IRQHandler+0xae>
 8004e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f043 0201 	orr.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_UART_IRQHandler+0xd2>
 8004eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	f043 0202 	orr.w	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_UART_IRQHandler+0xf6>
 8004ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f043 0204 	orr.w	r2, r3, #4
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d011      	beq.n	8004f1e <HAL_UART_IRQHandler+0x126>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	f043 0208 	orr.w	r2, r3, #8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 81f2 	beq.w	800530c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_UART_IRQHandler+0x14e>
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fd61 	bl	8005a08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_UART_IRQHandler+0x17a>
 8004f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d04f      	beq.n	8005012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fc6b 	bl	800584e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d041      	beq.n	800500a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3314      	adds	r3, #20
 8004f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1d9      	bne.n	8004f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d013      	beq.n	8005002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	4a7e      	ldr	r2, [pc, #504]	@ (80051d8 <HAL_UART_IRQHandler+0x3e0>)
 8004fe0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fd76 	bl	8003ad8 <HAL_DMA_Abort_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005000:	e00e      	b.n	8005020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f99c 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	e00a      	b.n	8005020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f998 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	e006      	b.n	8005020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f994 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800501e:	e175      	b.n	800530c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005020:	bf00      	nop
    return;
 8005022:	e173      	b.n	800530c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	2b01      	cmp	r3, #1
 800502a:	f040 814f 	bne.w	80052cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 8148 	beq.w	80052cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800503c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8141 	beq.w	80052cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80b6 	beq.w	80051dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800507c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8145 	beq.w	8005310 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800508a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800508e:	429a      	cmp	r2, r3
 8005090:	f080 813e 	bcs.w	8005310 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800509a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	f000 8088 	beq.w	80051b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1d9      	bne.n	80050a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005104:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005118:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800511c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005120:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800512a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e1      	bne.n	80050f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005154:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005156:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800515a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e3      	bne.n	8005130 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	330c      	adds	r3, #12
 800517c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005188:	f023 0310 	bic.w	r3, r3, #16
 800518c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	330c      	adds	r3, #12
 8005196:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800519a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800519c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e3      	bne.n	8005176 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fc54 	bl	8003a60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8bf 	bl	8005352 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051d4:	e09c      	b.n	8005310 <HAL_UART_IRQHandler+0x518>
 80051d6:	bf00      	nop
 80051d8:	08005913 	.word	0x08005913
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 808e 	beq.w	8005314 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8089 	beq.w	8005314 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005226:	647a      	str	r2, [r7, #68]	@ 0x44
 8005228:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800522c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e3      	bne.n	8005202 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	623b      	str	r3, [r7, #32]
   return(result);
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800525e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e3      	bne.n	800523a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0310 	bic.w	r3, r3, #16
 8005296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	617b      	str	r3, [r7, #20]
   return(result);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e3      	bne.n	8005280 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f844 	bl	8005352 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ca:	e023      	b.n	8005314 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <HAL_UART_IRQHandler+0x4f4>
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb28 	bl	800593a <UART_Transmit_IT>
    return;
 80052ea:	e014      	b.n	8005316 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00e      	beq.n	8005316 <HAL_UART_IRQHandler+0x51e>
 80052f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fb67 	bl	80059d8 <UART_EndTransmit_IT>
    return;
 800530a:	e004      	b.n	8005316 <HAL_UART_IRQHandler+0x51e>
    return;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <HAL_UART_IRQHandler+0x51e>
      return;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <HAL_UART_IRQHandler+0x51e>
      return;
 8005314:	bf00      	nop
  }
}
 8005316:	37e8      	adds	r7, #232	@ 0xe8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b090      	sub	sp, #64	@ 0x40
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d137      	bne.n	80053f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005386:	2200      	movs	r2, #0
 8005388:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800538a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	623b      	str	r3, [r7, #32]
   return(result);
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3314      	adds	r3, #20
 80053a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053de:	61fa      	str	r2, [r7, #28]
 80053e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	69b9      	ldr	r1, [r7, #24]
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	617b      	str	r3, [r7, #20]
   return(result);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053f2:	e002      	b.n	80053fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80053f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80053f6:	f7fd fdd1 	bl	8002f9c <HAL_UART_TxCpltCallback>
}
 80053fa:	bf00      	nop
 80053fc:	3740      	adds	r7, #64	@ 0x40
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff ff83 	bl	800531c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b09c      	sub	sp, #112	@ 0x70
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d172      	bne.n	8005520 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800543a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800543c:	2200      	movs	r2, #0
 800543e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005452:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005456:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005460:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005462:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005466:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800546e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005486:	f023 0301 	bic.w	r3, r3, #1
 800548a:	667b      	str	r3, [r7, #100]	@ 0x64
 800548c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005494:	647a      	str	r2, [r7, #68]	@ 0x44
 8005496:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800549a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e5      	bne.n	8005474 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	623b      	str	r3, [r7, #32]
   return(result);
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054be:	663b      	str	r3, [r7, #96]	@ 0x60
 80054c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3314      	adds	r3, #20
 80054c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e5      	bne.n	80054a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d119      	bne.n	8005520 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0310 	bic.w	r3, r3, #16
 8005502:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800550c:	61fa      	str	r2, [r7, #28]
 800550e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	617b      	str	r3, [r7, #20]
   return(result);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005522:	2200      	movs	r2, #0
 8005524:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	2b01      	cmp	r3, #1
 800552c:	d106      	bne.n	800553c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800552e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005532:	4619      	mov	r1, r3
 8005534:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005536:	f7ff ff0c 	bl	8005352 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800553a:	e002      	b.n	8005542 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800553c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800553e:	f7fd fd3d 	bl	8002fbc <HAL_UART_RxCpltCallback>
}
 8005542:	bf00      	nop
 8005544:	3770      	adds	r7, #112	@ 0x70
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	2b01      	cmp	r3, #1
 8005564:	d108      	bne.n	8005578 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	4619      	mov	r1, r3
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff feee 	bl	8005352 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005576:	e002      	b.n	800557e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff fed8 	bl	800532e <HAL_UART_RxHalfCpltCallback>
}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b21      	cmp	r3, #33	@ 0x21
 80055b8:	d108      	bne.n	80055cc <UART_DMAError+0x46>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2200      	movs	r2, #0
 80055c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f000 f91a 	bl	8005800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf14      	ite	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	2300      	moveq	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b22      	cmp	r3, #34	@ 0x22
 80055ec:	d108      	bne.n	8005600 <UART_DMAError+0x7a>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2200      	movs	r2, #0
 80055f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80055fa:	68b8      	ldr	r0, [r7, #8]
 80055fc:	f000 f927 	bl	800584e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	f043 0210 	orr.w	r2, r3, #16
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800560c:	68b8      	ldr	r0, [r7, #8]
 800560e:	f7ff fe97 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4613      	mov	r3, r2
 8005628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562a:	e03b      	b.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d037      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005634:	f7fe f81e 	bl	8003674 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	6a3a      	ldr	r2, [r7, #32]
 8005640:	429a      	cmp	r2, r3
 8005642:	d302      	bcc.n	800564a <UART_WaitOnFlagUntilTimeout+0x30>
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e03a      	b.n	80056c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d023      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b80      	cmp	r3, #128	@ 0x80
 8005660:	d020      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b40      	cmp	r3, #64	@ 0x40
 8005666:	d01d      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b08      	cmp	r3, #8
 8005674:	d116      	bne.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f8de 	bl	800584e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2208      	movs	r2, #8
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e00f      	b.n	80056c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d0b4      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b098      	sub	sp, #96	@ 0x60
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2222      	movs	r2, #34	@ 0x22
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f8:	4a3e      	ldr	r2, [pc, #248]	@ (80057f4 <UART_Start_Receive_DMA+0x128>)
 80056fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005700:	4a3d      	ldr	r2, [pc, #244]	@ (80057f8 <UART_Start_Receive_DMA+0x12c>)
 8005702:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005708:	4a3c      	ldr	r2, [pc, #240]	@ (80057fc <UART_Start_Receive_DMA+0x130>)
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	2200      	movs	r2, #0
 8005712:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	f7fe f938 	bl	80039a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d019      	beq.n	8005782 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800575e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800576e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005770:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005774:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800577c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e5      	bne.n	800574e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	657b      	str	r3, [r7, #84]	@ 0x54
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	617b      	str	r3, [r7, #20]
   return(result);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3314      	adds	r3, #20
 80057d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80057d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80057d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6a39      	ldr	r1, [r7, #32]
 80057dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3760      	adds	r7, #96	@ 0x60
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	0800541f 	.word	0x0800541f
 80057f8:	0800554b 	.word	0x0800554b
 80057fc:	08005587 	.word	0x08005587

08005800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	@ 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	60bb      	str	r3, [r7, #8]
   return(result);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	61ba      	str	r2, [r7, #24]
 800582a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6979      	ldr	r1, [r7, #20]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	613b      	str	r3, [r7, #16]
   return(result);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e5      	bne.n	8005808 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005844:	bf00      	nop
 8005846:	3724      	adds	r7, #36	@ 0x24
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800584e:	b480      	push	{r7}
 8005850:	b095      	sub	sp, #84	@ 0x54
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800586c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005876:	643a      	str	r2, [r7, #64]	@ 0x40
 8005878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800587c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e5      	bne.n	8005856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	61fb      	str	r3, [r7, #28]
   return(result);
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3314      	adds	r3, #20
 80058a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d119      	bne.n	80058fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 0310 	bic.w	r3, r3, #16
 80058dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e6:	61ba      	str	r2, [r7, #24]
 80058e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	6979      	ldr	r1, [r7, #20]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	613b      	str	r3, [r7, #16]
   return(result);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005908:	bf00      	nop
 800590a:	3754      	adds	r7, #84	@ 0x54
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr

08005912 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff fd07 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b21      	cmp	r3, #33	@ 0x21
 800594c:	d13e      	bne.n	80059cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005956:	d114      	bne.n	8005982 <UART_Transmit_IT+0x48>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d110      	bne.n	8005982 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005974:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]
 8005980:	e008      	b.n	8005994 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6211      	str	r1, [r2, #32]
 800598c:	781a      	ldrb	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4619      	mov	r1, r3
 80059a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10f      	bne.n	80059c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fd facf 	bl	8002f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08c      	sub	sp, #48	@ 0x30
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b22      	cmp	r3, #34	@ 0x22
 8005a1a:	f040 80ae 	bne.w	8005b7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a26:	d117      	bne.n	8005a58 <UART_Receive_IT+0x50>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d113      	bne.n	8005a58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	1c9a      	adds	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a56:	e026      	b.n	8005aa6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6a:	d007      	beq.n	8005a7c <UART_Receive_IT+0x74>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <UART_Receive_IT+0x82>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	e008      	b.n	8005a9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d15d      	bne.n	8005b76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0220 	bic.w	r2, r2, #32
 8005ac8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d135      	bne.n	8005b6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	613b      	str	r3, [r7, #16]
   return(result);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f023 0310 	bic.w	r3, r3, #16
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b26:	623a      	str	r2, [r7, #32]
 8005b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	69f9      	ldr	r1, [r7, #28]
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e5      	bne.n	8005b06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d10a      	bne.n	8005b5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fbf4 	bl	8005352 <HAL_UARTEx_RxEventCallback>
 8005b6a:	e002      	b.n	8005b72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fd fa25 	bl	8002fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e002      	b.n	8005b7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3730      	adds	r7, #48	@ 0x30
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bbe:	f023 030c 	bic.w	r3, r3, #12
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c98 <UART_SetConfig+0x114>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d103      	bne.n	8005bf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7fe feca 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	e002      	b.n	8005bfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fe feb2 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8005bf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009a      	lsls	r2, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	4a22      	ldr	r2, [pc, #136]	@ (8005c9c <UART_SetConfig+0x118>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	0119      	lsls	r1, r3, #4
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009a      	lsls	r2, r3, #2
 8005c24:	441a      	add	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c30:	4b1a      	ldr	r3, [pc, #104]	@ (8005c9c <UART_SetConfig+0x118>)
 8005c32:	fba3 0302 	umull	r0, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2064      	movs	r0, #100	@ 0x64
 8005c3a:	fb00 f303 	mul.w	r3, r0, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	3332      	adds	r3, #50	@ 0x32
 8005c44:	4a15      	ldr	r2, [pc, #84]	@ (8005c9c <UART_SetConfig+0x118>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c50:	4419      	add	r1, r3
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009a      	lsls	r2, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c68:	4b0c      	ldr	r3, [pc, #48]	@ (8005c9c <UART_SetConfig+0x118>)
 8005c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2064      	movs	r0, #100	@ 0x64
 8005c72:	fb00 f303 	mul.w	r3, r0, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	3332      	adds	r3, #50	@ 0x32
 8005c7c:	4a07      	ldr	r2, [pc, #28]	@ (8005c9c <UART_SetConfig+0x118>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	51eb851f 	.word	0x51eb851f

08005ca0 <std>:
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8005caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cae:	6083      	str	r3, [r0, #8]
 8005cb0:	8181      	strh	r1, [r0, #12]
 8005cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cb4:	81c2      	strh	r2, [r0, #14]
 8005cb6:	6183      	str	r3, [r0, #24]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	2208      	movs	r2, #8
 8005cbc:	305c      	adds	r0, #92	@ 0x5c
 8005cbe:	f000 fa1b 	bl	80060f8 <memset>
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <std+0x58>)
 8005cc4:	6224      	str	r4, [r4, #32]
 8005cc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <std+0x5c>)
 8005cca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <std+0x60>)
 8005cce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <std+0x64>)
 8005cd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <std+0x68>)
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	d006      	beq.n	8005ce8 <std+0x48>
 8005cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cde:	4294      	cmp	r4, r2
 8005ce0:	d002      	beq.n	8005ce8 <std+0x48>
 8005ce2:	33d0      	adds	r3, #208	@ 0xd0
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d105      	bne.n	8005cf4 <std+0x54>
 8005ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	f000 ba7a 	b.w	80061e8 <__retarget_lock_init_recursive>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	bf00      	nop
 8005cf8:	08005f49 	.word	0x08005f49
 8005cfc:	08005f6b 	.word	0x08005f6b
 8005d00:	08005fa3 	.word	0x08005fa3
 8005d04:	08005fc7 	.word	0x08005fc7
 8005d08:	20000878 	.word	0x20000878

08005d0c <stdio_exit_handler>:
 8005d0c:	4a02      	ldr	r2, [pc, #8]	@ (8005d18 <stdio_exit_handler+0xc>)
 8005d0e:	4903      	ldr	r1, [pc, #12]	@ (8005d1c <stdio_exit_handler+0x10>)
 8005d10:	4803      	ldr	r0, [pc, #12]	@ (8005d20 <stdio_exit_handler+0x14>)
 8005d12:	f000 b869 	b.w	8005de8 <_fwalk_sglue>
 8005d16:	bf00      	nop
 8005d18:	20000030 	.word	0x20000030
 8005d1c:	08006d49 	.word	0x08006d49
 8005d20:	20000040 	.word	0x20000040

08005d24 <cleanup_stdio>:
 8005d24:	6841      	ldr	r1, [r0, #4]
 8005d26:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <cleanup_stdio+0x34>)
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	d001      	beq.n	8005d34 <cleanup_stdio+0x10>
 8005d30:	f001 f80a 	bl	8006d48 <_fflush_r>
 8005d34:	68a1      	ldr	r1, [r4, #8]
 8005d36:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <cleanup_stdio+0x38>)
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d002      	beq.n	8005d42 <cleanup_stdio+0x1e>
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f001 f803 	bl	8006d48 <_fflush_r>
 8005d42:	68e1      	ldr	r1, [r4, #12]
 8005d44:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <cleanup_stdio+0x3c>)
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d004      	beq.n	8005d54 <cleanup_stdio+0x30>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d50:	f000 bffa 	b.w	8006d48 <_fflush_r>
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	bf00      	nop
 8005d58:	20000878 	.word	0x20000878
 8005d5c:	200008e0 	.word	0x200008e0
 8005d60:	20000948 	.word	0x20000948

08005d64 <global_stdio_init.part.0>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <global_stdio_init.part.0+0x30>)
 8005d68:	4c0b      	ldr	r4, [pc, #44]	@ (8005d98 <global_stdio_init.part.0+0x34>)
 8005d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d9c <global_stdio_init.part.0+0x38>)
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	2104      	movs	r1, #4
 8005d72:	2200      	movs	r2, #0
 8005d74:	f7ff ff94 	bl	8005ca0 <std>
 8005d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	2109      	movs	r1, #9
 8005d80:	f7ff ff8e 	bl	8005ca0 <std>
 8005d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d88:	2202      	movs	r2, #2
 8005d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d8e:	2112      	movs	r1, #18
 8005d90:	f7ff bf86 	b.w	8005ca0 <std>
 8005d94:	200009b0 	.word	0x200009b0
 8005d98:	20000878 	.word	0x20000878
 8005d9c:	08005d0d 	.word	0x08005d0d

08005da0 <__sfp_lock_acquire>:
 8005da0:	4801      	ldr	r0, [pc, #4]	@ (8005da8 <__sfp_lock_acquire+0x8>)
 8005da2:	f000 ba22 	b.w	80061ea <__retarget_lock_acquire_recursive>
 8005da6:	bf00      	nop
 8005da8:	200009b9 	.word	0x200009b9

08005dac <__sfp_lock_release>:
 8005dac:	4801      	ldr	r0, [pc, #4]	@ (8005db4 <__sfp_lock_release+0x8>)
 8005dae:	f000 ba1d 	b.w	80061ec <__retarget_lock_release_recursive>
 8005db2:	bf00      	nop
 8005db4:	200009b9 	.word	0x200009b9

08005db8 <__sinit>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4604      	mov	r4, r0
 8005dbc:	f7ff fff0 	bl	8005da0 <__sfp_lock_acquire>
 8005dc0:	6a23      	ldr	r3, [r4, #32]
 8005dc2:	b11b      	cbz	r3, 8005dcc <__sinit+0x14>
 8005dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc8:	f7ff bff0 	b.w	8005dac <__sfp_lock_release>
 8005dcc:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <__sinit+0x28>)
 8005dce:	6223      	str	r3, [r4, #32]
 8005dd0:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <__sinit+0x2c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f5      	bne.n	8005dc4 <__sinit+0xc>
 8005dd8:	f7ff ffc4 	bl	8005d64 <global_stdio_init.part.0>
 8005ddc:	e7f2      	b.n	8005dc4 <__sinit+0xc>
 8005dde:	bf00      	nop
 8005de0:	08005d25 	.word	0x08005d25
 8005de4:	200009b0 	.word	0x200009b0

08005de8 <_fwalk_sglue>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4607      	mov	r7, r0
 8005dee:	4688      	mov	r8, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	2600      	movs	r6, #0
 8005df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005df8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dfc:	d505      	bpl.n	8005e0a <_fwalk_sglue+0x22>
 8005dfe:	6824      	ldr	r4, [r4, #0]
 8005e00:	2c00      	cmp	r4, #0
 8005e02:	d1f7      	bne.n	8005df4 <_fwalk_sglue+0xc>
 8005e04:	4630      	mov	r0, r6
 8005e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d907      	bls.n	8005e20 <_fwalk_sglue+0x38>
 8005e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e14:	3301      	adds	r3, #1
 8005e16:	d003      	beq.n	8005e20 <_fwalk_sglue+0x38>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c0      	blx	r8
 8005e1e:	4306      	orrs	r6, r0
 8005e20:	3568      	adds	r5, #104	@ 0x68
 8005e22:	e7e9      	b.n	8005df8 <_fwalk_sglue+0x10>

08005e24 <iprintf>:
 8005e24:	b40f      	push	{r0, r1, r2, r3}
 8005e26:	b507      	push	{r0, r1, r2, lr}
 8005e28:	4906      	ldr	r1, [pc, #24]	@ (8005e44 <iprintf+0x20>)
 8005e2a:	ab04      	add	r3, sp, #16
 8005e2c:	6808      	ldr	r0, [r1, #0]
 8005e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e32:	6881      	ldr	r1, [r0, #8]
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	f000 fc5f 	bl	80066f8 <_vfiprintf_r>
 8005e3a:	b003      	add	sp, #12
 8005e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e40:	b004      	add	sp, #16
 8005e42:	4770      	bx	lr
 8005e44:	2000003c 	.word	0x2000003c

08005e48 <_puts_r>:
 8005e48:	6a03      	ldr	r3, [r0, #32]
 8005e4a:	b570      	push	{r4, r5, r6, lr}
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460e      	mov	r6, r1
 8005e50:	6884      	ldr	r4, [r0, #8]
 8005e52:	b90b      	cbnz	r3, 8005e58 <_puts_r+0x10>
 8005e54:	f7ff ffb0 	bl	8005db8 <__sinit>
 8005e58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e5a:	07db      	lsls	r3, r3, #31
 8005e5c:	d405      	bmi.n	8005e6a <_puts_r+0x22>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	0598      	lsls	r0, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_puts_r+0x22>
 8005e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e66:	f000 f9c0 	bl	80061ea <__retarget_lock_acquire_recursive>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	0719      	lsls	r1, r3, #28
 8005e6e:	d502      	bpl.n	8005e76 <_puts_r+0x2e>
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d135      	bne.n	8005ee2 <_puts_r+0x9a>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 f8e7 	bl	800604c <__swsetup_r>
 8005e7e:	b380      	cbz	r0, 8005ee2 <_puts_r+0x9a>
 8005e80:	f04f 35ff 	mov.w	r5, #4294967295
 8005e84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e86:	07da      	lsls	r2, r3, #31
 8005e88:	d405      	bmi.n	8005e96 <_puts_r+0x4e>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	059b      	lsls	r3, r3, #22
 8005e8e:	d402      	bmi.n	8005e96 <_puts_r+0x4e>
 8005e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e92:	f000 f9ab 	bl	80061ec <__retarget_lock_release_recursive>
 8005e96:	4628      	mov	r0, r5
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da04      	bge.n	8005ea8 <_puts_r+0x60>
 8005e9e:	69a2      	ldr	r2, [r4, #24]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	dc17      	bgt.n	8005ed4 <_puts_r+0x8c>
 8005ea4:	290a      	cmp	r1, #10
 8005ea6:	d015      	beq.n	8005ed4 <_puts_r+0x8c>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	6022      	str	r2, [r4, #0]
 8005eae:	7019      	strb	r1, [r3, #0]
 8005eb0:	68a3      	ldr	r3, [r4, #8]
 8005eb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	d1ed      	bne.n	8005e9a <_puts_r+0x52>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da11      	bge.n	8005ee6 <_puts_r+0x9e>
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	210a      	movs	r1, #10
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f881 	bl	8005fce <__swbuf_r>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d0d7      	beq.n	8005e80 <_puts_r+0x38>
 8005ed0:	250a      	movs	r5, #10
 8005ed2:	e7d7      	b.n	8005e84 <_puts_r+0x3c>
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f879 	bl	8005fce <__swbuf_r>
 8005edc:	3001      	adds	r0, #1
 8005ede:	d1e7      	bne.n	8005eb0 <_puts_r+0x68>
 8005ee0:	e7ce      	b.n	8005e80 <_puts_r+0x38>
 8005ee2:	3e01      	subs	r6, #1
 8005ee4:	e7e4      	b.n	8005eb0 <_puts_r+0x68>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	220a      	movs	r2, #10
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e7ee      	b.n	8005ed0 <_puts_r+0x88>
	...

08005ef4 <puts>:
 8005ef4:	4b02      	ldr	r3, [pc, #8]	@ (8005f00 <puts+0xc>)
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	f7ff bfa5 	b.w	8005e48 <_puts_r>
 8005efe:	bf00      	nop
 8005f00:	2000003c 	.word	0x2000003c

08005f04 <siprintf>:
 8005f04:	b40e      	push	{r1, r2, r3}
 8005f06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	2400      	movs	r4, #0
 8005f0e:	b09d      	sub	sp, #116	@ 0x74
 8005f10:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005f12:	9002      	str	r0, [sp, #8]
 8005f14:	9006      	str	r0, [sp, #24]
 8005f16:	9107      	str	r1, [sp, #28]
 8005f18:	9104      	str	r1, [sp, #16]
 8005f1a:	4809      	ldr	r0, [pc, #36]	@ (8005f40 <siprintf+0x3c>)
 8005f1c:	4909      	ldr	r1, [pc, #36]	@ (8005f44 <siprintf+0x40>)
 8005f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f22:	9105      	str	r1, [sp, #20]
 8005f24:	6800      	ldr	r0, [r0, #0]
 8005f26:	a902      	add	r1, sp, #8
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005f2c:	f000 fac0 	bl	80064b0 <_svfiprintf_r>
 8005f30:	9b02      	ldr	r3, [sp, #8]
 8005f32:	701c      	strb	r4, [r3, #0]
 8005f34:	b01d      	add	sp, #116	@ 0x74
 8005f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f3a:	b003      	add	sp, #12
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	2000003c 	.word	0x2000003c
 8005f44:	ffff0208 	.word	0xffff0208

08005f48 <__sread>:
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	f000 f8fc 	bl	800614c <_read_r>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	bfab      	itete	ge
 8005f58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f5c:	181b      	addge	r3, r3, r0
 8005f5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f62:	bfac      	ite	ge
 8005f64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f66:	81a3      	strhlt	r3, [r4, #12]
 8005f68:	bd10      	pop	{r4, pc}

08005f6a <__swrite>:
 8005f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	461f      	mov	r7, r3
 8005f70:	898b      	ldrh	r3, [r1, #12]
 8005f72:	4605      	mov	r5, r0
 8005f74:	05db      	lsls	r3, r3, #23
 8005f76:	460c      	mov	r4, r1
 8005f78:	4616      	mov	r6, r2
 8005f7a:	d505      	bpl.n	8005f88 <__swrite+0x1e>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f84:	f000 f8d0 	bl	8006128 <_lseek_r>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	4628      	mov	r0, r5
 8005f94:	463b      	mov	r3, r7
 8005f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9e:	f000 b8e7 	b.w	8006170 <_write_r>

08005fa2 <__sseek>:
 8005fa2:	b510      	push	{r4, lr}
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005faa:	f000 f8bd 	bl	8006128 <_lseek_r>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	bf15      	itete	ne
 8005fb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fbe:	81a3      	strheq	r3, [r4, #12]
 8005fc0:	bf18      	it	ne
 8005fc2:	81a3      	strhne	r3, [r4, #12]
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <__sclose>:
 8005fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fca:	f000 b89d 	b.w	8006108 <_close_r>

08005fce <__swbuf_r>:
 8005fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd0:	460e      	mov	r6, r1
 8005fd2:	4614      	mov	r4, r2
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	b118      	cbz	r0, 8005fe0 <__swbuf_r+0x12>
 8005fd8:	6a03      	ldr	r3, [r0, #32]
 8005fda:	b90b      	cbnz	r3, 8005fe0 <__swbuf_r+0x12>
 8005fdc:	f7ff feec 	bl	8005db8 <__sinit>
 8005fe0:	69a3      	ldr	r3, [r4, #24]
 8005fe2:	60a3      	str	r3, [r4, #8]
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	071a      	lsls	r2, r3, #28
 8005fe8:	d501      	bpl.n	8005fee <__swbuf_r+0x20>
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	b943      	cbnz	r3, 8006000 <__swbuf_r+0x32>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 f82b 	bl	800604c <__swsetup_r>
 8005ff6:	b118      	cbz	r0, 8006000 <__swbuf_r+0x32>
 8005ff8:	f04f 37ff 	mov.w	r7, #4294967295
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	6922      	ldr	r2, [r4, #16]
 8006004:	b2f6      	uxtb	r6, r6
 8006006:	1a98      	subs	r0, r3, r2
 8006008:	6963      	ldr	r3, [r4, #20]
 800600a:	4637      	mov	r7, r6
 800600c:	4283      	cmp	r3, r0
 800600e:	dc05      	bgt.n	800601c <__swbuf_r+0x4e>
 8006010:	4621      	mov	r1, r4
 8006012:	4628      	mov	r0, r5
 8006014:	f000 fe98 	bl	8006d48 <_fflush_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	d1ed      	bne.n	8005ff8 <__swbuf_r+0x2a>
 800601c:	68a3      	ldr	r3, [r4, #8]
 800601e:	3b01      	subs	r3, #1
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	6022      	str	r2, [r4, #0]
 8006028:	701e      	strb	r6, [r3, #0]
 800602a:	6962      	ldr	r2, [r4, #20]
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	429a      	cmp	r2, r3
 8006030:	d004      	beq.n	800603c <__swbuf_r+0x6e>
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	07db      	lsls	r3, r3, #31
 8006036:	d5e1      	bpl.n	8005ffc <__swbuf_r+0x2e>
 8006038:	2e0a      	cmp	r6, #10
 800603a:	d1df      	bne.n	8005ffc <__swbuf_r+0x2e>
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	f000 fe82 	bl	8006d48 <_fflush_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	d0d9      	beq.n	8005ffc <__swbuf_r+0x2e>
 8006048:	e7d6      	b.n	8005ff8 <__swbuf_r+0x2a>
	...

0800604c <__swsetup_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4b29      	ldr	r3, [pc, #164]	@ (80060f4 <__swsetup_r+0xa8>)
 8006050:	4605      	mov	r5, r0
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	460c      	mov	r4, r1
 8006056:	b118      	cbz	r0, 8006060 <__swsetup_r+0x14>
 8006058:	6a03      	ldr	r3, [r0, #32]
 800605a:	b90b      	cbnz	r3, 8006060 <__swsetup_r+0x14>
 800605c:	f7ff feac 	bl	8005db8 <__sinit>
 8006060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006064:	0719      	lsls	r1, r3, #28
 8006066:	d422      	bmi.n	80060ae <__swsetup_r+0x62>
 8006068:	06da      	lsls	r2, r3, #27
 800606a:	d407      	bmi.n	800607c <__swsetup_r+0x30>
 800606c:	2209      	movs	r2, #9
 800606e:	602a      	str	r2, [r5, #0]
 8006070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	e033      	b.n	80060e4 <__swsetup_r+0x98>
 800607c:	0758      	lsls	r0, r3, #29
 800607e:	d512      	bpl.n	80060a6 <__swsetup_r+0x5a>
 8006080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006082:	b141      	cbz	r1, 8006096 <__swsetup_r+0x4a>
 8006084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006088:	4299      	cmp	r1, r3
 800608a:	d002      	beq.n	8006092 <__swsetup_r+0x46>
 800608c:	4628      	mov	r0, r5
 800608e:	f000 f8bd 	bl	800620c <_free_r>
 8006092:	2300      	movs	r3, #0
 8006094:	6363      	str	r3, [r4, #52]	@ 0x34
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	2300      	movs	r3, #0
 80060a0:	6063      	str	r3, [r4, #4]
 80060a2:	6923      	ldr	r3, [r4, #16]
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f043 0308 	orr.w	r3, r3, #8
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	b94b      	cbnz	r3, 80060c6 <__swsetup_r+0x7a>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060bc:	d003      	beq.n	80060c6 <__swsetup_r+0x7a>
 80060be:	4621      	mov	r1, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	f000 fe8e 	bl	8006de2 <__smakebuf_r>
 80060c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ca:	f013 0201 	ands.w	r2, r3, #1
 80060ce:	d00a      	beq.n	80060e6 <__swsetup_r+0x9a>
 80060d0:	2200      	movs	r2, #0
 80060d2:	60a2      	str	r2, [r4, #8]
 80060d4:	6962      	ldr	r2, [r4, #20]
 80060d6:	4252      	negs	r2, r2
 80060d8:	61a2      	str	r2, [r4, #24]
 80060da:	6922      	ldr	r2, [r4, #16]
 80060dc:	b942      	cbnz	r2, 80060f0 <__swsetup_r+0xa4>
 80060de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060e2:	d1c5      	bne.n	8006070 <__swsetup_r+0x24>
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	0799      	lsls	r1, r3, #30
 80060e8:	bf58      	it	pl
 80060ea:	6962      	ldrpl	r2, [r4, #20]
 80060ec:	60a2      	str	r2, [r4, #8]
 80060ee:	e7f4      	b.n	80060da <__swsetup_r+0x8e>
 80060f0:	2000      	movs	r0, #0
 80060f2:	e7f7      	b.n	80060e4 <__swsetup_r+0x98>
 80060f4:	2000003c 	.word	0x2000003c

080060f8 <memset>:
 80060f8:	4603      	mov	r3, r0
 80060fa:	4402      	add	r2, r0
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d100      	bne.n	8006102 <memset+0xa>
 8006100:	4770      	bx	lr
 8006102:	f803 1b01 	strb.w	r1, [r3], #1
 8006106:	e7f9      	b.n	80060fc <memset+0x4>

08006108 <_close_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	2300      	movs	r3, #0
 800610c:	4d05      	ldr	r5, [pc, #20]	@ (8006124 <_close_r+0x1c>)
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fd f812 	bl	800313c <_close>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_close_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_close_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	200009b4 	.word	0x200009b4

08006128 <_lseek_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4604      	mov	r4, r0
 800612c:	4608      	mov	r0, r1
 800612e:	4611      	mov	r1, r2
 8006130:	2200      	movs	r2, #0
 8006132:	4d05      	ldr	r5, [pc, #20]	@ (8006148 <_lseek_r+0x20>)
 8006134:	602a      	str	r2, [r5, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7fd f824 	bl	8003184 <_lseek>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_lseek_r+0x1e>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_lseek_r+0x1e>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	200009b4 	.word	0x200009b4

0800614c <_read_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
 8006152:	4611      	mov	r1, r2
 8006154:	2200      	movs	r2, #0
 8006156:	4d05      	ldr	r5, [pc, #20]	@ (800616c <_read_r+0x20>)
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f7fc ffd1 	bl	8003102 <_read>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_read_r+0x1e>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_read_r+0x1e>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	200009b4 	.word	0x200009b4

08006170 <_write_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	2200      	movs	r2, #0
 800617a:	4d05      	ldr	r5, [pc, #20]	@ (8006190 <_write_r+0x20>)
 800617c:	602a      	str	r2, [r5, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	f7fd f9e4 	bl	800354c <_write>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_write_r+0x1e>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_write_r+0x1e>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	200009b4 	.word	0x200009b4

08006194 <__errno>:
 8006194:	4b01      	ldr	r3, [pc, #4]	@ (800619c <__errno+0x8>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	2000003c 	.word	0x2000003c

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	2600      	movs	r6, #0
 80061a4:	4d0c      	ldr	r5, [pc, #48]	@ (80061d8 <__libc_init_array+0x38>)
 80061a6:	4c0d      	ldr	r4, [pc, #52]	@ (80061dc <__libc_init_array+0x3c>)
 80061a8:	1b64      	subs	r4, r4, r5
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	d109      	bne.n	80061c4 <__libc_init_array+0x24>
 80061b0:	f000 fee4 	bl	8006f7c <_init>
 80061b4:	2600      	movs	r6, #0
 80061b6:	4d0a      	ldr	r5, [pc, #40]	@ (80061e0 <__libc_init_array+0x40>)
 80061b8:	4c0a      	ldr	r4, [pc, #40]	@ (80061e4 <__libc_init_array+0x44>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	42a6      	cmp	r6, r4
 80061c0:	d105      	bne.n	80061ce <__libc_init_array+0x2e>
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c8:	4798      	blx	r3
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7ee      	b.n	80061ac <__libc_init_array+0xc>
 80061ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d2:	4798      	blx	r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	e7f2      	b.n	80061be <__libc_init_array+0x1e>
 80061d8:	08008308 	.word	0x08008308
 80061dc:	08008308 	.word	0x08008308
 80061e0:	08008308 	.word	0x08008308
 80061e4:	0800830c 	.word	0x0800830c

080061e8 <__retarget_lock_init_recursive>:
 80061e8:	4770      	bx	lr

080061ea <__retarget_lock_acquire_recursive>:
 80061ea:	4770      	bx	lr

080061ec <__retarget_lock_release_recursive>:
 80061ec:	4770      	bx	lr

080061ee <memcpy>:
 80061ee:	440a      	add	r2, r1
 80061f0:	4291      	cmp	r1, r2
 80061f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f6:	d100      	bne.n	80061fa <memcpy+0xc>
 80061f8:	4770      	bx	lr
 80061fa:	b510      	push	{r4, lr}
 80061fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006200:	4291      	cmp	r1, r2
 8006202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006206:	d1f9      	bne.n	80061fc <memcpy+0xe>
 8006208:	bd10      	pop	{r4, pc}
	...

0800620c <_free_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4605      	mov	r5, r0
 8006210:	2900      	cmp	r1, #0
 8006212:	d040      	beq.n	8006296 <_free_r+0x8a>
 8006214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006218:	1f0c      	subs	r4, r1, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	bfb8      	it	lt
 800621e:	18e4      	addlt	r4, r4, r3
 8006220:	f000 f8de 	bl	80063e0 <__malloc_lock>
 8006224:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <_free_r+0x8c>)
 8006226:	6813      	ldr	r3, [r2, #0]
 8006228:	b933      	cbnz	r3, 8006238 <_free_r+0x2c>
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	6014      	str	r4, [r2, #0]
 800622e:	4628      	mov	r0, r5
 8006230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006234:	f000 b8da 	b.w	80063ec <__malloc_unlock>
 8006238:	42a3      	cmp	r3, r4
 800623a:	d908      	bls.n	800624e <_free_r+0x42>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	1821      	adds	r1, r4, r0
 8006240:	428b      	cmp	r3, r1
 8006242:	bf01      	itttt	eq
 8006244:	6819      	ldreq	r1, [r3, #0]
 8006246:	685b      	ldreq	r3, [r3, #4]
 8006248:	1809      	addeq	r1, r1, r0
 800624a:	6021      	streq	r1, [r4, #0]
 800624c:	e7ed      	b.n	800622a <_free_r+0x1e>
 800624e:	461a      	mov	r2, r3
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	b10b      	cbz	r3, 8006258 <_free_r+0x4c>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d9fa      	bls.n	800624e <_free_r+0x42>
 8006258:	6811      	ldr	r1, [r2, #0]
 800625a:	1850      	adds	r0, r2, r1
 800625c:	42a0      	cmp	r0, r4
 800625e:	d10b      	bne.n	8006278 <_free_r+0x6c>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	4401      	add	r1, r0
 8006264:	1850      	adds	r0, r2, r1
 8006266:	4283      	cmp	r3, r0
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	d1e0      	bne.n	800622e <_free_r+0x22>
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	4408      	add	r0, r1
 8006272:	6010      	str	r0, [r2, #0]
 8006274:	6053      	str	r3, [r2, #4]
 8006276:	e7da      	b.n	800622e <_free_r+0x22>
 8006278:	d902      	bls.n	8006280 <_free_r+0x74>
 800627a:	230c      	movs	r3, #12
 800627c:	602b      	str	r3, [r5, #0]
 800627e:	e7d6      	b.n	800622e <_free_r+0x22>
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	1821      	adds	r1, r4, r0
 8006284:	428b      	cmp	r3, r1
 8006286:	bf01      	itttt	eq
 8006288:	6819      	ldreq	r1, [r3, #0]
 800628a:	685b      	ldreq	r3, [r3, #4]
 800628c:	1809      	addeq	r1, r1, r0
 800628e:	6021      	streq	r1, [r4, #0]
 8006290:	6063      	str	r3, [r4, #4]
 8006292:	6054      	str	r4, [r2, #4]
 8006294:	e7cb      	b.n	800622e <_free_r+0x22>
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	200009c0 	.word	0x200009c0

0800629c <sbrk_aligned>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4e0f      	ldr	r6, [pc, #60]	@ (80062dc <sbrk_aligned+0x40>)
 80062a0:	460c      	mov	r4, r1
 80062a2:	6831      	ldr	r1, [r6, #0]
 80062a4:	4605      	mov	r5, r0
 80062a6:	b911      	cbnz	r1, 80062ae <sbrk_aligned+0x12>
 80062a8:	f000 fe14 	bl	8006ed4 <_sbrk_r>
 80062ac:	6030      	str	r0, [r6, #0]
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 fe0f 	bl	8006ed4 <_sbrk_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d103      	bne.n	80062c2 <sbrk_aligned+0x26>
 80062ba:	f04f 34ff 	mov.w	r4, #4294967295
 80062be:	4620      	mov	r0, r4
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	1cc4      	adds	r4, r0, #3
 80062c4:	f024 0403 	bic.w	r4, r4, #3
 80062c8:	42a0      	cmp	r0, r4
 80062ca:	d0f8      	beq.n	80062be <sbrk_aligned+0x22>
 80062cc:	1a21      	subs	r1, r4, r0
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 fe00 	bl	8006ed4 <_sbrk_r>
 80062d4:	3001      	adds	r0, #1
 80062d6:	d1f2      	bne.n	80062be <sbrk_aligned+0x22>
 80062d8:	e7ef      	b.n	80062ba <sbrk_aligned+0x1e>
 80062da:	bf00      	nop
 80062dc:	200009bc 	.word	0x200009bc

080062e0 <_malloc_r>:
 80062e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e4:	1ccd      	adds	r5, r1, #3
 80062e6:	f025 0503 	bic.w	r5, r5, #3
 80062ea:	3508      	adds	r5, #8
 80062ec:	2d0c      	cmp	r5, #12
 80062ee:	bf38      	it	cc
 80062f0:	250c      	movcc	r5, #12
 80062f2:	2d00      	cmp	r5, #0
 80062f4:	4606      	mov	r6, r0
 80062f6:	db01      	blt.n	80062fc <_malloc_r+0x1c>
 80062f8:	42a9      	cmp	r1, r5
 80062fa:	d904      	bls.n	8006306 <_malloc_r+0x26>
 80062fc:	230c      	movs	r3, #12
 80062fe:	6033      	str	r3, [r6, #0]
 8006300:	2000      	movs	r0, #0
 8006302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063dc <_malloc_r+0xfc>
 800630a:	f000 f869 	bl	80063e0 <__malloc_lock>
 800630e:	f8d8 3000 	ldr.w	r3, [r8]
 8006312:	461c      	mov	r4, r3
 8006314:	bb44      	cbnz	r4, 8006368 <_malloc_r+0x88>
 8006316:	4629      	mov	r1, r5
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff ffbf 	bl	800629c <sbrk_aligned>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	4604      	mov	r4, r0
 8006322:	d158      	bne.n	80063d6 <_malloc_r+0xf6>
 8006324:	f8d8 4000 	ldr.w	r4, [r8]
 8006328:	4627      	mov	r7, r4
 800632a:	2f00      	cmp	r7, #0
 800632c:	d143      	bne.n	80063b6 <_malloc_r+0xd6>
 800632e:	2c00      	cmp	r4, #0
 8006330:	d04b      	beq.n	80063ca <_malloc_r+0xea>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	4639      	mov	r1, r7
 8006336:	4630      	mov	r0, r6
 8006338:	eb04 0903 	add.w	r9, r4, r3
 800633c:	f000 fdca 	bl	8006ed4 <_sbrk_r>
 8006340:	4581      	cmp	r9, r0
 8006342:	d142      	bne.n	80063ca <_malloc_r+0xea>
 8006344:	6821      	ldr	r1, [r4, #0]
 8006346:	4630      	mov	r0, r6
 8006348:	1a6d      	subs	r5, r5, r1
 800634a:	4629      	mov	r1, r5
 800634c:	f7ff ffa6 	bl	800629c <sbrk_aligned>
 8006350:	3001      	adds	r0, #1
 8006352:	d03a      	beq.n	80063ca <_malloc_r+0xea>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	442b      	add	r3, r5
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	f8d8 3000 	ldr.w	r3, [r8]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	bb62      	cbnz	r2, 80063bc <_malloc_r+0xdc>
 8006362:	f8c8 7000 	str.w	r7, [r8]
 8006366:	e00f      	b.n	8006388 <_malloc_r+0xa8>
 8006368:	6822      	ldr	r2, [r4, #0]
 800636a:	1b52      	subs	r2, r2, r5
 800636c:	d420      	bmi.n	80063b0 <_malloc_r+0xd0>
 800636e:	2a0b      	cmp	r2, #11
 8006370:	d917      	bls.n	80063a2 <_malloc_r+0xc2>
 8006372:	1961      	adds	r1, r4, r5
 8006374:	42a3      	cmp	r3, r4
 8006376:	6025      	str	r5, [r4, #0]
 8006378:	bf18      	it	ne
 800637a:	6059      	strne	r1, [r3, #4]
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	bf08      	it	eq
 8006380:	f8c8 1000 	streq.w	r1, [r8]
 8006384:	5162      	str	r2, [r4, r5]
 8006386:	604b      	str	r3, [r1, #4]
 8006388:	4630      	mov	r0, r6
 800638a:	f000 f82f 	bl	80063ec <__malloc_unlock>
 800638e:	f104 000b 	add.w	r0, r4, #11
 8006392:	1d23      	adds	r3, r4, #4
 8006394:	f020 0007 	bic.w	r0, r0, #7
 8006398:	1ac2      	subs	r2, r0, r3
 800639a:	bf1c      	itt	ne
 800639c:	1a1b      	subne	r3, r3, r0
 800639e:	50a3      	strne	r3, [r4, r2]
 80063a0:	e7af      	b.n	8006302 <_malloc_r+0x22>
 80063a2:	6862      	ldr	r2, [r4, #4]
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	bf0c      	ite	eq
 80063a8:	f8c8 2000 	streq.w	r2, [r8]
 80063ac:	605a      	strne	r2, [r3, #4]
 80063ae:	e7eb      	b.n	8006388 <_malloc_r+0xa8>
 80063b0:	4623      	mov	r3, r4
 80063b2:	6864      	ldr	r4, [r4, #4]
 80063b4:	e7ae      	b.n	8006314 <_malloc_r+0x34>
 80063b6:	463c      	mov	r4, r7
 80063b8:	687f      	ldr	r7, [r7, #4]
 80063ba:	e7b6      	b.n	800632a <_malloc_r+0x4a>
 80063bc:	461a      	mov	r2, r3
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d1fb      	bne.n	80063bc <_malloc_r+0xdc>
 80063c4:	2300      	movs	r3, #0
 80063c6:	6053      	str	r3, [r2, #4]
 80063c8:	e7de      	b.n	8006388 <_malloc_r+0xa8>
 80063ca:	230c      	movs	r3, #12
 80063cc:	4630      	mov	r0, r6
 80063ce:	6033      	str	r3, [r6, #0]
 80063d0:	f000 f80c 	bl	80063ec <__malloc_unlock>
 80063d4:	e794      	b.n	8006300 <_malloc_r+0x20>
 80063d6:	6005      	str	r5, [r0, #0]
 80063d8:	e7d6      	b.n	8006388 <_malloc_r+0xa8>
 80063da:	bf00      	nop
 80063dc:	200009c0 	.word	0x200009c0

080063e0 <__malloc_lock>:
 80063e0:	4801      	ldr	r0, [pc, #4]	@ (80063e8 <__malloc_lock+0x8>)
 80063e2:	f7ff bf02 	b.w	80061ea <__retarget_lock_acquire_recursive>
 80063e6:	bf00      	nop
 80063e8:	200009b8 	.word	0x200009b8

080063ec <__malloc_unlock>:
 80063ec:	4801      	ldr	r0, [pc, #4]	@ (80063f4 <__malloc_unlock+0x8>)
 80063ee:	f7ff befd 	b.w	80061ec <__retarget_lock_release_recursive>
 80063f2:	bf00      	nop
 80063f4:	200009b8 	.word	0x200009b8

080063f8 <__ssputs_r>:
 80063f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	461f      	mov	r7, r3
 80063fe:	688e      	ldr	r6, [r1, #8]
 8006400:	4682      	mov	sl, r0
 8006402:	42be      	cmp	r6, r7
 8006404:	460c      	mov	r4, r1
 8006406:	4690      	mov	r8, r2
 8006408:	680b      	ldr	r3, [r1, #0]
 800640a:	d82d      	bhi.n	8006468 <__ssputs_r+0x70>
 800640c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006410:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006414:	d026      	beq.n	8006464 <__ssputs_r+0x6c>
 8006416:	6965      	ldr	r5, [r4, #20]
 8006418:	6909      	ldr	r1, [r1, #16]
 800641a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800641e:	eba3 0901 	sub.w	r9, r3, r1
 8006422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006426:	1c7b      	adds	r3, r7, #1
 8006428:	444b      	add	r3, r9
 800642a:	106d      	asrs	r5, r5, #1
 800642c:	429d      	cmp	r5, r3
 800642e:	bf38      	it	cc
 8006430:	461d      	movcc	r5, r3
 8006432:	0553      	lsls	r3, r2, #21
 8006434:	d527      	bpl.n	8006486 <__ssputs_r+0x8e>
 8006436:	4629      	mov	r1, r5
 8006438:	f7ff ff52 	bl	80062e0 <_malloc_r>
 800643c:	4606      	mov	r6, r0
 800643e:	b360      	cbz	r0, 800649a <__ssputs_r+0xa2>
 8006440:	464a      	mov	r2, r9
 8006442:	6921      	ldr	r1, [r4, #16]
 8006444:	f7ff fed3 	bl	80061ee <memcpy>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800644e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	6126      	str	r6, [r4, #16]
 8006456:	444e      	add	r6, r9
 8006458:	6026      	str	r6, [r4, #0]
 800645a:	463e      	mov	r6, r7
 800645c:	6165      	str	r5, [r4, #20]
 800645e:	eba5 0509 	sub.w	r5, r5, r9
 8006462:	60a5      	str	r5, [r4, #8]
 8006464:	42be      	cmp	r6, r7
 8006466:	d900      	bls.n	800646a <__ssputs_r+0x72>
 8006468:	463e      	mov	r6, r7
 800646a:	4632      	mov	r2, r6
 800646c:	4641      	mov	r1, r8
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	f000 fcf3 	bl	8006e5a <memmove>
 8006474:	2000      	movs	r0, #0
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	1b9b      	subs	r3, r3, r6
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	4433      	add	r3, r6
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006486:	462a      	mov	r2, r5
 8006488:	f000 fd42 	bl	8006f10 <_realloc_r>
 800648c:	4606      	mov	r6, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d1e0      	bne.n	8006454 <__ssputs_r+0x5c>
 8006492:	4650      	mov	r0, sl
 8006494:	6921      	ldr	r1, [r4, #16]
 8006496:	f7ff feb9 	bl	800620c <_free_r>
 800649a:	230c      	movs	r3, #12
 800649c:	f8ca 3000 	str.w	r3, [sl]
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	f04f 30ff 	mov.w	r0, #4294967295
 80064a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	e7e9      	b.n	8006482 <__ssputs_r+0x8a>
	...

080064b0 <_svfiprintf_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	4698      	mov	r8, r3
 80064b6:	898b      	ldrh	r3, [r1, #12]
 80064b8:	4607      	mov	r7, r0
 80064ba:	061b      	lsls	r3, r3, #24
 80064bc:	460d      	mov	r5, r1
 80064be:	4614      	mov	r4, r2
 80064c0:	b09d      	sub	sp, #116	@ 0x74
 80064c2:	d510      	bpl.n	80064e6 <_svfiprintf_r+0x36>
 80064c4:	690b      	ldr	r3, [r1, #16]
 80064c6:	b973      	cbnz	r3, 80064e6 <_svfiprintf_r+0x36>
 80064c8:	2140      	movs	r1, #64	@ 0x40
 80064ca:	f7ff ff09 	bl	80062e0 <_malloc_r>
 80064ce:	6028      	str	r0, [r5, #0]
 80064d0:	6128      	str	r0, [r5, #16]
 80064d2:	b930      	cbnz	r0, 80064e2 <_svfiprintf_r+0x32>
 80064d4:	230c      	movs	r3, #12
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	b01d      	add	sp, #116	@ 0x74
 80064de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e2:	2340      	movs	r3, #64	@ 0x40
 80064e4:	616b      	str	r3, [r5, #20]
 80064e6:	2300      	movs	r3, #0
 80064e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ea:	2320      	movs	r3, #32
 80064ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064f0:	2330      	movs	r3, #48	@ 0x30
 80064f2:	f04f 0901 	mov.w	r9, #1
 80064f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006694 <_svfiprintf_r+0x1e4>
 80064fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006502:	4623      	mov	r3, r4
 8006504:	469a      	mov	sl, r3
 8006506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800650a:	b10a      	cbz	r2, 8006510 <_svfiprintf_r+0x60>
 800650c:	2a25      	cmp	r2, #37	@ 0x25
 800650e:	d1f9      	bne.n	8006504 <_svfiprintf_r+0x54>
 8006510:	ebba 0b04 	subs.w	fp, sl, r4
 8006514:	d00b      	beq.n	800652e <_svfiprintf_r+0x7e>
 8006516:	465b      	mov	r3, fp
 8006518:	4622      	mov	r2, r4
 800651a:	4629      	mov	r1, r5
 800651c:	4638      	mov	r0, r7
 800651e:	f7ff ff6b 	bl	80063f8 <__ssputs_r>
 8006522:	3001      	adds	r0, #1
 8006524:	f000 80a7 	beq.w	8006676 <_svfiprintf_r+0x1c6>
 8006528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800652a:	445a      	add	r2, fp
 800652c:	9209      	str	r2, [sp, #36]	@ 0x24
 800652e:	f89a 3000 	ldrb.w	r3, [sl]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 809f 	beq.w	8006676 <_svfiprintf_r+0x1c6>
 8006538:	2300      	movs	r3, #0
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006542:	f10a 0a01 	add.w	sl, sl, #1
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	9307      	str	r3, [sp, #28]
 800654a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800654e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006550:	4654      	mov	r4, sl
 8006552:	2205      	movs	r2, #5
 8006554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006558:	484e      	ldr	r0, [pc, #312]	@ (8006694 <_svfiprintf_r+0x1e4>)
 800655a:	f000 fccb 	bl	8006ef4 <memchr>
 800655e:	9a04      	ldr	r2, [sp, #16]
 8006560:	b9d8      	cbnz	r0, 800659a <_svfiprintf_r+0xea>
 8006562:	06d0      	lsls	r0, r2, #27
 8006564:	bf44      	itt	mi
 8006566:	2320      	movmi	r3, #32
 8006568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800656c:	0711      	lsls	r1, r2, #28
 800656e:	bf44      	itt	mi
 8006570:	232b      	movmi	r3, #43	@ 0x2b
 8006572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006576:	f89a 3000 	ldrb.w	r3, [sl]
 800657a:	2b2a      	cmp	r3, #42	@ 0x2a
 800657c:	d015      	beq.n	80065aa <_svfiprintf_r+0xfa>
 800657e:	4654      	mov	r4, sl
 8006580:	2000      	movs	r0, #0
 8006582:	f04f 0c0a 	mov.w	ip, #10
 8006586:	9a07      	ldr	r2, [sp, #28]
 8006588:	4621      	mov	r1, r4
 800658a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800658e:	3b30      	subs	r3, #48	@ 0x30
 8006590:	2b09      	cmp	r3, #9
 8006592:	d94b      	bls.n	800662c <_svfiprintf_r+0x17c>
 8006594:	b1b0      	cbz	r0, 80065c4 <_svfiprintf_r+0x114>
 8006596:	9207      	str	r2, [sp, #28]
 8006598:	e014      	b.n	80065c4 <_svfiprintf_r+0x114>
 800659a:	eba0 0308 	sub.w	r3, r0, r8
 800659e:	fa09 f303 	lsl.w	r3, r9, r3
 80065a2:	4313      	orrs	r3, r2
 80065a4:	46a2      	mov	sl, r4
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	e7d2      	b.n	8006550 <_svfiprintf_r+0xa0>
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	9103      	str	r1, [sp, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bfbb      	ittet	lt
 80065b6:	425b      	neglt	r3, r3
 80065b8:	f042 0202 	orrlt.w	r2, r2, #2
 80065bc:	9307      	strge	r3, [sp, #28]
 80065be:	9307      	strlt	r3, [sp, #28]
 80065c0:	bfb8      	it	lt
 80065c2:	9204      	strlt	r2, [sp, #16]
 80065c4:	7823      	ldrb	r3, [r4, #0]
 80065c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80065c8:	d10a      	bne.n	80065e0 <_svfiprintf_r+0x130>
 80065ca:	7863      	ldrb	r3, [r4, #1]
 80065cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ce:	d132      	bne.n	8006636 <_svfiprintf_r+0x186>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	3402      	adds	r4, #2
 80065d4:	1d1a      	adds	r2, r3, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	9203      	str	r2, [sp, #12]
 80065da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065de:	9305      	str	r3, [sp, #20]
 80065e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006698 <_svfiprintf_r+0x1e8>
 80065e4:	2203      	movs	r2, #3
 80065e6:	4650      	mov	r0, sl
 80065e8:	7821      	ldrb	r1, [r4, #0]
 80065ea:	f000 fc83 	bl	8006ef4 <memchr>
 80065ee:	b138      	cbz	r0, 8006600 <_svfiprintf_r+0x150>
 80065f0:	2240      	movs	r2, #64	@ 0x40
 80065f2:	9b04      	ldr	r3, [sp, #16]
 80065f4:	eba0 000a 	sub.w	r0, r0, sl
 80065f8:	4082      	lsls	r2, r0
 80065fa:	4313      	orrs	r3, r2
 80065fc:	3401      	adds	r4, #1
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006604:	2206      	movs	r2, #6
 8006606:	4825      	ldr	r0, [pc, #148]	@ (800669c <_svfiprintf_r+0x1ec>)
 8006608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800660c:	f000 fc72 	bl	8006ef4 <memchr>
 8006610:	2800      	cmp	r0, #0
 8006612:	d036      	beq.n	8006682 <_svfiprintf_r+0x1d2>
 8006614:	4b22      	ldr	r3, [pc, #136]	@ (80066a0 <_svfiprintf_r+0x1f0>)
 8006616:	bb1b      	cbnz	r3, 8006660 <_svfiprintf_r+0x1b0>
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	3307      	adds	r3, #7
 800661c:	f023 0307 	bic.w	r3, r3, #7
 8006620:	3308      	adds	r3, #8
 8006622:	9303      	str	r3, [sp, #12]
 8006624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006626:	4433      	add	r3, r6
 8006628:	9309      	str	r3, [sp, #36]	@ 0x24
 800662a:	e76a      	b.n	8006502 <_svfiprintf_r+0x52>
 800662c:	460c      	mov	r4, r1
 800662e:	2001      	movs	r0, #1
 8006630:	fb0c 3202 	mla	r2, ip, r2, r3
 8006634:	e7a8      	b.n	8006588 <_svfiprintf_r+0xd8>
 8006636:	2300      	movs	r3, #0
 8006638:	f04f 0c0a 	mov.w	ip, #10
 800663c:	4619      	mov	r1, r3
 800663e:	3401      	adds	r4, #1
 8006640:	9305      	str	r3, [sp, #20]
 8006642:	4620      	mov	r0, r4
 8006644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006648:	3a30      	subs	r2, #48	@ 0x30
 800664a:	2a09      	cmp	r2, #9
 800664c:	d903      	bls.n	8006656 <_svfiprintf_r+0x1a6>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0c6      	beq.n	80065e0 <_svfiprintf_r+0x130>
 8006652:	9105      	str	r1, [sp, #20]
 8006654:	e7c4      	b.n	80065e0 <_svfiprintf_r+0x130>
 8006656:	4604      	mov	r4, r0
 8006658:	2301      	movs	r3, #1
 800665a:	fb0c 2101 	mla	r1, ip, r1, r2
 800665e:	e7f0      	b.n	8006642 <_svfiprintf_r+0x192>
 8006660:	ab03      	add	r3, sp, #12
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	462a      	mov	r2, r5
 8006666:	4638      	mov	r0, r7
 8006668:	4b0e      	ldr	r3, [pc, #56]	@ (80066a4 <_svfiprintf_r+0x1f4>)
 800666a:	a904      	add	r1, sp, #16
 800666c:	f3af 8000 	nop.w
 8006670:	1c42      	adds	r2, r0, #1
 8006672:	4606      	mov	r6, r0
 8006674:	d1d6      	bne.n	8006624 <_svfiprintf_r+0x174>
 8006676:	89ab      	ldrh	r3, [r5, #12]
 8006678:	065b      	lsls	r3, r3, #25
 800667a:	f53f af2d 	bmi.w	80064d8 <_svfiprintf_r+0x28>
 800667e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006680:	e72c      	b.n	80064dc <_svfiprintf_r+0x2c>
 8006682:	ab03      	add	r3, sp, #12
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	462a      	mov	r2, r5
 8006688:	4638      	mov	r0, r7
 800668a:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <_svfiprintf_r+0x1f4>)
 800668c:	a904      	add	r1, sp, #16
 800668e:	f000 f9bd 	bl	8006a0c <_printf_i>
 8006692:	e7ed      	b.n	8006670 <_svfiprintf_r+0x1c0>
 8006694:	080082d2 	.word	0x080082d2
 8006698:	080082d8 	.word	0x080082d8
 800669c:	080082dc 	.word	0x080082dc
 80066a0:	00000000 	.word	0x00000000
 80066a4:	080063f9 	.word	0x080063f9

080066a8 <__sfputc_r>:
 80066a8:	6893      	ldr	r3, [r2, #8]
 80066aa:	b410      	push	{r4}
 80066ac:	3b01      	subs	r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	6093      	str	r3, [r2, #8]
 80066b2:	da07      	bge.n	80066c4 <__sfputc_r+0x1c>
 80066b4:	6994      	ldr	r4, [r2, #24]
 80066b6:	42a3      	cmp	r3, r4
 80066b8:	db01      	blt.n	80066be <__sfputc_r+0x16>
 80066ba:	290a      	cmp	r1, #10
 80066bc:	d102      	bne.n	80066c4 <__sfputc_r+0x1c>
 80066be:	bc10      	pop	{r4}
 80066c0:	f7ff bc85 	b.w	8005fce <__swbuf_r>
 80066c4:	6813      	ldr	r3, [r2, #0]
 80066c6:	1c58      	adds	r0, r3, #1
 80066c8:	6010      	str	r0, [r2, #0]
 80066ca:	7019      	strb	r1, [r3, #0]
 80066cc:	4608      	mov	r0, r1
 80066ce:	bc10      	pop	{r4}
 80066d0:	4770      	bx	lr

080066d2 <__sfputs_r>:
 80066d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	4614      	mov	r4, r2
 80066da:	18d5      	adds	r5, r2, r3
 80066dc:	42ac      	cmp	r4, r5
 80066de:	d101      	bne.n	80066e4 <__sfputs_r+0x12>
 80066e0:	2000      	movs	r0, #0
 80066e2:	e007      	b.n	80066f4 <__sfputs_r+0x22>
 80066e4:	463a      	mov	r2, r7
 80066e6:	4630      	mov	r0, r6
 80066e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ec:	f7ff ffdc 	bl	80066a8 <__sfputc_r>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d1f3      	bne.n	80066dc <__sfputs_r+0xa>
 80066f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066f8 <_vfiprintf_r>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	460d      	mov	r5, r1
 80066fe:	4614      	mov	r4, r2
 8006700:	4698      	mov	r8, r3
 8006702:	4606      	mov	r6, r0
 8006704:	b09d      	sub	sp, #116	@ 0x74
 8006706:	b118      	cbz	r0, 8006710 <_vfiprintf_r+0x18>
 8006708:	6a03      	ldr	r3, [r0, #32]
 800670a:	b90b      	cbnz	r3, 8006710 <_vfiprintf_r+0x18>
 800670c:	f7ff fb54 	bl	8005db8 <__sinit>
 8006710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006712:	07d9      	lsls	r1, r3, #31
 8006714:	d405      	bmi.n	8006722 <_vfiprintf_r+0x2a>
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	059a      	lsls	r2, r3, #22
 800671a:	d402      	bmi.n	8006722 <_vfiprintf_r+0x2a>
 800671c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800671e:	f7ff fd64 	bl	80061ea <__retarget_lock_acquire_recursive>
 8006722:	89ab      	ldrh	r3, [r5, #12]
 8006724:	071b      	lsls	r3, r3, #28
 8006726:	d501      	bpl.n	800672c <_vfiprintf_r+0x34>
 8006728:	692b      	ldr	r3, [r5, #16]
 800672a:	b99b      	cbnz	r3, 8006754 <_vfiprintf_r+0x5c>
 800672c:	4629      	mov	r1, r5
 800672e:	4630      	mov	r0, r6
 8006730:	f7ff fc8c 	bl	800604c <__swsetup_r>
 8006734:	b170      	cbz	r0, 8006754 <_vfiprintf_r+0x5c>
 8006736:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006738:	07dc      	lsls	r4, r3, #31
 800673a:	d504      	bpl.n	8006746 <_vfiprintf_r+0x4e>
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	b01d      	add	sp, #116	@ 0x74
 8006742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006746:	89ab      	ldrh	r3, [r5, #12]
 8006748:	0598      	lsls	r0, r3, #22
 800674a:	d4f7      	bmi.n	800673c <_vfiprintf_r+0x44>
 800674c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800674e:	f7ff fd4d 	bl	80061ec <__retarget_lock_release_recursive>
 8006752:	e7f3      	b.n	800673c <_vfiprintf_r+0x44>
 8006754:	2300      	movs	r3, #0
 8006756:	9309      	str	r3, [sp, #36]	@ 0x24
 8006758:	2320      	movs	r3, #32
 800675a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800675e:	2330      	movs	r3, #48	@ 0x30
 8006760:	f04f 0901 	mov.w	r9, #1
 8006764:	f8cd 800c 	str.w	r8, [sp, #12]
 8006768:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006914 <_vfiprintf_r+0x21c>
 800676c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006770:	4623      	mov	r3, r4
 8006772:	469a      	mov	sl, r3
 8006774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006778:	b10a      	cbz	r2, 800677e <_vfiprintf_r+0x86>
 800677a:	2a25      	cmp	r2, #37	@ 0x25
 800677c:	d1f9      	bne.n	8006772 <_vfiprintf_r+0x7a>
 800677e:	ebba 0b04 	subs.w	fp, sl, r4
 8006782:	d00b      	beq.n	800679c <_vfiprintf_r+0xa4>
 8006784:	465b      	mov	r3, fp
 8006786:	4622      	mov	r2, r4
 8006788:	4629      	mov	r1, r5
 800678a:	4630      	mov	r0, r6
 800678c:	f7ff ffa1 	bl	80066d2 <__sfputs_r>
 8006790:	3001      	adds	r0, #1
 8006792:	f000 80a7 	beq.w	80068e4 <_vfiprintf_r+0x1ec>
 8006796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006798:	445a      	add	r2, fp
 800679a:	9209      	str	r2, [sp, #36]	@ 0x24
 800679c:	f89a 3000 	ldrb.w	r3, [sl]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 809f 	beq.w	80068e4 <_vfiprintf_r+0x1ec>
 80067a6:	2300      	movs	r3, #0
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b0:	f10a 0a01 	add.w	sl, sl, #1
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80067be:	4654      	mov	r4, sl
 80067c0:	2205      	movs	r2, #5
 80067c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c6:	4853      	ldr	r0, [pc, #332]	@ (8006914 <_vfiprintf_r+0x21c>)
 80067c8:	f000 fb94 	bl	8006ef4 <memchr>
 80067cc:	9a04      	ldr	r2, [sp, #16]
 80067ce:	b9d8      	cbnz	r0, 8006808 <_vfiprintf_r+0x110>
 80067d0:	06d1      	lsls	r1, r2, #27
 80067d2:	bf44      	itt	mi
 80067d4:	2320      	movmi	r3, #32
 80067d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067da:	0713      	lsls	r3, r2, #28
 80067dc:	bf44      	itt	mi
 80067de:	232b      	movmi	r3, #43	@ 0x2b
 80067e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067e4:	f89a 3000 	ldrb.w	r3, [sl]
 80067e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067ea:	d015      	beq.n	8006818 <_vfiprintf_r+0x120>
 80067ec:	4654      	mov	r4, sl
 80067ee:	2000      	movs	r0, #0
 80067f0:	f04f 0c0a 	mov.w	ip, #10
 80067f4:	9a07      	ldr	r2, [sp, #28]
 80067f6:	4621      	mov	r1, r4
 80067f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067fc:	3b30      	subs	r3, #48	@ 0x30
 80067fe:	2b09      	cmp	r3, #9
 8006800:	d94b      	bls.n	800689a <_vfiprintf_r+0x1a2>
 8006802:	b1b0      	cbz	r0, 8006832 <_vfiprintf_r+0x13a>
 8006804:	9207      	str	r2, [sp, #28]
 8006806:	e014      	b.n	8006832 <_vfiprintf_r+0x13a>
 8006808:	eba0 0308 	sub.w	r3, r0, r8
 800680c:	fa09 f303 	lsl.w	r3, r9, r3
 8006810:	4313      	orrs	r3, r2
 8006812:	46a2      	mov	sl, r4
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	e7d2      	b.n	80067be <_vfiprintf_r+0xc6>
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	1d19      	adds	r1, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	9103      	str	r1, [sp, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	bfbb      	ittet	lt
 8006824:	425b      	neglt	r3, r3
 8006826:	f042 0202 	orrlt.w	r2, r2, #2
 800682a:	9307      	strge	r3, [sp, #28]
 800682c:	9307      	strlt	r3, [sp, #28]
 800682e:	bfb8      	it	lt
 8006830:	9204      	strlt	r2, [sp, #16]
 8006832:	7823      	ldrb	r3, [r4, #0]
 8006834:	2b2e      	cmp	r3, #46	@ 0x2e
 8006836:	d10a      	bne.n	800684e <_vfiprintf_r+0x156>
 8006838:	7863      	ldrb	r3, [r4, #1]
 800683a:	2b2a      	cmp	r3, #42	@ 0x2a
 800683c:	d132      	bne.n	80068a4 <_vfiprintf_r+0x1ac>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	3402      	adds	r4, #2
 8006842:	1d1a      	adds	r2, r3, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	9203      	str	r2, [sp, #12]
 8006848:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800684c:	9305      	str	r3, [sp, #20]
 800684e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006918 <_vfiprintf_r+0x220>
 8006852:	2203      	movs	r2, #3
 8006854:	4650      	mov	r0, sl
 8006856:	7821      	ldrb	r1, [r4, #0]
 8006858:	f000 fb4c 	bl	8006ef4 <memchr>
 800685c:	b138      	cbz	r0, 800686e <_vfiprintf_r+0x176>
 800685e:	2240      	movs	r2, #64	@ 0x40
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	eba0 000a 	sub.w	r0, r0, sl
 8006866:	4082      	lsls	r2, r0
 8006868:	4313      	orrs	r3, r2
 800686a:	3401      	adds	r4, #1
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006872:	2206      	movs	r2, #6
 8006874:	4829      	ldr	r0, [pc, #164]	@ (800691c <_vfiprintf_r+0x224>)
 8006876:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800687a:	f000 fb3b 	bl	8006ef4 <memchr>
 800687e:	2800      	cmp	r0, #0
 8006880:	d03f      	beq.n	8006902 <_vfiprintf_r+0x20a>
 8006882:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <_vfiprintf_r+0x228>)
 8006884:	bb1b      	cbnz	r3, 80068ce <_vfiprintf_r+0x1d6>
 8006886:	9b03      	ldr	r3, [sp, #12]
 8006888:	3307      	adds	r3, #7
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	3308      	adds	r3, #8
 8006890:	9303      	str	r3, [sp, #12]
 8006892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006894:	443b      	add	r3, r7
 8006896:	9309      	str	r3, [sp, #36]	@ 0x24
 8006898:	e76a      	b.n	8006770 <_vfiprintf_r+0x78>
 800689a:	460c      	mov	r4, r1
 800689c:	2001      	movs	r0, #1
 800689e:	fb0c 3202 	mla	r2, ip, r2, r3
 80068a2:	e7a8      	b.n	80067f6 <_vfiprintf_r+0xfe>
 80068a4:	2300      	movs	r3, #0
 80068a6:	f04f 0c0a 	mov.w	ip, #10
 80068aa:	4619      	mov	r1, r3
 80068ac:	3401      	adds	r4, #1
 80068ae:	9305      	str	r3, [sp, #20]
 80068b0:	4620      	mov	r0, r4
 80068b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b6:	3a30      	subs	r2, #48	@ 0x30
 80068b8:	2a09      	cmp	r2, #9
 80068ba:	d903      	bls.n	80068c4 <_vfiprintf_r+0x1cc>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0c6      	beq.n	800684e <_vfiprintf_r+0x156>
 80068c0:	9105      	str	r1, [sp, #20]
 80068c2:	e7c4      	b.n	800684e <_vfiprintf_r+0x156>
 80068c4:	4604      	mov	r4, r0
 80068c6:	2301      	movs	r3, #1
 80068c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80068cc:	e7f0      	b.n	80068b0 <_vfiprintf_r+0x1b8>
 80068ce:	ab03      	add	r3, sp, #12
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	462a      	mov	r2, r5
 80068d4:	4630      	mov	r0, r6
 80068d6:	4b13      	ldr	r3, [pc, #76]	@ (8006924 <_vfiprintf_r+0x22c>)
 80068d8:	a904      	add	r1, sp, #16
 80068da:	f3af 8000 	nop.w
 80068de:	4607      	mov	r7, r0
 80068e0:	1c78      	adds	r0, r7, #1
 80068e2:	d1d6      	bne.n	8006892 <_vfiprintf_r+0x19a>
 80068e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068e6:	07d9      	lsls	r1, r3, #31
 80068e8:	d405      	bmi.n	80068f6 <_vfiprintf_r+0x1fe>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	059a      	lsls	r2, r3, #22
 80068ee:	d402      	bmi.n	80068f6 <_vfiprintf_r+0x1fe>
 80068f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068f2:	f7ff fc7b 	bl	80061ec <__retarget_lock_release_recursive>
 80068f6:	89ab      	ldrh	r3, [r5, #12]
 80068f8:	065b      	lsls	r3, r3, #25
 80068fa:	f53f af1f 	bmi.w	800673c <_vfiprintf_r+0x44>
 80068fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006900:	e71e      	b.n	8006740 <_vfiprintf_r+0x48>
 8006902:	ab03      	add	r3, sp, #12
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	462a      	mov	r2, r5
 8006908:	4630      	mov	r0, r6
 800690a:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <_vfiprintf_r+0x22c>)
 800690c:	a904      	add	r1, sp, #16
 800690e:	f000 f87d 	bl	8006a0c <_printf_i>
 8006912:	e7e4      	b.n	80068de <_vfiprintf_r+0x1e6>
 8006914:	080082d2 	.word	0x080082d2
 8006918:	080082d8 	.word	0x080082d8
 800691c:	080082dc 	.word	0x080082dc
 8006920:	00000000 	.word	0x00000000
 8006924:	080066d3 	.word	0x080066d3

08006928 <_printf_common>:
 8006928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	4616      	mov	r6, r2
 800692e:	4698      	mov	r8, r3
 8006930:	688a      	ldr	r2, [r1, #8]
 8006932:	690b      	ldr	r3, [r1, #16]
 8006934:	4607      	mov	r7, r0
 8006936:	4293      	cmp	r3, r2
 8006938:	bfb8      	it	lt
 800693a:	4613      	movlt	r3, r2
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006942:	460c      	mov	r4, r1
 8006944:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006948:	b10a      	cbz	r2, 800694e <_printf_common+0x26>
 800694a:	3301      	adds	r3, #1
 800694c:	6033      	str	r3, [r6, #0]
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	0699      	lsls	r1, r3, #26
 8006952:	bf42      	ittt	mi
 8006954:	6833      	ldrmi	r3, [r6, #0]
 8006956:	3302      	addmi	r3, #2
 8006958:	6033      	strmi	r3, [r6, #0]
 800695a:	6825      	ldr	r5, [r4, #0]
 800695c:	f015 0506 	ands.w	r5, r5, #6
 8006960:	d106      	bne.n	8006970 <_printf_common+0x48>
 8006962:	f104 0a19 	add.w	sl, r4, #25
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	6832      	ldr	r2, [r6, #0]
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	42ab      	cmp	r3, r5
 800696e:	dc2b      	bgt.n	80069c8 <_printf_common+0xa0>
 8006970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	3b00      	subs	r3, #0
 8006978:	bf18      	it	ne
 800697a:	2301      	movne	r3, #1
 800697c:	0692      	lsls	r2, r2, #26
 800697e:	d430      	bmi.n	80069e2 <_printf_common+0xba>
 8006980:	4641      	mov	r1, r8
 8006982:	4638      	mov	r0, r7
 8006984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006988:	47c8      	blx	r9
 800698a:	3001      	adds	r0, #1
 800698c:	d023      	beq.n	80069d6 <_printf_common+0xae>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	6922      	ldr	r2, [r4, #16]
 8006992:	f003 0306 	and.w	r3, r3, #6
 8006996:	2b04      	cmp	r3, #4
 8006998:	bf14      	ite	ne
 800699a:	2500      	movne	r5, #0
 800699c:	6833      	ldreq	r3, [r6, #0]
 800699e:	f04f 0600 	mov.w	r6, #0
 80069a2:	bf08      	it	eq
 80069a4:	68e5      	ldreq	r5, [r4, #12]
 80069a6:	f104 041a 	add.w	r4, r4, #26
 80069aa:	bf08      	it	eq
 80069ac:	1aed      	subeq	r5, r5, r3
 80069ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80069b2:	bf08      	it	eq
 80069b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069b8:	4293      	cmp	r3, r2
 80069ba:	bfc4      	itt	gt
 80069bc:	1a9b      	subgt	r3, r3, r2
 80069be:	18ed      	addgt	r5, r5, r3
 80069c0:	42b5      	cmp	r5, r6
 80069c2:	d11a      	bne.n	80069fa <_printf_common+0xd2>
 80069c4:	2000      	movs	r0, #0
 80069c6:	e008      	b.n	80069da <_printf_common+0xb2>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4652      	mov	r2, sl
 80069cc:	4641      	mov	r1, r8
 80069ce:	4638      	mov	r0, r7
 80069d0:	47c8      	blx	r9
 80069d2:	3001      	adds	r0, #1
 80069d4:	d103      	bne.n	80069de <_printf_common+0xb6>
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069de:	3501      	adds	r5, #1
 80069e0:	e7c1      	b.n	8006966 <_printf_common+0x3e>
 80069e2:	2030      	movs	r0, #48	@ 0x30
 80069e4:	18e1      	adds	r1, r4, r3
 80069e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069f0:	4422      	add	r2, r4
 80069f2:	3302      	adds	r3, #2
 80069f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069f8:	e7c2      	b.n	8006980 <_printf_common+0x58>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4622      	mov	r2, r4
 80069fe:	4641      	mov	r1, r8
 8006a00:	4638      	mov	r0, r7
 8006a02:	47c8      	blx	r9
 8006a04:	3001      	adds	r0, #1
 8006a06:	d0e6      	beq.n	80069d6 <_printf_common+0xae>
 8006a08:	3601      	adds	r6, #1
 8006a0a:	e7d9      	b.n	80069c0 <_printf_common+0x98>

08006a0c <_printf_i>:
 8006a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	7e0f      	ldrb	r7, [r1, #24]
 8006a12:	4691      	mov	r9, r2
 8006a14:	2f78      	cmp	r7, #120	@ 0x78
 8006a16:	4680      	mov	r8, r0
 8006a18:	460c      	mov	r4, r1
 8006a1a:	469a      	mov	sl, r3
 8006a1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a22:	d807      	bhi.n	8006a34 <_printf_i+0x28>
 8006a24:	2f62      	cmp	r7, #98	@ 0x62
 8006a26:	d80a      	bhi.n	8006a3e <_printf_i+0x32>
 8006a28:	2f00      	cmp	r7, #0
 8006a2a:	f000 80d1 	beq.w	8006bd0 <_printf_i+0x1c4>
 8006a2e:	2f58      	cmp	r7, #88	@ 0x58
 8006a30:	f000 80b8 	beq.w	8006ba4 <_printf_i+0x198>
 8006a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a3c:	e03a      	b.n	8006ab4 <_printf_i+0xa8>
 8006a3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a42:	2b15      	cmp	r3, #21
 8006a44:	d8f6      	bhi.n	8006a34 <_printf_i+0x28>
 8006a46:	a101      	add	r1, pc, #4	@ (adr r1, 8006a4c <_printf_i+0x40>)
 8006a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a4c:	08006aa5 	.word	0x08006aa5
 8006a50:	08006ab9 	.word	0x08006ab9
 8006a54:	08006a35 	.word	0x08006a35
 8006a58:	08006a35 	.word	0x08006a35
 8006a5c:	08006a35 	.word	0x08006a35
 8006a60:	08006a35 	.word	0x08006a35
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006a35 	.word	0x08006a35
 8006a6c:	08006a35 	.word	0x08006a35
 8006a70:	08006a35 	.word	0x08006a35
 8006a74:	08006a35 	.word	0x08006a35
 8006a78:	08006bb7 	.word	0x08006bb7
 8006a7c:	08006ae3 	.word	0x08006ae3
 8006a80:	08006b71 	.word	0x08006b71
 8006a84:	08006a35 	.word	0x08006a35
 8006a88:	08006a35 	.word	0x08006a35
 8006a8c:	08006bd9 	.word	0x08006bd9
 8006a90:	08006a35 	.word	0x08006a35
 8006a94:	08006ae3 	.word	0x08006ae3
 8006a98:	08006a35 	.word	0x08006a35
 8006a9c:	08006a35 	.word	0x08006a35
 8006aa0:	08006b79 	.word	0x08006b79
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	1d1a      	adds	r2, r3, #4
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6032      	str	r2, [r6, #0]
 8006aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e09c      	b.n	8006bf2 <_printf_i+0x1e6>
 8006ab8:	6833      	ldr	r3, [r6, #0]
 8006aba:	6820      	ldr	r0, [r4, #0]
 8006abc:	1d19      	adds	r1, r3, #4
 8006abe:	6031      	str	r1, [r6, #0]
 8006ac0:	0606      	lsls	r6, r0, #24
 8006ac2:	d501      	bpl.n	8006ac8 <_printf_i+0xbc>
 8006ac4:	681d      	ldr	r5, [r3, #0]
 8006ac6:	e003      	b.n	8006ad0 <_printf_i+0xc4>
 8006ac8:	0645      	lsls	r5, r0, #25
 8006aca:	d5fb      	bpl.n	8006ac4 <_printf_i+0xb8>
 8006acc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	da03      	bge.n	8006adc <_printf_i+0xd0>
 8006ad4:	232d      	movs	r3, #45	@ 0x2d
 8006ad6:	426d      	negs	r5, r5
 8006ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006adc:	230a      	movs	r3, #10
 8006ade:	4858      	ldr	r0, [pc, #352]	@ (8006c40 <_printf_i+0x234>)
 8006ae0:	e011      	b.n	8006b06 <_printf_i+0xfa>
 8006ae2:	6821      	ldr	r1, [r4, #0]
 8006ae4:	6833      	ldr	r3, [r6, #0]
 8006ae6:	0608      	lsls	r0, r1, #24
 8006ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006aec:	d402      	bmi.n	8006af4 <_printf_i+0xe8>
 8006aee:	0649      	lsls	r1, r1, #25
 8006af0:	bf48      	it	mi
 8006af2:	b2ad      	uxthmi	r5, r5
 8006af4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006af6:	6033      	str	r3, [r6, #0]
 8006af8:	bf14      	ite	ne
 8006afa:	230a      	movne	r3, #10
 8006afc:	2308      	moveq	r3, #8
 8006afe:	4850      	ldr	r0, [pc, #320]	@ (8006c40 <_printf_i+0x234>)
 8006b00:	2100      	movs	r1, #0
 8006b02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b06:	6866      	ldr	r6, [r4, #4]
 8006b08:	2e00      	cmp	r6, #0
 8006b0a:	60a6      	str	r6, [r4, #8]
 8006b0c:	db05      	blt.n	8006b1a <_printf_i+0x10e>
 8006b0e:	6821      	ldr	r1, [r4, #0]
 8006b10:	432e      	orrs	r6, r5
 8006b12:	f021 0104 	bic.w	r1, r1, #4
 8006b16:	6021      	str	r1, [r4, #0]
 8006b18:	d04b      	beq.n	8006bb2 <_printf_i+0x1a6>
 8006b1a:	4616      	mov	r6, r2
 8006b1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b20:	fb03 5711 	mls	r7, r3, r1, r5
 8006b24:	5dc7      	ldrb	r7, [r0, r7]
 8006b26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b2a:	462f      	mov	r7, r5
 8006b2c:	42bb      	cmp	r3, r7
 8006b2e:	460d      	mov	r5, r1
 8006b30:	d9f4      	bls.n	8006b1c <_printf_i+0x110>
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d10b      	bne.n	8006b4e <_printf_i+0x142>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	07df      	lsls	r7, r3, #31
 8006b3a:	d508      	bpl.n	8006b4e <_printf_i+0x142>
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	6861      	ldr	r1, [r4, #4]
 8006b40:	4299      	cmp	r1, r3
 8006b42:	bfde      	ittt	le
 8006b44:	2330      	movle	r3, #48	@ 0x30
 8006b46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b4e:	1b92      	subs	r2, r2, r6
 8006b50:	6122      	str	r2, [r4, #16]
 8006b52:	464b      	mov	r3, r9
 8006b54:	4621      	mov	r1, r4
 8006b56:	4640      	mov	r0, r8
 8006b58:	f8cd a000 	str.w	sl, [sp]
 8006b5c:	aa03      	add	r2, sp, #12
 8006b5e:	f7ff fee3 	bl	8006928 <_printf_common>
 8006b62:	3001      	adds	r0, #1
 8006b64:	d14a      	bne.n	8006bfc <_printf_i+0x1f0>
 8006b66:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6a:	b004      	add	sp, #16
 8006b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	f043 0320 	orr.w	r3, r3, #32
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	2778      	movs	r7, #120	@ 0x78
 8006b7a:	4832      	ldr	r0, [pc, #200]	@ (8006c44 <_printf_i+0x238>)
 8006b7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	6831      	ldr	r1, [r6, #0]
 8006b84:	061f      	lsls	r7, r3, #24
 8006b86:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b8a:	d402      	bmi.n	8006b92 <_printf_i+0x186>
 8006b8c:	065f      	lsls	r7, r3, #25
 8006b8e:	bf48      	it	mi
 8006b90:	b2ad      	uxthmi	r5, r5
 8006b92:	6031      	str	r1, [r6, #0]
 8006b94:	07d9      	lsls	r1, r3, #31
 8006b96:	bf44      	itt	mi
 8006b98:	f043 0320 	orrmi.w	r3, r3, #32
 8006b9c:	6023      	strmi	r3, [r4, #0]
 8006b9e:	b11d      	cbz	r5, 8006ba8 <_printf_i+0x19c>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	e7ad      	b.n	8006b00 <_printf_i+0xf4>
 8006ba4:	4826      	ldr	r0, [pc, #152]	@ (8006c40 <_printf_i+0x234>)
 8006ba6:	e7e9      	b.n	8006b7c <_printf_i+0x170>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	f023 0320 	bic.w	r3, r3, #32
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	e7f6      	b.n	8006ba0 <_printf_i+0x194>
 8006bb2:	4616      	mov	r6, r2
 8006bb4:	e7bd      	b.n	8006b32 <_printf_i+0x126>
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	6825      	ldr	r5, [r4, #0]
 8006bba:	1d18      	adds	r0, r3, #4
 8006bbc:	6961      	ldr	r1, [r4, #20]
 8006bbe:	6030      	str	r0, [r6, #0]
 8006bc0:	062e      	lsls	r6, r5, #24
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	d501      	bpl.n	8006bca <_printf_i+0x1be>
 8006bc6:	6019      	str	r1, [r3, #0]
 8006bc8:	e002      	b.n	8006bd0 <_printf_i+0x1c4>
 8006bca:	0668      	lsls	r0, r5, #25
 8006bcc:	d5fb      	bpl.n	8006bc6 <_printf_i+0x1ba>
 8006bce:	8019      	strh	r1, [r3, #0]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4616      	mov	r6, r2
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	e7bc      	b.n	8006b52 <_printf_i+0x146>
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	2100      	movs	r1, #0
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	6032      	str	r2, [r6, #0]
 8006be0:	681e      	ldr	r6, [r3, #0]
 8006be2:	6862      	ldr	r2, [r4, #4]
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f985 	bl	8006ef4 <memchr>
 8006bea:	b108      	cbz	r0, 8006bf0 <_printf_i+0x1e4>
 8006bec:	1b80      	subs	r0, r0, r6
 8006bee:	6060      	str	r0, [r4, #4]
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bfa:	e7aa      	b.n	8006b52 <_printf_i+0x146>
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	4649      	mov	r1, r9
 8006c00:	4640      	mov	r0, r8
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	47d0      	blx	sl
 8006c06:	3001      	adds	r0, #1
 8006c08:	d0ad      	beq.n	8006b66 <_printf_i+0x15a>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	079b      	lsls	r3, r3, #30
 8006c0e:	d413      	bmi.n	8006c38 <_printf_i+0x22c>
 8006c10:	68e0      	ldr	r0, [r4, #12]
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	4298      	cmp	r0, r3
 8006c16:	bfb8      	it	lt
 8006c18:	4618      	movlt	r0, r3
 8006c1a:	e7a6      	b.n	8006b6a <_printf_i+0x15e>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	4632      	mov	r2, r6
 8006c20:	4649      	mov	r1, r9
 8006c22:	4640      	mov	r0, r8
 8006c24:	47d0      	blx	sl
 8006c26:	3001      	adds	r0, #1
 8006c28:	d09d      	beq.n	8006b66 <_printf_i+0x15a>
 8006c2a:	3501      	adds	r5, #1
 8006c2c:	68e3      	ldr	r3, [r4, #12]
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	1a5b      	subs	r3, r3, r1
 8006c32:	42ab      	cmp	r3, r5
 8006c34:	dcf2      	bgt.n	8006c1c <_printf_i+0x210>
 8006c36:	e7eb      	b.n	8006c10 <_printf_i+0x204>
 8006c38:	2500      	movs	r5, #0
 8006c3a:	f104 0619 	add.w	r6, r4, #25
 8006c3e:	e7f5      	b.n	8006c2c <_printf_i+0x220>
 8006c40:	080082e3 	.word	0x080082e3
 8006c44:	080082f4 	.word	0x080082f4

08006c48 <__sflush_r>:
 8006c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	0716      	lsls	r6, r2, #28
 8006c50:	4605      	mov	r5, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	d454      	bmi.n	8006d00 <__sflush_r+0xb8>
 8006c56:	684b      	ldr	r3, [r1, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dc02      	bgt.n	8006c62 <__sflush_r+0x1a>
 8006c5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dd48      	ble.n	8006cf4 <__sflush_r+0xac>
 8006c62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	d045      	beq.n	8006cf4 <__sflush_r+0xac>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c6e:	682f      	ldr	r7, [r5, #0]
 8006c70:	6a21      	ldr	r1, [r4, #32]
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	d030      	beq.n	8006cd8 <__sflush_r+0x90>
 8006c76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	0759      	lsls	r1, r3, #29
 8006c7c:	d505      	bpl.n	8006c8a <__sflush_r+0x42>
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c84:	b10b      	cbz	r3, 8006c8a <__sflush_r+0x42>
 8006c86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c88:	1ad2      	subs	r2, r2, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c90:	6a21      	ldr	r1, [r4, #32]
 8006c92:	47b0      	blx	r6
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	d106      	bne.n	8006ca8 <__sflush_r+0x60>
 8006c9a:	6829      	ldr	r1, [r5, #0]
 8006c9c:	291d      	cmp	r1, #29
 8006c9e:	d82b      	bhi.n	8006cf8 <__sflush_r+0xb0>
 8006ca0:	4a28      	ldr	r2, [pc, #160]	@ (8006d44 <__sflush_r+0xfc>)
 8006ca2:	40ca      	lsrs	r2, r1
 8006ca4:	07d6      	lsls	r6, r2, #31
 8006ca6:	d527      	bpl.n	8006cf8 <__sflush_r+0xb0>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	6062      	str	r2, [r4, #4]
 8006cac:	6922      	ldr	r2, [r4, #16]
 8006cae:	04d9      	lsls	r1, r3, #19
 8006cb0:	6022      	str	r2, [r4, #0]
 8006cb2:	d504      	bpl.n	8006cbe <__sflush_r+0x76>
 8006cb4:	1c42      	adds	r2, r0, #1
 8006cb6:	d101      	bne.n	8006cbc <__sflush_r+0x74>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b903      	cbnz	r3, 8006cbe <__sflush_r+0x76>
 8006cbc:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cc0:	602f      	str	r7, [r5, #0]
 8006cc2:	b1b9      	cbz	r1, 8006cf4 <__sflush_r+0xac>
 8006cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cc8:	4299      	cmp	r1, r3
 8006cca:	d002      	beq.n	8006cd2 <__sflush_r+0x8a>
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f7ff fa9d 	bl	800620c <_free_r>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cd6:	e00d      	b.n	8006cf4 <__sflush_r+0xac>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b0      	blx	r6
 8006cde:	4602      	mov	r2, r0
 8006ce0:	1c50      	adds	r0, r2, #1
 8006ce2:	d1c9      	bne.n	8006c78 <__sflush_r+0x30>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0c6      	beq.n	8006c78 <__sflush_r+0x30>
 8006cea:	2b1d      	cmp	r3, #29
 8006cec:	d001      	beq.n	8006cf2 <__sflush_r+0xaa>
 8006cee:	2b16      	cmp	r3, #22
 8006cf0:	d11d      	bne.n	8006d2e <__sflush_r+0xe6>
 8006cf2:	602f      	str	r7, [r5, #0]
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e021      	b.n	8006d3c <__sflush_r+0xf4>
 8006cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	e01a      	b.n	8006d36 <__sflush_r+0xee>
 8006d00:	690f      	ldr	r7, [r1, #16]
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	d0f6      	beq.n	8006cf4 <__sflush_r+0xac>
 8006d06:	0793      	lsls	r3, r2, #30
 8006d08:	bf18      	it	ne
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	680e      	ldr	r6, [r1, #0]
 8006d0e:	bf08      	it	eq
 8006d10:	694b      	ldreq	r3, [r1, #20]
 8006d12:	1bf6      	subs	r6, r6, r7
 8006d14:	600f      	str	r7, [r1, #0]
 8006d16:	608b      	str	r3, [r1, #8]
 8006d18:	2e00      	cmp	r6, #0
 8006d1a:	ddeb      	ble.n	8006cf4 <__sflush_r+0xac>
 8006d1c:	4633      	mov	r3, r6
 8006d1e:	463a      	mov	r2, r7
 8006d20:	4628      	mov	r0, r5
 8006d22:	6a21      	ldr	r1, [r4, #32]
 8006d24:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d28:	47e0      	blx	ip
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	dc07      	bgt.n	8006d3e <__sflush_r+0xf6>
 8006d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	81a3      	strh	r3, [r4, #12]
 8006d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3e:	4407      	add	r7, r0
 8006d40:	1a36      	subs	r6, r6, r0
 8006d42:	e7e9      	b.n	8006d18 <__sflush_r+0xd0>
 8006d44:	20400001 	.word	0x20400001

08006d48 <_fflush_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	690b      	ldr	r3, [r1, #16]
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	b913      	cbnz	r3, 8006d58 <_fflush_r+0x10>
 8006d52:	2500      	movs	r5, #0
 8006d54:	4628      	mov	r0, r5
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	b118      	cbz	r0, 8006d62 <_fflush_r+0x1a>
 8006d5a:	6a03      	ldr	r3, [r0, #32]
 8006d5c:	b90b      	cbnz	r3, 8006d62 <_fflush_r+0x1a>
 8006d5e:	f7ff f82b 	bl	8005db8 <__sinit>
 8006d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f3      	beq.n	8006d52 <_fflush_r+0xa>
 8006d6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d6c:	07d0      	lsls	r0, r2, #31
 8006d6e:	d404      	bmi.n	8006d7a <_fflush_r+0x32>
 8006d70:	0599      	lsls	r1, r3, #22
 8006d72:	d402      	bmi.n	8006d7a <_fflush_r+0x32>
 8006d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d76:	f7ff fa38 	bl	80061ea <__retarget_lock_acquire_recursive>
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	f7ff ff63 	bl	8006c48 <__sflush_r>
 8006d82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d84:	4605      	mov	r5, r0
 8006d86:	07da      	lsls	r2, r3, #31
 8006d88:	d4e4      	bmi.n	8006d54 <_fflush_r+0xc>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	059b      	lsls	r3, r3, #22
 8006d8e:	d4e1      	bmi.n	8006d54 <_fflush_r+0xc>
 8006d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d92:	f7ff fa2b 	bl	80061ec <__retarget_lock_release_recursive>
 8006d96:	e7dd      	b.n	8006d54 <_fflush_r+0xc>

08006d98 <__swhatbuf_r>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da0:	4615      	mov	r5, r2
 8006da2:	2900      	cmp	r1, #0
 8006da4:	461e      	mov	r6, r3
 8006da6:	b096      	sub	sp, #88	@ 0x58
 8006da8:	da0c      	bge.n	8006dc4 <__swhatbuf_r+0x2c>
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	2100      	movs	r1, #0
 8006dae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006db2:	bf14      	ite	ne
 8006db4:	2340      	movne	r3, #64	@ 0x40
 8006db6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006dba:	2000      	movs	r0, #0
 8006dbc:	6031      	str	r1, [r6, #0]
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	b016      	add	sp, #88	@ 0x58
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	466a      	mov	r2, sp
 8006dc6:	f000 f863 	bl	8006e90 <_fstat_r>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	dbed      	blt.n	8006daa <__swhatbuf_r+0x12>
 8006dce:	9901      	ldr	r1, [sp, #4]
 8006dd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006dd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006dd8:	4259      	negs	r1, r3
 8006dda:	4159      	adcs	r1, r3
 8006ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006de0:	e7eb      	b.n	8006dba <__swhatbuf_r+0x22>

08006de2 <__smakebuf_r>:
 8006de2:	898b      	ldrh	r3, [r1, #12]
 8006de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006de6:	079d      	lsls	r5, r3, #30
 8006de8:	4606      	mov	r6, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	d507      	bpl.n	8006dfe <__smakebuf_r+0x1c>
 8006dee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	2301      	movs	r3, #1
 8006df8:	6163      	str	r3, [r4, #20]
 8006dfa:	b003      	add	sp, #12
 8006dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfe:	466a      	mov	r2, sp
 8006e00:	ab01      	add	r3, sp, #4
 8006e02:	f7ff ffc9 	bl	8006d98 <__swhatbuf_r>
 8006e06:	9f00      	ldr	r7, [sp, #0]
 8006e08:	4605      	mov	r5, r0
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7ff fa67 	bl	80062e0 <_malloc_r>
 8006e12:	b948      	cbnz	r0, 8006e28 <__smakebuf_r+0x46>
 8006e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e18:	059a      	lsls	r2, r3, #22
 8006e1a:	d4ee      	bmi.n	8006dfa <__smakebuf_r+0x18>
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	e7e2      	b.n	8006dee <__smakebuf_r+0xc>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	6020      	str	r0, [r4, #0]
 8006e38:	b15b      	cbz	r3, 8006e52 <__smakebuf_r+0x70>
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e40:	f000 f838 	bl	8006eb4 <_isatty_r>
 8006e44:	b128      	cbz	r0, 8006e52 <__smakebuf_r+0x70>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f023 0303 	bic.w	r3, r3, #3
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	431d      	orrs	r5, r3
 8006e56:	81a5      	strh	r5, [r4, #12]
 8006e58:	e7cf      	b.n	8006dfa <__smakebuf_r+0x18>

08006e5a <memmove>:
 8006e5a:	4288      	cmp	r0, r1
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	eb01 0402 	add.w	r4, r1, r2
 8006e62:	d902      	bls.n	8006e6a <memmove+0x10>
 8006e64:	4284      	cmp	r4, r0
 8006e66:	4623      	mov	r3, r4
 8006e68:	d807      	bhi.n	8006e7a <memmove+0x20>
 8006e6a:	1e43      	subs	r3, r0, #1
 8006e6c:	42a1      	cmp	r1, r4
 8006e6e:	d008      	beq.n	8006e82 <memmove+0x28>
 8006e70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e78:	e7f8      	b.n	8006e6c <memmove+0x12>
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	4402      	add	r2, r0
 8006e7e:	428a      	cmp	r2, r1
 8006e80:	d100      	bne.n	8006e84 <memmove+0x2a>
 8006e82:	bd10      	pop	{r4, pc}
 8006e84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e88:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e8c:	e7f7      	b.n	8006e7e <memmove+0x24>
	...

08006e90 <_fstat_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	2300      	movs	r3, #0
 8006e94:	4d06      	ldr	r5, [pc, #24]	@ (8006eb0 <_fstat_r+0x20>)
 8006e96:	4604      	mov	r4, r0
 8006e98:	4608      	mov	r0, r1
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	602b      	str	r3, [r5, #0]
 8006e9e:	f7fc f958 	bl	8003152 <_fstat>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	d102      	bne.n	8006eac <_fstat_r+0x1c>
 8006ea6:	682b      	ldr	r3, [r5, #0]
 8006ea8:	b103      	cbz	r3, 8006eac <_fstat_r+0x1c>
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	bd38      	pop	{r3, r4, r5, pc}
 8006eae:	bf00      	nop
 8006eb0:	200009b4 	.word	0x200009b4

08006eb4 <_isatty_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4d05      	ldr	r5, [pc, #20]	@ (8006ed0 <_isatty_r+0x1c>)
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fc f956 	bl	8003170 <_isatty>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_isatty_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_isatty_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	200009b4 	.word	0x200009b4

08006ed4 <_sbrk_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	4d05      	ldr	r5, [pc, #20]	@ (8006ef0 <_sbrk_r+0x1c>)
 8006eda:	4604      	mov	r4, r0
 8006edc:	4608      	mov	r0, r1
 8006ede:	602b      	str	r3, [r5, #0]
 8006ee0:	f7fc f95c 	bl	800319c <_sbrk>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_sbrk_r+0x1a>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_sbrk_r+0x1a>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	200009b4 	.word	0x200009b4

08006ef4 <memchr>:
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	b2c9      	uxtb	r1, r1
 8006efa:	4402      	add	r2, r0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	d101      	bne.n	8006f06 <memchr+0x12>
 8006f02:	2000      	movs	r0, #0
 8006f04:	e003      	b.n	8006f0e <memchr+0x1a>
 8006f06:	7804      	ldrb	r4, [r0, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	428c      	cmp	r4, r1
 8006f0c:	d1f6      	bne.n	8006efc <memchr+0x8>
 8006f0e:	bd10      	pop	{r4, pc}

08006f10 <_realloc_r>:
 8006f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f14:	4607      	mov	r7, r0
 8006f16:	4614      	mov	r4, r2
 8006f18:	460d      	mov	r5, r1
 8006f1a:	b921      	cbnz	r1, 8006f26 <_realloc_r+0x16>
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f22:	f7ff b9dd 	b.w	80062e0 <_malloc_r>
 8006f26:	b92a      	cbnz	r2, 8006f34 <_realloc_r+0x24>
 8006f28:	f7ff f970 	bl	800620c <_free_r>
 8006f2c:	4625      	mov	r5, r4
 8006f2e:	4628      	mov	r0, r5
 8006f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f34:	f000 f81a 	bl	8006f6c <_malloc_usable_size_r>
 8006f38:	4284      	cmp	r4, r0
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	d802      	bhi.n	8006f44 <_realloc_r+0x34>
 8006f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f42:	d8f4      	bhi.n	8006f2e <_realloc_r+0x1e>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4638      	mov	r0, r7
 8006f48:	f7ff f9ca 	bl	80062e0 <_malloc_r>
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	b908      	cbnz	r0, 8006f54 <_realloc_r+0x44>
 8006f50:	4645      	mov	r5, r8
 8006f52:	e7ec      	b.n	8006f2e <_realloc_r+0x1e>
 8006f54:	42b4      	cmp	r4, r6
 8006f56:	4622      	mov	r2, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	bf28      	it	cs
 8006f5c:	4632      	movcs	r2, r6
 8006f5e:	f7ff f946 	bl	80061ee <memcpy>
 8006f62:	4629      	mov	r1, r5
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff f951 	bl	800620c <_free_r>
 8006f6a:	e7f1      	b.n	8006f50 <_realloc_r+0x40>

08006f6c <_malloc_usable_size_r>:
 8006f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f70:	1f18      	subs	r0, r3, #4
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bfbc      	itt	lt
 8006f76:	580b      	ldrlt	r3, [r1, r0]
 8006f78:	18c0      	addlt	r0, r0, r3
 8006f7a:	4770      	bx	lr

08006f7c <_init>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	bf00      	nop
 8006f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f82:	bc08      	pop	{r3}
 8006f84:	469e      	mov	lr, r3
 8006f86:	4770      	bx	lr

08006f88 <_fini>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	bf00      	nop
 8006f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8e:	bc08      	pop	{r3}
 8006f90:	469e      	mov	lr, r3
 8006f92:	4770      	bx	lr
