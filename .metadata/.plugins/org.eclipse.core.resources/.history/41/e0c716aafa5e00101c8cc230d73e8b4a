/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "../Modules/oled/oled.h"
#include "../Modules/stepper/motor_control.h"
#include "../Modules/CAN/can.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan1;
Motor_t motor;
uint32_t last_display_update = 0;
uint32_t demo_start_time = 0;
uint8_t demo_step = 0;
bool demo_mode = true;  // 演示模式开关



/* USER CODE BEGIN PV */
//static const uint8_t CAN_SENT1[8] = {0x02,0x01,0x20,0x03,0x84,0x00,0x64,0x00};
extern UART_HandleTypeDef huart3;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
static void MX_USART3_UART_Init(void);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
static void Motor_Demo_Task(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN1_Init();
  MX_USART3_UART_Init();
  Display_Init();
  /* USER CODE BEGIN 2 */
  Display_Welcome();
   HAL_Delay(2000);
   // 初始化电机控制
      Motor_Init(&motor, 0x01);  // 假设电机CAN ID为0x200

      // 设置初始速度
      Motor_SetSpeed(&motor, 1000);
  //CAN1_UserFilterStart();
      demo_start_time = HAL_GetTick();
  while (1)
  {
	  HAL_Delay(2000);
	  uint8_t test_cmd[8] = {0x02,0x01,0x20,0x03,0x84,0x00,0x64,0x00};
	  CAN1_Send_Num(0x01, test_cmd);
	  Flash_LED(1);  // 指示发送了命令
}
}




  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* USER CODE BEGIN 3 */



  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{

  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 3;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 19200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LRF_PWR_EN_GPIO_Port, LRF_PWR_EN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : LED_0_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PD11 PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : LRF_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LRF_PWR_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LRF_PWR_EN_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
// 电机演示任务
Motor_t motor;
// CAN接收中断回调函数
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    // 获取接收到的消息
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK) {
        // 处理电机响应消息
        Motor_ProcessRxMessage(&motor, rx_header.StdId, rx_data);
    }
}
// 电机演示任务
static void Motor_Demo_Task(void) {
    uint32_t current_time = HAL_GetTick();
    uint32_t elapsed_time = current_time - demo_start_time;

    // 如果电机正在运动，等待完成
    if (Motor_IsMoving(&motor)) {
        return;
    }

    // 演示序列（使用厂商提供的命令）
    switch (demo_step) {
        case 0:
            if (elapsed_time > 3000) {  // 等待3秒后开始
                Motor_RunExample1(&motor);  // 发送厂商的CAN_SENT1命令
                demo_step++;
                demo_start_time = current_time;
            }
            break;

        case 1:
            if (elapsed_time > 2000) {  // 等待2秒
                Motor_RunExample2(&motor);  // 发送厂商的CAN_SENT2命令
                demo_step++;
                demo_start_time = current_time;
            }
            break;

        case 2:
            if (elapsed_time > 2000) {  // 等待2秒
                Motor_RunExample3(&motor);  // 发送厂商的CAN_SENT3命令
                demo_step++;
                demo_start_time = current_time;
            }
            break;

        case 3:
            if (elapsed_time > 2000) {  // 等待2秒
                Motor_Stop(&motor);  // 停止电机
                demo_step++;
                demo_start_time = current_time;
            }
            break;

        case 4:
            if (elapsed_time > 3000) {  // 等待3秒
                demo_step = 0;  // 重新开始演示
                demo_start_time = current_time;
            }
            break;
    }
}
    void Test_Motor_Commands(void)
    {
        uint8_t CAN_SENT1[8] = {0x02,0x01,0x20,0x03,0x84,0x00,0x64,0x00};
        uint8_t CAN_SENT2[8] = {0x02,0x01,0x20,0x0E,0x10,0x00,0x64,0x00};
        uint8_t CAN_SENT3[8] = {0x02,0x01,0x20,0x07,0x08,0x00,0x64,0x00};

        // 直接发送厂商的命令
        CAN1_Send_Num(0x01, CAN_SENT1);  // 发送给ID为0x01的电机
        HAL_Delay(2000);

        CAN1_Send_Num(0x01, CAN_SENT2);  // 发送给ID为0x01的电机
        HAL_Delay(2000);

        CAN1_Send_Num(0x01, CAN_SENT3);  // 发送给ID为0x01的电机
        HAL_Delay(2000);
    }
void Flash_LED(uint8_t times)
{
    for(int i = 0; i < times; i++) {
        HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
        HAL_Delay(300);
        HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
        HAL_Delay(300);
    }
    HAL_Delay(1000);
}
void Set_Motor_Speed(uint8_t motor_id, uint16_t speed)
{
    uint8_t cmd[8] = {0x02,0x01,0x20,0x03,0x84,0x00,0x00,0x00};
    cmd[6] = speed & 0xFF;        // 速度低字节
    cmd[7] = (speed >> 8) & 0xFF; // 速度高字节

    CAN1_Send_Num(motor_id, cmd);
}
void Set_Motor_Position(uint8_t motor_id, uint16_t position)
{
    uint8_t cmd[8] = {0x02,0x01,0x20,0x00,0x00,0x00,0x64,0x00};
    cmd[3] = position & 0xFF;        // 位置低字节
    cmd[4] = (position >> 8) & 0xFF; // 位置高字节

    CAN1_Send_Num(motor_id, cmd);
}
void Stop_Motor(uint8_t motor_id)
{
    // 方法1：发送0速度
    uint8_t stop_cmd1[8] = {0x02,0x01,0x20,0x00,0x00,0x00,0x00,0x00};

    // 方法2：发送停止命令（假设0x00是停止）
    //uint8_t stop_cmd2[8] = {0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00};

    CAN1_Send_Num(motor_id, stop_cmd1);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */


    __disable_irq();
    while (1)
    {
        HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
        HAL_Delay(50);
    }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
