/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : 门控系统 - 4状态机版本（使用door_control模块）
  ******************************************************************************
  * @attention
  * 
  * 功能：
  * 1. 4个状态：CLOSED, OPENING, OPEN, CLOSING
  * 2. 使用移动标志(0x42)判断运动状态
  * 3. 实时状态监控和日志输出
  * 4. 自动循环测试
  * 
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "../Modules/servo/servo.h"
#include "../Modules/servo/door_control.h"
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

/* UART句柄声明 */
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define SERVO_ID          1      // 舵机ID

/* 时间定义 */
#define UPDATE_INTERVAL   50     // 状态更新间隔（ms）
#define LOG_INTERVAL      500    // 日志输出间隔（ms）
#define DOOR_HOLD_TIME    5000   // 门保持时间（ms） - 增加到5秒
#define DOOR_TIMEOUT      8000   // 动作超时时间（ms）
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
static DoorControl_t door;
static uint32_t cycle_count = 0;
static uint32_t state_start_time = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void DoorControl_LogState(DoorControl_t *door, bool force);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART3_UART_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  
  printf("\r\n========================================\r\n");
  printf("=== DOOR CONTROL STATE MACHINE v8.0 ===\r\n");
  printf("=== 4-State with Movement Detection ===\r\n");
  printf("========================================\r\n\r\n");
  
  /* 初始化舵机通信 */
  printf("[INIT] Initializing servo communication...\r\n");
  servo_init(&huart3);
  HAL_Delay(100);
  
  /* 初始化门控系统 */
  DoorControl_Init(&door, SERVO_ID);
  
  printf("\r\n[CONFIG] System Configuration:\r\n");
  printf("  - Closed Position: %d (0 deg)\r\n", DOOR_POS_CLOSED);
  printf("  - Open Position:   %d (222 deg)\r\n", DOOR_POS_OPEN);
  printf("  - Update Rate:     %d ms\r\n", UPDATE_INTERVAL);
  printf("  - Movement Check:  Register 0x42\r\n");
  printf("  - Position Check:  Register 0x38\r\n");
  printf("========================================\r\n\r\n");
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_update_time = 0;
  uint32_t last_log_time = 0;
  uint32_t last_cycle_time = 0;
  uint32_t test_start_time = HAL_GetTick();
  
  printf("[START] Beginning automatic cycle test\r\n\r\n");
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
    
    /* 定期更新门控状态（非阻塞） */
    if (current_time - last_update_time >= UPDATE_INTERVAL) {
        last_update_time = current_time;
        DoorControl_Update(&door);
    }
    
    /* 定期输出状态日志 */
    if (current_time - last_log_time >= LOG_INTERVAL) {
        last_log_time = current_time;
        DoorControl_LogState(&door, false);
    }
    
    /* 自动循环测试逻辑 */
    if (door.state == DOOR_STATE_CLOSED) {
        if (current_time - last_cycle_time >= DOOR_HOLD_TIME) {
            cycle_count++;
            printf("\r\n╔════════════════════════════════════╗\r\n");
            printf("║ CYCLE #%03lu - OPENING DOOR         ║\r\n", cycle_count);
            printf("╚════════════════════════════════════╝\r\n");
            DoorControl_Open(&door);
            last_cycle_time = current_time;
            state_start_time = current_time;
        }
    }
    else if (door.state == DOOR_STATE_OPEN) {
        if (current_time - last_cycle_time >= DOOR_HOLD_TIME) {
            printf("\r\n╔════════════════════════════════════╗\r\n");
            printf("║ CYCLE #%03lu - CLOSING DOOR         ║\r\n", cycle_count);
            printf("╚════════════════════════════════════╝\r\n");
            DoorControl_Close(&door);
            last_cycle_time = current_time;
            state_start_time = current_time;
        }
    }
    
    /* 超时检测 */
    if ((door.state == DOOR_STATE_OPENING || door.state == DOOR_STATE_CLOSING) &&
        (current_time - state_start_time > DOOR_TIMEOUT)) {
        printf("\r\n[ERROR] Door operation timeout! State: %s\r\n", 
               DoorControl_GetStateName(door.state));
        // 可以在这里添加错误处理
    }
    
    /* 统计信息（每10秒） */
    if ((current_time - test_start_time) % 10000 < 10) {
        printf("\r\n[STATS] Runtime: %lu sec, Cycles: %lu\r\n",
               (current_time - test_start_time) / 1000, cycle_count);
    }
    
    HAL_Delay(10);
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/**
  * @brief  输出状态日志
  */
void DoorControl_LogState(DoorControl_t *door, bool force) {
    static uint16_t last_pos = 0;
    static DoorState_t last_logged_state = DOOR_STATE_CLOSED;
    
    /* 只在状态变化时输出，除非强制 */
    if (force || 
        door->state != last_logged_state || 
        abs((int)door->current_pos - last_pos) > 100) {
        
        printf("[LOG] State: %-8s | Pos: %4u | Target: %4u | Time: %lu ms\r\n",
               DoorControl_GetStateName(door->state),
               door->current_pos,
               door->target_pos,
               HAL_GetTick() - state_start_time);
        
        last_pos = door->current_pos;
        last_logged_state = door->state;
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */