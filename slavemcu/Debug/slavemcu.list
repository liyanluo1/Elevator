
slavemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001318  08006f34  08006f34  00007f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800824c  0800824c  0000a08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800824c  0800824c  0000a08c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800824c  0800824c  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800824c  0800824c  0000924c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008250  08008250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008254  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  2000008c  080082e0  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  080082e0  0000a9c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b377  00000000  00000000  0000a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab4  00000000  00000000  0001542c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00017ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000859  00000000  00000000  000189f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044c9  00000000  00000000  00019251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec30  00000000  00000000  0001d71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a2b  00000000  00000000  0002c34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1d75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003464  00000000  00000000  000b1db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f1c 	.word	0x08006f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08006f1c 	.word	0x08006f1c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	@ 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000732:	2afd      	cmp	r2, #253	@ 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	@ 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	@ 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	@ 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <LocalBB_Init>:
/* 门控命令缓存 */
static LocalBB_DoorCommand_t pending_door_cmd = DOOR_CMD_NONE;

/* ==================== 初始化函数 ==================== */

void LocalBB_Init(void) {
 8000980:	b598      	push	{r3, r4, r7, lr}
 8000982:	af00      	add	r7, sp, #0
    memset(&g_local_bb, 0, sizeof(LocalBlackboard_t));
 8000984:	22c8      	movs	r2, #200	@ 0xc8
 8000986:	2100      	movs	r1, #0
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <LocalBB_Init+0x5c>)
 800098a:	f005 fb85 	bl	8006098 <memset>
    
    /* 初始状态 */
    g_local_bb.current_floor = 1;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <LocalBB_Init+0x5c>)
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    g_local_bb.expected_next_floor = 1;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <LocalBB_Init+0x5c>)
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    g_local_bb.direction = DIR_STOP;
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <LocalBB_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
    g_local_bb.door_state = LOCAL_DOOR_CLOSED;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <LocalBB_Init+0x5c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    
    /* 事件队列 */
    g_local_bb.event_head = 0;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <LocalBB_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_tail = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <LocalBB_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count = 0;
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <LocalBB_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    strcpy(g_local_bb.debug_msg, "LocalBB Init");
 80009c6:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <LocalBB_Init+0x60>)
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <LocalBB_Init+0x64>)
 80009ca:	4614      	mov	r4, r2
 80009cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ce:	c407      	stmia	r4!, {r0, r1, r2}
 80009d0:	7023      	strb	r3, [r4, #0]
    printf("[LocalBB] Initialized\r\n");
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <LocalBB_Init+0x68>)
 80009d4:	f005 fa5e 	bl	8005e94 <puts>
}
 80009d8:	bf00      	nop
 80009da:	bd98      	pop	{r3, r4, r7, pc}
 80009dc:	200000a8 	.word	0x200000a8
 80009e0:	20000150 	.word	0x20000150
 80009e4:	08006f34 	.word	0x08006f34
 80009e8:	08006f44 	.word	0x08006f44

080009ec <PushEvent>:
    LocalBB_Init();
}

/* ==================== 事件队列管理 ==================== */

static bool PushEvent(LocalEventType_t type, uint8_t data1, uint8_t data2, uint8_t data3) {
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4603      	mov	r3, r0
 8000a00:	71bb      	strb	r3, [r7, #6]
 8000a02:	460b      	mov	r3, r1
 8000a04:	717b      	strb	r3, [r7, #5]
 8000a06:	4613      	mov	r3, r2
 8000a08:	713b      	strb	r3, [r7, #4]
    if (g_local_bb.event_count >= MAX_EVENT_QUEUE) {
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <PushEvent+0x9c>)
 8000a0c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d904      	bls.n	8000a1e <PushEvent+0x32>
        printf("[LocalBB] Event queue full!\r\n");
 8000a14:	481d      	ldr	r0, [pc, #116]	@ (8000a8c <PushEvent+0xa0>)
 8000a16:	f005 fa3d 	bl	8005e94 <puts>
        return false;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e02f      	b.n	8000a7e <PushEvent+0x92>
    }
    
    LocalEvent_t* event = &g_local_bb.event_queue[g_local_bb.event_tail];
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <PushEvent+0x9c>)
 8000a20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4a18      	ldr	r2, [pc, #96]	@ (8000a88 <PushEvent+0x9c>)
 8000a28:	4413      	add	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
    event->type = type;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	701a      	strb	r2, [r3, #0]
    event->data1 = data1;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	705a      	strb	r2, [r3, #1]
    event->data2 = data2;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	797a      	ldrb	r2, [r7, #5]
 8000a3c:	709a      	strb	r2, [r3, #2]
    event->data3 = data3;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	793a      	ldrb	r2, [r7, #4]
 8000a42:	70da      	strb	r2, [r3, #3]
    event->timestamp = HAL_GetTick();
 8000a44:	f002 fde6 	bl	8003614 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	605a      	str	r2, [r3, #4]
    
    g_local_bb.event_tail = (g_local_bb.event_tail + 1) % MAX_EVENT_QUEUE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <PushEvent+0x9c>)
 8000a50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a54:	3301      	adds	r3, #1
 8000a56:	425a      	negs	r2, r3
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	f002 020f 	and.w	r2, r2, #15
 8000a60:	bf58      	it	pl
 8000a62:	4253      	negpl	r3, r2
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <PushEvent+0x9c>)
 8000a68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    g_local_bb.event_count++;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <PushEvent+0x9c>)
 8000a6e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000a72:	3301      	adds	r3, #1
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <PushEvent+0x9c>)
 8000a78:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    return true;
 8000a7c:	2301      	movs	r3, #1
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000a8 	.word	0x200000a8
 8000a8c:	08006f5c 	.word	0x08006f5c

08000a90 <PopEvent>:

static bool PopEvent(LocalEvent_t* event) {
 8000a90:	b490      	push	{r4, r7}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    if (g_local_bb.event_count == 0) {
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <PopEvent+0x68>)
 8000a9a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <PopEvent+0x16>
        return false;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e023      	b.n	8000aee <PopEvent+0x5e>
    }
    
    *event = g_local_bb.event_queue[g_local_bb.event_head];
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <PopEvent+0x68>)
 8000aa8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <PopEvent+0x68>)
 8000ab0:	460c      	mov	r4, r1
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000aba:	e884 0003 	stmia.w	r4, {r0, r1}
    g_local_bb.event_head = (g_local_bb.event_head + 1) % MAX_EVENT_QUEUE;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <PopEvent+0x68>)
 8000ac0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	425a      	negs	r2, r3
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	f002 020f 	and.w	r2, r2, #15
 8000ad0:	bf58      	it	pl
 8000ad2:	4253      	negpl	r3, r2
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <PopEvent+0x68>)
 8000ad8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    g_local_bb.event_count--;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <PopEvent+0x68>)
 8000ade:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <PopEvent+0x68>)
 8000ae8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    return true;
 8000aec:	2301      	movs	r3, #1
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc90      	pop	{r4, r7}
 8000af6:	4770      	bx	lr
 8000af8:	200000a8 	.word	0x200000a8

08000afc <LocalBB_AddCabinCall>:

/* ==================== 事件输入接口 ==================== */

void LocalBB_AddCabinCall(uint8_t floor) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d02b      	beq.n	8000b64 <LocalBB_AddCabinCall+0x68>
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d828      	bhi.n	8000b64 <LocalBB_AddCabinCall+0x68>
    
    /* 防抖：如果短时间内重复按同一楼层，忽略 */
    uint32_t current_time = HAL_GetTick();
 8000b12:	f002 fd7f 	bl	8003614 <HAL_GetTick>
 8000b16:	60f8      	str	r0, [r7, #12]
    if (floor == g_local_bb.last_sent_cabin_call && 
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <LocalBB_AddCabinCall+0x70>)
 8000b1a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d10c      	bne.n	8000b3e <LocalBB_AddCabinCall+0x42>
        (current_time - g_local_bb.last_cabin_call_time) < DEBOUNCE_TIME_MS) {
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <LocalBB_AddCabinCall+0x70>)
 8000b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	1ad3      	subs	r3, r2, r3
    if (floor == g_local_bb.last_sent_cabin_call && 
 8000b2e:	2b63      	cmp	r3, #99	@ 0x63
 8000b30:	d805      	bhi.n	8000b3e <LocalBB_AddCabinCall+0x42>
        printf("[LocalBB] Cabin call %d debounced\r\n", floor);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4619      	mov	r1, r3
 8000b36:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <LocalBB_AddCabinCall+0x74>)
 8000b38:	f005 f944 	bl	8005dc4 <iprintf>
        return;
 8000b3c:	e013      	b.n	8000b66 <LocalBB_AddCabinCall+0x6a>
    }
    
    PushEvent(LOCAL_EVENT_CABIN_CALL, floor, 0, 0);
 8000b3e:	79f9      	ldrb	r1, [r7, #7]
 8000b40:	2300      	movs	r3, #0
 8000b42:	2200      	movs	r2, #0
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff ff51 	bl	80009ec <PushEvent>
    g_local_bb.cabin_call_count++;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <LocalBB_AddCabinCall+0x70>)
 8000b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <LocalBB_AddCabinCall+0x70>)
 8000b54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    printf("[LocalBB] Cabin call queued: floor %d\r\n", floor);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <LocalBB_AddCabinCall+0x78>)
 8000b5e:	f005 f931 	bl	8005dc4 <iprintf>
 8000b62:	e000      	b.n	8000b66 <LocalBB_AddCabinCall+0x6a>
    if (floor < 1 || floor > MAX_FLOORS) return;
 8000b64:	bf00      	nop
}
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000a8 	.word	0x200000a8
 8000b70:	08006f7c 	.word	0x08006f7c
 8000b74:	08006fa0 	.word	0x08006fa0

08000b78 <LocalBB_AddPhotoSensor>:

void LocalBB_AddPhotoSensor(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
    /* 使用预期楼层 */
    uint8_t floor = g_local_bb.expected_next_floor;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000b80:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000b84:	71fb      	strb	r3, [r7, #7]
    
    PushEvent(LOCAL_EVENT_PHOTO_SENSOR, floor, 0, 0);
 8000b86:	79f9      	ldrb	r1, [r7, #7]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f7ff ff2d 	bl	80009ec <PushEvent>
    g_local_bb.photo_trigger_count++;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000b9c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    printf("[LocalBB] Photo sensor queued: floor %d\r\n", floor);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481a      	ldr	r0, [pc, #104]	@ (8000c10 <LocalBB_AddPhotoSensor+0x98>)
 8000ba6:	f005 f90d 	bl	8005dc4 <iprintf>
    
    /* 更新当前楼层 */
    g_local_bb.current_floor = floor;
 8000baa:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    
    /* 根据方向更新预期楼层 */
    if (g_local_bb.direction == DIR_UP) {
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bb4:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10f      	bne.n	8000bdc <LocalBB_AddPhotoSensor+0x64>
        g_local_bb.expected_next_floor = floor + 1;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bc4:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        if (g_local_bb.expected_next_floor > MAX_FLOORS) {
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bca:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d917      	bls.n	8000c02 <LocalBB_AddPhotoSensor+0x8a>
            g_local_bb.expected_next_floor = MAX_FLOORS;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
            g_local_bb.expected_next_floor = floor - 1;
        } else {
            g_local_bb.expected_next_floor = 1;
        }
    }
}
 8000bda:	e012      	b.n	8000c02 <LocalBB_AddPhotoSensor+0x8a>
    } else if (g_local_bb.direction == DIR_DOWN) {
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bde:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d10d      	bne.n	8000c02 <LocalBB_AddPhotoSensor+0x8a>
        if (floor > 1) {
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d906      	bls.n	8000bfa <LocalBB_AddPhotoSensor+0x82>
            g_local_bb.expected_next_floor = floor - 1;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bf4:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 8000bf8:	e003      	b.n	8000c02 <LocalBB_AddPhotoSensor+0x8a>
            g_local_bb.expected_next_floor = 1;
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <LocalBB_AddPhotoSensor+0x94>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000a8 	.word	0x200000a8
 8000c10:	08006fc8 	.word	0x08006fc8

08000c14 <LocalBB_SetDirection>:

void LocalBB_SetDirection(uint8_t dir, uint8_t current, uint8_t target) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	71bb      	strb	r3, [r7, #6]
 8000c22:	4613      	mov	r3, r2
 8000c24:	717b      	strb	r3, [r7, #5]
    g_local_bb.direction = dir;
 8000c26:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <LocalBB_SetDirection+0x9c>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f882 3085 	strb.w	r3, [r2, #133]	@ 0x85
    g_local_bb.current_floor = current;
 8000c2e:	4a20      	ldr	r2, [pc, #128]	@ (8000cb0 <LocalBB_SetDirection+0x9c>)
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    g_local_bb.target_floor = target;
 8000c36:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb0 <LocalBB_SetDirection+0x9c>)
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
    
    /* 设置预期楼层 */
    if (dir == DIR_UP) {
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d106      	bne.n	8000c52 <LocalBB_SetDirection+0x3e>
        g_local_bb.expected_next_floor = current + 1;
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	3301      	adds	r3, #1
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <LocalBB_SetDirection+0x9c>)
 8000c4c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000c50:	e010      	b.n	8000c74 <LocalBB_SetDirection+0x60>
    } else if (dir == DIR_DOWN && current > 1) {
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d109      	bne.n	8000c6c <LocalBB_SetDirection+0x58>
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d906      	bls.n	8000c6c <LocalBB_SetDirection+0x58>
        g_local_bb.expected_next_floor = current - 1;
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <LocalBB_SetDirection+0x9c>)
 8000c66:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8000c6a:	e003      	b.n	8000c74 <LocalBB_SetDirection+0x60>
    } else {
        g_local_bb.expected_next_floor = current;
 8000c6c:	4a10      	ldr	r2, [pc, #64]	@ (8000cb0 <LocalBB_SetDirection+0x9c>)
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
    }
    
    PushEvent(LOCAL_EVENT_DIRECTION_SET, dir, current, target);
 8000c74:	797b      	ldrb	r3, [r7, #5]
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	79f9      	ldrb	r1, [r7, #7]
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f7ff feb6 	bl	80009ec <PushEvent>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d006      	beq.n	8000c94 <LocalBB_SetDirection+0x80>
           dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DOWN" : "STOP",
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d101      	bne.n	8000c90 <LocalBB_SetDirection+0x7c>
 8000c8c:	4909      	ldr	r1, [pc, #36]	@ (8000cb4 <LocalBB_SetDirection+0xa0>)
 8000c8e:	e002      	b.n	8000c96 <LocalBB_SetDirection+0x82>
 8000c90:	4909      	ldr	r1, [pc, #36]	@ (8000cb8 <LocalBB_SetDirection+0xa4>)
 8000c92:	e000      	b.n	8000c96 <LocalBB_SetDirection+0x82>
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000c94:	4909      	ldr	r1, [pc, #36]	@ (8000cbc <LocalBB_SetDirection+0xa8>)
 8000c96:	79ba      	ldrb	r2, [r7, #6]
 8000c98:	797b      	ldrb	r3, [r7, #5]
           current, target, g_local_bb.expected_next_floor);
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <LocalBB_SetDirection+0x9c>)
 8000c9c:	f890 0086 	ldrb.w	r0, [r0, #134]	@ 0x86
    printf("[LocalBB] Direction set: %s, %d->%d, expect %d\r\n", 
 8000ca0:	9000      	str	r0, [sp, #0]
 8000ca2:	4807      	ldr	r0, [pc, #28]	@ (8000cc0 <LocalBB_SetDirection+0xac>)
 8000ca4:	f005 f88e 	bl	8005dc4 <iprintf>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000a8 	.word	0x200000a8
 8000cb4:	08006ff4 	.word	0x08006ff4
 8000cb8:	08006ffc 	.word	0x08006ffc
 8000cbc:	08007004 	.word	0x08007004
 8000cc0:	08007008 	.word	0x08007008

08000cc4 <LocalBB_AddDoorCommand>:

void LocalBB_AddDoorCommand(bool open) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    PushEvent(LOCAL_EVENT_DOOR_CMD, open ? 1 : 0, 0, 0);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f7ff fe88 	bl	80009ec <PushEvent>
    g_local_bb.door_state = open ? LOCAL_DOOR_OPENING : LOCAL_DOOR_CLOSING;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <LocalBB_AddDoorCommand+0x22>
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	e000      	b.n	8000ce8 <LocalBB_AddDoorCommand+0x24>
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <LocalBB_AddDoorCommand+0x54>)
 8000cea:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    g_local_bb.door_cmd_time = HAL_GetTick();
 8000cee:	f002 fc91 	bl	8003614 <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <LocalBB_AddDoorCommand+0x54>)
 8000cf6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    printf("[LocalBB] Door command queued: %s\r\n", open ? "OPEN" : "CLOSE");
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <LocalBB_AddDoorCommand+0x40>
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <LocalBB_AddDoorCommand+0x58>)
 8000d02:	e000      	b.n	8000d06 <LocalBB_AddDoorCommand+0x42>
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <LocalBB_AddDoorCommand+0x5c>)
 8000d06:	4619      	mov	r1, r3
 8000d08:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <LocalBB_AddDoorCommand+0x60>)
 8000d0a:	f005 f85b 	bl	8005dc4 <iprintf>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000a8 	.word	0x200000a8
 8000d1c:	0800703c 	.word	0x0800703c
 8000d20:	08007044 	.word	0x08007044
 8000d24:	0800704c 	.word	0x0800704c

08000d28 <LocalBB_Process>:

/* ==================== 事件处理主函数 ==================== */

void LocalBB_Process(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af02      	add	r7, sp, #8
    LocalEvent_t event;
    uint32_t current_time = HAL_GetTick();
 8000d2e:	f002 fc71 	bl	8003614 <HAL_GetTick>
 8000d32:	6178      	str	r0, [r7, #20]
    
    while (PopEvent(&event)) {
 8000d34:	e09e      	b.n	8000e74 <LocalBB_Process+0x14c>
        switch (event.type) {
 8000d36:	7b3b      	ldrb	r3, [r7, #12]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	f200 8095 	bhi.w	8000e6a <LocalBB_Process+0x142>
 8000d40:	a201      	add	r2, pc, #4	@ (adr r2, 8000d48 <LocalBB_Process+0x20>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000d59 	.word	0x08000d59
 8000d4c:	08000dbb 	.word	0x08000dbb
 8000d50:	08000e19 	.word	0x08000e19
 8000d54:	08000e43 	.word	0x08000e43
            case LOCAL_EVENT_CABIN_CALL:
                /* 防重复发送 */
                if (event.data1 != g_local_bb.last_sent_cabin_call ||
 8000d58:	7b7a      	ldrb	r2, [r7, #13]
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e90 <LocalBB_Process+0x168>)
 8000d5c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d107      	bne.n	8000d74 <LocalBB_Process+0x4c>
                    (current_time - g_local_bb.last_cabin_call_time) > MIN_RESEND_TIME_MS) {
 8000d64:	4b4a      	ldr	r3, [pc, #296]	@ (8000e90 <LocalBB_Process+0x168>)
 8000d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_cabin_call ||
 8000d6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d72:	d97c      	bls.n	8000e6e <LocalBB_Process+0x146>
                    
                    /* 发送内呼命令 */
                    uint8_t tx_buffer[4];
                    tx_buffer[0] = CMD_CABIN_CALL;
 8000d74:	2331      	movs	r3, #49	@ 0x31
 8000d76:	723b      	strb	r3, [r7, #8]
                    tx_buffer[1] = event.data1;  // 楼层
 8000d78:	7b7b      	ldrb	r3, [r7, #13]
 8000d7a:	727b      	strb	r3, [r7, #9]
                    tx_buffer[2] = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	72bb      	strb	r3, [r7, #10]
                    tx_buffer[3] = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	72fb      	strb	r3, [r7, #11]
                    
                    rs485_send_packet_dma(tx_buffer, 4);
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f952 	bl	8001034 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	@ (8000e90 <LocalBB_Process+0x168>)
 8000d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a3d      	ldr	r2, [pc, #244]	@ (8000e90 <LocalBB_Process+0x168>)
 8000d9a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    
                    g_local_bb.last_sent_cabin_call = event.data1;
 8000d9e:	7b7a      	ldrb	r2, [r7, #13]
 8000da0:	4b3b      	ldr	r3, [pc, #236]	@ (8000e90 <LocalBB_Process+0x168>)
 8000da2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
                    g_local_bb.last_cabin_call_time = current_time;
 8000da6:	4a3a      	ldr	r2, [pc, #232]	@ (8000e90 <LocalBB_Process+0x168>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                    
                    printf("[LocalBB] RS485 TX: Cabin call floor %d\r\n", event.data1);
 8000dae:	7b7b      	ldrb	r3, [r7, #13]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4838      	ldr	r0, [pc, #224]	@ (8000e94 <LocalBB_Process+0x16c>)
 8000db4:	f005 f806 	bl	8005dc4 <iprintf>
                }
                break;
 8000db8:	e059      	b.n	8000e6e <LocalBB_Process+0x146>
                
            case LOCAL_EVENT_PHOTO_SENSOR:
                /* 智能判断是否需要发送 */
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000dba:	7b7a      	ldrb	r2, [r7, #13]
 8000dbc:	4b34      	ldr	r3, [pc, #208]	@ (8000e90 <LocalBB_Process+0x168>)
 8000dbe:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d106      	bne.n	8000dd4 <LocalBB_Process+0xac>
                    (current_time - g_local_bb.last_photo_send_time) > 200) {  // 光电允许更快
 8000dc6:	4b32      	ldr	r3, [pc, #200]	@ (8000e90 <LocalBB_Process+0x168>)
 8000dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	1ad3      	subs	r3, r2, r3
                if (event.data1 != g_local_bb.last_sent_photo_floor ||
 8000dd0:	2bc8      	cmp	r3, #200	@ 0xc8
 8000dd2:	d94e      	bls.n	8000e72 <LocalBB_Process+0x14a>
                    
                    /* 发送光电传感器触发 */
                    uint8_t tx_buffer[4];
                    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	713b      	strb	r3, [r7, #4]
                    tx_buffer[1] = event.data1;  // 楼层
 8000dd8:	7b7b      	ldrb	r3, [r7, #13]
 8000dda:	717b      	strb	r3, [r7, #5]
                    tx_buffer[2] = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71bb      	strb	r3, [r7, #6]
                    tx_buffer[3] = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71fb      	strb	r3, [r7, #7]
                    
                    rs485_send_packet_dma(tx_buffer, 4);
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2104      	movs	r1, #4
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f923 	bl	8001034 <rs485_send_packet_dma>
                    g_local_bb.rs485_send_count++;
 8000dee:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <LocalBB_Process+0x168>)
 8000df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a26      	ldr	r2, [pc, #152]	@ (8000e90 <LocalBB_Process+0x168>)
 8000df8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                    
                    g_local_bb.last_sent_photo_floor = event.data1;
 8000dfc:	7b7a      	ldrb	r2, [r7, #13]
 8000dfe:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <LocalBB_Process+0x168>)
 8000e00:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
                    g_local_bb.last_photo_send_time = current_time;
 8000e04:	4a22      	ldr	r2, [pc, #136]	@ (8000e90 <LocalBB_Process+0x168>)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
                    
                    printf("[LocalBB] RS485 TX: Photo sensor floor %d\r\n", event.data1);
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4821      	ldr	r0, [pc, #132]	@ (8000e98 <LocalBB_Process+0x170>)
 8000e12:	f004 ffd7 	bl	8005dc4 <iprintf>
                }
                break;
 8000e16:	e02c      	b.n	8000e72 <LocalBB_Process+0x14a>
                
            case LOCAL_EVENT_DIRECTION_SET:
                /* 方向设置只更新内部状态，不需要回传 */
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
                        event.data1 == DIR_UP ? "UP" : 
 8000e18:	7b7b      	ldrb	r3, [r7, #13]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d006      	beq.n	8000e2c <LocalBB_Process+0x104>
                        event.data1 == DIR_DOWN ? "DN" : "ST",
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d101      	bne.n	8000e28 <LocalBB_Process+0x100>
 8000e24:	4a1d      	ldr	r2, [pc, #116]	@ (8000e9c <LocalBB_Process+0x174>)
 8000e26:	e002      	b.n	8000e2e <LocalBB_Process+0x106>
 8000e28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea0 <LocalBB_Process+0x178>)
 8000e2a:	e000      	b.n	8000e2e <LocalBB_Process+0x106>
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <LocalBB_Process+0x17c>)
                        event.data2, event.data3);
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000e30:	4619      	mov	r1, r3
                        event.data2, event.data3);
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
                sprintf(g_local_bb.debug_msg, "Dir:%s F%d->%d", 
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	460b      	mov	r3, r1
 8000e38:	491b      	ldr	r1, [pc, #108]	@ (8000ea8 <LocalBB_Process+0x180>)
 8000e3a:	481c      	ldr	r0, [pc, #112]	@ (8000eac <LocalBB_Process+0x184>)
 8000e3c:	f005 f832 	bl	8005ea4 <siprintf>
                break;
 8000e40:	e018      	b.n	8000e74 <LocalBB_Process+0x14c>
                
            case LOCAL_EVENT_DOOR_CMD:
                /* 设置门控命令 */
                pending_door_cmd = event.data1 ? DOOR_CMD_OPEN : DOOR_CMD_CLOSE;
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <LocalBB_Process+0x124>
 8000e48:	2201      	movs	r2, #1
 8000e4a:	e000      	b.n	8000e4e <LocalBB_Process+0x126>
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <LocalBB_Process+0x188>)
 8000e50:	701a      	strb	r2, [r3, #0]
                printf("[LocalBB] Door command ready: %s\r\n", 
                       pending_door_cmd == DOOR_CMD_OPEN ? "OPEN" : "CLOSE");
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <LocalBB_Process+0x188>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
                printf("[LocalBB] Door command ready: %s\r\n", 
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <LocalBB_Process+0x136>
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <LocalBB_Process+0x18c>)
 8000e5c:	e000      	b.n	8000e60 <LocalBB_Process+0x138>
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <LocalBB_Process+0x190>)
 8000e60:	4619      	mov	r1, r3
 8000e62:	4816      	ldr	r0, [pc, #88]	@ (8000ebc <LocalBB_Process+0x194>)
 8000e64:	f004 ffae 	bl	8005dc4 <iprintf>
                break;
 8000e68:	e004      	b.n	8000e74 <LocalBB_Process+0x14c>
                
            default:
                break;
 8000e6a:	bf00      	nop
 8000e6c:	e002      	b.n	8000e74 <LocalBB_Process+0x14c>
                break;
 8000e6e:	bf00      	nop
 8000e70:	e000      	b.n	8000e74 <LocalBB_Process+0x14c>
                break;
 8000e72:	bf00      	nop
    while (PopEvent(&event)) {
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe09 	bl	8000a90 <PopEvent>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f47f af58 	bne.w	8000d36 <LocalBB_Process+0xe>
        }
    }
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000a8 	.word	0x200000a8
 8000e94:	08007070 	.word	0x08007070
 8000e98:	0800709c 	.word	0x0800709c
 8000e9c:	080070c8 	.word	0x080070c8
 8000ea0:	080070cc 	.word	0x080070cc
 8000ea4:	08007004 	.word	0x08007004
 8000ea8:	080070d0 	.word	0x080070d0
 8000eac:	20000150 	.word	0x20000150
 8000eb0:	20000170 	.word	0x20000170
 8000eb4:	0800703c 	.word	0x0800703c
 8000eb8:	08007044 	.word	0x08007044
 8000ebc:	080070e0 	.word	0x080070e0

08000ec0 <LocalBB_PrintStatus>:
    return g_local_bb.direction;
}

/* ==================== 调试输出 ==================== */

void LocalBB_PrintStatus(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    printf("\r\n=== LocalBB Status ===\r\n");
 8000ec4:	481f      	ldr	r0, [pc, #124]	@ (8000f44 <LocalBB_PrintStatus+0x84>)
 8000ec6:	f004 ffe5 	bl	8005e94 <puts>
    printf("Floor: %d (expect: %d)\r\n", 
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000ecc:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
    printf("Floor: %d (expect: %d)\r\n", 
 8000ed0:	4619      	mov	r1, r3
           g_local_bb.current_floor, g_local_bb.expected_next_floor);
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000ed4:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
    printf("Floor: %d (expect: %d)\r\n", 
 8000ed8:	461a      	mov	r2, r3
 8000eda:	481c      	ldr	r0, [pc, #112]	@ (8000f4c <LocalBB_PrintStatus+0x8c>)
 8000edc:	f004 ff72 	bl	8005dc4 <iprintf>
    printf("Direction: %s, Target: %d\r\n",
           g_local_bb.direction == DIR_UP ? "UP" : 
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000ee2:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
    printf("Direction: %s, Target: %d\r\n",
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d008      	beq.n	8000efc <LocalBB_PrintStatus+0x3c>
           g_local_bb.direction == DIR_DOWN ? "DOWN" : "STOP",
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000eec:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d101      	bne.n	8000ef8 <LocalBB_PrintStatus+0x38>
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <LocalBB_PrintStatus+0x90>)
 8000ef6:	e002      	b.n	8000efe <LocalBB_PrintStatus+0x3e>
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <LocalBB_PrintStatus+0x94>)
 8000efa:	e000      	b.n	8000efe <LocalBB_PrintStatus+0x3e>
    printf("Direction: %s, Target: %d\r\n",
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <LocalBB_PrintStatus+0x98>)
           g_local_bb.target_floor);
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000f00:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
    printf("Direction: %s, Target: %d\r\n",
 8000f04:	4619      	mov	r1, r3
 8000f06:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <LocalBB_PrintStatus+0x9c>)
 8000f08:	f004 ff5c 	bl	8005dc4 <iprintf>
    printf("Events: %d in queue\r\n", g_local_bb.event_count);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000f0e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000f12:	4619      	mov	r1, r3
 8000f14:	4812      	ldr	r0, [pc, #72]	@ (8000f60 <LocalBB_PrintStatus+0xa0>)
 8000f16:	f004 ff55 	bl	8005dc4 <iprintf>
    printf("Stats: Cabin=%lu, Photo=%lu, RS485=%lu\r\n",
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000f1c:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000f22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <LocalBB_PrintStatus+0x88>)
 8000f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f2c:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <LocalBB_PrintStatus+0xa4>)
 8000f2e:	f004 ff49 	bl	8005dc4 <iprintf>
           g_local_bb.cabin_call_count,
           g_local_bb.photo_trigger_count,
           g_local_bb.rs485_send_count);
    printf("Debug: %s\r\n", g_local_bb.debug_msg);
 8000f32:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <LocalBB_PrintStatus+0xa8>)
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <LocalBB_PrintStatus+0xac>)
 8000f36:	f004 ff45 	bl	8005dc4 <iprintf>
    printf("======================\r\n");
 8000f3a:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <LocalBB_PrintStatus+0xb0>)
 8000f3c:	f004 ffaa 	bl	8005e94 <puts>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08007104 	.word	0x08007104
 8000f48:	200000a8 	.word	0x200000a8
 8000f4c:	08007120 	.word	0x08007120
 8000f50:	08006ff4 	.word	0x08006ff4
 8000f54:	08006ffc 	.word	0x08006ffc
 8000f58:	08007004 	.word	0x08007004
 8000f5c:	0800713c 	.word	0x0800713c
 8000f60:	08007158 	.word	0x08007158
 8000f64:	08007170 	.word	0x08007170
 8000f68:	20000150 	.word	0x20000150
 8000f6c:	0800719c 	.word	0x0800719c
 8000f70:	080071a8 	.word	0x080071a8

08000f74 <LocalBB_GetDoorCommand>:

/* ==================== 门控命令接口 ==================== */

LocalBB_DoorCommand_t LocalBB_GetDoorCommand(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
    return pending_door_cmd;
 8000f78:	4b02      	ldr	r3, [pc, #8]	@ (8000f84 <LocalBB_GetDoorCommand+0x10>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000170 	.word	0x20000170

08000f88 <LocalBB_ClearDoorCommand>:

void LocalBB_ClearDoorCommand(void) {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    pending_door_cmd = DOOR_CMD_NONE;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <LocalBB_ClearDoorCommand+0x14>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000170 	.word	0x20000170

08000fa0 <rs485_init>:

/**
 * @brief Initialize RS485 driver
 */
rs485_status_t rs485_init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    /* Clear driver structure */
    memset(&rs485_driver, 0, sizeof(rs485_driver));
 8000fa4:	2248      	movs	r2, #72	@ 0x48
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	481b      	ldr	r0, [pc, #108]	@ (8001018 <rs485_init+0x78>)
 8000faa:	f005 f875 	bl	8006098 <memset>
    
    /* Set buffer pointers */
    rs485_driver.dma_rx_buffer = rs485_dma_rx_buffer;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <rs485_init+0x78>)
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <rs485_init+0x7c>)
 8000fb2:	605a      	str	r2, [r3, #4]
    rs485_driver.rx_buffer = rs485_rx_ring_buffer;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <rs485_init+0x78>)
 8000fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001020 <rs485_init+0x80>)
 8000fb8:	609a      	str	r2, [r3, #8]
    rs485_driver.tx_buffer = rs485_tx_ring_buffer;
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <rs485_init+0x78>)
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <rs485_init+0x84>)
 8000fbe:	60da      	str	r2, [r3, #12]
    
    /* Initialize ring buffers */
    ring_buffer_init(&rs485_driver.rx_ring, rs485_rx_ring_buffer, RS485_RX_BUFFER_SIZE);
 8000fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc4:	4916      	ldr	r1, [pc, #88]	@ (8001020 <rs485_init+0x80>)
 8000fc6:	4818      	ldr	r0, [pc, #96]	@ (8001028 <rs485_init+0x88>)
 8000fc8:	f000 f90a 	bl	80011e0 <ring_buffer_init>
    ring_buffer_init(&rs485_driver.tx_ring, rs485_tx_ring_buffer, RS485_TX_BUFFER_SIZE);
 8000fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd0:	4914      	ldr	r1, [pc, #80]	@ (8001024 <rs485_init+0x84>)
 8000fd2:	4816      	ldr	r0, [pc, #88]	@ (800102c <rs485_init+0x8c>)
 8000fd4:	f000 f904 	bl	80011e0 <ring_buffer_init>
    
    /* Set UART handle */
    rs485_driver.huart = &huart2;  /* slavemcu uses USART2 */
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <rs485_init+0x78>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	@ (8001030 <rs485_init+0x90>)
 8000fdc:	601a      	str	r2, [r3, #0]
    
    /* Clear DMA buffer */
    memset(rs485_dma_rx_buffer, 0, RS485_DMA_RX_BUFFER_SIZE);
 8000fde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <rs485_init+0x7c>)
 8000fe6:	f005 f857 	bl	8006098 <memset>
    
    /* Start DMA reception (already configured as circular in HAL_MspInit) */
    HAL_UART_Receive_DMA(rs485_driver.huart, rs485_dma_rx_buffer, RS485_DMA_RX_BUFFER_SIZE);
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <rs485_init+0x78>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff2:	490a      	ldr	r1, [pc, #40]	@ (800101c <rs485_init+0x7c>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fea9 	bl	8004d4c <HAL_UART_Receive_DMA>
    
    /* Enable IDLE interrupt */
     __HAL_UART_ENABLE_IT(rs485_driver.huart, UART_IT_IDLE);
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <rs485_init+0x78>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <rs485_init+0x78>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0210 	orr.w	r2, r2, #16
 800100c:	60da      	str	r2, [r3, #12]
    
    /* Reset statistics */
    rs485_reset_stats();
 800100e:	f000 f8db 	bl	80011c8 <rs485_reset_stats>
    
    return RS485_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000174 	.word	0x20000174
 800101c:	200001bc 	.word	0x200001bc
 8001020:	200002bc 	.word	0x200002bc
 8001024:	200004bc 	.word	0x200004bc
 8001028:	20000184 	.word	0x20000184
 800102c:	20000190 	.word	0x20000190
 8001030:	2000075c 	.word	0x2000075c

08001034 <rs485_send_packet_dma>:

/**
 * @brief Send packet via RS485 using DMA (non-blocking)
 */
rs485_status_t rs485_send_packet_dma(const uint8_t *data, uint16_t length)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    
    if (data == NULL || length == 0 || length > RS485_TX_BUFFER_SIZE) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <rs485_send_packet_dma+0x20>
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <rs485_send_packet_dma+0x20>
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001052:	d901      	bls.n	8001058 <rs485_send_packet_dma+0x24>
        return RS485_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e036      	b.n	80010c6 <rs485_send_packet_dma+0x92>
    }
    
    if (rs485_driver.tx_pending) {
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 800105a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <rs485_send_packet_dma+0x34>
        return RS485_BUSY;
 8001064:	2302      	movs	r3, #2
 8001066:	e02e      	b.n	80010c6 <rs485_send_packet_dma+0x92>
    }
    
    /* Set pending flag */
    rs485_driver.tx_pending = 1;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    
    /* Copy data to TX buffer */
    memcpy(rs485_driver.tx_buffer, data, length);
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	887a      	ldrh	r2, [r7, #2]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	f005 f888 	bl	800618e <memcpy>
    
    /* Send data via DMA */
    status = HAL_UART_Transmit_DMA(rs485_driver.huart, rs485_driver.tx_buffer, length);
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 8001084:	68d1      	ldr	r1, [r2, #12]
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fdef 	bl	8004c6c <HAL_UART_Transmit_DMA>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
    
    if (status == HAL_OK) {
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10c      	bne.n	80010b2 <rs485_send_packet_dma+0x7e>
        rs485_driver.stats.tx_packets++;
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 800109a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109c:	3301      	adds	r3, #1
 800109e:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 80010a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        rs485_driver.stats.tx_bytes += length;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 80010a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 80010ac:	6353      	str	r3, [r2, #52]	@ 0x34
        return RS485_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e009      	b.n	80010c6 <rs485_send_packet_dma+0x92>
    } else {
        rs485_driver.stats.tx_errors++;
 80010b2:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b6:	3301      	adds	r3, #1
 80010b8:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 80010ba:	6413      	str	r3, [r2, #64]	@ 0x40
        rs485_driver.tx_pending = 0;
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <rs485_send_packet_dma+0x9c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        return RS485_ERROR;
 80010c4:	2301      	movs	r3, #1
    }
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000174 	.word	0x20000174

080010d4 <rs485_receive_packet>:

/**
 * @brief Receive packet from RS485
 */
uint16_t rs485_receive_packet(uint8_t *buffer, uint16_t max_length)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
    if (buffer == NULL || max_length == 0) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <rs485_receive_packet+0x18>
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <rs485_receive_packet+0x1c>
        return 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e013      	b.n	8001118 <rs485_receive_packet+0x44>
    }
    
    /* Process any pending DMA data */
    rs485_process_dma_rx();
 80010f0:	f000 f926 	bl	8001340 <rs485_process_dma_rx>
    
    /* Read from ring buffer */
    uint16_t received = ring_buffer_read(&rs485_driver.rx_ring, buffer, max_length);
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	461a      	mov	r2, r3
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4809      	ldr	r0, [pc, #36]	@ (8001120 <rs485_receive_packet+0x4c>)
 80010fc:	f000 f8c1 	bl	8001282 <ring_buffer_read>
 8001100:	4603      	mov	r3, r0
 8001102:	81fb      	strh	r3, [r7, #14]
    
    if (received > 0) {
 8001104:	89fb      	ldrh	r3, [r7, #14]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <rs485_receive_packet+0x42>
        rs485_driver.stats.rx_bytes += received;
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <rs485_receive_packet+0x50>)
 800110c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	4413      	add	r3, r2
 8001112:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <rs485_receive_packet+0x50>)
 8001114:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    
    return received;
 8001116:	89fb      	ldrh	r3, [r7, #14]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000184 	.word	0x20000184
 8001124:	20000174 	.word	0x20000174

08001128 <rs485_idle_interrupt_handler>:

/**
 * @brief Handle IDLE interrupt for RS485
 */
void rs485_idle_interrupt_handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800112e:	af00      	add	r7, sp, #0
    /* Clear IDLE flag */
    __HAL_UART_CLEAR_IDLEFLAG(rs485_driver.huart);
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <rs485_idle_interrupt_handler+0x80>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <rs485_idle_interrupt_handler+0x80>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800114e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
    
    /* Process received data */
    rs485_process_dma_rx();
 8001152:	f000 f8f5 	bl	8001340 <rs485_process_dma_rx>
    
    rs485_driver.stats.rx_packets++;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <rs485_idle_interrupt_handler+0x80>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	3301      	adds	r3, #1
 800115c:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <rs485_idle_interrupt_handler+0x80>)
 800115e:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Call packet callback if set */
    if (rs485_driver.packet_received_callback != NULL) {
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <rs485_idle_interrupt_handler+0x80>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01a      	beq.n	800119e <rs485_idle_interrupt_handler+0x76>
        uint16_t available = ring_buffer_available(&rs485_driver.rx_ring);
 8001168:	4810      	ldr	r0, [pc, #64]	@ (80011ac <rs485_idle_interrupt_handler+0x84>)
 800116a:	f000 f8c2 	bl	80012f2 <ring_buffer_available>
 800116e:	4603      	mov	r3, r0
 8001170:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        if (available > 0) {
 8001174:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8001178:	2b00      	cmp	r3, #0
 800117a:	d010      	beq.n	800119e <rs485_idle_interrupt_handler+0x76>
            uint8_t temp_buffer[RS485_RX_BUFFER_SIZE];
            uint16_t length = ring_buffer_read(&rs485_driver.rx_ring, temp_buffer, available);
 800117c:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4809      	ldr	r0, [pc, #36]	@ (80011ac <rs485_idle_interrupt_handler+0x84>)
 8001186:	f000 f87c 	bl	8001282 <ring_buffer_read>
 800118a:	4603      	mov	r3, r0
 800118c:	f8a7 3204 	strh.w	r3, [r7, #516]	@ 0x204
            rs485_driver.packet_received_callback(temp_buffer, length);
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <rs485_idle_interrupt_handler+0x80>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001194:	f8b7 1204 	ldrh.w	r1, [r7, #516]	@ 0x204
 8001198:	463a      	mov	r2, r7
 800119a:	4610      	mov	r0, r2
 800119c:	4798      	blx	r3
        }
    }
}
 800119e:	bf00      	nop
 80011a0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000174 	.word	0x20000174
 80011ac:	20000184 	.word	0x20000184

080011b0 <rs485_tx_complete_callback>:

/**
 * @brief TX complete callback
 */
void rs485_tx_complete_callback(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
    /* Clear pending flag */
    rs485_driver.tx_pending = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <rs485_tx_complete_callback+0x14>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000174 	.word	0x20000174

080011c8 <rs485_reset_stats>:

/**
 * @brief Reset RS485 statistics
 */
void rs485_reset_stats(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    memset(&rs485_driver.stats, 0, sizeof(rs485_stats_t));
 80011cc:	2218      	movs	r2, #24
 80011ce:	2100      	movs	r1, #0
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <rs485_reset_stats+0x14>)
 80011d2:	f004 ff61 	bl	8006098 <memset>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001a0 	.word	0x200001a0

080011e0 <ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
static void ring_buffer_init(ring_buffer_t *rb, uint8_t *buffer, uint16_t size)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	4613      	mov	r3, r2
 80011ec:	80fb      	strh	r3, [r7, #6]
    rb->buffer = buffer;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	601a      	str	r2, [r3, #0]
    rb->size = size;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	88fa      	ldrh	r2, [r7, #6]
 80011f8:	809a      	strh	r2, [r3, #4]
    rb->head = 0;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	80da      	strh	r2, [r3, #6]
    rb->tail = 0;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	811a      	strh	r2, [r3, #8]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <ring_buffer_write>:

/**
 * @brief Write data to ring buffer
 */
static uint16_t ring_buffer_write(ring_buffer_t *rb, const uint8_t *data, uint16_t length)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	80fb      	strh	r3, [r7, #6]
    uint16_t written = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	82fb      	strh	r3, [r7, #22]
    
    while (written < length) {
 8001222:	e022      	b.n	800126a <ring_buffer_write+0x5a>
        uint16_t next_head = (rb->head + 1) % rb->size;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	88db      	ldrh	r3, [r3, #6]
 8001228:	b29b      	uxth	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	8892      	ldrh	r2, [r2, #4]
 8001230:	fb93 f1f2 	sdiv	r1, r3, r2
 8001234:	fb01 f202 	mul.w	r2, r1, r2
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	82bb      	strh	r3, [r7, #20]
        
        /* Check if buffer is full */
        if (next_head == rb->tail) {
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	891b      	ldrh	r3, [r3, #8]
 8001240:	b29b      	uxth	r3, r3
 8001242:	8aba      	ldrh	r2, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	d015      	beq.n	8001274 <ring_buffer_write+0x64>
            break;  /* Buffer full */
        }
        
        rb->buffer[rb->head] = data[written];
 8001248:	8afb      	ldrh	r3, [r7, #22]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	441a      	add	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68f9      	ldr	r1, [r7, #12]
 8001254:	88c9      	ldrh	r1, [r1, #6]
 8001256:	b289      	uxth	r1, r1
 8001258:	440b      	add	r3, r1
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	701a      	strb	r2, [r3, #0]
        rb->head = next_head;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8aba      	ldrh	r2, [r7, #20]
 8001262:	80da      	strh	r2, [r3, #6]
        written++;
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	3301      	adds	r3, #1
 8001268:	82fb      	strh	r3, [r7, #22]
    while (written < length) {
 800126a:	8afa      	ldrh	r2, [r7, #22]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	429a      	cmp	r2, r3
 8001270:	d3d8      	bcc.n	8001224 <ring_buffer_write+0x14>
 8001272:	e000      	b.n	8001276 <ring_buffer_write+0x66>
            break;  /* Buffer full */
 8001274:	bf00      	nop
    }
    
    return written;
 8001276:	8afb      	ldrh	r3, [r7, #22]
}
 8001278:	4618      	mov	r0, r3
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <ring_buffer_read>:

/**
 * @brief Read data from ring buffer
 */
static uint16_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data, uint16_t length)
{
 8001282:	b480      	push	{r7}
 8001284:	b087      	sub	sp, #28
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	4613      	mov	r3, r2
 800128e:	80fb      	strh	r3, [r7, #6]
    uint16_t read = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	82fb      	strh	r3, [r7, #22]
    
    while (read < length && rb->tail != rb->head) {
 8001294:	e01b      	b.n	80012ce <ring_buffer_read+0x4c>
        data[read] = rb->buffer[rb->tail];
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	8912      	ldrh	r2, [r2, #8]
 800129e:	b292      	uxth	r2, r2
 80012a0:	441a      	add	r2, r3
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	440b      	add	r3, r1
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
        rb->tail = (rb->tail + 1) % rb->size;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	891b      	ldrh	r3, [r3, #8]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	8892      	ldrh	r2, [r2, #4]
 80012b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80012bc:	fb01 f202 	mul.w	r2, r1, r2
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	811a      	strh	r2, [r3, #8]
        read++;
 80012c8:	8afb      	ldrh	r3, [r7, #22]
 80012ca:	3301      	adds	r3, #1
 80012cc:	82fb      	strh	r3, [r7, #22]
    while (read < length && rb->tail != rb->head) {
 80012ce:	8afa      	ldrh	r2, [r7, #22]
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d207      	bcs.n	80012e6 <ring_buffer_read+0x64>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	891b      	ldrh	r3, [r3, #8]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	88db      	ldrh	r3, [r3, #6]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d1d7      	bne.n	8001296 <ring_buffer_read+0x14>
    }
    
    return read;
 80012e6:	8afb      	ldrh	r3, [r7, #22]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <ring_buffer_available>:

/**
 * @brief Get available data in ring buffer
 */
static uint16_t ring_buffer_available(ring_buffer_t *rb)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
    if (rb->head >= rb->tail) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	88db      	ldrh	r3, [r3, #6]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	891b      	ldrh	r3, [r3, #8]
 8001304:	b29b      	uxth	r3, r3
 8001306:	429a      	cmp	r2, r3
 8001308:	d308      	bcc.n	800131c <ring_buffer_available+0x2a>
        return rb->head - rb->tail;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	88db      	ldrh	r3, [r3, #6]
 800130e:	b29a      	uxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	891b      	ldrh	r3, [r3, #8]
 8001314:	b29b      	uxth	r3, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	e00b      	b.n	8001334 <ring_buffer_available+0x42>
    } else {
        return rb->size - rb->tail + rb->head;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	889a      	ldrh	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	891b      	ldrh	r3, [r3, #8]
 8001324:	b29b      	uxth	r3, r3
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	88db      	ldrh	r3, [r3, #6]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
    }
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
	...

08001340 <rs485_process_dma_rx>:

/**
 * @brief Process DMA received data
 */
static void rs485_process_dma_rx(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    /* Get current DMA position */
    uint16_t dma_pos = RS485_DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(rs485_driver.huart->hdmarx);
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	b29b      	uxth	r3, r3
 8001352:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001356:	80bb      	strh	r3, [r7, #4]
    
    /* Calculate received bytes */
    uint16_t length;
    if (dma_pos >= rs485_driver.last_dma_pos) {
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 800135a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800135c:	b29b      	uxth	r3, r3
 800135e:	88ba      	ldrh	r2, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d306      	bcc.n	8001372 <rs485_process_dma_rx+0x32>
        length = dma_pos - rs485_driver.last_dma_pos;
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 8001366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001368:	b29b      	uxth	r3, r3
 800136a:	88ba      	ldrh	r2, [r7, #4]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	e008      	b.n	8001384 <rs485_process_dma_rx+0x44>
    } else {
        /* DMA wrapped around */
        length = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos + dma_pos;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 8001374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001376:	b29b      	uxth	r3, r3
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b29b      	uxth	r3, r3
 800137e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001382:	80fb      	strh	r3, [r7, #6]
    }
    
    if (length > 0) {
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d031      	beq.n	80013ee <rs485_process_dma_rx+0xae>
        /* Copy data to ring buffer */
        if (rs485_driver.last_dma_pos + length <= RS485_DMA_RX_BUFFER_SIZE) {
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 800138c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	4413      	add	r3, r2
 8001396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800139a:	dc0b      	bgt.n	80013b4 <rs485_process_dma_rx+0x74>
            /* Simple copy */
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 800139e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <rs485_process_dma_rx+0xbc>)
 80013a6:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 80013a8:	88fa      	ldrh	r2, [r7, #6]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4814      	ldr	r0, [pc, #80]	@ (8001400 <rs485_process_dma_rx+0xc0>)
 80013ae:	f7ff ff2f 	bl	8001210 <ring_buffer_write>
 80013b2:	e019      	b.n	80013e8 <rs485_process_dma_rx+0xa8>
                            length);
        } else {
            /* Wrapped copy */
            uint16_t first_part = RS485_DMA_RX_BUFFER_SIZE - rs485_driver.last_dma_pos;
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 80013b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80013be:	807b      	strh	r3, [r7, #2]
            ring_buffer_write(&rs485_driver.rx_ring, 
                            &rs485_dma_rx_buffer[rs485_driver.last_dma_pos], 
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <rs485_process_dma_rx+0xbc>)
 80013ca:	4413      	add	r3, r2
            ring_buffer_write(&rs485_driver.rx_ring, 
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <rs485_process_dma_rx+0xc0>)
 80013d2:	f7ff ff1d 	bl	8001210 <ring_buffer_write>
                            first_part);
            ring_buffer_write(&rs485_driver.rx_ring, 
 80013d6:	88fa      	ldrh	r2, [r7, #6]
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	4906      	ldr	r1, [pc, #24]	@ (80013fc <rs485_process_dma_rx+0xbc>)
 80013e2:	4807      	ldr	r0, [pc, #28]	@ (8001400 <rs485_process_dma_rx+0xc0>)
 80013e4:	f7ff ff14 	bl	8001210 <ring_buffer_write>
                            &rs485_dma_rx_buffer[0], 
                            length - first_part);
        }
        
        /* Update last position */
        rs485_driver.last_dma_pos = dma_pos;
 80013e8:	4a03      	ldr	r2, [pc, #12]	@ (80013f8 <rs485_process_dma_rx+0xb8>)
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	8553      	strh	r3, [r2, #42]	@ 0x2a
    }
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000174 	.word	0x20000174
 80013fc:	200001bc 	.word	0x200001bc
 8001400:	20000184 	.word	0x20000184

08001404 <Keyboard_Init>:

// 全局键盘实例
Keyboard_t g_keyboard;

// 初始化键盘模块
void Keyboard_Init(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    // 清零结构体
    memset(&g_keyboard, 0, sizeof(Keyboard_t));
 8001408:	2228      	movs	r2, #40	@ 0x28
 800140a:	2100      	movs	r1, #0
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <Keyboard_Init+0x50>)
 800140e:	f004 fe43 	bl	8006098 <memset>
    
    // 初始化变量
    g_keyboard.current_key = KEY_NONE;
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <Keyboard_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    g_keyboard.last_key = KEY_NONE;
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <Keyboard_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	705a      	strb	r2, [r3, #1]
    g_keyboard.last_scan_time = HAL_GetTick();
 800141e:	f002 f8f9 	bl	8003614 <HAL_GetTick>
 8001422:	4603      	mov	r3, r0
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <Keyboard_Init+0x50>)
 8001426:	6053      	str	r3, [r2, #4]
    g_keyboard.key_stable = false;
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <Keyboard_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	735a      	strb	r2, [r3, #13]
    g_keyboard.buffer_head = 0;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <Keyboard_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <Keyboard_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <Keyboard_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	761a      	strb	r2, [r3, #24]
    g_keyboard.interrupt_flag = false;
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <Keyboard_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = 0;
 8001446:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <Keyboard_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
    
    // 初始化GPIO
    Keyboard_GPIO_Init();
 800144c:	f000 fa0e 	bl	800186c <Keyboard_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200006bc 	.word	0x200006bc

08001458 <Keyboard_Handler>:

// 主处理函数 - 中断模式
void Keyboard_Handler(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
    // 检查中断标志
    if (g_keyboard.interrupt_flag) {
 800145e:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <Keyboard_Handler+0x88>)
 8001460:	7e5b      	ldrb	r3, [r3, #25]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d027      	beq.n	80014b8 <Keyboard_Handler+0x60>
        g_keyboard.interrupt_flag = false;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <Keyboard_Handler+0x88>)
 800146a:	2200      	movs	r2, #0
 800146c:	765a      	strb	r2, [r3, #25]
        
        uint32_t current_time = HAL_GetTick();
 800146e:	f002 f8d1 	bl	8003614 <HAL_GetTick>
 8001472:	60f8      	str	r0, [r7, #12]
        
        // 去抖处理 - 两次按键间隔至少 KEYBOARD_DEBOUNCE_TIME
        if (current_time - g_keyboard.last_scan_time >= KEYBOARD_DEBOUNCE_TIME) {
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <Keyboard_Handler+0x88>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b63      	cmp	r3, #99	@ 0x63
 800147e:	d91b      	bls.n	80014b8 <Keyboard_Handler+0x60>
            g_keyboard.last_scan_time = current_time;
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <Keyboard_Handler+0x88>)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6053      	str	r3, [r2, #4]
            
            // 延时5ms后再扫描，等待信号稳定
            HAL_Delay(5);
 8001486:	2005      	movs	r0, #5
 8001488:	f002 f8ce 	bl	8003628 <HAL_Delay>
            
            // 扫描键盘确定哪个按键被按下
            uint8_t key = Keyboard_ScanInterrupt();
 800148c:	f000 f82a 	bl	80014e4 <Keyboard_ScanInterrupt>
 8001490:	4603      	mov	r3, r0
 8001492:	72fb      	strb	r3, [r7, #11]
            
            // 处理按键 - 只处理不同于上次的按键
            if (key != KEY_NONE && key != g_keyboard.last_key) {
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <Keyboard_Handler+0x5a>
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <Keyboard_Handler+0x88>)
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	7afa      	ldrb	r2, [r7, #11]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d006      	beq.n	80014b2 <Keyboard_Handler+0x5a>
                Keyboard_ProcessKey(key);
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f9b8 	bl	800181c <Keyboard_ProcessKey>
                g_keyboard.last_key = key;
 80014ac:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <Keyboard_Handler+0x88>)
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	7053      	strb	r3, [r2, #1]
            }
            
            // 设置按键释放超时
            g_keyboard.key_press_time = current_time;
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <Keyboard_Handler+0x88>)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6093      	str	r3, [r2, #8]
        }
    }
    
    // 检查按键释放
    uint32_t current_time = HAL_GetTick();
 80014b8:	f002 f8ac 	bl	8003614 <HAL_GetTick>
 80014bc:	6078      	str	r0, [r7, #4]
    if (g_keyboard.last_key != KEY_NONE) {
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <Keyboard_Handler+0x88>)
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <Keyboard_Handler+0x80>
        if (current_time - g_keyboard.key_press_time > KEYBOARD_RELEASE_TIME) {
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <Keyboard_Handler+0x88>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80014d0:	d902      	bls.n	80014d8 <Keyboard_Handler+0x80>
            g_keyboard.last_key = KEY_NONE;
 80014d2:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <Keyboard_Handler+0x88>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	705a      	strb	r2, [r3, #1]
        }
    }
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200006bc 	.word	0x200006bc

080014e4 <Keyboard_ScanInterrupt>:
    
    return KEY_NONE;
}

// Scan keyboard when interrupt triggered
uint8_t Keyboard_ScanInterrupt(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0
    uint8_t key = KEY_NONE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t confirm_count = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    // First set all columns HIGH to prepare for scanning
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 80014f6:	2201      	movs	r2, #1
 80014f8:	f241 1130 	movw	r1, #4400	@ 0x1130
 80014fc:	488f      	ldr	r0, [pc, #572]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 80014fe:	f002 fe02 	bl	8004106 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_SET);
    
    // 等待电平稳定
    HAL_Delay(1);
 8001502:	2001      	movs	r0, #1
 8001504:	f002 f890 	bl	8003628 <HAL_Delay>
    // S13 -> PA12 -> Not used
    
    // Test each column one by one with confirmation
    
    // Test PA4 (COL4_PIN) for S16 -> Floor 1
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_RESET);  // PA4
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	488b      	ldr	r0, [pc, #556]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 800150e:	f002 fdfa 	bl	8004106 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 等待电平稳定
 8001512:	2001      	movs	r0, #1
 8001514:	f002 f888 	bl	8003628 <HAL_Delay>
    // 连续读取3次确认
    confirm_count = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < 3; i++) {
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
 8001522:	e018      	b.n	8001556 <Keyboard_ScanInterrupt+0x72>
        if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8001524:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001528:	4884      	ldr	r0, [pc, #528]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 800152a:	f002 fdd5 	bl	80040d8 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d104      	bne.n	800153e <Keyboard_ScanInterrupt+0x5a>
            confirm_count++;
 8001534:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001538:	3301      	adds	r3, #1
 800153a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        for(volatile int j = 0; j < 100; j++);
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e002      	b.n	800154a <Keyboard_ScanInterrupt+0x66>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2b63      	cmp	r3, #99	@ 0x63
 800154e:	ddf9      	ble.n	8001544 <Keyboard_ScanInterrupt+0x60>
    for (int i = 0; i < 3; i++) {
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	3301      	adds	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	2b02      	cmp	r3, #2
 800155a:	dde3      	ble.n	8001524 <Keyboard_ScanInterrupt+0x40>
    }
    if (confirm_count >= 2) {  // 至少3次中有2次读到低电平
 800155c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001560:	2b01      	cmp	r3, #1
 8001562:	d902      	bls.n	800156a <Keyboard_ScanInterrupt+0x86>
        key = KEY_S16;  // Floor 1
 8001564:	2310      	movs	r3, #16
 8001566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL4_PIN, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2110      	movs	r1, #16
 800156e:	4873      	ldr	r0, [pc, #460]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 8001570:	f002 fdc9 	bl	8004106 <HAL_GPIO_WritePin>
    
    if (key == KEY_NONE) {
 8001574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001578:	2b00      	cmp	r3, #0
 800157a:	d137      	bne.n	80015ec <Keyboard_ScanInterrupt+0x108>
        // Test PA8 (COL1_PIN) for S15 -> Floor 2
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_RESET);  // PA8
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001582:	486e      	ldr	r0, [pc, #440]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 8001584:	f002 fdbf 	bl	8004106 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f002 f84d 	bl	8003628 <HAL_Delay>
        confirm_count = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	e018      	b.n	80015cc <Keyboard_ScanInterrupt+0xe8>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 800159a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800159e:	4867      	ldr	r0, [pc, #412]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 80015a0:	f002 fd9a 	bl	80040d8 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d104      	bne.n	80015b4 <Keyboard_ScanInterrupt+0xd0>
                confirm_count++;
 80015aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015ae:	3301      	adds	r3, #1
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	e002      	b.n	80015c0 <Keyboard_ScanInterrupt+0xdc>
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b63      	cmp	r3, #99	@ 0x63
 80015c4:	ddf9      	ble.n	80015ba <Keyboard_ScanInterrupt+0xd6>
        for (int i = 0; i < 3; i++) {
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	dde3      	ble.n	800159a <Keyboard_ScanInterrupt+0xb6>
        }
        if (confirm_count >= 2) {
 80015d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d902      	bls.n	80015e0 <Keyboard_ScanInterrupt+0xfc>
            key = KEY_S15;  // Floor 2
 80015da:	230f      	movs	r3, #15
 80015dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL1_PIN, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e6:	4855      	ldr	r0, [pc, #340]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 80015e8:	f002 fd8d 	bl	8004106 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 80015ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d135      	bne.n	8001660 <Keyboard_ScanInterrupt+0x17c>
        // Test PA5 (COL3_PIN) for S14 -> Floor 3
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_RESET);  // PA5
 80015f4:	2200      	movs	r2, #0
 80015f6:	2120      	movs	r1, #32
 80015f8:	4850      	ldr	r0, [pc, #320]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 80015fa:	f002 fd84 	bl	8004106 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f002 f812 	bl	8003628 <HAL_Delay>
        confirm_count = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	e018      	b.n	8001642 <Keyboard_ScanInterrupt+0x15e>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8001610:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001614:	4849      	ldr	r0, [pc, #292]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 8001616:	f002 fd5f 	bl	80040d8 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d104      	bne.n	800162a <Keyboard_ScanInterrupt+0x146>
                confirm_count++;
 8001620:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001624:	3301      	adds	r3, #1
 8001626:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e002      	b.n	8001636 <Keyboard_ScanInterrupt+0x152>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3301      	adds	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b63      	cmp	r3, #99	@ 0x63
 800163a:	ddf9      	ble.n	8001630 <Keyboard_ScanInterrupt+0x14c>
        for (int i = 0; i < 3; i++) {
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	3301      	adds	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b02      	cmp	r3, #2
 8001646:	dde3      	ble.n	8001610 <Keyboard_ScanInterrupt+0x12c>
        }
        if (confirm_count >= 2) {
 8001648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800164c:	2b01      	cmp	r3, #1
 800164e:	d902      	bls.n	8001656 <Keyboard_ScanInterrupt+0x172>
            key = KEY_S14;  // Floor 3
 8001650:	230e      	movs	r3, #14
 8001652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL3_PIN, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2120      	movs	r1, #32
 800165a:	4838      	ldr	r0, [pc, #224]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 800165c:	f002 fd53 	bl	8004106 <HAL_GPIO_WritePin>
    }
    
    if (key == KEY_NONE) {
 8001660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001664:	2b00      	cmp	r3, #0
 8001666:	d137      	bne.n	80016d8 <Keyboard_ScanInterrupt+0x1f4>
        // Test PA12 (COL2_PIN) for S13 -> Not used
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_RESET);  // PA12
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166e:	4833      	ldr	r0, [pc, #204]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 8001670:	f002 fd49 	bl	8004106 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f001 ffd7 	bl	8003628 <HAL_Delay>
        confirm_count = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 3; i++) {
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e018      	b.n	80016b8 <Keyboard_ScanInterrupt+0x1d4>
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_RESET) {
 8001686:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800168a:	482c      	ldr	r0, [pc, #176]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 800168c:	f002 fd24 	bl	80040d8 <HAL_GPIO_ReadPin>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d104      	bne.n	80016a0 <Keyboard_ScanInterrupt+0x1bc>
                confirm_count++;
 8001696:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800169a:	3301      	adds	r3, #1
 800169c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
            for(volatile int j = 0; j < 100; j++);
 80016a0:	2300      	movs	r3, #0
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	e002      	b.n	80016ac <Keyboard_ScanInterrupt+0x1c8>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b63      	cmp	r3, #99	@ 0x63
 80016b0:	ddf9      	ble.n	80016a6 <Keyboard_ScanInterrupt+0x1c2>
        for (int i = 0; i < 3; i++) {
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	dde3      	ble.n	8001686 <Keyboard_ScanInterrupt+0x1a2>
        }
        if (confirm_count >= 2) {
 80016be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d902      	bls.n	80016cc <Keyboard_ScanInterrupt+0x1e8>
            key = KEY_S13;  // S13 detected but not used in elevator logic
 80016c6:	230d      	movs	r3, #13
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        HAL_GPIO_WritePin(KEYBOARD_COL_PORT, KEYBOARD_COL2_PIN, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d2:	481a      	ldr	r0, [pc, #104]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 80016d4:	f002 fd17 	bl	8004106 <HAL_GPIO_WritePin>
    }
    
    // 等待按键释放
    if (key != KEY_NONE) {
 80016d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <Keyboard_ScanInterrupt+0x23e>
        // 等待按键释放（最多等500ms）
        uint32_t wait_start = HAL_GetTick();
 80016e0:	f001 ff98 	bl	8003614 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]
        while ((HAL_GetTick() - wait_start) < 500) {
 80016e6:	e014      	b.n	8001712 <Keyboard_ScanInterrupt+0x22e>
            // 设置所有列为HIGH
            HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 80016e8:	2201      	movs	r2, #1
 80016ea:	f241 1130 	movw	r1, #4400	@ 0x1130
 80016ee:	4813      	ldr	r0, [pc, #76]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 80016f0:	f002 fd09 	bl	8004106 <HAL_GPIO_WritePin>
                              KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                              KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                              GPIO_PIN_SET);
            HAL_Delay(5);
 80016f4:	2005      	movs	r0, #5
 80016f6:	f001 ff97 	bl	8003628 <HAL_Delay>
            
            // 检查是否释放
            if (HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT, KEYBOARD_ROW_PIN) == GPIO_PIN_SET) {
 80016fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016fe:	480f      	ldr	r0, [pc, #60]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 8001700:	f002 fcea 	bl	80040d8 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d103      	bne.n	8001712 <Keyboard_ScanInterrupt+0x22e>
                // 按键已释放
                HAL_Delay(10);  // 额外延时确保完全释放
 800170a:	200a      	movs	r0, #10
 800170c:	f001 ff8c 	bl	8003628 <HAL_Delay>
                break;
 8001710:	e007      	b.n	8001722 <Keyboard_ScanInterrupt+0x23e>
        while ((HAL_GetTick() - wait_start) < 500) {
 8001712:	f001 ff7f 	bl	8003614 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001720:	d3e2      	bcc.n	80016e8 <Keyboard_ScanInterrupt+0x204>
            }
        }
    }
    
    // After scanning, set all columns LOW again for next interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8001722:	2200      	movs	r2, #0
 8001724:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <Keyboard_ScanInterrupt+0x258>)
 800172a:	f002 fcec 	bl	8004106 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
    
    return key;
 800172e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001732:	4618      	mov	r0, r3
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40010800 	.word	0x40010800

08001740 <Keyboard_PushKey>:
bool Keyboard_IsKeyPressed(uint8_t key) {
    return (g_keyboard.current_key == key && g_keyboard.key_stable);
}

// 将按键推入缓冲区
bool Keyboard_PushKey(uint8_t key) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
    if (g_keyboard.buffer_count >= KEYBOARD_BUFFER_SIZE) {
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <Keyboard_PushKey+0x58>)
 800174c:	7e1b      	ldrb	r3, [r3, #24]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d901      	bls.n	8001756 <Keyboard_PushKey+0x16>
        return false;  // 缓冲区满
 8001752:	2300      	movs	r3, #0
 8001754:	e01a      	b.n	800178c <Keyboard_PushKey+0x4c>
    }
    
    g_keyboard.key_buffer[g_keyboard.buffer_tail] = key;
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <Keyboard_PushKey+0x58>)
 8001758:	7ddb      	ldrb	r3, [r3, #23]
 800175a:	461a      	mov	r2, r3
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <Keyboard_PushKey+0x58>)
 800175e:	4413      	add	r3, r2
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	739a      	strb	r2, [r3, #14]
    g_keyboard.buffer_tail = (g_keyboard.buffer_tail + 1) % KEYBOARD_BUFFER_SIZE;
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <Keyboard_PushKey+0x58>)
 8001766:	7ddb      	ldrb	r3, [r3, #23]
 8001768:	3301      	adds	r3, #1
 800176a:	425a      	negs	r2, r3
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	f002 0207 	and.w	r2, r2, #7
 8001774:	bf58      	it	pl
 8001776:	4253      	negpl	r3, r2
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <Keyboard_PushKey+0x58>)
 800177c:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count++;
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <Keyboard_PushKey+0x58>)
 8001780:	7e1b      	ldrb	r3, [r3, #24]
 8001782:	3301      	adds	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <Keyboard_PushKey+0x58>)
 8001788:	761a      	strb	r2, [r3, #24]
    
    return true;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200006bc 	.word	0x200006bc

0800179c <Keyboard_PopKey>:

// 从缓冲区弹出按键
bool Keyboard_PopKey(uint8_t* key) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    if (g_keyboard.buffer_count == 0) {
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <Keyboard_PopKey+0x58>)
 80017a6:	7e1b      	ldrb	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <Keyboard_PopKey+0x14>
        return false;  // 缓冲区空
 80017ac:	2300      	movs	r3, #0
 80017ae:	e01b      	b.n	80017e8 <Keyboard_PopKey+0x4c>
    }
    
    *key = g_keyboard.key_buffer[g_keyboard.buffer_head];
 80017b0:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <Keyboard_PopKey+0x58>)
 80017b2:	7d9b      	ldrb	r3, [r3, #22]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <Keyboard_PopKey+0x58>)
 80017b8:	4413      	add	r3, r2
 80017ba:	7b9a      	ldrb	r2, [r3, #14]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	701a      	strb	r2, [r3, #0]
    g_keyboard.buffer_head = (g_keyboard.buffer_head + 1) % KEYBOARD_BUFFER_SIZE;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <Keyboard_PopKey+0x58>)
 80017c2:	7d9b      	ldrb	r3, [r3, #22]
 80017c4:	3301      	adds	r3, #1
 80017c6:	425a      	negs	r2, r3
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	f002 0207 	and.w	r2, r2, #7
 80017d0:	bf58      	it	pl
 80017d2:	4253      	negpl	r3, r2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <Keyboard_PopKey+0x58>)
 80017d8:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_count--;
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <Keyboard_PopKey+0x58>)
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	3b01      	subs	r3, #1
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <Keyboard_PopKey+0x58>)
 80017e4:	761a      	strb	r2, [r3, #24]
    
    return true;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200006bc 	.word	0x200006bc

080017f8 <Keyboard_ClearBuffer>:
bool Keyboard_HasKey(void) {
    return g_keyboard.buffer_count > 0;
}

// 清空缓冲区
void Keyboard_ClearBuffer(void) {
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
    g_keyboard.buffer_head = 0;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <Keyboard_ClearBuffer+0x20>)
 80017fe:	2200      	movs	r2, #0
 8001800:	759a      	strb	r2, [r3, #22]
    g_keyboard.buffer_tail = 0;
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <Keyboard_ClearBuffer+0x20>)
 8001804:	2200      	movs	r2, #0
 8001806:	75da      	strb	r2, [r3, #23]
    g_keyboard.buffer_count = 0;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <Keyboard_ClearBuffer+0x20>)
 800180a:	2200      	movs	r2, #0
 800180c:	761a      	strb	r2, [r3, #24]
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200006bc 	.word	0x200006bc

0800181c <Keyboard_ProcessKey>:

// 处理按键
void Keyboard_ProcessKey(uint8_t key) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
    if (key != KEY_NONE) {
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d019      	beq.n	8001860 <Keyboard_ProcessKey+0x44>
        g_keyboard.total_key_presses++;
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <Keyboard_ProcessKey+0x4c>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	3301      	adds	r3, #1
 8001832:	4a0d      	ldr	r2, [pc, #52]	@ (8001868 <Keyboard_ProcessKey+0x4c>)
 8001834:	6213      	str	r3, [r2, #32]
        g_keyboard.key_press_time = HAL_GetTick();
 8001836:	f001 feed 	bl	8003614 <HAL_GetTick>
 800183a:	4603      	mov	r3, r0
 800183c:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <Keyboard_ProcessKey+0x4c>)
 800183e:	6093      	str	r3, [r2, #8]
        
        // 推入缓冲区
        if (!Keyboard_PushKey(key)) {
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff7c 	bl	8001740 <Keyboard_PushKey>
 8001848:	4603      	mov	r3, r0
 800184a:	f083 0301 	eor.w	r3, r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <Keyboard_ProcessKey+0x44>
            // 缓冲区满，清空后再推入
            Keyboard_ClearBuffer();
 8001854:	f7ff ffd0 	bl	80017f8 <Keyboard_ClearBuffer>
            Keyboard_PushKey(key);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff70 	bl	8001740 <Keyboard_PushKey>
        }
        
    }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200006bc 	.word	0x200006bc

0800186c <Keyboard_GPIO_Init>:


// GPIO Init
void Keyboard_GPIO_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    // GPIO is already initialized in gpio.c
    // Set all columns LOW initially for interrupt mode
    // When any button is pressed, it will pull PA11 LOW and trigger interrupt
    HAL_GPIO_WritePin(KEYBOARD_COL_PORT, 
 8001870:	2200      	movs	r2, #0
 8001872:	f241 1130 	movw	r1, #4400	@ 0x1130
 8001876:	4802      	ldr	r0, [pc, #8]	@ (8001880 <Keyboard_GPIO_Init+0x14>)
 8001878:	f002 fc45 	bl	8004106 <HAL_GPIO_WritePin>
                      KEYBOARD_COL1_PIN | KEYBOARD_COL2_PIN | 
                      KEYBOARD_COL3_PIN | KEYBOARD_COL4_PIN, 
                      GPIO_PIN_RESET);
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40010800 	.word	0x40010800

08001884 <Keyboard_IRQHandler>:


// 中断处理函数
void Keyboard_IRQHandler(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
    // 设置中断标志
    g_keyboard.interrupt_flag = true;
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <Keyboard_IRQHandler+0x18>)
 800188a:	2201      	movs	r2, #1
 800188c:	765a      	strb	r2, [r3, #25]
    g_keyboard.interrupt_time = HAL_GetTick();
 800188e:	f001 fec1 	bl	8003614 <HAL_GetTick>
 8001892:	4603      	mov	r3, r0
 8001894:	4a01      	ldr	r2, [pc, #4]	@ (800189c <Keyboard_IRQHandler+0x18>)
 8001896:	61d3      	str	r3, [r2, #28]
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200006bc 	.word	0x200006bc

080018a0 <PhotoSensor_Init>:

/**
 * @brief Initialize photo sensor on PB5 with interrupt
 */
void PhotoSensor_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
    
    /* Enable GPIOB clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <PhotoSensor_Init+0x68>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a13      	ldr	r2, [pc, #76]	@ (8001908 <PhotoSensor_Init+0x68>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <PhotoSensor_Init+0x68>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
    
    /* Configure PB5 as input with pull-up */
    GPIO_InitStruct.Pin = PHOTO_SENSOR_GPIO_PIN;  // GPIO_PIN_5
 80018cc:	2320      	movs	r3, #32
 80018ce:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;   /* Interrupt on rising edge only */
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <PhotoSensor_Init+0x6c>)
 80018d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;           /* Internal pull-up resistor */
 80018d4:	2301      	movs	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PHOTO_SENSOR_GPIO_PORT, &GPIO_InitStruct);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <PhotoSensor_Init+0x70>)
 80018e0:	f002 fa76 	bl	8003dd0 <HAL_GPIO_Init>
    
    /* Enable and set EXTI9_5 interrupt priority (PB5 uses this) */
    HAL_NVIC_SetPriority(PHOTO_SENSOR_IRQn, 2, 0);  // EXTI9_5_IRQn
 80018e4:	2200      	movs	r2, #0
 80018e6:	2102      	movs	r1, #2
 80018e8:	2017      	movs	r0, #23
 80018ea:	f001 ff98 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PHOTO_SENSOR_IRQn);
 80018ee:	2017      	movs	r0, #23
 80018f0:	f001 ffb1 	bl	8003856 <HAL_NVIC_EnableIRQ>
    
    /* Reset counter */
    trigger_count = 0;
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <PhotoSensor_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
    last_trigger_time = 0;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <PhotoSensor_Init+0x78>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	10110000 	.word	0x10110000
 8001910:	40010c00 	.word	0x40010c00
 8001914:	200006e4 	.word	0x200006e4
 8001918:	200006e8 	.word	0x200006e8

0800191c <PhotoSensor_GetState>:
/**
 * @brief Get current state of photo sensor
 * @return PHOTO_SENSOR_BLOCKED if object detected, PHOTO_SENSOR_CLEAR if no object
 */
photo_sensor_state_t PhotoSensor_GetState(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
    /* Read GPIO pin state */
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(PHOTO_SENSOR_GPIO_PORT, PHOTO_SENSOR_GPIO_PIN);
 8001922:	2120      	movs	r1, #32
 8001924:	4807      	ldr	r0, [pc, #28]	@ (8001944 <PhotoSensor_GetState+0x28>)
 8001926:	f002 fbd7 	bl	80040d8 <HAL_GPIO_ReadPin>
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
    
    /* White line (Dark-ON): LOW = object detected, HIGH = no object */
    if (pin_state == GPIO_PIN_RESET) {
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <PhotoSensor_GetState+0x1c>
        return PHOTO_SENSOR_BLOCKED;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <PhotoSensor_GetState+0x1e>
    } else {
        return PHOTO_SENSOR_CLEAR;
 8001938:	2301      	movs	r3, #1
    }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40010c00 	.word	0x40010c00

08001948 <PhotoSensor_IRQHandler>:
/**
 * @brief Photo sensor interrupt handler
 * @note Called from HAL_GPIO_EXTI_Callback
 */
void PhotoSensor_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
    /* Simple debounce: ignore triggers within 50ms */
    uint32_t current_time = HAL_GetTick();
 800194e:	f001 fe61 	bl	8003614 <HAL_GetTick>
 8001952:	6078      	str	r0, [r7, #4]
    if (current_time - last_trigger_time > 50) {
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <PhotoSensor_IRQHandler+0x34>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b32      	cmp	r3, #50	@ 0x32
 800195e:	d909      	bls.n	8001974 <PhotoSensor_IRQHandler+0x2c>
        trigger_count++;
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <PhotoSensor_IRQHandler+0x38>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <PhotoSensor_IRQHandler+0x38>)
 8001968:	6013      	str	r3, [r2, #0]
        last_trigger_time = current_time;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <PhotoSensor_IRQHandler+0x34>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6013      	str	r3, [r2, #0]
        
        /* Call user callback */
        PhotoSensor_TriggerCallback();
 8001970:	f001 fac2 	bl	8002ef8 <PhotoSensor_TriggerCallback>
    }
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200006e8 	.word	0x200006e8
 8001980:	200006e4 	.word	0x200006e4

08001984 <DoorControl_Init>:
static uint32_t update_count = 0;

/**
 * @brief 初始化门控系统 - 4状态机版本
 */
void DoorControl_Init(DoorControl_t *door, uint8_t servo_id) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
    printf("[DOOR] Initializing door control system (4-State FSM)...\r\n");
 8001990:	4845      	ldr	r0, [pc, #276]	@ (8001aa8 <DoorControl_Init+0x124>)
 8001992:	f004 fa7f 	bl	8005e94 <puts>
    
    door->servo_id = servo_id;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	701a      	strb	r2, [r3, #0]
    
    /* 初始化舵机 */
    servo_set_speed(servo_id, 500);
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd19 	bl	80023da <servo_set_speed>
    servo_set_torque_enable(servo_id, 1);
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2101      	movs	r1, #1
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fcff 	bl	80023b0 <servo_set_torque_enable>
    HAL_Delay(100);
 80019b2:	2064      	movs	r0, #100	@ 0x64
 80019b4:	f001 fe38 	bl	8003628 <HAL_Delay>
    
    /* 读取当前位置 */
    uint8_t rx_data[2];
    servo_read_reg(servo_id, 0x38, 2, rx_data);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	78f8      	ldrb	r0, [r7, #3]
 80019be:	2202      	movs	r2, #2
 80019c0:	2138      	movs	r1, #56	@ 0x38
 80019c2:	f000 fc48 	bl	8002256 <servo_read_reg>
    door->current_pos = rx_data[0] | (rx_data[1] << 8);
 80019c6:	7b3b      	ldrb	r3, [r7, #12]
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	805a      	strh	r2, [r3, #2]
    
    /* 读取移动标志 */
    uint8_t moving_flag;
    servo_read_reg(servo_id, 0x42, 1, &moving_flag);
 80019dc:	f107 030b 	add.w	r3, r7, #11
 80019e0:	78f8      	ldrb	r0, [r7, #3]
 80019e2:	2201      	movs	r2, #1
 80019e4:	2142      	movs	r1, #66	@ 0x42
 80019e6:	f000 fc36 	bl	8002256 <servo_read_reg>
    
    printf("[DOOR] Initial position: %u (target OPEN=%u, CLOSED=%u)\r\n", 
           door->current_pos, DOOR_POS_OPEN, DOOR_POS_CLOSED);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR] Initial position: %u (target OPEN=%u, CLOSED=%u)\r\n", 
 80019ee:	4619      	mov	r1, r3
 80019f0:	f640 13de 	movw	r3, #2526	@ 0x9de
 80019f4:	2200      	movs	r2, #0
 80019f6:	482d      	ldr	r0, [pc, #180]	@ (8001aac <DoorControl_Init+0x128>)
 80019f8:	f004 f9e4 	bl	8005dc4 <iprintf>
    printf("[DOOR] Moving flag: %u\r\n", moving_flag);
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	4619      	mov	r1, r3
 8001a00:	482b      	ldr	r0, [pc, #172]	@ (8001ab0 <DoorControl_Init+0x12c>)
 8001a02:	f004 f9df 	bl	8005dc4 <iprintf>
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
           abs((int)door->current_pos - DOOR_POS_OPEN),
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
 8001a0a:	4619      	mov	r1, r3
           abs((int)door->current_pos - DOOR_POS_CLOSED));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	885b      	ldrh	r3, [r3, #2]
 8001a10:	f6a3 13de 	subw	r3, r3, #2526	@ 0x9de
    printf("[DOOR] Distance to OPEN: %d, Distance to CLOSED: %d\r\n",
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bfb8      	it	lt
 8001a18:	425b      	neglt	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4825      	ldr	r0, [pc, #148]	@ (8001ab4 <DoorControl_Init+0x130>)
 8001a1e:	f004 f9d1 	bl	8005dc4 <iprintf>
    
    /* 处理位置环绕：4093-4095接近0 */
    if (door->current_pos > 4090) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	885b      	ldrh	r3, [r3, #2]
 8001a26:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d908      	bls.n	8001a40 <DoorControl_Init+0xbc>
        printf("[DOOR] Position wrap-around detected (%u -> 0)\r\n", door->current_pos);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	885b      	ldrh	r3, [r3, #2]
 8001a32:	4619      	mov	r1, r3
 8001a34:	4820      	ldr	r0, [pc, #128]	@ (8001ab8 <DoorControl_Init+0x134>)
 8001a36:	f004 f9c5 	bl	8005dc4 <iprintf>
        door->current_pos = 0;  // 修正为0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	805a      	strh	r2, [r3, #2]
    }
    
    /* 判断初始状态 */
    if (moving_flag) {
 8001a40:	7afb      	ldrb	r3, [r7, #11]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <DoorControl_Init+0xd8>
        /* 正在移动，无法确定方向，默认认为在关门 */
        printf("[DOOR] Motor is moving at startup, assuming closing...\r\n");
 8001a46:	481d      	ldr	r0, [pc, #116]	@ (8001abc <DoorControl_Init+0x138>)
 8001a48:	f004 fa24 	bl	8005e94 <puts>
        door->state = DOOR_STATE_CLOSING;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	705a      	strb	r2, [r3, #1]
        door->target_pos = DOOR_POS_CLOSED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001a58:	809a      	strh	r2, [r3, #4]
 8001a5a:	e00f      	b.n	8001a7c <DoorControl_Init+0xf8>
    } else {
        /* 静止状态，默认认为是关闭的 */
        door->state = DOOR_STATE_CLOSED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	705a      	strb	r2, [r3, #1]
        door->target_pos = DOOR_POS_CLOSED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001a68:	809a      	strh	r2, [r3, #4]
        printf("[DOOR] Motor is stopped, assuming door is closed\r\n");
 8001a6a:	4815      	ldr	r0, [pc, #84]	@ (8001ac0 <DoorControl_Init+0x13c>)
 8001a6c:	f004 fa12 	bl	8005e94 <puts>
        
        /* 为了安全，发送一次关门命令确保门关闭 */
        servo_set_position(servo_id, DOOR_POS_CLOSED);
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fccb 	bl	8002412 <servo_set_position>
    }
    
    door->last_update_time = HAL_GetTick();
 8001a7c:	f001 fdca 	bl	8003614 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	609a      	str	r2, [r3, #8]
    printf("[DOOR] Initial state: %s\r\n", DoorControl_GetStateName(door->state));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	785b      	ldrb	r3, [r3, #1]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fa54 	bl	8001f38 <DoorControl_GetStateName>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <DoorControl_Init+0x140>)
 8001a96:	f004 f995 	bl	8005dc4 <iprintf>
    printf("[DOOR] Initialization complete\r\n");
 8001a9a:	480b      	ldr	r0, [pc, #44]	@ (8001ac8 <DoorControl_Init+0x144>)
 8001a9c:	f004 f9fa 	bl	8005e94 <puts>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	080071c0 	.word	0x080071c0
 8001aac:	080071fc 	.word	0x080071fc
 8001ab0:	08007238 	.word	0x08007238
 8001ab4:	08007254 	.word	0x08007254
 8001ab8:	0800728c 	.word	0x0800728c
 8001abc:	080072c0 	.word	0x080072c0
 8001ac0:	080072f8 	.word	0x080072f8
 8001ac4:	0800732c 	.word	0x0800732c
 8001ac8:	08007348 	.word	0x08007348

08001acc <DoorControl_Open>:

/**
 * @brief 开门命令
 */
void DoorControl_Open(DoorControl_t *door) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    printf("\r\n[DOOR_DEBUG] ===== OPEN COMMAND =====\r\n");
 8001ad4:	4826      	ldr	r0, [pc, #152]	@ (8001b70 <DoorControl_Open+0xa4>)
 8001ad6:	f004 f9dd 	bl	8005e94 <puts>
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	785b      	ldrb	r3, [r3, #1]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fa2a 	bl	8001f38 <DoorControl_GetStateName>
 8001ae4:	4601      	mov	r1, r0
           DoorControl_GetStateName(door->state), door->current_pos);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001aea:	461a      	mov	r2, r3
 8001aec:	4821      	ldr	r0, [pc, #132]	@ (8001b74 <DoorControl_Open+0xa8>)
 8001aee:	f004 f969 	bl	8005dc4 <iprintf>
    
    if (door->state == DOOR_STATE_CLOSED || door->state == DOOR_STATE_CLOSING) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <DoorControl_Open+0x36>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d127      	bne.n	8001b52 <DoorControl_Open+0x86>
        printf("[CMD] Sending OPEN command (target: %u)\r\n", DOOR_POS_OPEN);
 8001b02:	2100      	movs	r1, #0
 8001b04:	481c      	ldr	r0, [pc, #112]	@ (8001b78 <DoorControl_Open+0xac>)
 8001b06:	f004 f95d 	bl	8005dc4 <iprintf>
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
               door->current_pos, DOOR_POS_OPEN, 
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001b0e:	4619      	mov	r1, r3
               (int)DOOR_POS_OPEN - (int)door->current_pos);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001b14:	425b      	negs	r3, r3
 8001b16:	2200      	movs	r2, #0
 8001b18:	4818      	ldr	r0, [pc, #96]	@ (8001b7c <DoorControl_Open+0xb0>)
 8001b1a:	f004 f953 	bl	8005dc4 <iprintf>
        
        /* 添加小延时确保之前的通信完成 */
        HAL_Delay(5);
 8001b1e:	2005      	movs	r0, #5
 8001b20:	f001 fd82 	bl	8003628 <HAL_Delay>
        servo_set_position(door->servo_id, DOOR_POS_OPEN);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fc71 	bl	8002412 <servo_set_position>
        HAL_Delay(5);  /* 给舵机时间处理命令 */
 8001b30:	2005      	movs	r0, #5
 8001b32:	f001 fd79 	bl	8003628 <HAL_Delay>
        
        door->target_pos = DOOR_POS_OPEN;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	809a      	strh	r2, [r3, #4]
        door->state = DOOR_STATE_OPENING;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	705a      	strb	r2, [r3, #1]
        
        printf("[DOOR_DEBUG] State changed to OPENING at tick %lu\r\n", HAL_GetTick());
 8001b42:	f001 fd67 	bl	8003614 <HAL_GetTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <DoorControl_Open+0xb4>)
 8001b4c:	f004 f93a 	bl	8005dc4 <iprintf>
 8001b50:	e00a      	b.n	8001b68 <DoorControl_Open+0x9c>
    } else {
        printf("[CMD] Cannot open - current state: %s\r\n", 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f9ee 	bl	8001f38 <DoorControl_GetStateName>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <DoorControl_Open+0xb8>)
 8001b62:	f004 f92f 	bl	8005dc4 <iprintf>
               DoorControl_GetStateName(door->state));
    }
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08007368 	.word	0x08007368
 8001b74:	08007394 	.word	0x08007394
 8001b78:	080073c8 	.word	0x080073c8
 8001b7c:	080073f4 	.word	0x080073f4
 8001b80:	0800742c 	.word	0x0800742c
 8001b84:	08007460 	.word	0x08007460

08001b88 <DoorControl_Close>:

/**
 * @brief 关门命令
 */
void DoorControl_Close(DoorControl_t *door) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    printf("\r\n[DOOR_DEBUG] ===== CLOSE COMMAND =====\r\n");
 8001b90:	4829      	ldr	r0, [pc, #164]	@ (8001c38 <DoorControl_Close+0xb0>)
 8001b92:	f004 f97f 	bl	8005e94 <puts>
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f9cc 	bl	8001f38 <DoorControl_GetStateName>
 8001ba0:	4601      	mov	r1, r0
           DoorControl_GetStateName(door->state), door->current_pos);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	885b      	ldrh	r3, [r3, #2]
    printf("[DOOR_DEBUG] Current state: %s, Current pos: %u\r\n", 
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4824      	ldr	r0, [pc, #144]	@ (8001c3c <DoorControl_Close+0xb4>)
 8001baa:	f004 f90b 	bl	8005dc4 <iprintf>
    
    if (door->state == DOOR_STATE_OPEN || door->state == DOOR_STATE_OPENING) {
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	785b      	ldrb	r3, [r3, #1]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d003      	beq.n	8001bbe <DoorControl_Close+0x36>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d12d      	bne.n	8001c1a <DoorControl_Close+0x92>
        printf("[CMD] Sending CLOSE command (target: %u)\r\n", DOOR_POS_CLOSED);
 8001bbe:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001bc2:	481f      	ldr	r0, [pc, #124]	@ (8001c40 <DoorControl_Close+0xb8>)
 8001bc4:	f004 f8fe 	bl	8005dc4 <iprintf>
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
               door->current_pos, DOOR_POS_CLOSED, 
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001bcc:	4619      	mov	r1, r3
               (int)DOOR_POS_CLOSED - (int)door->current_pos);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	885b      	ldrh	r3, [r3, #2]
        printf("[DOOR_DEBUG] Position change: %u -> %u (delta: %d)\r\n", 
 8001bd2:	f5c3 631d 	rsb	r3, r3, #2512	@ 0x9d0
 8001bd6:	330e      	adds	r3, #14
 8001bd8:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001bdc:	4819      	ldr	r0, [pc, #100]	@ (8001c44 <DoorControl_Close+0xbc>)
 8001bde:	f004 f8f1 	bl	8005dc4 <iprintf>
        
        /* 添加小延时确保之前的通信完成 */
        HAL_Delay(5);
 8001be2:	2005      	movs	r0, #5
 8001be4:	f001 fd20 	bl	8003628 <HAL_Delay>
        servo_set_position(door->servo_id, DOOR_POS_CLOSED);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	f640 11de 	movw	r1, #2526	@ 0x9de
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fc0e 	bl	8002412 <servo_set_position>
        HAL_Delay(5);  /* 给舵机时间处理命令 */
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f001 fd16 	bl	8003628 <HAL_Delay>
        
        door->target_pos = DOOR_POS_CLOSED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f640 12de 	movw	r2, #2526	@ 0x9de
 8001c02:	809a      	strh	r2, [r3, #4]
        door->state = DOOR_STATE_CLOSING;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	705a      	strb	r2, [r3, #1]
        
        printf("[DOOR_DEBUG] State changed to CLOSING at tick %lu\r\n", HAL_GetTick());
 8001c0a:	f001 fd03 	bl	8003614 <HAL_GetTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4619      	mov	r1, r3
 8001c12:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <DoorControl_Close+0xc0>)
 8001c14:	f004 f8d6 	bl	8005dc4 <iprintf>
 8001c18:	e00a      	b.n	8001c30 <DoorControl_Close+0xa8>
    } else {
        printf("[CMD] Cannot close - current state: %s\r\n", 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	785b      	ldrb	r3, [r3, #1]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f98a 	bl	8001f38 <DoorControl_GetStateName>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4808      	ldr	r0, [pc, #32]	@ (8001c4c <DoorControl_Close+0xc4>)
 8001c2a:	f004 f8cb 	bl	8005dc4 <iprintf>
               DoorControl_GetStateName(door->state));
    }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08007488 	.word	0x08007488
 8001c3c:	08007394 	.word	0x08007394
 8001c40:	080074b4 	.word	0x080074b4
 8001c44:	080073f4 	.word	0x080073f4
 8001c48:	080074e0 	.word	0x080074e0
 8001c4c:	08007514 	.word	0x08007514

08001c50 <DoorControl_Update>:

/**
 * @brief 更新门控状态（核心状态机 - 使用移动标志）
 */
void DoorControl_Update(DoorControl_t *door) {
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	b08f      	sub	sp, #60	@ 0x3c
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	6078      	str	r0, [r7, #4]
    update_count++;
 8001c58:	4ba3      	ldr	r3, [pc, #652]	@ (8001ee8 <DoorControl_Update+0x298>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4aa2      	ldr	r2, [pc, #648]	@ (8001ee8 <DoorControl_Update+0x298>)
 8001c60:	6013      	str	r3, [r2, #0]
    
    /* 读取当前位置 - 带重试和验证 */
    uint8_t rx_data[2];
    uint16_t new_pos = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	84fb      	strh	r3, [r7, #38]	@ 0x26
    bool pos_valid = false;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    
    for (int retry = 0; retry < 3; retry++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	e021      	b.n	8001cb6 <DoorControl_Update+0x66>
        if (servo_read_reg(door->servo_id, 0x38, 2, rx_data) == 1) {  /* 返回1表示成功 */
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7818      	ldrb	r0, [r3, #0]
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	2138      	movs	r1, #56	@ 0x38
 8001c7e:	f000 faea 	bl	8002256 <servo_read_reg>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d110      	bne.n	8001caa <DoorControl_Update+0x5a>
            new_pos = rx_data[0] | (rx_data[1] << 8);
 8001c88:	7b3b      	ldrb	r3, [r7, #12]
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	84fb      	strh	r3, [r7, #38]	@ 0x26
            
            /* 验证位置值是否合理（0-4095范围） */
            if (new_pos <= 4095) {
 8001c9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca0:	d203      	bcs.n	8001caa <DoorControl_Update+0x5a>
                pos_valid = true;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                break;
 8001ca8:	e008      	b.n	8001cbc <DoorControl_Update+0x6c>
            }
        }
        HAL_Delay(2);  /* 短暂延时后重试 */
 8001caa:	2002      	movs	r0, #2
 8001cac:	f001 fcbc 	bl	8003628 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	ddda      	ble.n	8001c72 <DoorControl_Update+0x22>
    }
    
    uint16_t old_pos = door->current_pos;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	885b      	ldrh	r3, [r3, #2]
 8001cc0:	82fb      	strh	r3, [r7, #22]
    if (pos_valid) {
 8001cc2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <DoorControl_Update+0x94>
        door->current_pos = new_pos;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001cce:	805a      	strh	r2, [r3, #2]
        
        /* 处理位置环绕 */
        if (door->current_pos > 4090) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	885b      	ldrh	r3, [r3, #2]
 8001cd4:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d908      	bls.n	8001cee <DoorControl_Update+0x9e>
            door->current_pos = 0;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	805a      	strh	r2, [r3, #2]
 8001ce2:	e004      	b.n	8001cee <DoorControl_Update+0x9e>
        }
    } else {
        printf("[DOOR] Warning: Failed to read position, keeping old value %u\r\n", old_pos);
 8001ce4:	8afb      	ldrh	r3, [r7, #22]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4880      	ldr	r0, [pc, #512]	@ (8001eec <DoorControl_Update+0x29c>)
 8001cea:	f004 f86b 	bl	8005dc4 <iprintf>
    }
    
    /* 读取移动标志 - 带重试和验证 */
    uint8_t moving_flag = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	77fb      	strb	r3, [r7, #31]
    bool flag_valid = false;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	77bb      	strb	r3, [r7, #30]
    
    for (int retry = 0; retry < 3; retry++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	e029      	b.n	8001d50 <DoorControl_Update+0x100>
        uint8_t temp_flag;
        if (servo_read_reg(door->servo_id, 0x42, 1, &temp_flag) == 1) {  /* 返回1表示成功 */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7818      	ldrb	r0, [r3, #0]
 8001d00:	f107 030b 	add.w	r3, r7, #11
 8001d04:	2201      	movs	r2, #1
 8001d06:	2142      	movs	r1, #66	@ 0x42
 8001d08:	f000 faa5 	bl	8002256 <servo_read_reg>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d118      	bne.n	8001d44 <DoorControl_Update+0xf4>
            /* 验证标志值（应该是0或1） */
            if (temp_flag <= 1) {
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d804      	bhi.n	8001d22 <DoorControl_Update+0xd2>
                moving_flag = temp_flag;
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	77fb      	strb	r3, [r7, #31]
                flag_valid = true;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	77bb      	strb	r3, [r7, #30]
                break;
 8001d20:	e019      	b.n	8001d56 <DoorControl_Update+0x106>
            } else if (temp_flag & 0x01) {
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <DoorControl_Update+0xf4>
                /* 如果是其他位被设置，只看最低位 */
                moving_flag = 1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
                flag_valid = true;
 8001d30:	2301      	movs	r3, #1
 8001d32:	77bb      	strb	r3, [r7, #30]
                printf("[DOOR] Moving flag raw value: 0x%02X, using bit 0: %d\r\n", temp_flag, moving_flag);
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	4619      	mov	r1, r3
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	486c      	ldr	r0, [pc, #432]	@ (8001ef0 <DoorControl_Update+0x2a0>)
 8001d3e:	f004 f841 	bl	8005dc4 <iprintf>
                break;
 8001d42:	e008      	b.n	8001d56 <DoorControl_Update+0x106>
            }
        }
        HAL_Delay(2);  /* 短暂延时后重试 */
 8001d44:	2002      	movs	r0, #2
 8001d46:	f001 fc6f 	bl	8003628 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	ddd2      	ble.n	8001cfc <DoorControl_Update+0xac>
    }
    
    if (!flag_valid) {
 8001d56:	7fbb      	ldrb	r3, [r7, #30]
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <DoorControl_Update+0x11c>
        printf("[DOOR] Warning: Failed to read moving flag, assuming stopped\r\n");
 8001d62:	4864      	ldr	r0, [pc, #400]	@ (8001ef4 <DoorControl_Update+0x2a4>)
 8001d64:	f004 f896 	bl	8005e94 <puts>
        moving_flag = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
    }
    
    /* 调试输出 - 每500ms或状态变化时 */
    static uint32_t last_debug_time = 0;
    static uint8_t last_moving_flag = 0xFF;
    uint32_t now = HAL_GetTick();
 8001d6c:	f001 fc52 	bl	8003614 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]
    
    if ((now - last_debug_time >= 500) || 
 8001d72:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <DoorControl_Update+0x2a8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d7e:	d20e      	bcs.n	8001d9e <DoorControl_Update+0x14e>
        (moving_flag != last_moving_flag) ||
 8001d80:	4b5e      	ldr	r3, [pc, #376]	@ (8001efc <DoorControl_Update+0x2ac>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
    if ((now - last_debug_time >= 500) || 
 8001d84:	7ffa      	ldrb	r2, [r7, #31]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d109      	bne.n	8001d9e <DoorControl_Update+0x14e>
        (abs((int)door->current_pos - (int)old_pos) > 100)) {
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	885b      	ldrh	r3, [r3, #2]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	8afb      	ldrh	r3, [r7, #22]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bfb8      	it	lt
 8001d98:	425b      	neglt	r3, r3
        (moving_flag != last_moving_flag) ||
 8001d9a:	2b64      	cmp	r3, #100	@ 0x64
 8001d9c:	dd20      	ble.n	8001de0 <DoorControl_Update+0x190>
        
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f8c8 	bl	8001f38 <DoorControl_GetStateName>
 8001da8:	4601      	mov	r1, r0
               now, DoorControl_GetStateName(door->state),
               door->current_pos, door->target_pos, 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	885b      	ldrh	r3, [r3, #2]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001dae:	461d      	mov	r5, r3
               door->current_pos, door->target_pos, 
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	889b      	ldrh	r3, [r3, #4]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001db4:	4618      	mov	r0, r3
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
               moving_flag, (int)door->current_pos - (int)old_pos);
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	8852      	ldrh	r2, [r2, #2]
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	8afa      	ldrh	r2, [r7, #22]
        printf("[UPDATE] T=%lu, State=%s, Pos=%u, Target=%u, Moving=%d, dPos=%d\r\n",
 8001dc0:	1aa2      	subs	r2, r4, r2
 8001dc2:	9202      	str	r2, [sp, #8]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	9000      	str	r0, [sp, #0]
 8001dc8:	462b      	mov	r3, r5
 8001dca:	460a      	mov	r2, r1
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	484c      	ldr	r0, [pc, #304]	@ (8001f00 <DoorControl_Update+0x2b0>)
 8001dd0:	f003 fff8 	bl	8005dc4 <iprintf>
        
        last_debug_time = now;
 8001dd4:	4a48      	ldr	r2, [pc, #288]	@ (8001ef8 <DoorControl_Update+0x2a8>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6013      	str	r3, [r2, #0]
        last_moving_flag = moving_flag;
 8001dda:	4a48      	ldr	r2, [pc, #288]	@ (8001efc <DoorControl_Update+0x2ac>)
 8001ddc:	7ffb      	ldrb	r3, [r7, #31]
 8001dde:	7013      	strb	r3, [r2, #0]
    }
    
    /* 保存旧状态 */
    DoorState_t old_state = door->state;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	73fb      	strb	r3, [r7, #15]
    
    /* 状态机逻辑 */
    switch (door->state) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d85d      	bhi.n	8001eaa <DoorControl_Update+0x25a>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <DoorControl_Update+0x1a4>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001eab 	.word	0x08001eab
 8001df8:	08001e05 	.word	0x08001e05
 8001dfc:	08001eab 	.word	0x08001eab
 8001e00:	08001e55 	.word	0x08001e55
            // 命令在外部发送
            break;
            
        case DOOR_STATE_OPENING:
            /* 正在开门 - 检查是否停止 */
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e04:	7ffc      	ldrb	r4, [r7, #31]
                   moving_flag, door->current_pos, door->target_pos,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	885b      	ldrh	r3, [r3, #2]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e0a:	461d      	mov	r5, r3
                   moving_flag, door->current_pos, door->target_pos,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	889b      	ldrh	r3, [r3, #4]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e10:	461e      	mov	r6, r3
                   HAL_GetTick() - door->last_update_time);
 8001e12:	f001 fbff 	bl	8003614 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
            printf("[OPENING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4633      	mov	r3, r6
 8001e22:	462a      	mov	r2, r5
 8001e24:	4621      	mov	r1, r4
 8001e26:	4837      	ldr	r0, [pc, #220]	@ (8001f04 <DoorControl_Update+0x2b4>)
 8001e28:	f003 ffcc 	bl	8005dc4 <iprintf>
            
            if (!moving_flag) {
 8001e2c:	7ffb      	ldrb	r3, [r7, #31]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d138      	bne.n	8001ea4 <DoorControl_Update+0x254>
                /* 舵机停止了，假设门已开 */
                door->state = DOOR_STATE_OPEN;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	705a      	strb	r2, [r3, #1]
                printf("[STATE] OPENING -> OPEN (motor stopped at pos %u)\r\n", door->current_pos);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4832      	ldr	r0, [pc, #200]	@ (8001f08 <DoorControl_Update+0x2b8>)
 8001e40:	f003 ffc0 	bl	8005dc4 <iprintf>
                printf("[DOOR_DEBUG] Door OPEN detected at tick %lu\r\n", HAL_GetTick());
 8001e44:	f001 fbe6 	bl	8003614 <HAL_GetTick>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	482f      	ldr	r0, [pc, #188]	@ (8001f0c <DoorControl_Update+0x2bc>)
 8001e4e:	f003 ffb9 	bl	8005dc4 <iprintf>
            }
            break;
 8001e52:	e027      	b.n	8001ea4 <DoorControl_Update+0x254>
            // 命令在外部发送
            break;
            
        case DOOR_STATE_CLOSING:
            /* 正在关门 - 检查是否停止 */
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e54:	7ffc      	ldrb	r4, [r7, #31]
                   moving_flag, door->current_pos, door->target_pos,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	885b      	ldrh	r3, [r3, #2]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e5a:	461d      	mov	r5, r3
                   moving_flag, door->current_pos, door->target_pos,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	889b      	ldrh	r3, [r3, #4]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e60:	461e      	mov	r6, r3
                   HAL_GetTick() - door->last_update_time);
 8001e62:	f001 fbd7 	bl	8003614 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
            printf("[CLOSING_CHECK] Moving=%d, Pos=%u, Target=%u, Time since cmd=%lu ms\r\n",
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4633      	mov	r3, r6
 8001e72:	462a      	mov	r2, r5
 8001e74:	4621      	mov	r1, r4
 8001e76:	4826      	ldr	r0, [pc, #152]	@ (8001f10 <DoorControl_Update+0x2c0>)
 8001e78:	f003 ffa4 	bl	8005dc4 <iprintf>
            
            if (!moving_flag) {
 8001e7c:	7ffb      	ldrb	r3, [r7, #31]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d112      	bne.n	8001ea8 <DoorControl_Update+0x258>
                /* 舵机停止了，假设门已关 */
                door->state = DOOR_STATE_CLOSED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	705a      	strb	r2, [r3, #1]
                printf("[STATE] CLOSING -> CLOSED (motor stopped at pos %u)\r\n", door->current_pos);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	885b      	ldrh	r3, [r3, #2]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4821      	ldr	r0, [pc, #132]	@ (8001f14 <DoorControl_Update+0x2c4>)
 8001e90:	f003 ff98 	bl	8005dc4 <iprintf>
                printf("[DOOR_DEBUG] Door CLOSED detected at tick %lu\r\n", HAL_GetTick());
 8001e94:	f001 fbbe 	bl	8003614 <HAL_GetTick>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	481e      	ldr	r0, [pc, #120]	@ (8001f18 <DoorControl_Update+0x2c8>)
 8001e9e:	f003 ff91 	bl	8005dc4 <iprintf>
            }
            break;
 8001ea2:	e001      	b.n	8001ea8 <DoorControl_Update+0x258>
            break;
 8001ea4:	bf00      	nop
 8001ea6:	e000      	b.n	8001eaa <DoorControl_Update+0x25a>
            break;
 8001ea8:	bf00      	nop
    }
    
    /* 状态变化时输出 */
    if (door->state != old_state) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d00f      	beq.n	8001ed4 <DoorControl_Update+0x284>
        printf("\r\n[TRANSITION] %s -> %s\r\n", 
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f83e 	bl	8001f38 <DoorControl_GetStateName>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f838 	bl	8001f38 <DoorControl_GetStateName>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4621      	mov	r1, r4
 8001ece:	4813      	ldr	r0, [pc, #76]	@ (8001f1c <DoorControl_Update+0x2cc>)
 8001ed0:	f003 ff78 	bl	8005dc4 <iprintf>
               DoorControl_GetStateName(old_state),
               DoorControl_GetStateName(door->state));
    }
    
    door->last_update_time = HAL_GetTick();
 8001ed4:	f001 fb9e 	bl	8003614 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]
}
 8001ede:	bf00      	nop
 8001ee0:	372c      	adds	r7, #44	@ 0x2c
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200006ec 	.word	0x200006ec
 8001eec:	08007540 	.word	0x08007540
 8001ef0:	08007580 	.word	0x08007580
 8001ef4:	080075b8 	.word	0x080075b8
 8001ef8:	200006f0 	.word	0x200006f0
 8001efc:	20000000 	.word	0x20000000
 8001f00:	080075f8 	.word	0x080075f8
 8001f04:	0800763c 	.word	0x0800763c
 8001f08:	08007684 	.word	0x08007684
 8001f0c:	080076b8 	.word	0x080076b8
 8001f10:	080076e8 	.word	0x080076e8
 8001f14:	08007730 	.word	0x08007730
 8001f18:	08007768 	.word	0x08007768
 8001f1c:	08007798 	.word	0x08007798

08001f20 <DoorControl_GetState>:

/**
 * @brief 获取当前状态
 */
DoorState_t DoorControl_GetState(DoorControl_t *door) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    return door->state;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <DoorControl_GetStateName>:

/**
 * @brief 获取状态名称字符串
 */
const char* DoorControl_GetStateName(DoorState_t state) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d813      	bhi.n	8001f70 <DoorControl_GetStateName+0x38>
 8001f48:	a201      	add	r2, pc, #4	@ (adr r2, 8001f50 <DoorControl_GetStateName+0x18>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f69 	.word	0x08001f69
 8001f5c:	08001f6d 	.word	0x08001f6d
        case DOOR_STATE_CLOSED:  return "CLOSED";
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <DoorControl_GetStateName+0x44>)
 8001f62:	e006      	b.n	8001f72 <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_OPENING: return "OPENING";
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <DoorControl_GetStateName+0x48>)
 8001f66:	e004      	b.n	8001f72 <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_OPEN:    return "OPEN";
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <DoorControl_GetStateName+0x4c>)
 8001f6a:	e002      	b.n	8001f72 <DoorControl_GetStateName+0x3a>
        case DOOR_STATE_CLOSING: return "CLOSING";
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <DoorControl_GetStateName+0x50>)
 8001f6e:	e000      	b.n	8001f72 <DoorControl_GetStateName+0x3a>
        default: return "UNKNOWN";
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <DoorControl_GetStateName+0x54>)
    }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	080077b4 	.word	0x080077b4
 8001f80:	080077bc 	.word	0x080077bc
 8001f84:	080077c4 	.word	0x080077c4
 8001f88:	080077cc 	.word	0x080077cc
 8001f8c:	080077d4 	.word	0x080077d4

08001f90 <calculate_checksum>:
#include <stdio.h>   // 用于printf调试

static UART_HandleTypeDef *servo_uart;  // USART句柄

// 函数：计算校验和
static uint8_t calculate_checksum(uint8_t *packet, uint8_t len) {
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	73bb      	strb	r3, [r7, #14]
 8001fa4:	e009      	b.n	8001fba <calculate_checksum+0x2a>
        sum += packet[i];
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	73bb      	strb	r3, [r7, #14]
 8001fba:	7bba      	ldrb	r2, [r7, #14]
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf0      	blt.n	8001fa6 <calculate_checksum+0x16>
    }
    return ~sum;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <send_packet>:

// 函数：发送包
static void send_packet(uint8_t *packet, uint8_t len) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(servo_uart, packet, len, HAL_MAX_DELAY);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <send_packet+0x28>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	f002 fd1b 	bl	8004a28 <HAL_UART_Transmit>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200006f4 	.word	0x200006f4

08002000 <receive_packet>:

// 函数：接收包（简单阻塞式，假设响应快速；实际可加超时/DMA）
static HAL_StatusTypeDef receive_packet(uint8_t *rx_packet, uint8_t expected_len) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Receive(servo_uart, rx_packet, expected_len, 100);  // 返回状态，超时100ms
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <receive_packet+0x28>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2364      	movs	r3, #100	@ 0x64
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f002 fd91 	bl	8004b3e <HAL_UART_Receive>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200006f4 	.word	0x200006f4

0800202c <servo_init>:

// 初始化（默认波特率1M，无需设置寄存器0x06，因为初始值0=1M）
void servo_init(UART_HandleTypeDef *huart) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
    servo_uart = huart;
 8002034:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <servo_init+0x28>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
    // 可在此PING舵机确认连接
    servo_ping(SERVO_DEFAULT_ID);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 f80c 	bl	8002058 <servo_ping>
    
    // 设置默认最大速度
    servo_set_speed(SERVO_DEFAULT_ID, 4095);  // 最大速度
 8002040:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8002044:	2001      	movs	r0, #1
 8002046:	f000 f9c8 	bl	80023da <servo_set_speed>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200006f4 	.word	0x200006f4

08002058 <servo_ping>:

// PING
uint8_t servo_ping(uint8_t id) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
    uint8_t packet[6] = {0xFF, 0xFF, id, 0x02, SERVO_INST_PING, 0x00};
 8002062:	23ff      	movs	r3, #255	@ 0xff
 8002064:	743b      	strb	r3, [r7, #16]
 8002066:	23ff      	movs	r3, #255	@ 0xff
 8002068:	747b      	strb	r3, [r7, #17]
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	74bb      	strb	r3, [r7, #18]
 800206e:	2302      	movs	r3, #2
 8002070:	74fb      	strb	r3, [r7, #19]
 8002072:	2301      	movs	r3, #1
 8002074:	753b      	strb	r3, [r7, #20]
 8002076:	2300      	movs	r3, #0
 8002078:	757b      	strb	r3, [r7, #21]
    packet[5] = calculate_checksum(packet, 6);
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	2106      	movs	r1, #6
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff85 	bl	8001f90 <calculate_checksum>
 8002086:	4603      	mov	r3, r0
 8002088:	757b      	strb	r3, [r7, #21]
    send_packet(packet, 6);
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	2106      	movs	r1, #6
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff9f 	bl	8001fd4 <send_packet>

    uint8_t rx_packet[6];
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2106      	movs	r1, #6
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ffaf 	bl	8002000 <receive_packet>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d111      	bne.n	80020cc <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80020a8:	7a3b      	ldrb	r3, [r7, #8]
    if (receive_packet(rx_packet, 6) == HAL_OK &&
 80020aa:	2bff      	cmp	r3, #255	@ 0xff
 80020ac:	d10e      	bne.n	80020cc <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80020ae:	7a7b      	ldrb	r3, [r7, #9]
 80020b0:	2bff      	cmp	r3, #255	@ 0xff
 80020b2:	d10b      	bne.n	80020cc <servo_ping+0x74>
 80020b4:	7abb      	ldrb	r3, [r7, #10]
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d107      	bne.n	80020cc <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 80020bc:	7afb      	ldrb	r3, [r7, #11]
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d104      	bne.n	80020cc <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 80020c2:	7b3b      	ldrb	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <servo_ping+0x74>
        return 1;  // 成功
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <servo_ping+0x76>
    }
    return 0;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <servo_write_reg>:

// 写寄存器（低字节在前）
void servo_write_reg(uint8_t id, uint8_t reg_addr, uint8_t *data, uint8_t data_len) {
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b0c7      	sub	sp, #284	@ 0x11c
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4604      	mov	r4, r0
 80020de:	4608      	mov	r0, r1
 80020e0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80020e4:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 80020e8:	600a      	str	r2, [r1, #0]
 80020ea:	4619      	mov	r1, r3
 80020ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020f0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80020f4:	4622      	mov	r2, r4
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020fc:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002100:	4602      	mov	r2, r0
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002108:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800210c:	460a      	mov	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
    uint8_t packet[256];
    uint8_t idx = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx++] = 0xFF;
 8002116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002120:	461a      	mov	r2, r3
 8002122:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800212a:	21ff      	movs	r1, #255	@ 0xff
 800212c:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0xFF;
 800212e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002138:	461a      	mov	r2, r3
 800213a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800213e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002142:	21ff      	movs	r1, #255	@ 0xff
 8002144:	5499      	strb	r1, [r3, r2]
    packet[idx++] = id;
 8002146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002150:	4619      	mov	r1, r3
 8002152:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800215a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800215e:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	545a      	strb	r2, [r3, r1]
    packet[idx++] = data_len + 3;  // Length = Instr + Addr + Data
 8002166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002170:	461a      	mov	r2, r3
 8002172:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002176:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3303      	adds	r3, #3
 800217e:	b2d9      	uxtb	r1, r3
 8002180:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002188:	5499      	strb	r1, [r3, r2]
    packet[idx++] = SERVO_INST_WRITE;
 800218a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8002194:	461a      	mov	r2, r3
 8002196:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800219a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800219e:	2103      	movs	r1, #3
 80021a0:	5499      	strb	r1, [r3, r2]
    packet[idx++] = reg_addr;
 80021a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80021ac:	4619      	mov	r1, r3
 80021ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021b6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80021ba:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	545a      	strb	r2, [r3, r1]
    memcpy(&packet[idx], data, data_len);
 80021c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80021c6:	f107 0214 	add.w	r2, r7, #20
 80021ca:	18d0      	adds	r0, r2, r3
 80021cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021d0:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	f003 ffd5 	bl	800618e <memcpy>
    idx += data_len;
 80021e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021e8:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80021ec:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx] = calculate_checksum(packet, idx + 1);
 80021f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80021fc:	3301      	adds	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	f897 4117 	ldrb.w	r4, [r7, #279]	@ 0x117
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fec0 	bl	8001f90 <calculate_checksum>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800221c:	551a      	strb	r2, [r3, r4]
    send_packet(packet, idx + 1);
 800221e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002222:	3301      	adds	r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fed1 	bl	8001fd4 <send_packet>

    // 忽略响应（若非广播），实际可检查
    if (id != SERVO_BROADCAST_ID) {
 8002232:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002236:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2bfe      	cmp	r3, #254	@ 0xfe
 800223e:	d005      	beq.n	800224c <servo_write_reg+0x176>
        uint8_t rx_packet[6];
        receive_packet(rx_packet, 6);  // 预期响应Length=2, Error+Checksum
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	2106      	movs	r1, #6
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff feda 	bl	8002000 <receive_packet>
    }
}
 800224c:	bf00      	nop
 800224e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}

08002256 <servo_read_reg>:

// 读寄存器  
uint8_t servo_read_reg(uint8_t id, uint8_t reg_addr, uint8_t data_len, uint8_t *rx_data) {
 8002256:	b590      	push	{r4, r7, lr}
 8002258:	b0c7      	sub	sp, #284	@ 0x11c
 800225a:	af00      	add	r7, sp, #0
 800225c:	4604      	mov	r4, r0
 800225e:	4608      	mov	r0, r1
 8002260:	4611      	mov	r1, r2
 8002262:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002266:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002270:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002274:	4622      	mov	r2, r4
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800227c:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002280:	4602      	mov	r2, r0
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002288:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800228c:	460a      	mov	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]
    uint8_t packet[8] = {0xFF, 0xFF, id, 0x04, SERVO_INST_READ, reg_addr, data_len, 0x00};
 8002290:	23ff      	movs	r3, #255	@ 0xff
 8002292:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002296:	23ff      	movs	r3, #255	@ 0xff
 8002298:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800229c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022a0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80022aa:	2304      	movs	r3, #4
 80022ac:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80022b0:	2302      	movs	r3, #2
 80022b2:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
 80022b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ba:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
 80022c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022c8:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    packet[7] = calculate_checksum(packet, 8);
 80022d8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80022dc:	2108      	movs	r1, #8
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe56 	bl	8001f90 <calculate_checksum>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    send_packet(packet, 8);
 80022ea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80022ee:	2108      	movs	r1, #8
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fe6f 	bl	8001fd4 <send_packet>

    uint8_t expected_len = data_len + 6;  // FF FF ID Len Error Params... Checksum
 80022f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022fa:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3306      	adds	r3, #6
 8002302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t rx_packet[256];
    
    HAL_StatusTypeDef status = receive_packet(rx_packet, expected_len);
 8002306:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fe75 	bl	8002000 <receive_packet>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    if (status == HAL_OK) {
 800231c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002320:	2b00      	cmp	r3, #0
 8002322:	d13f      	bne.n	80023a4 <servo_read_reg+0x14e>
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8002324:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002328:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2bff      	cmp	r3, #255	@ 0xff
 8002330:	d138      	bne.n	80023a4 <servo_read_reg+0x14e>
 8002332:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002336:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	2bff      	cmp	r3, #255	@ 0xff
 800233e:	d131      	bne.n	80023a4 <servo_read_reg+0x14e>
 8002340:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002344:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002348:	789b      	ldrb	r3, [r3, #2]
 800234a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800234e:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d125      	bne.n	80023a4 <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 8002358:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800235c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002360:	78db      	ldrb	r3, [r3, #3]
 8002362:	461a      	mov	r2, r3
 8002364:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002368:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	3302      	adds	r3, #2
        if (rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8002370:	429a      	cmp	r2, r3
 8002372:	d117      	bne.n	80023a4 <servo_read_reg+0x14e>
            rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 8002374:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002378:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d110      	bne.n	80023a4 <servo_read_reg+0x14e>
            memcpy(rx_data, &rx_packet[5], data_len);
 8002382:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002386:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	1d59      	adds	r1, r3, #5
 8002392:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002396:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	f003 fef7 	bl	800618e <memcpy>
            return 1;  // 成功
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <servo_read_reg+0x150>
        }
    }
    return 0;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <servo_set_torque_enable>:

// 扭矩开关
void servo_set_torque_enable(uint8_t id, uint8_t enable) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	460a      	mov	r2, r1
 80023ba:	71fb      	strb	r3, [r7, #7]
 80023bc:	4613      	mov	r3, r2
 80023be:	71bb      	strb	r3, [r7, #6]
    uint8_t data = enable;
 80023c0:	79bb      	ldrb	r3, [r7, #6]
 80023c2:	73fb      	strb	r3, [r7, #15]
    servo_write_reg(id, SERVO_REG_TORQUE_ENABLE, &data, 1);
 80023c4:	f107 020f 	add.w	r2, r7, #15
 80023c8:	79f8      	ldrb	r0, [r7, #7]
 80023ca:	2301      	movs	r3, #1
 80023cc:	2128      	movs	r1, #40	@ 0x28
 80023ce:	f7ff fe82 	bl	80020d6 <servo_write_reg>
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <servo_set_speed>:

// 设置速度 (2字节，低在前)
void servo_set_speed(uint8_t id, int16_t speed) {
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	460a      	mov	r2, r1
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = speed & 0xFF;  // 低
 80023ea:	88bb      	ldrh	r3, [r7, #4]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	733b      	strb	r3, [r7, #12]
    data[1] = (speed >> 8) & 0xFF;  // 高
 80023f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023f4:	121b      	asrs	r3, r3, #8
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_SPEED, data, 2);
 80023fc:	f107 020c 	add.w	r2, r7, #12
 8002400:	79f8      	ldrb	r0, [r7, #7]
 8002402:	2302      	movs	r3, #2
 8002404:	212e      	movs	r1, #46	@ 0x2e
 8002406:	f7ff fe66 	bl	80020d6 <servo_write_reg>
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <servo_set_position>:

// 设置位置 (2字节，低在前)
void servo_set_position(uint8_t id, int16_t position) {
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	460a      	mov	r2, r1
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	4613      	mov	r3, r2
 8002420:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = position & 0xFF;
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	733b      	strb	r3, [r7, #12]
    data[1] = (position >> 8) & 0xFF;
 8002428:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800242c:	121b      	asrs	r3, r3, #8
 800242e:	b21b      	sxth	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_TARGET_POS, data, 2);
 8002434:	f107 020c 	add.w	r2, r7, #12
 8002438:	79f8      	ldrb	r0, [r7, #7]
 800243a:	2302      	movs	r3, #2
 800243c:	212a      	movs	r1, #42	@ 0x2a
 800243e:	f7ff fe4a 	bl	80020d6 <servo_write_reg>
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <MX_DMA_Init+0x48>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4a0f      	ldr	r2, [pc, #60]	@ (8002494 <MX_DMA_Init+0x48>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6153      	str	r3, [r2, #20]
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <MX_DMA_Init+0x48>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	2010      	movs	r0, #16
 8002470:	f001 f9d5 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002474:	2010      	movs	r0, #16
 8002476:	f001 f9ee 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	2011      	movs	r0, #17
 8002480:	f001 f9cd 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002484:	2011      	movs	r0, #17
 8002486:	f001 f9e6 	bl	8003856 <HAL_NVIC_EnableIRQ>

}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000

08002498 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ac:	4b38      	ldr	r3, [pc, #224]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a37      	ldr	r2, [pc, #220]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024b2:	f043 0320 	orr.w	r3, r3, #32
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b35      	ldr	r3, [pc, #212]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	4b32      	ldr	r3, [pc, #200]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a31      	ldr	r2, [pc, #196]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	6193      	str	r3, [r2, #24]
 80024e8:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <MX_GPIO_Init+0xf8>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2102      	movs	r1, #2
 80024f8:	4826      	ldr	r0, [pc, #152]	@ (8002594 <MX_GPIO_Init+0xfc>)
 80024fa:	f001 fe04 	bl	8004106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	f241 1130 	movw	r1, #4400	@ 0x1130
 8002504:	4823      	ldr	r0, [pc, #140]	@ (8002594 <MX_GPIO_Init+0xfc>)
 8002506:	f001 fdfe 	bl	8004106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800250a:	2302      	movs	r3, #2
 800250c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250e:	2301      	movs	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2302      	movs	r3, #2
 8002518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4619      	mov	r1, r3
 8002520:	481c      	ldr	r0, [pc, #112]	@ (8002594 <MX_GPIO_Init+0xfc>)
 8002522:	f001 fc55 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA12 (Keyboard columns - output) */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_12;
 8002526:	f241 1330 	movw	r3, #4400	@ 0x1130
 800252a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2302      	movs	r3, #2
 8002536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4619      	mov	r1, r3
 800253e:	4815      	ldr	r0, [pc, #84]	@ (8002594 <MX_GPIO_Init+0xfc>)
 8002540:	f001 fc46 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 (Keyboard row r4 - input with interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002544:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <MX_GPIO_Init+0x100>)
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254e:	2301      	movs	r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4619      	mov	r1, r3
 8002558:	480e      	ldr	r0, [pc, #56]	@ (8002594 <MX_GPIO_Init+0xfc>)
 800255a:	f001 fc39 	bl	8003dd0 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2102      	movs	r1, #2
 8002562:	2028      	movs	r0, #40	@ 0x28
 8002564:	f001 f95b 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002568:	2028      	movs	r0, #40	@ 0x28
 800256a:	f001 f974 	bl	8003856 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800256e:	2301      	movs	r3, #1
 8002570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2302      	movs	r3, #2
 8002578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	4619      	mov	r1, r3
 8002580:	4806      	ldr	r0, [pc, #24]	@ (800259c <MX_GPIO_Init+0x104>)
 8002582:	f001 fc25 	bl	8003dd0 <HAL_GPIO_Init>
  
  /* PB5 is configured by PhotoSensor_Init() as input with interrupt */

}
 8002586:	bf00      	nop
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40010800 	.word	0x40010800
 8002598:	10210000 	.word	0x10210000
 800259c:	40010c00 	.word	0x40010c00

080025a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b08b      	sub	sp, #44	@ 0x2c
 80025a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a6:	f000 ffdd 	bl	8003564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025aa:	f000 f9a7 	bl	80028fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ae:	f7ff ff73 	bl	8002498 <MX_GPIO_Init>
  MX_DMA_Init();
 80025b2:	f7ff ff4b 	bl	800244c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80025b6:	f000 fe51 	bl	800325c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80025ba:	f000 fdfb 	bl	80031b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025be:	f000 fe23 	bl	8003208 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  printf("\r\n=== SLAVE MCU - ELEVATOR CONTROL SYSTEM ===\r\n");
 80025c2:	48a1      	ldr	r0, [pc, #644]	@ (8002848 <main+0x2a8>)
 80025c4:	f003 fc66 	bl	8005e94 <puts>
  printf("Full Control with Door Module Enabled\r\n");
 80025c8:	48a0      	ldr	r0, [pc, #640]	@ (800284c <main+0x2ac>)
 80025ca:	f003 fc63 	bl	8005e94 <puts>
  printf("Features: Cabin Calls + Photo Sensor + RS485 + Door Control\r\n\r\n");
 80025ce:	48a0      	ldr	r0, [pc, #640]	@ (8002850 <main+0x2b0>)
 80025d0:	f003 fc60 	bl	8005e94 <puts>
  
  /* 初始化RS485通信 */
  rs485_init();
 80025d4:	f7fe fce4 	bl	8000fa0 <rs485_init>
  printf("[RS485] Initialized on USART2\r\n");
 80025d8:	489e      	ldr	r0, [pc, #632]	@ (8002854 <main+0x2b4>)
 80025da:	f003 fc5b 	bl	8005e94 <puts>
  
  /* 初始化键盘 - 中断模式 */
  Keyboard_Init();
 80025de:	f7fe ff11 	bl	8001404 <Keyboard_Init>
  printf("[KEYBOARD] Initialized (PA11 EXTI)\r\n");
 80025e2:	489d      	ldr	r0, [pc, #628]	@ (8002858 <main+0x2b8>)
 80025e4:	f003 fc56 	bl	8005e94 <puts>
  printf("  S16 (PA4)  -> Floor 1 (Cabin Call)\r\n");
 80025e8:	489c      	ldr	r0, [pc, #624]	@ (800285c <main+0x2bc>)
 80025ea:	f003 fc53 	bl	8005e94 <puts>
  printf("  S15 (PA8)  -> Floor 2 (Cabin Call)\r\n");
 80025ee:	489c      	ldr	r0, [pc, #624]	@ (8002860 <main+0x2c0>)
 80025f0:	f003 fc50 	bl	8005e94 <puts>
  printf("  S14 (PA5)  -> Floor 3 (Cabin Call)\r\n");
 80025f4:	489b      	ldr	r0, [pc, #620]	@ (8002864 <main+0x2c4>)
 80025f6:	f003 fc4d 	bl	8005e94 <puts>
  printf("  S13 (PA12) -> Not Used\r\n\r\n");
 80025fa:	489b      	ldr	r0, [pc, #620]	@ (8002868 <main+0x2c8>)
 80025fc:	f003 fc4a 	bl	8005e94 <puts>
  
  /* 初始化光电传感器 - 中断模式 */
  PhotoSensor_Init();
 8002600:	f7ff f94e 	bl	80018a0 <PhotoSensor_Init>
  photo_sensor_state_t initial_state = PhotoSensor_GetState();
 8002604:	f7ff f98a 	bl	800191c <PhotoSensor_GetState>
 8002608:	4603      	mov	r3, r0
 800260a:	74fb      	strb	r3, [r7, #19]
  last_sensor_state = initial_state;
 800260c:	4a97      	ldr	r2, [pc, #604]	@ (800286c <main+0x2cc>)
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	7013      	strb	r3, [r2, #0]
  printf("[PHOTO] Initialized (PB5 EXTI) - State: %s\r\n", 
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <main+0x7c>
 8002618:	4b95      	ldr	r3, [pc, #596]	@ (8002870 <main+0x2d0>)
 800261a:	e000      	b.n	800261e <main+0x7e>
 800261c:	4b95      	ldr	r3, [pc, #596]	@ (8002874 <main+0x2d4>)
 800261e:	4619      	mov	r1, r3
 8002620:	4895      	ldr	r0, [pc, #596]	@ (8002878 <main+0x2d8>)
 8002622:	f003 fbcf 	bl	8005dc4 <iprintf>
         initial_state == PHOTO_SENSOR_BLOCKED ? "BLOCKED" : "CLEAR");
  
  /* 验证初始状态 */
  if (initial_state != PHOTO_SENSOR_BLOCKED) {
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <main+0x98>
      printf("[WARNING] Photo sensor should be BLOCKED at floor 1!\r\n");
 800262c:	4893      	ldr	r0, [pc, #588]	@ (800287c <main+0x2dc>)
 800262e:	f003 fc31 	bl	8005e94 <puts>
      printf("         Please check elevator position.\r\n");
 8002632:	4893      	ldr	r0, [pc, #588]	@ (8002880 <main+0x2e0>)
 8002634:	f003 fc2e 	bl	8005e94 <puts>
  }
  
  /* 初始化舵机门控系统 */
  printf("[SERVO] Initializing servo communication...\r\n");
 8002638:	4892      	ldr	r0, [pc, #584]	@ (8002884 <main+0x2e4>)
 800263a:	f003 fc2b 	bl	8005e94 <puts>
  servo_init(&huart3);
 800263e:	4892      	ldr	r0, [pc, #584]	@ (8002888 <main+0x2e8>)
 8002640:	f7ff fcf4 	bl	800202c <servo_init>
  HAL_Delay(100);
 8002644:	2064      	movs	r0, #100	@ 0x64
 8002646:	f000 ffef 	bl	8003628 <HAL_Delay>
  
  /* 舵机通信测试 */
  printf("\r\n=== SERVO COMMUNICATION TEST ===\r\n");
 800264a:	4890      	ldr	r0, [pc, #576]	@ (800288c <main+0x2ec>)
 800264c:	f003 fc22 	bl	8005e94 <puts>
  
  /* 测试1: PING */
  printf("1. Testing PING...\r\n");
 8002650:	488f      	ldr	r0, [pc, #572]	@ (8002890 <main+0x2f0>)
 8002652:	f003 fc1f 	bl	8005e94 <puts>
  if (servo_ping(1)) {
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff fcfe 	bl	8002058 <servo_ping>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <main+0xca>
      printf("   SUCCESS: Servo responded to PING\r\n");
 8002662:	488c      	ldr	r0, [pc, #560]	@ (8002894 <main+0x2f4>)
 8002664:	f003 fc16 	bl	8005e94 <puts>
 8002668:	e002      	b.n	8002670 <main+0xd0>
  } else {
      printf("   FAILED: No response to PING\r\n");
 800266a:	488b      	ldr	r0, [pc, #556]	@ (8002898 <main+0x2f8>)
 800266c:	f003 fc12 	bl	8005e94 <puts>
  }
  
  /* 测试2: 读取位置 */
  printf("2. Reading position (0x38)...\r\n");
 8002670:	488a      	ldr	r0, [pc, #552]	@ (800289c <main+0x2fc>)
 8002672:	f003 fc0f 	bl	8005e94 <puts>
  uint8_t pos_data[2];
  for(int i = 0; i < 3; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e026      	b.n	80026ca <main+0x12a>
      if (servo_read_reg(1, 0x38, 2, pos_data) == 1) {
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	2202      	movs	r2, #2
 8002682:	2138      	movs	r1, #56	@ 0x38
 8002684:	2001      	movs	r0, #1
 8002686:	f7ff fde6 	bl	8002256 <servo_read_reg>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	d110      	bne.n	80026b2 <main+0x112>
          uint16_t pos = pos_data[0] | (pos_data[1] << 8);
 8002690:	7a3b      	ldrb	r3, [r7, #8]
 8002692:	b21a      	sxth	r2, r3
 8002694:	7a7b      	ldrb	r3, [r7, #9]
 8002696:	b21b      	sxth	r3, r3
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21b      	sxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b21b      	sxth	r3, r3
 80026a0:	817b      	strh	r3, [r7, #10]
          printf("   Try %d: SUCCESS, Position = %u\r\n", i+1, pos);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	897a      	ldrh	r2, [r7, #10]
 80026a8:	4619      	mov	r1, r3
 80026aa:	487d      	ldr	r0, [pc, #500]	@ (80028a0 <main+0x300>)
 80026ac:	f003 fb8a 	bl	8005dc4 <iprintf>
 80026b0:	e005      	b.n	80026be <main+0x11e>
      } else {
          printf("   Try %d: FAILED\r\n", i+1);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4619      	mov	r1, r3
 80026b8:	487a      	ldr	r0, [pc, #488]	@ (80028a4 <main+0x304>)
 80026ba:	f003 fb83 	bl	8005dc4 <iprintf>
      }
      HAL_Delay(50);
 80026be:	2032      	movs	r0, #50	@ 0x32
 80026c0:	f000 ffb2 	bl	8003628 <HAL_Delay>
  for(int i = 0; i < 3; i++) {
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	ddd5      	ble.n	800267c <main+0xdc>
  }
  
  /* 测试3: 读取移动标志 */
  printf("3. Reading moving flag (0x42)...\r\n");
 80026d0:	4875      	ldr	r0, [pc, #468]	@ (80028a8 <main+0x308>)
 80026d2:	f003 fbdf 	bl	8005e94 <puts>
  uint8_t moving_flag;
  for(int i = 0; i < 3; i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	e01c      	b.n	8002716 <main+0x176>
      if (servo_read_reg(1, 0x42, 1, &moving_flag) == 1) {
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	2201      	movs	r2, #1
 80026e0:	2142      	movs	r1, #66	@ 0x42
 80026e2:	2001      	movs	r0, #1
 80026e4:	f7ff fdb7 	bl	8002256 <servo_read_reg>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <main+0x15e>
          printf("   Try %d: SUCCESS, Moving = %d\r\n", i+1, moving_flag);
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	3301      	adds	r3, #1
 80026f2:	79fa      	ldrb	r2, [r7, #7]
 80026f4:	4619      	mov	r1, r3
 80026f6:	486d      	ldr	r0, [pc, #436]	@ (80028ac <main+0x30c>)
 80026f8:	f003 fb64 	bl	8005dc4 <iprintf>
 80026fc:	e005      	b.n	800270a <main+0x16a>
      } else {
          printf("   Try %d: FAILED\r\n", i+1);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	3301      	adds	r3, #1
 8002702:	4619      	mov	r1, r3
 8002704:	4867      	ldr	r0, [pc, #412]	@ (80028a4 <main+0x304>)
 8002706:	f003 fb5d 	bl	8005dc4 <iprintf>
      }
      HAL_Delay(50);
 800270a:	2032      	movs	r0, #50	@ 0x32
 800270c:	f000 ff8c 	bl	8003628 <HAL_Delay>
  for(int i = 0; i < 3; i++) {
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	3301      	adds	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b02      	cmp	r3, #2
 800271a:	dddf      	ble.n	80026dc <main+0x13c>
  }
  
  /* 测试4: 读取电压 */
  printf("4. Reading voltage (0x3E)...\r\n");
 800271c:	4864      	ldr	r0, [pc, #400]	@ (80028b0 <main+0x310>)
 800271e:	f003 fbb9 	bl	8005e94 <puts>
  uint8_t voltage;
  if (servo_read_reg(1, 0x3E, 1, &voltage) == 1) {
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	2201      	movs	r2, #1
 8002726:	213e      	movs	r1, #62	@ 0x3e
 8002728:	2001      	movs	r0, #1
 800272a:	f7ff fd94 	bl	8002256 <servo_read_reg>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d112      	bne.n	800275a <main+0x1ba>
      printf("   SUCCESS: Voltage = %.1fV\r\n", voltage * 0.1f);
 8002734:	79bb      	ldrb	r3, [r7, #6]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff7e 	bl	8000638 <__aeabi_i2f>
 800273c:	4603      	mov	r3, r0
 800273e:	495d      	ldr	r1, [pc, #372]	@ (80028b4 <main+0x314>)
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd ffcd 	bl	80006e0 <__aeabi_fmul>
 8002746:	4603      	mov	r3, r0
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fe63 	bl	8000414 <__aeabi_f2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4859      	ldr	r0, [pc, #356]	@ (80028b8 <main+0x318>)
 8002754:	f003 fb36 	bl	8005dc4 <iprintf>
 8002758:	e002      	b.n	8002760 <main+0x1c0>
  } else {
      printf("   FAILED\r\n");
 800275a:	4858      	ldr	r0, [pc, #352]	@ (80028bc <main+0x31c>)
 800275c:	f003 fb9a 	bl	8005e94 <puts>
  }
  
  /* 测试5: 读取温度 */
  printf("5. Reading temperature (0x3F)...\r\n");
 8002760:	4857      	ldr	r0, [pc, #348]	@ (80028c0 <main+0x320>)
 8002762:	f003 fb97 	bl	8005e94 <puts>
  uint8_t temp;
  if (servo_read_reg(1, 0x3F, 1, &temp) == 1) {
 8002766:	1d7b      	adds	r3, r7, #5
 8002768:	2201      	movs	r2, #1
 800276a:	213f      	movs	r1, #63	@ 0x3f
 800276c:	2001      	movs	r0, #1
 800276e:	f7ff fd72 	bl	8002256 <servo_read_reg>
 8002772:	4603      	mov	r3, r0
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <main+0x1e4>
      printf("   SUCCESS: Temperature = %d°C\r\n", temp);
 8002778:	797b      	ldrb	r3, [r7, #5]
 800277a:	4619      	mov	r1, r3
 800277c:	4851      	ldr	r0, [pc, #324]	@ (80028c4 <main+0x324>)
 800277e:	f003 fb21 	bl	8005dc4 <iprintf>
 8002782:	e002      	b.n	800278a <main+0x1ea>
  } else {
      printf("   FAILED\r\n");
 8002784:	484d      	ldr	r0, [pc, #308]	@ (80028bc <main+0x31c>)
 8002786:	f003 fb85 	bl	8005e94 <puts>
  }
  
  printf("=== TEST COMPLETE ===\r\n\r\n");
 800278a:	484f      	ldr	r0, [pc, #316]	@ (80028c8 <main+0x328>)
 800278c:	f003 fb82 	bl	8005e94 <puts>
  
  /* 继续正常初始化 */
  DoorControl_Init(&door_controller, 1);  // 使用舵机ID 1
 8002790:	2101      	movs	r1, #1
 8002792:	484e      	ldr	r0, [pc, #312]	@ (80028cc <main+0x32c>)
 8002794:	f7ff f8f6 	bl	8001984 <DoorControl_Init>
  
  /* 初始化Local Blackboard - 中央事件管理 */
  LocalBB_Init();
 8002798:	f7fe f8f2 	bl	8000980 <LocalBB_Init>
  printf("[LocalBB] Initialized - Event queue ready\r\n");
 800279c:	484c      	ldr	r0, [pc, #304]	@ (80028d0 <main+0x330>)
 800279e:	f003 fb79 	bl	8005e94 <puts>
  
  printf("\r\nSystem ready. Waiting for commands...\r\n\r\n");
 80027a2:	484c      	ldr	r0, [pc, #304]	@ (80028d4 <main+0x334>)
 80027a4:	f003 fb76 	bl	8005e94 <puts>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_status_time = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 80027ac:	f000 ff32 	bl	8003614 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]
    
    /* 测试模式已禁用，使用按键测试 */
    
    /* 处理键盘输入 */
    ProcessKeyboard();
 80027b2:	f000 f8e9 	bl	8002988 <ProcessKeyboard>
    
    /* 处理光电传感器 */
    ProcessPhotoSensor();
 80027b6:	f000 f953 	bl	8002a60 <ProcessPhotoSensor>
    
    /* 处理RS485接收 */
    ProcessRS485();
 80027ba:	f000 f9d7 	bl	8002b6c <ProcessRS485>
    
    /* 处理门控（每50ms更新） */
    static uint32_t last_door_update = 0;
    if (current_time - last_door_update >= 50) {
 80027be:	4b46      	ldr	r3, [pc, #280]	@ (80028d8 <main+0x338>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b31      	cmp	r3, #49	@ 0x31
 80027c8:	d904      	bls.n	80027d4 <main+0x234>
        last_door_update = current_time;
 80027ca:	4a43      	ldr	r2, [pc, #268]	@ (80028d8 <main+0x338>)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6013      	str	r3, [r2, #0]
        ProcessDoorControl();
 80027d0:	f000 fa8e 	bl	8002cf0 <ProcessDoorControl>
    }
    
    /* 处理LocalBB事件队列 */
    LocalBB_Process();
 80027d4:	f7fe faa8 	bl	8000d28 <LocalBB_Process>
    
    /* 每5秒打印一次状态 */
    if (current_time - last_status_time >= 5000) {
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3287 	movw	r2, #4999	@ 0x1387
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d9e2      	bls.n	80027ac <main+0x20c>
        last_status_time = current_time;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	617b      	str	r3, [r7, #20]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
               system_state.current_floor,
 80027ea:	4b3c      	ldr	r3, [pc, #240]	@ (80028dc <main+0x33c>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80027ee:	4619      	mov	r1, r3
               system_state.direction == DIR_UP ? "UP" : 
 80027f0:	4b3a      	ldr	r3, [pc, #232]	@ (80028dc <main+0x33c>)
 80027f2:	785b      	ldrb	r3, [r3, #1]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d007      	beq.n	8002808 <main+0x268>
               system_state.direction == DIR_DOWN ? "DN" : "STOP",
 80027f8:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <main+0x33c>)
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d101      	bne.n	8002804 <main+0x264>
 8002800:	4a37      	ldr	r2, [pc, #220]	@ (80028e0 <main+0x340>)
 8002802:	e002      	b.n	800280a <main+0x26a>
 8002804:	4a37      	ldr	r2, [pc, #220]	@ (80028e4 <main+0x344>)
 8002806:	e000      	b.n	800280a <main+0x26a>
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 8002808:	4a37      	ldr	r2, [pc, #220]	@ (80028e8 <main+0x348>)
               system_state.door_is_open ? "OPEN" : "CLOSED");
 800280a:	4b34      	ldr	r3, [pc, #208]	@ (80028dc <main+0x33c>)
 800280c:	78db      	ldrb	r3, [r3, #3]
        printf("[STATUS] Floor=%d, Dir=%s, Door=%s\r\n",
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <main+0x276>
 8002812:	4b36      	ldr	r3, [pc, #216]	@ (80028ec <main+0x34c>)
 8002814:	e000      	b.n	8002818 <main+0x278>
 8002816:	4b36      	ldr	r3, [pc, #216]	@ (80028f0 <main+0x350>)
 8002818:	4836      	ldr	r0, [pc, #216]	@ (80028f4 <main+0x354>)
 800281a:	f003 fad3 	bl	8005dc4 <iprintf>
        printf("  Keyboard=%lu, Photo=%lu, RS485_RX=%lu, TX=%lu, DoorCmd=%lu\r\n",
 800281e:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <main+0x33c>)
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	4b2e      	ldr	r3, [pc, #184]	@ (80028dc <main+0x33c>)
 8002824:	6898      	ldr	r0, [r3, #8]
 8002826:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <main+0x33c>)
 8002828:	68dc      	ldr	r4, [r3, #12]
 800282a:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <main+0x33c>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	4a2b      	ldr	r2, [pc, #172]	@ (80028dc <main+0x33c>)
 8002830:	6952      	ldr	r2, [r2, #20]
 8002832:	9201      	str	r2, [sp, #4]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4623      	mov	r3, r4
 8002838:	4602      	mov	r2, r0
 800283a:	482f      	ldr	r0, [pc, #188]	@ (80028f8 <main+0x358>)
 800283c:	f003 fac2 	bl	8005dc4 <iprintf>
               system_state.keyboard_count,
               system_state.photo_count,
               system_state.rs485_rx_count,
               system_state.rs485_tx_count,
               system_state.door_cmd_count);
        LocalBB_PrintStatus();
 8002840:	f7fe fb3e 	bl	8000ec0 <LocalBB_PrintStatus>
  {
 8002844:	e7b2      	b.n	80027ac <main+0x20c>
 8002846:	bf00      	nop
 8002848:	0800781c 	.word	0x0800781c
 800284c:	0800784c 	.word	0x0800784c
 8002850:	08007874 	.word	0x08007874
 8002854:	080078b4 	.word	0x080078b4
 8002858:	080078d4 	.word	0x080078d4
 800285c:	080078f8 	.word	0x080078f8
 8002860:	08007920 	.word	0x08007920
 8002864:	08007948 	.word	0x08007948
 8002868:	08007970 	.word	0x08007970
 800286c:	20000020 	.word	0x20000020
 8002870:	0800798c 	.word	0x0800798c
 8002874:	08007994 	.word	0x08007994
 8002878:	0800799c 	.word	0x0800799c
 800287c:	080079cc 	.word	0x080079cc
 8002880:	08007a04 	.word	0x08007a04
 8002884:	08007a30 	.word	0x08007a30
 8002888:	200007a4 	.word	0x200007a4
 800288c:	08007a60 	.word	0x08007a60
 8002890:	08007a84 	.word	0x08007a84
 8002894:	08007a98 	.word	0x08007a98
 8002898:	08007ac0 	.word	0x08007ac0
 800289c:	08007ae0 	.word	0x08007ae0
 80028a0:	08007b00 	.word	0x08007b00
 80028a4:	08007b24 	.word	0x08007b24
 80028a8:	08007b38 	.word	0x08007b38
 80028ac:	08007b5c 	.word	0x08007b5c
 80028b0:	08007b80 	.word	0x08007b80
 80028b4:	3dcccccd 	.word	0x3dcccccd
 80028b8:	08007ba0 	.word	0x08007ba0
 80028bc:	08007bc0 	.word	0x08007bc0
 80028c0:	08007bcc 	.word	0x08007bcc
 80028c4:	08007bf0 	.word	0x08007bf0
 80028c8:	08007c14 	.word	0x08007c14
 80028cc:	200006fc 	.word	0x200006fc
 80028d0:	08007c30 	.word	0x08007c30
 80028d4:	08007c5c 	.word	0x08007c5c
 80028d8:	20000708 	.word	0x20000708
 80028dc:	20000004 	.word	0x20000004
 80028e0:	08007c88 	.word	0x08007c88
 80028e4:	08007c8c 	.word	0x08007c8c
 80028e8:	08007c94 	.word	0x08007c94
 80028ec:	08007c98 	.word	0x08007c98
 80028f0:	08007ca0 	.word	0x08007ca0
 80028f4:	08007ca8 	.word	0x08007ca8
 80028f8:	08007cd0 	.word	0x08007cd0

080028fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b090      	sub	sp, #64	@ 0x40
 8002900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002902:	f107 0318 	add.w	r3, r7, #24
 8002906:	2228      	movs	r2, #40	@ 0x28
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fbc4 	bl	8006098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800291e:	2301      	movs	r3, #1
 8002920:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002922:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800292c:	2301      	movs	r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002930:	2302      	movs	r3, #2
 8002932:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800293a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800293e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002940:	f107 0318 	add.w	r3, r7, #24
 8002944:	4618      	mov	r0, r3
 8002946:	f001 fc0f 	bl	8004168 <HAL_RCC_OscConfig>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002950:	f000 fb0d 	bl	8002f6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002954:	230f      	movs	r3, #15
 8002956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002958:	2302      	movs	r3, #2
 800295a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002960:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2102      	movs	r1, #2
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fe7c 	bl	800466c <HAL_RCC_ClockConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800297a:	f000 faf8 	bl	8002f6e <Error_Handler>
  }
}
 800297e:	bf00      	nop
 8002980:	3740      	adds	r7, #64	@ 0x40
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <ProcessKeyboard>:
/* USER CODE BEGIN 4 */

/**
  * @brief  处理键盘输入
  */
void ProcessKeyboard(void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
    Keyboard_Handler();
 800298e:	f7fe fd63 	bl	8001458 <Keyboard_Handler>
    
    uint8_t key;
    if (Keyboard_PopKey(&key)) {
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe ff01 	bl	800179c <Keyboard_PopKey>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d048      	beq.n	8002a32 <ProcessKeyboard+0xaa>
        system_state.keyboard_count++;
 80029a0:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <ProcessKeyboard+0xb4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	3301      	adds	r3, #1
 80029a6:	4a25      	ldr	r2, [pc, #148]	@ (8002a3c <ProcessKeyboard+0xb4>)
 80029a8:	6053      	str	r3, [r2, #4]
        
        printf("\r\n========================================\r\n");
 80029aa:	4825      	ldr	r0, [pc, #148]	@ (8002a40 <ProcessKeyboard+0xb8>)
 80029ac:	f003 fa72 	bl	8005e94 <puts>
        printf("[KEYBOARD #%lu] Key detected: 0x%02X\r\n", system_state.keyboard_count, key);
 80029b0:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <ProcessKeyboard+0xb4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	79fa      	ldrb	r2, [r7, #7]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4822      	ldr	r0, [pc, #136]	@ (8002a44 <ProcessKeyboard+0xbc>)
 80029ba:	f003 fa03 	bl	8005dc4 <iprintf>
        
        switch(key) {
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	3b0d      	subs	r3, #13
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d82c      	bhi.n	8002a20 <ProcessKeyboard+0x98>
 80029c6:	a201      	add	r2, pc, #4	@ (adr r2, 80029cc <ProcessKeyboard+0x44>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	08002a19 	.word	0x08002a19
 80029d0:	08002a05 	.word	0x08002a05
 80029d4:	080029f1 	.word	0x080029f1
 80029d8:	080029dd 	.word	0x080029dd
            case KEY_S16:  // Floor 1
                printf("S16 -> Floor 1 call\r\n");
 80029dc:	481a      	ldr	r0, [pc, #104]	@ (8002a48 <ProcessKeyboard+0xc0>)
 80029de:	f003 fa59 	bl	8005e94 <puts>
                SendCabinCall(1);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 fa36 	bl	8002e54 <SendCabinCall>
                LocalBB_AddCabinCall(1);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7fe f887 	bl	8000afc <LocalBB_AddCabinCall>
                break;
 80029ee:	e01d      	b.n	8002a2c <ProcessKeyboard+0xa4>
                
            case KEY_S15:  // Floor 2
                printf("S15 -> Floor 2 call\r\n");
 80029f0:	4816      	ldr	r0, [pc, #88]	@ (8002a4c <ProcessKeyboard+0xc4>)
 80029f2:	f003 fa4f 	bl	8005e94 <puts>
                SendCabinCall(2);
 80029f6:	2002      	movs	r0, #2
 80029f8:	f000 fa2c 	bl	8002e54 <SendCabinCall>
                LocalBB_AddCabinCall(2);
 80029fc:	2002      	movs	r0, #2
 80029fe:	f7fe f87d 	bl	8000afc <LocalBB_AddCabinCall>
                break;
 8002a02:	e013      	b.n	8002a2c <ProcessKeyboard+0xa4>
                
            case KEY_S14:  // Floor 3
                printf("S14 -> Floor 3 call\r\n");
 8002a04:	4812      	ldr	r0, [pc, #72]	@ (8002a50 <ProcessKeyboard+0xc8>)
 8002a06:	f003 fa45 	bl	8005e94 <puts>
                SendCabinCall(3);
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	f000 fa22 	bl	8002e54 <SendCabinCall>
                LocalBB_AddCabinCall(3);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f7fe f873 	bl	8000afc <LocalBB_AddCabinCall>
                break;
 8002a16:	e009      	b.n	8002a2c <ProcessKeyboard+0xa4>
                
            case KEY_S13:  // Not used
                printf("S13 pressed (not used)\r\n");
 8002a18:	480e      	ldr	r0, [pc, #56]	@ (8002a54 <ProcessKeyboard+0xcc>)
 8002a1a:	f003 fa3b 	bl	8005e94 <puts>
                break;
 8002a1e:	e005      	b.n	8002a2c <ProcessKeyboard+0xa4>
                
            default:
                printf("Unknown key (0x%02X)\r\n", key);
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	4619      	mov	r1, r3
 8002a24:	480c      	ldr	r0, [pc, #48]	@ (8002a58 <ProcessKeyboard+0xd0>)
 8002a26:	f003 f9cd 	bl	8005dc4 <iprintf>
                break;
 8002a2a:	bf00      	nop
        }
        printf("========================================\r\n");
 8002a2c:	480b      	ldr	r0, [pc, #44]	@ (8002a5c <ProcessKeyboard+0xd4>)
 8002a2e:	f003 fa31 	bl	8005e94 <puts>
    }
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	08007d10 	.word	0x08007d10
 8002a44:	08007d3c 	.word	0x08007d3c
 8002a48:	08007d64 	.word	0x08007d64
 8002a4c:	08007d7c 	.word	0x08007d7c
 8002a50:	08007d94 	.word	0x08007d94
 8002a54:	08007dac 	.word	0x08007dac
 8002a58:	08007dc4 	.word	0x08007dc4
 8002a5c:	08007ddc 	.word	0x08007ddc

08002a60 <ProcessPhotoSensor>:

/**
  * @brief  处理光电传感器 - 增强版带防抖和智能楼层检测
  */
void ProcessPhotoSensor(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af02      	add	r7, sp, #8
    uint32_t current_time = HAL_GetTick();
 8002a66:	f000 fdd5 	bl	8003614 <HAL_GetTick>
 8002a6a:	60b8      	str	r0, [r7, #8]
    
    if (sensor_triggered) {
 8002a6c:	4b37      	ldr	r3, [pc, #220]	@ (8002b4c <ProcessPhotoSensor+0xec>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d067      	beq.n	8002b46 <ProcessPhotoSensor+0xe6>
        sensor_triggered = false;
 8002a76:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <ProcessPhotoSensor+0xec>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
        
        /* 防抖处理 */
        if (current_time - system_state.last_photo_time < PHOTO_SENSOR_DEBOUNCE_MS) {
 8002a7c:	4b34      	ldr	r3, [pc, #208]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2bc7      	cmp	r3, #199	@ 0xc7
 8002a86:	d95d      	bls.n	8002b44 <ProcessPhotoSensor+0xe4>
            return;  // 忽略抖动
        }
        system_state.last_photo_time = current_time;
 8002a88:	4a31      	ldr	r2, [pc, #196]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6193      	str	r3, [r2, #24]
        
        photo_sensor_state_t current_state = PhotoSensor_GetState();
 8002a8e:	f7fe ff45 	bl	800191c <PhotoSensor_GetState>
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
        
        /* 只在状态从CLEAR变为BLOCKED时触发（到达楼层） */
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d14f      	bne.n	8002b3c <ProcessPhotoSensor+0xdc>
            last_sensor_state == PHOTO_SENSOR_CLEAR) {
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <ProcessPhotoSensor+0xf4>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
        if (current_state == PHOTO_SENSOR_BLOCKED && 
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d14b      	bne.n	8002b3c <ProcessPhotoSensor+0xdc>
            
            system_state.photo_count++;
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a29      	ldr	r2, [pc, #164]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002aac:	6093      	str	r3, [r2, #8]
            
            /* 智能楼层检测 - 基于方向和当前楼层 */
            uint8_t detected_floor = system_state.current_floor;
 8002aae:	4b28      	ldr	r3, [pc, #160]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	73fb      	strb	r3, [r7, #15]
            
            if (system_state.direction == DIR_UP) {
 8002ab4:	4b26      	ldr	r3, [pc, #152]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d109      	bne.n	8002ad0 <ProcessPhotoSensor+0x70>
                /* 上行：检测到的是下一个楼层 */
                detected_floor = system_state.current_floor + 1;
 8002abc:	4b24      	ldr	r3, [pc, #144]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
                if (detected_floor > MAX_FLOORS) {
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d90f      	bls.n	8002aea <ProcessPhotoSensor+0x8a>
                    detected_floor = MAX_FLOORS;
 8002aca:	2303      	movs	r3, #3
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e00c      	b.n	8002aea <ProcessPhotoSensor+0x8a>
                }
            }
            else if (system_state.direction == DIR_DOWN) {
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d108      	bne.n	8002aea <ProcessPhotoSensor+0x8a>
                /* 下行：检测到的是下一个楼层 */
                detected_floor = system_state.current_floor - 1;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
                if (detected_floor < 1) {
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <ProcessPhotoSensor+0x8a>
                    detected_floor = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
                }
            }
            /* 如果静止，保持当前楼层不变 */
            
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002aec:	6899      	ldr	r1, [r3, #8]
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
                   system_state.photo_count, detected_floor,
                   system_state.direction == DIR_UP ? "UP" :
 8002af0:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002af2:	785b      	ldrb	r3, [r3, #1]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d007      	beq.n	8002b08 <ProcessPhotoSensor+0xa8>
                   system_state.direction == DIR_DOWN ? "DN" : "STOP",
 8002af8:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d101      	bne.n	8002b04 <ProcessPhotoSensor+0xa4>
 8002b00:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <ProcessPhotoSensor+0xf8>)
 8002b02:	e002      	b.n	8002b0a <ProcessPhotoSensor+0xaa>
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <ProcessPhotoSensor+0xfc>)
 8002b06:	e000      	b.n	8002b0a <ProcessPhotoSensor+0xaa>
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002b08:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <ProcessPhotoSensor+0x100>)
                   system_state.current_floor);
 8002b0a:	4811      	ldr	r0, [pc, #68]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002b0c:	7800      	ldrb	r0, [r0, #0]
            printf("[PHOTO #%lu] Floor %d detected (Dir=%s, Prev=%d)\r\n",
 8002b0e:	9000      	str	r0, [sp, #0]
 8002b10:	4814      	ldr	r0, [pc, #80]	@ (8002b64 <ProcessPhotoSensor+0x104>)
 8002b12:	f003 f957 	bl	8005dc4 <iprintf>
            
            /* 立即发送光电传感器事件给Master */
            SendPhotoSensorEvent(detected_floor);
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f975 	bl	8002e08 <SendPhotoSensorEvent>
            
            /* 更新当前楼层 */
            system_state.current_floor = detected_floor;
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	7013      	strb	r3, [r2, #0]
            
            /* 如果到达目标楼层，更新状态 */
            if (detected_floor == system_state.target_floor) {
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <ProcessPhotoSensor+0xf0>)
 8002b26:	789b      	ldrb	r3, [r3, #2]
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d104      	bne.n	8002b38 <ProcessPhotoSensor+0xd8>
                printf("[PHOTO] Target floor %d reached!\r\n", detected_floor);
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	4619      	mov	r1, r3
 8002b32:	480d      	ldr	r0, [pc, #52]	@ (8002b68 <ProcessPhotoSensor+0x108>)
 8002b34:	f003 f946 	bl	8005dc4 <iprintf>
                /* Master会处理停止，Slave只报告 */
            }
            
            /* 通过LocalBB处理 */
            LocalBB_AddPhotoSensor();
 8002b38:	f7fe f81e 	bl	8000b78 <LocalBB_AddPhotoSensor>
        }
        
        last_sensor_state = current_state;
 8002b3c:	4a05      	ldr	r2, [pc, #20]	@ (8002b54 <ProcessPhotoSensor+0xf4>)
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	7013      	strb	r3, [r2, #0]
 8002b42:	e000      	b.n	8002b46 <ProcessPhotoSensor+0xe6>
            return;  // 忽略抖动
 8002b44:	bf00      	nop
    }
}
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200006f8 	.word	0x200006f8
 8002b50:	20000004 	.word	0x20000004
 8002b54:	20000020 	.word	0x20000020
 8002b58:	08007c88 	.word	0x08007c88
 8002b5c:	08007c8c 	.word	0x08007c8c
 8002b60:	08007c94 	.word	0x08007c94
 8002b64:	08007e08 	.word	0x08007e08
 8002b68:	08007e3c 	.word	0x08007e3c

08002b6c <ProcessRS485>:

/**
  * @brief  处理RS485接收
  */
void ProcessRS485(void) {
 8002b6c:	b5b0      	push	{r4, r5, r7, lr}
 8002b6e:	b098      	sub	sp, #96	@ 0x60
 8002b70:	af04      	add	r7, sp, #16
    uint8_t rx_buffer[64];
    uint16_t rx_len = rs485_receive_packet(rx_buffer, sizeof(rx_buffer));
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	2140      	movs	r1, #64	@ 0x40
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe faab 	bl	80010d4 <rs485_receive_packet>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    
    if (rx_len > 0) {
 8002b84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 809b 	beq.w	8002cc4 <ProcessRS485+0x158>
        system_state.rs485_rx_count++;
 8002b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ccc <ProcessRS485+0x160>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	3301      	adds	r3, #1
 8002b94:	4a4d      	ldr	r2, [pc, #308]	@ (8002ccc <ProcessRS485+0x160>)
 8002b96:	60d3      	str	r3, [r2, #12]
        
        /* 调试：打印所有接收到的命令 */
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
               rx_buffer[0], rx_len, 
 8002b98:	7a3b      	ldrb	r3, [r7, #8]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002b9a:	461c      	mov	r4, r3
 8002b9c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
               rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
 8002ba0:	7a3b      	ldrb	r3, [r7, #8]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002ba2:	461d      	mov	r5, r3
               rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
 8002ba4:	7a7b      	ldrb	r3, [r7, #9]
 8002ba6:	7ab9      	ldrb	r1, [r7, #10]
 8002ba8:	7af8      	ldrb	r0, [r7, #11]
        printf("[RS485 DEBUG] Received CMD=0x%02X, len=%d, data=[%02X %02X %02X %02X]\r\n", 
 8002baa:	9002      	str	r0, [sp, #8]
 8002bac:	9101      	str	r1, [sp, #4]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	4846      	ldr	r0, [pc, #280]	@ (8002cd0 <ProcessRS485+0x164>)
 8002bb6:	f003 f905 	bl	8005dc4 <iprintf>
        
        /* 方向设置命令 */
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8002bba:	7a3b      	ldrb	r3, [r7, #8]
 8002bbc:	2b40      	cmp	r3, #64	@ 0x40
 8002bbe:	d137      	bne.n	8002c30 <ProcessRS485+0xc4>
 8002bc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d933      	bls.n	8002c30 <ProcessRS485+0xc4>
            uint8_t dir = rx_buffer[1];
 8002bc8:	7a7b      	ldrb	r3, [r7, #9]
 8002bca:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            uint8_t cur = rx_buffer[2];
 8002bce:	7abb      	ldrb	r3, [r7, #10]
 8002bd0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            uint8_t target = rx_buffer[3];
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            
            system_state.direction = dir;
 8002bda:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <ProcessRS485+0x160>)
 8002bdc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002be0:	7053      	strb	r3, [r2, #1]
            system_state.current_floor = cur;
 8002be2:	4a3a      	ldr	r2, [pc, #232]	@ (8002ccc <ProcessRS485+0x160>)
 8002be4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002be8:	7013      	strb	r3, [r2, #0]
            system_state.target_floor = target;
 8002bea:	4a38      	ldr	r2, [pc, #224]	@ (8002ccc <ProcessRS485+0x160>)
 8002bec:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002bf0:	7093      	strb	r3, [r2, #2]
            
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8002bf2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d007      	beq.n	8002c0a <ProcessRS485+0x9e>
                   dir == DIR_UP ? "UP" : dir == DIR_DOWN ? "DN" : "STOP",
 8002bfa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d101      	bne.n	8002c06 <ProcessRS485+0x9a>
 8002c02:	4934      	ldr	r1, [pc, #208]	@ (8002cd4 <ProcessRS485+0x168>)
 8002c04:	e002      	b.n	8002c0c <ProcessRS485+0xa0>
 8002c06:	4934      	ldr	r1, [pc, #208]	@ (8002cd8 <ProcessRS485+0x16c>)
 8002c08:	e000      	b.n	8002c0c <ProcessRS485+0xa0>
            printf("[RS485 RX] Direction=%s, F%d->F%d\r\n",
 8002c0a:	4934      	ldr	r1, [pc, #208]	@ (8002cdc <ProcessRS485+0x170>)
 8002c0c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002c10:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002c14:	4832      	ldr	r0, [pc, #200]	@ (8002ce0 <ProcessRS485+0x174>)
 8002c16:	f003 f8d5 	bl	8005dc4 <iprintf>
                   cur, target);
            
            /* 通过LocalBB处理 */
            LocalBB_SetDirection(dir, cur, target);
 8002c1a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002c1e:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8002c22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fff4 	bl	8000c14 <LocalBB_SetDirection>
        if (rx_buffer[0] == CMD_DIRECTION_SET && rx_len >= 4) {
 8002c2c:	bf00      	nop
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
            rs485_send_packet_dma(tx_buffer, 4);
            system_state.rs485_tx_count++;
        }
    }
}
 8002c2e:	e049      	b.n	8002cc4 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_DOOR_OPEN) {
 8002c30:	7a3b      	ldrb	r3, [r7, #8]
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d115      	bne.n	8002c62 <ProcessRS485+0xf6>
            printf("\r\n[RS485 RX] Door OPEN command received at tick %lu\r\n", HAL_GetTick());
 8002c36:	f000 fced 	bl	8003614 <HAL_GetTick>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4829      	ldr	r0, [pc, #164]	@ (8002ce4 <ProcessRS485+0x178>)
 8002c40:	f003 f8c0 	bl	8005dc4 <iprintf>
            LocalBB_AddDoorCommand(true);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7fe f83d 	bl	8000cc4 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <ProcessRS485+0x160>)
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	4a1e      	ldr	r2, [pc, #120]	@ (8002ccc <ProcessRS485+0x160>)
 8002c52:	6153      	str	r3, [r2, #20]
            printf("[RS485 RX] Total door commands: %lu\r\n", system_state.door_cmd_count);
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <ProcessRS485+0x160>)
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4823      	ldr	r0, [pc, #140]	@ (8002ce8 <ProcessRS485+0x17c>)
 8002c5c:	f003 f8b2 	bl	8005dc4 <iprintf>
}
 8002c60:	e030      	b.n	8002cc4 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_DOOR_CLOSE) {
 8002c62:	7a3b      	ldrb	r3, [r7, #8]
 8002c64:	2b21      	cmp	r3, #33	@ 0x21
 8002c66:	d115      	bne.n	8002c94 <ProcessRS485+0x128>
            printf("\r\n[RS485 RX] Door CLOSE command received at tick %lu\r\n", HAL_GetTick());
 8002c68:	f000 fcd4 	bl	8003614 <HAL_GetTick>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4619      	mov	r1, r3
 8002c70:	481e      	ldr	r0, [pc, #120]	@ (8002cec <ProcessRS485+0x180>)
 8002c72:	f003 f8a7 	bl	8005dc4 <iprintf>
            LocalBB_AddDoorCommand(false);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fe f824 	bl	8000cc4 <LocalBB_AddDoorCommand>
            system_state.door_cmd_count++;
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <ProcessRS485+0x160>)
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4a12      	ldr	r2, [pc, #72]	@ (8002ccc <ProcessRS485+0x160>)
 8002c84:	6153      	str	r3, [r2, #20]
            printf("[RS485 RX] Total door commands: %lu\r\n", system_state.door_cmd_count);
 8002c86:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <ProcessRS485+0x160>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4816      	ldr	r0, [pc, #88]	@ (8002ce8 <ProcessRS485+0x17c>)
 8002c8e:	f003 f899 	bl	8005dc4 <iprintf>
}
 8002c92:	e017      	b.n	8002cc4 <ProcessRS485+0x158>
        else if (rx_buffer[0] == CMD_STATUS_REQUEST) {
 8002c94:	7a3b      	ldrb	r3, [r7, #8]
 8002c96:	2b50      	cmp	r3, #80	@ 0x50
 8002c98:	d114      	bne.n	8002cc4 <ProcessRS485+0x158>
            tx_buffer[0] = CMD_STATUS_RESPONSE;
 8002c9a:	2351      	movs	r3, #81	@ 0x51
 8002c9c:	713b      	strb	r3, [r7, #4]
            tx_buffer[1] = system_state.current_floor;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <ProcessRS485+0x160>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	717b      	strb	r3, [r7, #5]
            tx_buffer[2] = system_state.direction;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <ProcessRS485+0x160>)
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	71bb      	strb	r3, [r7, #6]
            tx_buffer[3] = system_state.door_is_open ? 1 : 0;
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <ProcessRS485+0x160>)
 8002cac:	78db      	ldrb	r3, [r3, #3]
 8002cae:	71fb      	strb	r3, [r7, #7]
            rs485_send_packet_dma(tx_buffer, 4);
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe f9bd 	bl	8001034 <rs485_send_packet_dma>
            system_state.rs485_tx_count++;
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <ProcessRS485+0x160>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4a02      	ldr	r2, [pc, #8]	@ (8002ccc <ProcessRS485+0x160>)
 8002cc2:	6113      	str	r3, [r2, #16]
}
 8002cc4:	bf00      	nop
 8002cc6:	3750      	adds	r7, #80	@ 0x50
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdb0      	pop	{r4, r5, r7, pc}
 8002ccc:	20000004 	.word	0x20000004
 8002cd0:	08007e60 	.word	0x08007e60
 8002cd4:	08007c88 	.word	0x08007c88
 8002cd8:	08007c8c 	.word	0x08007c8c
 8002cdc:	08007c94 	.word	0x08007c94
 8002ce0:	08007ea8 	.word	0x08007ea8
 8002ce4:	08007ecc 	.word	0x08007ecc
 8002ce8:	08007f04 	.word	0x08007f04
 8002cec:	08007f2c 	.word	0x08007f2c

08002cf0 <ProcessDoorControl>:

/**
  * @brief  处理门控制
  */
void ProcessDoorControl(void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
    /* 更新门控制器状态 */
    DoorControl_Update(&door_controller);
 8002cf6:	4836      	ldr	r0, [pc, #216]	@ (8002dd0 <ProcessDoorControl+0xe0>)
 8002cf8:	f7fe ffaa 	bl	8001c50 <DoorControl_Update>
    
    /* 处理来自LocalBB的门控命令 */
    LocalBB_DoorCommand_t door_cmd = LocalBB_GetDoorCommand();
 8002cfc:	f7fe f93a 	bl	8000f74 <LocalBB_GetDoorCommand>
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
    if (door_cmd != DOOR_CMD_NONE) {
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02d      	beq.n	8002d66 <ProcessDoorControl+0x76>
        printf("\r\n========== DOOR COMMAND RECEIVED ==========\r\n");
 8002d0a:	4832      	ldr	r0, [pc, #200]	@ (8002dd4 <ProcessDoorControl+0xe4>)
 8002d0c:	f003 f8c2 	bl	8005e94 <puts>
        printf("[MAIN] Tick=%lu, Command=%s\r\n", 
 8002d10:	f000 fc80 	bl	8003614 <HAL_GetTick>
 8002d14:	4601      	mov	r1, r0
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <ProcessDoorControl+0x30>
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd8 <ProcessDoorControl+0xe8>)
 8002d1e:	e000      	b.n	8002d22 <ProcessDoorControl+0x32>
 8002d20:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <ProcessDoorControl+0xec>)
 8002d22:	461a      	mov	r2, r3
 8002d24:	482e      	ldr	r0, [pc, #184]	@ (8002de0 <ProcessDoorControl+0xf0>)
 8002d26:	f003 f84d 	bl	8005dc4 <iprintf>
               HAL_GetTick(), door_cmd == DOOR_CMD_OPEN ? "OPEN" : "CLOSE");
        
        if (door_cmd == DOOR_CMD_OPEN) {
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d109      	bne.n	8002d44 <ProcessDoorControl+0x54>
            printf("[DOOR] Command: OPEN\r\n");
 8002d30:	482c      	ldr	r0, [pc, #176]	@ (8002de4 <ProcessDoorControl+0xf4>)
 8002d32:	f003 f8af 	bl	8005e94 <puts>
            DoorControl_Open(&door_controller);
 8002d36:	4826      	ldr	r0, [pc, #152]	@ (8002dd0 <ProcessDoorControl+0xe0>)
 8002d38:	f7fe fec8 	bl	8001acc <DoorControl_Open>
            system_state.door_is_open = true;
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <ProcessDoorControl+0xf8>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	70da      	strb	r2, [r3, #3]
 8002d42:	e00b      	b.n	8002d5c <ProcessDoorControl+0x6c>
            // TIME BASED模式 - 不发送状态反馈
            // SendDoorStatus(DOOR_STATE_OPENING);
            // printf("[MAIN] Sent OPENING status to Master\r\n");
        } else if (door_cmd == DOOR_CMD_CLOSE) {
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d108      	bne.n	8002d5c <ProcessDoorControl+0x6c>
            printf("[DOOR] Command: CLOSE\r\n");
 8002d4a:	4828      	ldr	r0, [pc, #160]	@ (8002dec <ProcessDoorControl+0xfc>)
 8002d4c:	f003 f8a2 	bl	8005e94 <puts>
            DoorControl_Close(&door_controller);
 8002d50:	481f      	ldr	r0, [pc, #124]	@ (8002dd0 <ProcessDoorControl+0xe0>)
 8002d52:	f7fe ff19 	bl	8001b88 <DoorControl_Close>
            system_state.door_is_open = false;
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <ProcessDoorControl+0xf8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	70da      	strb	r2, [r3, #3]
            // TIME BASED模式 - 不发送状态反馈
            // SendDoorStatus(DOOR_STATE_CLOSING);
            // printf("[MAIN] Sent CLOSING status to Master\r\n");
        }
        LocalBB_ClearDoorCommand();
 8002d5c:	f7fe f914 	bl	8000f88 <LocalBB_ClearDoorCommand>
        printf("============================================\r\n\r\n");
 8002d60:	4823      	ldr	r0, [pc, #140]	@ (8002df0 <ProcessDoorControl+0x100>)
 8002d62:	f003 f897 	bl	8005e94 <puts>
    }
    
    /* TIME BASED模式 - 不发送门状态反馈 */
    /* 但仍然更新本地状态用于调试 */
    DoorState_t door_state = DoorControl_GetState(&door_controller);
 8002d66:	481a      	ldr	r0, [pc, #104]	@ (8002dd0 <ProcessDoorControl+0xe0>)
 8002d68:	f7ff f8da 	bl	8001f20 <DoorControl_GetState>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71bb      	strb	r3, [r7, #6]
    static DoorState_t last_door_state = DOOR_STATE_CLOSED;
    
    if (door_state != last_door_state) {
 8002d70:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <ProcessDoorControl+0x104>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	79ba      	ldrb	r2, [r7, #6]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d026      	beq.n	8002dc8 <ProcessDoorControl+0xd8>
        last_door_state = door_state;
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <ProcessDoorControl+0x104>)
 8002d7c:	79bb      	ldrb	r3, [r7, #6]
 8002d7e:	7013      	strb	r3, [r2, #0]
        
        switch (door_state) {
 8002d80:	79bb      	ldrb	r3, [r7, #6]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d820      	bhi.n	8002dc8 <ProcessDoorControl+0xd8>
 8002d86:	a201      	add	r2, pc, #4	@ (adr r2, 8002d8c <ProcessDoorControl+0x9c>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002dab 	.word	0x08002dab
 8002d90:	08002db9 	.word	0x08002db9
 8002d94:	08002d9d 	.word	0x08002d9d
 8002d98:	08002dc1 	.word	0x08002dc1
            case DOOR_STATE_OPEN:
                printf("[DOOR] Fully opened (local state)\r\n");
 8002d9c:	4816      	ldr	r0, [pc, #88]	@ (8002df8 <ProcessDoorControl+0x108>)
 8002d9e:	f003 f879 	bl	8005e94 <puts>
                system_state.door_is_open = true;
 8002da2:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <ProcessDoorControl+0xf8>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	70da      	strb	r2, [r3, #3]
                // SendDoorStatus(DOOR_STATE_OPEN);
                break;
 8002da8:	e00e      	b.n	8002dc8 <ProcessDoorControl+0xd8>
                
            case DOOR_STATE_CLOSED:
                printf("[DOOR] Fully closed (local state)\r\n");
 8002daa:	4814      	ldr	r0, [pc, #80]	@ (8002dfc <ProcessDoorControl+0x10c>)
 8002dac:	f003 f872 	bl	8005e94 <puts>
                system_state.door_is_open = false;
 8002db0:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <ProcessDoorControl+0xf8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	70da      	strb	r2, [r3, #3]
                // SendDoorStatus(DOOR_STATE_CLOSED);
                break;
 8002db6:	e007      	b.n	8002dc8 <ProcessDoorControl+0xd8>
                
            case DOOR_STATE_OPENING:
                printf("[DOOR] Opening (local state)\r\n");
 8002db8:	4811      	ldr	r0, [pc, #68]	@ (8002e00 <ProcessDoorControl+0x110>)
 8002dba:	f003 f86b 	bl	8005e94 <puts>
                // SendDoorStatus(DOOR_STATE_OPENING);
                break;
 8002dbe:	e003      	b.n	8002dc8 <ProcessDoorControl+0xd8>
            case DOOR_STATE_CLOSING:
                printf("[DOOR] Closing (local state)\r\n");
 8002dc0:	4810      	ldr	r0, [pc, #64]	@ (8002e04 <ProcessDoorControl+0x114>)
 8002dc2:	f003 f867 	bl	8005e94 <puts>
                // SendDoorStatus(DOOR_STATE_CLOSING);
                break;
 8002dc6:	bf00      	nop
        }
    }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200006fc 	.word	0x200006fc
 8002dd4:	08007f64 	.word	0x08007f64
 8002dd8:	08007c98 	.word	0x08007c98
 8002ddc:	08007f94 	.word	0x08007f94
 8002de0:	08007f9c 	.word	0x08007f9c
 8002de4:	08007fbc 	.word	0x08007fbc
 8002de8:	20000004 	.word	0x20000004
 8002dec:	08007fd4 	.word	0x08007fd4
 8002df0:	08007fec 	.word	0x08007fec
 8002df4:	2000070c 	.word	0x2000070c
 8002df8:	0800801c 	.word	0x0800801c
 8002dfc:	08008040 	.word	0x08008040
 8002e00:	08008064 	.word	0x08008064
 8002e04:	08008084 	.word	0x08008084

08002e08 <SendPhotoSensorEvent>:

/**
  * @brief  发送光电传感器事件
  */
void SendPhotoSensorEvent(uint8_t floor) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_PHOTO_SENSOR;
 8002e12:	2310      	movs	r3, #16
 8002e14:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = floor;
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73bb      	strb	r3, [r7, #14]
    tx_buffer[3] = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
    
    rs485_send_packet_dma(tx_buffer, 4);
 8002e22:	f107 030c 	add.w	r3, r7, #12
 8002e26:	2104      	movs	r1, #4
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f903 	bl	8001034 <rs485_send_packet_dma>
    system_state.rs485_tx_count++;
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <SendPhotoSensorEvent+0x44>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	3301      	adds	r3, #1
 8002e34:	4a05      	ldr	r2, [pc, #20]	@ (8002e4c <SendPhotoSensorEvent+0x44>)
 8002e36:	6113      	str	r3, [r2, #16]
    printf("[RS485 TX] Photo sensor floor %d\r\n", floor);
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4804      	ldr	r0, [pc, #16]	@ (8002e50 <SendPhotoSensorEvent+0x48>)
 8002e3e:	f002 ffc1 	bl	8005dc4 <iprintf>
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000004 	.word	0x20000004
 8002e50:	080080a4 	.word	0x080080a4

08002e54 <SendCabinCall>:

/**
  * @brief  发送轿厢内呼
  */
void SendCabinCall(uint8_t floor) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buffer[4];
    tx_buffer[0] = CMD_CABIN_CALL;
 8002e5e:	2331      	movs	r3, #49	@ 0x31
 8002e60:	723b      	strb	r3, [r7, #8]
    tx_buffer[1] = floor;
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	727b      	strb	r3, [r7, #9]
    tx_buffer[2] = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	72bb      	strb	r3, [r7, #10]
    tx_buffer[3] = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	72fb      	strb	r3, [r7, #11]
    
    printf("[RS485 TX] Sending cabin call for floor %d\r\n", floor);
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	4619      	mov	r1, r3
 8002e72:	481b      	ldr	r0, [pc, #108]	@ (8002ee0 <SendCabinCall+0x8c>)
 8002e74:	f002 ffa6 	bl	8005dc4 <iprintf>
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8002e78:	7a3b      	ldrb	r3, [r7, #8]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8002e7a:	4619      	mov	r1, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8002e7c:	7a7b      	ldrb	r3, [r7, #9]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8002e7e:	461a      	mov	r2, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8002e80:	7abb      	ldrb	r3, [r7, #10]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8002e82:	4618      	mov	r0, r3
           tx_buffer[0], tx_buffer[1], tx_buffer[2], tx_buffer[3]);
 8002e84:	7afb      	ldrb	r3, [r7, #11]
    printf("  Buffer: [0x%02X, 0x%02X, 0x%02X, 0x%02X]\r\n", 
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4816      	ldr	r0, [pc, #88]	@ (8002ee4 <SendCabinCall+0x90>)
 8002e8c:	f002 ff9a 	bl	8005dc4 <iprintf>
    
    rs485_status_t status = rs485_send_packet_dma(tx_buffer, 4);
 8002e90:	f107 0308 	add.w	r3, r7, #8
 8002e94:	2104      	movs	r1, #4
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe f8cc 	bl	8001034 <rs485_send_packet_dma>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	73fb      	strb	r3, [r7, #15]
    if (status == RS485_OK) {
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10b      	bne.n	8002ebe <SendCabinCall+0x6a>
        system_state.rs485_tx_count++;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <SendCabinCall+0x94>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee8 <SendCabinCall+0x94>)
 8002eae:	6113      	str	r3, [r2, #16]
        printf("[RS485 TX] Cabin call sent successfully (count=%lu)\r\n", system_state.rs485_tx_count);
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <SendCabinCall+0x94>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	480d      	ldr	r0, [pc, #52]	@ (8002eec <SendCabinCall+0x98>)
 8002eb8:	f002 ff84 	bl	8005dc4 <iprintf>
    } else if (status == RS485_BUSY) {
        printf("[RS485 TX] ERROR: RS485 busy!\r\n");
    } else {
        printf("[RS485 TX] ERROR: Send failed (status=%d)\r\n", status);
    }
}
 8002ebc:	e00b      	b.n	8002ed6 <SendCabinCall+0x82>
    } else if (status == RS485_BUSY) {
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d103      	bne.n	8002ecc <SendCabinCall+0x78>
        printf("[RS485 TX] ERROR: RS485 busy!\r\n");
 8002ec4:	480a      	ldr	r0, [pc, #40]	@ (8002ef0 <SendCabinCall+0x9c>)
 8002ec6:	f002 ffe5 	bl	8005e94 <puts>
}
 8002eca:	e004      	b.n	8002ed6 <SendCabinCall+0x82>
        printf("[RS485 TX] ERROR: Send failed (status=%d)\r\n", status);
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4808      	ldr	r0, [pc, #32]	@ (8002ef4 <SendCabinCall+0xa0>)
 8002ed2:	f002 ff77 	bl	8005dc4 <iprintf>
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	080080c8 	.word	0x080080c8
 8002ee4:	080080f8 	.word	0x080080f8
 8002ee8:	20000004 	.word	0x20000004
 8002eec:	08008128 	.word	0x08008128
 8002ef0:	08008160 	.word	0x08008160
 8002ef4:	08008180 	.word	0x08008180

08002ef8 <PhotoSensor_TriggerCallback>:
/**
  * @brief  光电传感器触发回调
  * @note   在中断中被调用
  */
void PhotoSensor_TriggerCallback(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
    sensor_triggered = true;
 8002efc:	4b03      	ldr	r3, [pc, #12]	@ (8002f0c <PhotoSensor_TriggerCallback+0x14>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200006f8 	.word	0x200006f8

08002f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  HAL GPIO EXTI回调 - 统一处理所有GPIO中断
  * @param  GPIO_Pin: 触发中断的引脚
  * @note   这个函数覆盖HAL库的weak函数
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f20:	d102      	bne.n	8002f28 <HAL_GPIO_EXTI_Callback+0x18>
        // PA11 中断 - 键盘按下
        Keyboard_IRQHandler();
 8002f22:	f7fe fcaf 	bl	8001884 <Keyboard_IRQHandler>
    }
    else if (GPIO_Pin == GPIO_PIN_5) {
        // PB5 中断 - 光电传感器
        PhotoSensor_IRQHandler();
    }
}
 8002f26:	e004      	b.n	8002f32 <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_Pin == GPIO_PIN_5) {
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_EXTI_Callback+0x22>
        PhotoSensor_IRQHandler();
 8002f2e:	f7fe fd0b 	bl	8001948 <PhotoSensor_IRQHandler>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_UART_TxCpltCallback>:

/**
  * @brief  UART TX DMA完成回调
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
    extern void rs485_tx_complete_callback(void);
    if (huart == &huart2) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <HAL_UART_TxCpltCallback+0x1c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_TxCpltCallback+0x14>
        rs485_tx_complete_callback();
 8002f4c:	f7fe f930 	bl	80011b0 <rs485_tx_complete_callback>
    }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	2000075c 	.word	0x2000075c

08002f5c <HAL_UART_RxCpltCallback>:

/**
  * @brief  UART RX DMA完成回调  
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    // DMA循环模式下不需要处理
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f72:	b672      	cpsid	i
}
 8002f74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <Error_Handler+0x8>
	...

08002f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <HAL_MspInit+0x5c>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4a14      	ldr	r2, [pc, #80]	@ (8002fd8 <HAL_MspInit+0x5c>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6193      	str	r3, [r2, #24]
 8002f8e:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <HAL_MspInit+0x5c>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <HAL_MspInit+0x5c>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002fd8 <HAL_MspInit+0x5c>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <HAL_MspInit+0x5c>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <HAL_MspInit+0x60>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <HAL_MspInit+0x60>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40010000 	.word	0x40010000

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <NMI_Handler+0x4>

08002fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <HardFault_Handler+0x4>

08002ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <MemManage_Handler+0x4>

08002ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <BusFault_Handler+0x4>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <UsageFault_Handler+0x4>

08003008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003030:	f000 fade 	bl	80035f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800303c:	4802      	ldr	r0, [pc, #8]	@ (8003048 <DMA1_Channel6_IRQHandler+0x10>)
 800303e:	f000 fd93 	bl	8003b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200007ec 	.word	0x200007ec

0800304c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <DMA1_Channel7_IRQHandler+0x10>)
 8003052:	f000 fd89 	bl	8003b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000830 	.word	0x20000830

08003060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* Check for IDLE interrupt */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <USART2_IRQHandler+0x20>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b10      	cmp	r3, #16
 8003070:	d101      	bne.n	8003076 <USART2_IRQHandler+0x16>
  {
    /* Call RS485 IDLE handler */
    extern void rs485_idle_interrupt_handler(void);
    rs485_idle_interrupt_handler();
 8003072:	f7fe f859 	bl	8001128 <rs485_idle_interrupt_handler>
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003076:	4802      	ldr	r0, [pc, #8]	@ (8003080 <USART2_IRQHandler+0x20>)
 8003078:	f001 fe8e 	bl	8004d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	2000075c 	.word	0x2000075c

08003084 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts for PB5 (Photo Sensor).
  */
void EXTI9_5_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003088:	2020      	movs	r0, #32
 800308a:	f001 f855 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}

08003092 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts for PA11 (Keyboard).
  */
void EXTI15_10_IRQHandler(void)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003096:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800309a:	f001 f84d 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e00a      	b.n	80030ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030b4:	f3af 8000 	nop.w
 80030b8:	4601      	mov	r1, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	60ba      	str	r2, [r7, #8]
 80030c0:	b2ca      	uxtb	r2, r1
 80030c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3301      	adds	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dbf0      	blt.n	80030b4 <_read+0x12>
  }

  return len;
 80030d2:	687b      	ldr	r3, [r7, #4]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003102:	605a      	str	r2, [r3, #4]
  return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <_isatty>:

int _isatty(int file)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003118:	2301      	movs	r3, #1
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	@ (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f002 ffe2 	bl	8006134 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	@ (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20005000 	.word	0x20005000
 800319c:	00000400 	.word	0x00000400
 80031a0:	20000710 	.word	0x20000710
 80031a4:	200009c8 	.word	0x200009c8

080031a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	@ (8003204 <MX_USART1_UART_Init+0x50>)
 80031bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031d8:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031da:	220c      	movs	r2, #12
 80031dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031ea:	4805      	ldr	r0, [pc, #20]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031ec:	f001 fbcc 	bl	8004988 <HAL_UART_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031f6:	f7ff feba 	bl	8002f6e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000714 	.word	0x20000714
 8003204:	40013800 	.word	0x40013800

08003208 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 800320e:	4a12      	ldr	r2, [pc, #72]	@ (8003258 <MX_USART2_UART_Init+0x50>)
 8003210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003212:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 8003214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800321a:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 8003222:	2200      	movs	r2, #0
 8003224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003226:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 8003228:	2200      	movs	r2, #0
 800322a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800322c:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 800322e:	220c      	movs	r2, #12
 8003230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003232:	4b08      	ldr	r3, [pc, #32]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 8003234:	2200      	movs	r2, #0
 8003236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 800323a:	2200      	movs	r2, #0
 800323c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800323e:	4805      	ldr	r0, [pc, #20]	@ (8003254 <MX_USART2_UART_Init+0x4c>)
 8003240:	f001 fba2 	bl	8004988 <HAL_UART_Init>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800324a:	f7ff fe90 	bl	8002f6e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000075c 	.word	0x2000075c
 8003258:	40004400 	.word	0x40004400

0800325c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003260:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 8003262:	4a11      	ldr	r2, [pc, #68]	@ (80032a8 <MX_USART3_UART_Init+0x4c>)
 8003264:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8003266:	4b0f      	ldr	r3, [pc, #60]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 8003268:	4a10      	ldr	r2, [pc, #64]	@ (80032ac <MX_USART3_UART_Init+0x50>)
 800326a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800326c:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003272:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003278:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 8003280:	220c      	movs	r2, #12
 8003282:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003284:	4b07      	ldr	r3, [pc, #28]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003290:	4804      	ldr	r0, [pc, #16]	@ (80032a4 <MX_USART3_UART_Init+0x48>)
 8003292:	f001 fb79 	bl	8004988 <HAL_UART_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 800329c:	f7ff fe67 	bl	8002f6e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200007a4 	.word	0x200007a4
 80032a8:	40004800 	.word	0x40004800
 80032ac:	000f4240 	.word	0x000f4240

080032b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 0320 	add.w	r3, r7, #32
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7e      	ldr	r2, [pc, #504]	@ (80034c4 <HAL_UART_MspInit+0x214>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d132      	bne.n	8003336 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032d0:	4b7d      	ldr	r3, [pc, #500]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	4a7c      	ldr	r2, [pc, #496]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 80032d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032da:	6193      	str	r3, [r2, #24]
 80032dc:	4b7a      	ldr	r3, [pc, #488]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e8:	4b77      	ldr	r3, [pc, #476]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a76      	ldr	r2, [pc, #472]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b74      	ldr	r3, [pc, #464]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0320 	add.w	r3, r7, #32
 8003312:	4619      	mov	r1, r3
 8003314:	486d      	ldr	r0, [pc, #436]	@ (80034cc <HAL_UART_MspInit+0x21c>)
 8003316:	f000 fd5b 	bl	8003dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800331a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800331e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003328:	f107 0320 	add.w	r3, r7, #32
 800332c:	4619      	mov	r1, r3
 800332e:	4867      	ldr	r0, [pc, #412]	@ (80034cc <HAL_UART_MspInit+0x21c>)
 8003330:	f000 fd4e 	bl	8003dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003334:	e0c1      	b.n	80034ba <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a65      	ldr	r2, [pc, #404]	@ (80034d0 <HAL_UART_MspInit+0x220>)
 800333c:	4293      	cmp	r3, r2
 800333e:	f040 8085 	bne.w	800344c <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003342:	4b61      	ldr	r3, [pc, #388]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4a60      	ldr	r2, [pc, #384]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334c:	61d3      	str	r3, [r2, #28]
 800334e:	4b5e      	ldr	r3, [pc, #376]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b5b      	ldr	r3, [pc, #364]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4a5a      	ldr	r2, [pc, #360]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6193      	str	r3, [r2, #24]
 8003366:	4b58      	ldr	r3, [pc, #352]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003372:	2304      	movs	r3, #4
 8003374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	4619      	mov	r1, r3
 8003384:	4851      	ldr	r0, [pc, #324]	@ (80034cc <HAL_UART_MspInit+0x21c>)
 8003386:	f000 fd23 	bl	8003dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800338a:	2308      	movs	r3, #8
 800338c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	f107 0320 	add.w	r3, r7, #32
 800339a:	4619      	mov	r1, r3
 800339c:	484b      	ldr	r0, [pc, #300]	@ (80034cc <HAL_UART_MspInit+0x21c>)
 800339e:	f000 fd17 	bl	8003dd0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80033a2:	4b4c      	ldr	r3, [pc, #304]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033a4:	4a4c      	ldr	r2, [pc, #304]	@ (80034d8 <HAL_UART_MspInit+0x228>)
 80033a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a8:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ae:	4b49      	ldr	r3, [pc, #292]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033b4:	4b47      	ldr	r3, [pc, #284]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033b6:	2280      	movs	r2, #128	@ 0x80
 80033b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ba:	4b46      	ldr	r3, [pc, #280]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c0:	4b44      	ldr	r3, [pc, #272]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80033c6:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033c8:	2220      	movs	r2, #32
 80033ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033cc:	4b41      	ldr	r3, [pc, #260]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80033d2:	4840      	ldr	r0, [pc, #256]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033d4:	f000 fa5a 	bl	800388c <HAL_DMA_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80033de:	f7ff fdc6 	bl	8002f6e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a3b      	ldr	r2, [pc, #236]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033e8:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <HAL_UART_MspInit+0x224>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80033ee:	4b3b      	ldr	r3, [pc, #236]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 80033f0:	4a3b      	ldr	r2, [pc, #236]	@ (80034e0 <HAL_UART_MspInit+0x230>)
 80033f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033f4:	4b39      	ldr	r3, [pc, #228]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 80033f6:	2210      	movs	r2, #16
 80033f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fa:	4b38      	ldr	r3, [pc, #224]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003400:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 8003402:	2280      	movs	r2, #128	@ 0x80
 8003404:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003406:	4b35      	ldr	r3, [pc, #212]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340c:	4b33      	ldr	r3, [pc, #204]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 800340e:	2200      	movs	r2, #0
 8003410:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003412:	4b32      	ldr	r3, [pc, #200]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 8003414:	2200      	movs	r2, #0
 8003416:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003418:	4b30      	ldr	r3, [pc, #192]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 800341a:	2200      	movs	r2, #0
 800341c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800341e:	482f      	ldr	r0, [pc, #188]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 8003420:	f000 fa34 	bl	800388c <HAL_DMA_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_UART_MspInit+0x17e>
      Error_Handler();
 800342a:	f7ff fda0 	bl	8002f6e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2a      	ldr	r2, [pc, #168]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 8003432:	639a      	str	r2, [r3, #56]	@ 0x38
 8003434:	4a29      	ldr	r2, [pc, #164]	@ (80034dc <HAL_UART_MspInit+0x22c>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	2026      	movs	r0, #38	@ 0x26
 8003440:	f000 f9ed 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003444:	2026      	movs	r0, #38	@ 0x26
 8003446:	f000 fa06 	bl	8003856 <HAL_NVIC_EnableIRQ>
}
 800344a:	e036      	b.n	80034ba <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART3)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <HAL_UART_MspInit+0x234>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d131      	bne.n	80034ba <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003456:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4a1b      	ldr	r2, [pc, #108]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003460:	61d3      	str	r3, [r2, #28]
 8003462:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346e:	4b16      	ldr	r3, [pc, #88]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4a15      	ldr	r2, [pc, #84]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	6193      	str	r3, [r2, #24]
 800347a:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <HAL_UART_MspInit+0x218>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800348a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003494:	f107 0320 	add.w	r3, r7, #32
 8003498:	4619      	mov	r1, r3
 800349a:	4813      	ldr	r0, [pc, #76]	@ (80034e8 <HAL_UART_MspInit+0x238>)
 800349c:	f000 fc98 	bl	8003dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ae:	f107 0320 	add.w	r3, r7, #32
 80034b2:	4619      	mov	r1, r3
 80034b4:	480c      	ldr	r0, [pc, #48]	@ (80034e8 <HAL_UART_MspInit+0x238>)
 80034b6:	f000 fc8b 	bl	8003dd0 <HAL_GPIO_Init>
}
 80034ba:	bf00      	nop
 80034bc:	3730      	adds	r7, #48	@ 0x30
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40010800 	.word	0x40010800
 80034d0:	40004400 	.word	0x40004400
 80034d4:	200007ec 	.word	0x200007ec
 80034d8:	4002006c 	.word	0x4002006c
 80034dc:	20000830 	.word	0x20000830
 80034e0:	40020080 	.word	0x40020080
 80034e4:	40004800 	.word	0x40004800
 80034e8:	40010c00 	.word	0x40010c00

080034ec <_write>:

/* USER CODE BEGIN 1 */

/* Redirect printf to USART1 for debug output */
int _write(int file, char *ptr, int len)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4804      	ldr	r0, [pc, #16]	@ (8003514 <_write+0x28>)
 8003504:	f001 fa90 	bl	8004a28 <HAL_UART_Transmit>
  return len;
 8003508:	687b      	ldr	r3, [r7, #4]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000714 	.word	0x20000714

08003518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003518:	f7ff fe46 	bl	80031a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800351c:	480b      	ldr	r0, [pc, #44]	@ (800354c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800351e:	490c      	ldr	r1, [pc, #48]	@ (8003550 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003520:	4a0c      	ldr	r2, [pc, #48]	@ (8003554 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003524:	e002      	b.n	800352c <LoopCopyDataInit>

08003526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800352a:	3304      	adds	r3, #4

0800352c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800352c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003530:	d3f9      	bcc.n	8003526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003532:	4a09      	ldr	r2, [pc, #36]	@ (8003558 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003534:	4c09      	ldr	r4, [pc, #36]	@ (800355c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003538:	e001      	b.n	800353e <LoopFillZerobss>

0800353a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800353a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800353c:	3204      	adds	r2, #4

0800353e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003540:	d3fb      	bcc.n	800353a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003542:	f002 fdfd 	bl	8006140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003546:	f7ff f82b 	bl	80025a0 <main>
  bx lr
 800354a:	4770      	bx	lr
  ldr r0, =_sdata
 800354c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003550:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003554:	08008254 	.word	0x08008254
  ldr r2, =_sbss
 8003558:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800355c:	200009c4 	.word	0x200009c4

08003560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003560:	e7fe      	b.n	8003560 <ADC1_2_IRQHandler>
	...

08003564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003568:	4b08      	ldr	r3, [pc, #32]	@ (800358c <HAL_Init+0x28>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a07      	ldr	r2, [pc, #28]	@ (800358c <HAL_Init+0x28>)
 800356e:	f043 0310 	orr.w	r3, r3, #16
 8003572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003574:	2003      	movs	r0, #3
 8003576:	f000 f947 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357a:	200f      	movs	r0, #15
 800357c:	f000 f808 	bl	8003590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003580:	f7ff fcfc 	bl	8002f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40022000 	.word	0x40022000

08003590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003598:	4b12      	ldr	r3, [pc, #72]	@ (80035e4 <HAL_InitTick+0x54>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_InitTick+0x58>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f95f 	bl	8003872 <HAL_SYSTICK_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00e      	b.n	80035dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d80a      	bhi.n	80035da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c4:	2200      	movs	r2, #0
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	f000 f927 	bl	800381e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d0:	4a06      	ldr	r2, [pc, #24]	@ (80035ec <HAL_InitTick+0x5c>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000024 	.word	0x20000024
 80035e8:	2000002c 	.word	0x2000002c
 80035ec:	20000028 	.word	0x20000028

080035f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f4:	4b05      	ldr	r3, [pc, #20]	@ (800360c <HAL_IncTick+0x1c>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_IncTick+0x20>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4413      	add	r3, r2
 8003600:	4a03      	ldr	r2, [pc, #12]	@ (8003610 <HAL_IncTick+0x20>)
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	2000002c 	.word	0x2000002c
 8003610:	20000874 	.word	0x20000874

08003614 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return uwTick;
 8003618:	4b02      	ldr	r3, [pc, #8]	@ (8003624 <HAL_GetTick+0x10>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	20000874 	.word	0x20000874

08003628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff fff0 	bl	8003614 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d005      	beq.n	800364e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_Delay+0x44>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800364e:	bf00      	nop
 8003650:	f7ff ffe0 	bl	8003614 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d8f7      	bhi.n	8003650 <HAL_Delay+0x28>
  {
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000002c 	.word	0x2000002c

08003670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800369c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a2:	4a04      	ldr	r2, [pc, #16]	@ (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	60d3      	str	r3, [r2, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <__NVIC_GetPriorityGrouping+0x18>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	f003 0307 	and.w	r3, r3, #7
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db0b      	blt.n	80036fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4906      	ldr	r1, [pc, #24]	@ (8003708 <__NVIC_EnableIRQ+0x34>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2001      	movs	r0, #1
 80036f6:	fa00 f202 	lsl.w	r2, r0, r2
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	e000e100 	.word	0xe000e100

0800370c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	db0a      	blt.n	8003736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	490c      	ldr	r1, [pc, #48]	@ (8003758 <__NVIC_SetPriority+0x4c>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	440b      	add	r3, r1
 8003730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003734:	e00a      	b.n	800374c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4908      	ldr	r1, [pc, #32]	@ (800375c <__NVIC_SetPriority+0x50>)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3b04      	subs	r3, #4
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	440b      	add	r3, r1
 800374a:	761a      	strb	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	@ 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf28      	it	cs
 800377e:	2304      	movcs	r3, #4
 8003780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3304      	adds	r3, #4
 8003786:	2b06      	cmp	r3, #6
 8003788:	d902      	bls.n	8003790 <NVIC_EncodePriority+0x30>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3b03      	subs	r3, #3
 800378e:	e000      	b.n	8003792 <NVIC_EncodePriority+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	4313      	orrs	r3, r2
         );
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	@ 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037d4:	d301      	bcc.n	80037da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00f      	b.n	80037fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037da:	4a0a      	ldr	r2, [pc, #40]	@ (8003804 <SysTick_Config+0x40>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e2:	210f      	movs	r1, #15
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f7ff ff90 	bl	800370c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ec:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <SysTick_Config+0x40>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f2:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <SysTick_Config+0x40>)
 80037f4:	2207      	movs	r2, #7
 80037f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff2d 	bl	8003670 <__NVIC_SetPriorityGrouping>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003830:	f7ff ff42 	bl	80036b8 <__NVIC_GetPriorityGrouping>
 8003834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff90 	bl	8003760 <NVIC_EncodePriority>
 8003840:	4602      	mov	r2, r0
 8003842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff5f 	bl	800370c <__NVIC_SetPriority>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff35 	bl	80036d4 <__NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffa2 	bl	80037c4 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e043      	b.n	800392a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <HAL_DMA_Init+0xa8>)
 80038aa:	4413      	add	r3, r2
 80038ac:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <HAL_DMA_Init+0xac>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	009a      	lsls	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <HAL_DMA_Init+0xb0>)
 80038be:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038d6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80038da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	bffdfff8 	.word	0xbffdfff8
 8003938:	cccccccd 	.word	0xcccccccd
 800393c:	40020000 	.word	0x40020000

08003940 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_DMA_Start_IT+0x20>
 800395c:	2302      	movs	r3, #2
 800395e:	e04b      	b.n	80039f8 <HAL_DMA_Start_IT+0xb8>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d13a      	bne.n	80039ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f9eb 	bl	8003d74 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 020e 	orr.w	r2, r2, #14
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e00f      	b.n	80039d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0204 	bic.w	r2, r2, #4
 80039c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 020a 	orr.w	r2, r2, #10
 80039d6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e005      	b.n	80039f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d008      	beq.n	8003a2a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e020      	b.n	8003a6c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 020e 	bic.w	r2, r2, #14
 8003a38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f202 	lsl.w	r2, r1, r2
 8003a58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d005      	beq.n	8003a9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	e051      	b.n	8003b40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020e 	bic.w	r2, r2, #14
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a22      	ldr	r2, [pc, #136]	@ (8003b4c <HAL_DMA_Abort_IT+0xd4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d029      	beq.n	8003b1a <HAL_DMA_Abort_IT+0xa2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a21      	ldr	r2, [pc, #132]	@ (8003b50 <HAL_DMA_Abort_IT+0xd8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x9e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <HAL_DMA_Abort_IT+0xdc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01a      	beq.n	8003b10 <HAL_DMA_Abort_IT+0x98>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1e      	ldr	r2, [pc, #120]	@ (8003b58 <HAL_DMA_Abort_IT+0xe0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d012      	beq.n	8003b0a <HAL_DMA_Abort_IT+0x92>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <HAL_DMA_Abort_IT+0xe4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00a      	beq.n	8003b04 <HAL_DMA_Abort_IT+0x8c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b60 <HAL_DMA_Abort_IT+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <HAL_DMA_Abort_IT+0x86>
 8003af8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003afc:	e00e      	b.n	8003b1c <HAL_DMA_Abort_IT+0xa4>
 8003afe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b02:	e00b      	b.n	8003b1c <HAL_DMA_Abort_IT+0xa4>
 8003b04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b08:	e008      	b.n	8003b1c <HAL_DMA_Abort_IT+0xa4>
 8003b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b0e:	e005      	b.n	8003b1c <HAL_DMA_Abort_IT+0xa4>
 8003b10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b14:	e002      	b.n	8003b1c <HAL_DMA_Abort_IT+0xa4>
 8003b16:	2310      	movs	r3, #16
 8003b18:	e000      	b.n	8003b1c <HAL_DMA_Abort_IT+0xa4>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4a11      	ldr	r2, [pc, #68]	@ (8003b64 <HAL_DMA_Abort_IT+0xec>)
 8003b1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
    } 
  }
  return status;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40020008 	.word	0x40020008
 8003b50:	4002001c 	.word	0x4002001c
 8003b54:	40020030 	.word	0x40020030
 8003b58:	40020044 	.word	0x40020044
 8003b5c:	40020058 	.word	0x40020058
 8003b60:	4002006c 	.word	0x4002006c
 8003b64:	40020000 	.word	0x40020000

08003b68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	2204      	movs	r2, #4
 8003b86:	409a      	lsls	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d04f      	beq.n	8003c30 <HAL_DMA_IRQHandler+0xc8>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04a      	beq.n	8003c30 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0204 	bic.w	r2, r2, #4
 8003bb6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a66      	ldr	r2, [pc, #408]	@ (8003d58 <HAL_DMA_IRQHandler+0x1f0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d029      	beq.n	8003c16 <HAL_DMA_IRQHandler+0xae>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a65      	ldr	r2, [pc, #404]	@ (8003d5c <HAL_DMA_IRQHandler+0x1f4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xaa>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a63      	ldr	r2, [pc, #396]	@ (8003d60 <HAL_DMA_IRQHandler+0x1f8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01a      	beq.n	8003c0c <HAL_DMA_IRQHandler+0xa4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a62      	ldr	r2, [pc, #392]	@ (8003d64 <HAL_DMA_IRQHandler+0x1fc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d012      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x9e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a60      	ldr	r2, [pc, #384]	@ (8003d68 <HAL_DMA_IRQHandler+0x200>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x98>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5f      	ldr	r2, [pc, #380]	@ (8003d6c <HAL_DMA_IRQHandler+0x204>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d102      	bne.n	8003bfa <HAL_DMA_IRQHandler+0x92>
 8003bf4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bf8:	e00e      	b.n	8003c18 <HAL_DMA_IRQHandler+0xb0>
 8003bfa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003bfe:	e00b      	b.n	8003c18 <HAL_DMA_IRQHandler+0xb0>
 8003c00:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003c04:	e008      	b.n	8003c18 <HAL_DMA_IRQHandler+0xb0>
 8003c06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c0a:	e005      	b.n	8003c18 <HAL_DMA_IRQHandler+0xb0>
 8003c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c10:	e002      	b.n	8003c18 <HAL_DMA_IRQHandler+0xb0>
 8003c12:	2340      	movs	r3, #64	@ 0x40
 8003c14:	e000      	b.n	8003c18 <HAL_DMA_IRQHandler+0xb0>
 8003c16:	2304      	movs	r3, #4
 8003c18:	4a55      	ldr	r2, [pc, #340]	@ (8003d70 <HAL_DMA_IRQHandler+0x208>)
 8003c1a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8094 	beq.w	8003d4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c2e:	e08e      	b.n	8003d4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	2202      	movs	r2, #2
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d056      	beq.n	8003cee <HAL_DMA_IRQHandler+0x186>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d051      	beq.n	8003cee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 020a 	bic.w	r2, r2, #10
 8003c66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a38      	ldr	r2, [pc, #224]	@ (8003d58 <HAL_DMA_IRQHandler+0x1f0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d029      	beq.n	8003cce <HAL_DMA_IRQHandler+0x166>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a37      	ldr	r2, [pc, #220]	@ (8003d5c <HAL_DMA_IRQHandler+0x1f4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d022      	beq.n	8003cca <HAL_DMA_IRQHandler+0x162>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a35      	ldr	r2, [pc, #212]	@ (8003d60 <HAL_DMA_IRQHandler+0x1f8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01a      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x15c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a34      	ldr	r2, [pc, #208]	@ (8003d64 <HAL_DMA_IRQHandler+0x1fc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d012      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x156>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a32      	ldr	r2, [pc, #200]	@ (8003d68 <HAL_DMA_IRQHandler+0x200>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x150>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a31      	ldr	r2, [pc, #196]	@ (8003d6c <HAL_DMA_IRQHandler+0x204>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d102      	bne.n	8003cb2 <HAL_DMA_IRQHandler+0x14a>
 8003cac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003cb0:	e00e      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x168>
 8003cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cb6:	e00b      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x168>
 8003cb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cbc:	e008      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x168>
 8003cbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cc2:	e005      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x168>
 8003cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cc8:	e002      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x168>
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e000      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x168>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	4a27      	ldr	r2, [pc, #156]	@ (8003d70 <HAL_DMA_IRQHandler+0x208>)
 8003cd2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d034      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cec:	e02f      	b.n	8003d4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d028      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x1e8>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d023      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020e 	bic.w	r2, r2, #14
 8003d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f202 	lsl.w	r2, r1, r2
 8003d26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
    }
  }
  return;
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
}
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40020008 	.word	0x40020008
 8003d5c:	4002001c 	.word	0x4002001c
 8003d60:	40020030 	.word	0x40020030
 8003d64:	40020044 	.word	0x40020044
 8003d68:	40020058 	.word	0x40020058
 8003d6c:	4002006c 	.word	0x4002006c
 8003d70:	40020000 	.word	0x40020000

08003d74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d108      	bne.n	8003db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003db2:	e007      	b.n	8003dc4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b08b      	sub	sp, #44	@ 0x2c
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de2:	e169      	b.n	80040b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003de4:	2201      	movs	r2, #1
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	f040 8158 	bne.w	80040b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a9a      	ldr	r2, [pc, #616]	@ (8004070 <HAL_GPIO_Init+0x2a0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d05e      	beq.n	8003eca <HAL_GPIO_Init+0xfa>
 8003e0c:	4a98      	ldr	r2, [pc, #608]	@ (8004070 <HAL_GPIO_Init+0x2a0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d875      	bhi.n	8003efe <HAL_GPIO_Init+0x12e>
 8003e12:	4a98      	ldr	r2, [pc, #608]	@ (8004074 <HAL_GPIO_Init+0x2a4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d058      	beq.n	8003eca <HAL_GPIO_Init+0xfa>
 8003e18:	4a96      	ldr	r2, [pc, #600]	@ (8004074 <HAL_GPIO_Init+0x2a4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d86f      	bhi.n	8003efe <HAL_GPIO_Init+0x12e>
 8003e1e:	4a96      	ldr	r2, [pc, #600]	@ (8004078 <HAL_GPIO_Init+0x2a8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d052      	beq.n	8003eca <HAL_GPIO_Init+0xfa>
 8003e24:	4a94      	ldr	r2, [pc, #592]	@ (8004078 <HAL_GPIO_Init+0x2a8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d869      	bhi.n	8003efe <HAL_GPIO_Init+0x12e>
 8003e2a:	4a94      	ldr	r2, [pc, #592]	@ (800407c <HAL_GPIO_Init+0x2ac>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d04c      	beq.n	8003eca <HAL_GPIO_Init+0xfa>
 8003e30:	4a92      	ldr	r2, [pc, #584]	@ (800407c <HAL_GPIO_Init+0x2ac>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d863      	bhi.n	8003efe <HAL_GPIO_Init+0x12e>
 8003e36:	4a92      	ldr	r2, [pc, #584]	@ (8004080 <HAL_GPIO_Init+0x2b0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d046      	beq.n	8003eca <HAL_GPIO_Init+0xfa>
 8003e3c:	4a90      	ldr	r2, [pc, #576]	@ (8004080 <HAL_GPIO_Init+0x2b0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d85d      	bhi.n	8003efe <HAL_GPIO_Init+0x12e>
 8003e42:	2b12      	cmp	r3, #18
 8003e44:	d82a      	bhi.n	8003e9c <HAL_GPIO_Init+0xcc>
 8003e46:	2b12      	cmp	r3, #18
 8003e48:	d859      	bhi.n	8003efe <HAL_GPIO_Init+0x12e>
 8003e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e50 <HAL_GPIO_Init+0x80>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003ecb 	.word	0x08003ecb
 8003e54:	08003ea5 	.word	0x08003ea5
 8003e58:	08003eb7 	.word	0x08003eb7
 8003e5c:	08003ef9 	.word	0x08003ef9
 8003e60:	08003eff 	.word	0x08003eff
 8003e64:	08003eff 	.word	0x08003eff
 8003e68:	08003eff 	.word	0x08003eff
 8003e6c:	08003eff 	.word	0x08003eff
 8003e70:	08003eff 	.word	0x08003eff
 8003e74:	08003eff 	.word	0x08003eff
 8003e78:	08003eff 	.word	0x08003eff
 8003e7c:	08003eff 	.word	0x08003eff
 8003e80:	08003eff 	.word	0x08003eff
 8003e84:	08003eff 	.word	0x08003eff
 8003e88:	08003eff 	.word	0x08003eff
 8003e8c:	08003eff 	.word	0x08003eff
 8003e90:	08003eff 	.word	0x08003eff
 8003e94:	08003ead 	.word	0x08003ead
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	4a79      	ldr	r2, [pc, #484]	@ (8004084 <HAL_GPIO_Init+0x2b4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ea2:	e02c      	b.n	8003efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	623b      	str	r3, [r7, #32]
          break;
 8003eaa:	e029      	b.n	8003f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	623b      	str	r3, [r7, #32]
          break;
 8003eb4:	e024      	b.n	8003f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	623b      	str	r3, [r7, #32]
          break;
 8003ebe:	e01f      	b.n	8003f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	623b      	str	r3, [r7, #32]
          break;
 8003ec8:	e01a      	b.n	8003f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d102      	bne.n	8003ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	623b      	str	r3, [r7, #32]
          break;
 8003ed6:	e013      	b.n	8003f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d105      	bne.n	8003eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	611a      	str	r2, [r3, #16]
          break;
 8003eea:	e009      	b.n	8003f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eec:	2308      	movs	r3, #8
 8003eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	615a      	str	r2, [r3, #20]
          break;
 8003ef6:	e003      	b.n	8003f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	623b      	str	r3, [r7, #32]
          break;
 8003efc:	e000      	b.n	8003f00 <HAL_GPIO_Init+0x130>
          break;
 8003efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2bff      	cmp	r3, #255	@ 0xff
 8003f04:	d801      	bhi.n	8003f0a <HAL_GPIO_Init+0x13a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	e001      	b.n	8003f0e <HAL_GPIO_Init+0x13e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2bff      	cmp	r3, #255	@ 0xff
 8003f14:	d802      	bhi.n	8003f1c <HAL_GPIO_Init+0x14c>
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	e002      	b.n	8003f22 <HAL_GPIO_Init+0x152>
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	3b08      	subs	r3, #8
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	210f      	movs	r1, #15
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80b1 	beq.w	80040b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f50:	4b4d      	ldr	r3, [pc, #308]	@ (8004088 <HAL_GPIO_Init+0x2b8>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	4a4c      	ldr	r2, [pc, #304]	@ (8004088 <HAL_GPIO_Init+0x2b8>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6193      	str	r3, [r2, #24]
 8003f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <HAL_GPIO_Init+0x2b8>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f68:	4a48      	ldr	r2, [pc, #288]	@ (800408c <HAL_GPIO_Init+0x2bc>)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	3302      	adds	r3, #2
 8003f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	220f      	movs	r2, #15
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a40      	ldr	r2, [pc, #256]	@ (8004090 <HAL_GPIO_Init+0x2c0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_GPIO_Init+0x1ec>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3f      	ldr	r2, [pc, #252]	@ (8004094 <HAL_GPIO_Init+0x2c4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_GPIO_Init+0x1e8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8004098 <HAL_GPIO_Init+0x2c8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <HAL_GPIO_Init+0x1e4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3d      	ldr	r2, [pc, #244]	@ (800409c <HAL_GPIO_Init+0x2cc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d101      	bne.n	8003fb0 <HAL_GPIO_Init+0x1e0>
 8003fac:	2303      	movs	r3, #3
 8003fae:	e006      	b.n	8003fbe <HAL_GPIO_Init+0x1ee>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	e004      	b.n	8003fbe <HAL_GPIO_Init+0x1ee>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e002      	b.n	8003fbe <HAL_GPIO_Init+0x1ee>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <HAL_GPIO_Init+0x1ee>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc0:	f002 0203 	and.w	r2, r2, #3
 8003fc4:	0092      	lsls	r2, r2, #2
 8003fc6:	4093      	lsls	r3, r2
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fce:	492f      	ldr	r1, [pc, #188]	@ (800408c <HAL_GPIO_Init+0x2bc>)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	492c      	ldr	r1, [pc, #176]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]
 8003ff4:	e006      	b.n	8004004 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	4928      	ldr	r1, [pc, #160]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004000:	4013      	ands	r3, r2
 8004002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004010:	4b23      	ldr	r3, [pc, #140]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	4922      	ldr	r1, [pc, #136]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
 800401c:	e006      	b.n	800402c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800401e:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	43db      	mvns	r3, r3
 8004026:	491e      	ldr	r1, [pc, #120]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004028:	4013      	ands	r3, r2
 800402a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d006      	beq.n	8004046 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004038:	4b19      	ldr	r3, [pc, #100]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4918      	ldr	r1, [pc, #96]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	e006      	b.n	8004054 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004046:	4b16      	ldr	r3, [pc, #88]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	43db      	mvns	r3, r3
 800404e:	4914      	ldr	r1, [pc, #80]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004050:	4013      	ands	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d021      	beq.n	80040a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004060:	4b0f      	ldr	r3, [pc, #60]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	490e      	ldr	r1, [pc, #56]	@ (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]
 800406c:	e021      	b.n	80040b2 <HAL_GPIO_Init+0x2e2>
 800406e:	bf00      	nop
 8004070:	10320000 	.word	0x10320000
 8004074:	10310000 	.word	0x10310000
 8004078:	10220000 	.word	0x10220000
 800407c:	10210000 	.word	0x10210000
 8004080:	10120000 	.word	0x10120000
 8004084:	10110000 	.word	0x10110000
 8004088:	40021000 	.word	0x40021000
 800408c:	40010000 	.word	0x40010000
 8004090:	40010800 	.word	0x40010800
 8004094:	40010c00 	.word	0x40010c00
 8004098:	40011000 	.word	0x40011000
 800409c:	40011400 	.word	0x40011400
 80040a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_GPIO_Init+0x304>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	4909      	ldr	r1, [pc, #36]	@ (80040d4 <HAL_GPIO_Init+0x304>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	3301      	adds	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f47f ae8e 	bne.w	8003de4 <HAL_GPIO_Init+0x14>
  }
}
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	372c      	adds	r7, #44	@ 0x2c
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	40010400 	.word	0x40010400

080040d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	e001      	b.n	80040fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	807b      	strh	r3, [r7, #2]
 8004112:	4613      	mov	r3, r2
 8004114:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004116:	787b      	ldrb	r3, [r7, #1]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411c:	887a      	ldrh	r2, [r7, #2]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004122:	e003      	b.n	800412c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	041a      	lsls	r2, r3, #16
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	611a      	str	r2, [r3, #16]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
	...

08004138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004142:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800414e:	4a05      	ldr	r2, [pc, #20]	@ (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe feda 	bl	8002f10 <HAL_GPIO_EXTI_Callback>
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40010400 	.word	0x40010400

08004168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e272      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8087 	beq.w	8004296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004188:	4b92      	ldr	r3, [pc, #584]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b04      	cmp	r3, #4
 8004192:	d00c      	beq.n	80041ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004194:	4b8f      	ldr	r3, [pc, #572]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b08      	cmp	r3, #8
 800419e:	d112      	bne.n	80041c6 <HAL_RCC_OscConfig+0x5e>
 80041a0:	4b8c      	ldr	r3, [pc, #560]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ae:	4b89      	ldr	r3, [pc, #548]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d06c      	beq.n	8004294 <HAL_RCC_OscConfig+0x12c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d168      	bne.n	8004294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e24c      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x76>
 80041d0:	4b80      	ldr	r3, [pc, #512]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7f      	ldr	r2, [pc, #508]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e02e      	b.n	800423c <HAL_RCC_OscConfig+0xd4>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4b7b      	ldr	r3, [pc, #492]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7a      	ldr	r2, [pc, #488]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b78      	ldr	r3, [pc, #480]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a77      	ldr	r2, [pc, #476]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e01d      	b.n	800423c <HAL_RCC_OscConfig+0xd4>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0xbc>
 800420a:	4b72      	ldr	r3, [pc, #456]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a71      	ldr	r2, [pc, #452]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b6f      	ldr	r3, [pc, #444]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6e      	ldr	r2, [pc, #440]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0xd4>
 8004224:	4b6b      	ldr	r3, [pc, #428]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a6a      	ldr	r2, [pc, #424]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 800422a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b68      	ldr	r3, [pc, #416]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a67      	ldr	r2, [pc, #412]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800423a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7ff f9e6 	bl	8003614 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7ff f9e2 	bl	8003614 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	@ 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e200      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0xe4>
 800426a:	e014      	b.n	8004296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7ff f9d2 	bl	8003614 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7ff f9ce 	bl	8003614 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	@ 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e1ec      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	4b53      	ldr	r3, [pc, #332]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x10c>
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d063      	beq.n	800436a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a2:	4b4c      	ldr	r3, [pc, #304]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042ae:	4b49      	ldr	r3, [pc, #292]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d11c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x18c>
 80042ba:	4b46      	ldr	r3, [pc, #280]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d116      	bne.n	80042f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c6:	4b43      	ldr	r3, [pc, #268]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x176>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e1c0      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	4b3d      	ldr	r3, [pc, #244]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4939      	ldr	r1, [pc, #228]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	e03a      	b.n	800436a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	4b36      	ldr	r3, [pc, #216]	@ (80043d8 <HAL_RCC_OscConfig+0x270>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7ff f987 	bl	8003614 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430a:	f7ff f983 	bl	8003614 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1a1      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004328:	4b2a      	ldr	r3, [pc, #168]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4927      	ldr	r1, [pc, #156]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
 800433c:	e015      	b.n	800436a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433e:	4b26      	ldr	r3, [pc, #152]	@ (80043d8 <HAL_RCC_OscConfig+0x270>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7ff f966 	bl	8003614 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434c:	f7ff f962 	bl	8003614 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e180      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	4b1d      	ldr	r3, [pc, #116]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03a      	beq.n	80043ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d019      	beq.n	80043b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800437e:	4b17      	ldr	r3, [pc, #92]	@ (80043dc <HAL_RCC_OscConfig+0x274>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004384:	f7ff f946 	bl	8003614 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438c:	f7ff f942 	bl	8003614 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e160      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043aa:	2001      	movs	r0, #1
 80043ac:	f000 face 	bl	800494c <RCC_Delay>
 80043b0:	e01c      	b.n	80043ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b2:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <HAL_RCC_OscConfig+0x274>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7ff f92c 	bl	8003614 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043be:	e00f      	b.n	80043e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c0:	f7ff f928 	bl	8003614 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d908      	bls.n	80043e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e146      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	42420000 	.word	0x42420000
 80043dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	4b92      	ldr	r3, [pc, #584]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e9      	bne.n	80043c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a6 	beq.w	8004546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b8b      	ldr	r3, [pc, #556]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	4b88      	ldr	r3, [pc, #544]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4a87      	ldr	r2, [pc, #540]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004414:	61d3      	str	r3, [r2, #28]
 8004416:	4b85      	ldr	r3, [pc, #532]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	4b82      	ldr	r3, [pc, #520]	@ (8004630 <HAL_RCC_OscConfig+0x4c8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d118      	bne.n	8004464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004432:	4b7f      	ldr	r3, [pc, #508]	@ (8004630 <HAL_RCC_OscConfig+0x4c8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7e      	ldr	r2, [pc, #504]	@ (8004630 <HAL_RCC_OscConfig+0x4c8>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800443c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443e:	f7ff f8e9 	bl	8003614 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004446:	f7ff f8e5 	bl	8003614 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b64      	cmp	r3, #100	@ 0x64
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e103      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	4b75      	ldr	r3, [pc, #468]	@ (8004630 <HAL_RCC_OscConfig+0x4c8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x312>
 800446c:	4b6f      	ldr	r3, [pc, #444]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	4a6e      	ldr	r2, [pc, #440]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6213      	str	r3, [r2, #32]
 8004478:	e02d      	b.n	80044d6 <HAL_RCC_OscConfig+0x36e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x334>
 8004482:	4b6a      	ldr	r3, [pc, #424]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	4a69      	ldr	r2, [pc, #420]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	6213      	str	r3, [r2, #32]
 800448e:	4b67      	ldr	r3, [pc, #412]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	4a66      	ldr	r2, [pc, #408]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	6213      	str	r3, [r2, #32]
 800449a:	e01c      	b.n	80044d6 <HAL_RCC_OscConfig+0x36e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d10c      	bne.n	80044be <HAL_RCC_OscConfig+0x356>
 80044a4:	4b61      	ldr	r3, [pc, #388]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4a60      	ldr	r2, [pc, #384]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	f043 0304 	orr.w	r3, r3, #4
 80044ae:	6213      	str	r3, [r2, #32]
 80044b0:	4b5e      	ldr	r3, [pc, #376]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	4a5d      	ldr	r2, [pc, #372]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6213      	str	r3, [r2, #32]
 80044bc:	e00b      	b.n	80044d6 <HAL_RCC_OscConfig+0x36e>
 80044be:	4b5b      	ldr	r3, [pc, #364]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	4a5a      	ldr	r2, [pc, #360]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	6213      	str	r3, [r2, #32]
 80044ca:	4b58      	ldr	r3, [pc, #352]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4a57      	ldr	r2, [pc, #348]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	f023 0304 	bic.w	r3, r3, #4
 80044d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d015      	beq.n	800450a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044de:	f7ff f899 	bl	8003614 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7ff f895 	bl	8003614 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e0b1      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fc:	4b4b      	ldr	r3, [pc, #300]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ee      	beq.n	80044e6 <HAL_RCC_OscConfig+0x37e>
 8004508:	e014      	b.n	8004534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7ff f883 	bl	8003614 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7ff f87f 	bl	8003614 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e09b      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004528:	4b40      	ldr	r3, [pc, #256]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ee      	bne.n	8004512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453a:	4b3c      	ldr	r3, [pc, #240]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4a3b      	ldr	r2, [pc, #236]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8087 	beq.w	800465e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004550:	4b36      	ldr	r3, [pc, #216]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b08      	cmp	r3, #8
 800455a:	d061      	beq.n	8004620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d146      	bne.n	80045f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004564:	4b33      	ldr	r3, [pc, #204]	@ (8004634 <HAL_RCC_OscConfig+0x4cc>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7ff f853 	bl	8003614 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004572:	f7ff f84f 	bl	8003614 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e06d      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004584:	4b29      	ldr	r3, [pc, #164]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004598:	d108      	bne.n	80045ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800459a:	4b24      	ldr	r3, [pc, #144]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	4921      	ldr	r1, [pc, #132]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ac:	4b1f      	ldr	r3, [pc, #124]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a19      	ldr	r1, [r3, #32]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	430b      	orrs	r3, r1
 80045be:	491b      	ldr	r1, [pc, #108]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004634 <HAL_RCC_OscConfig+0x4cc>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7ff f823 	bl	8003614 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d2:	f7ff f81f 	bl	8003614 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e03d      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045e4:	4b11      	ldr	r3, [pc, #68]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x46a>
 80045f0:	e035      	b.n	800465e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f2:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <HAL_RCC_OscConfig+0x4cc>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7ff f80c 	bl	8003614 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7ff f808 	bl	8003614 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e026      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004612:	4b06      	ldr	r3, [pc, #24]	@ (800462c <HAL_RCC_OscConfig+0x4c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x498>
 800461e:	e01e      	b.n	800465e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d107      	bne.n	8004638 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e019      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
 8004634:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <HAL_RCC_OscConfig+0x500>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	429a      	cmp	r2, r3
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000

0800466c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0d0      	b.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004680:	4b6a      	ldr	r3, [pc, #424]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d910      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b67      	ldr	r3, [pc, #412]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 0207 	bic.w	r2, r3, #7
 8004696:	4965      	ldr	r1, [pc, #404]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b63      	ldr	r3, [pc, #396]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0b8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c8:	4b59      	ldr	r3, [pc, #356]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4a58      	ldr	r2, [pc, #352]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4a52      	ldr	r2, [pc, #328]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80046ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b50      	ldr	r3, [pc, #320]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	494d      	ldr	r1, [pc, #308]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d040      	beq.n	800478c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d115      	bne.n	800474a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472a:	4b41      	ldr	r3, [pc, #260]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e073      	b.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473a:	4b3d      	ldr	r3, [pc, #244]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e06b      	b.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474a:	4b39      	ldr	r3, [pc, #228]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f023 0203 	bic.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4936      	ldr	r1, [pc, #216]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800475c:	f7fe ff5a 	bl	8003614 <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	e00a      	b.n	800477a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	f7fe ff56 	bl	8003614 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e053      	b.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	4b2d      	ldr	r3, [pc, #180]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 020c 	and.w	r2, r3, #12
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	429a      	cmp	r2, r3
 800478a:	d1eb      	bne.n	8004764 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800478c:	4b27      	ldr	r3, [pc, #156]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d210      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b24      	ldr	r3, [pc, #144]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	4922      	ldr	r1, [pc, #136]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e032      	b.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4916      	ldr	r1, [pc, #88]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047e6:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	490e      	ldr	r1, [pc, #56]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047fa:	f000 f821 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490a      	ldr	r1, [pc, #40]	@ (8004834 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a09      	ldr	r2, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x1cc>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_RCC_ClockConfig+0x1d0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe feb8 	bl	8003590 <HAL_InitTick>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40022000 	.word	0x40022000
 8004830:	40021000 	.word	0x40021000
 8004834:	080081ec 	.word	0x080081ec
 8004838:	20000024 	.word	0x20000024
 800483c:	20000028 	.word	0x20000028

08004840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800485a:	4b1e      	ldr	r3, [pc, #120]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b04      	cmp	r3, #4
 8004868:	d002      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x30>
 800486a:	2b08      	cmp	r3, #8
 800486c:	d003      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0x36>
 800486e:	e027      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004870:	4b19      	ldr	r3, [pc, #100]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004872:	613b      	str	r3, [r7, #16]
      break;
 8004874:	e027      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	0c9b      	lsrs	r3, r3, #18
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	4a17      	ldr	r2, [pc, #92]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004880:	5cd3      	ldrb	r3, [r2, r3]
 8004882:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d010      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800488e:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0c5b      	lsrs	r3, r3, #17
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	4a11      	ldr	r2, [pc, #68]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800489a:	5cd3      	ldrb	r3, [r2, r3]
 800489c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a0d      	ldr	r2, [pc, #52]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048a2:	fb03 f202 	mul.w	r2, r3, r2
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e004      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a0c      	ldr	r2, [pc, #48]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048b4:	fb02 f303 	mul.w	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	613b      	str	r3, [r7, #16]
      break;
 80048be:	e002      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048c2:	613b      	str	r3, [r7, #16]
      break;
 80048c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c6:	693b      	ldr	r3, [r7, #16]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	007a1200 	.word	0x007a1200
 80048dc:	08008204 	.word	0x08008204
 80048e0:	08008214 	.word	0x08008214
 80048e4:	003d0900 	.word	0x003d0900

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b02      	ldr	r3, [pc, #8]	@ (80048f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	20000024 	.word	0x20000024

080048fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004900:	f7ff fff2 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	4b05      	ldr	r3, [pc, #20]	@ (800491c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4903      	ldr	r1, [pc, #12]	@ (8004920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004912:	5ccb      	ldrb	r3, [r1, r3]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000
 8004920:	080081fc 	.word	0x080081fc

08004924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004928:	f7ff ffde 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	0adb      	lsrs	r3, r3, #11
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	@ (8004948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	080081fc 	.word	0x080081fc

0800494c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004954:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <RCC_Delay+0x34>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <RCC_Delay+0x38>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0a5b      	lsrs	r3, r3, #9
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004968:	bf00      	nop
  }
  while (Delay --);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	60fa      	str	r2, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f9      	bne.n	8004968 <RCC_Delay+0x1c>
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr
 8004980:	20000024 	.word	0x20000024
 8004984:	10624dd3 	.word	0x10624dd3

08004988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e042      	b.n	8004a20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fe fc7e 	bl	80032b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2224      	movs	r2, #36	@ 0x24
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 f8a9 	bl	8005b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	@ 0x28
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d175      	bne.n	8004b34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_UART_Transmit+0x2c>
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e06e      	b.n	8004b36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2221      	movs	r2, #33	@ 0x21
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a66:	f7fe fdd5 	bl	8003614 <HAL_GetTick>
 8004a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	88fa      	ldrh	r2, [r7, #6]
 8004a76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a80:	d108      	bne.n	8004a94 <HAL_UART_Transmit+0x6c>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	e003      	b.n	8004a9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a9c:	e02e      	b.n	8004afc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2180      	movs	r1, #128	@ 0x80
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 fd86 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e03a      	b.n	8004b36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	3302      	adds	r3, #2
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	e007      	b.n	8004aee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	3301      	adds	r3, #1
 8004aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1cb      	bne.n	8004a9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2140      	movs	r1, #64	@ 0x40
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fd52 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e006      	b.n	8004b36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b08a      	sub	sp, #40	@ 0x28
 8004b42:	af02      	add	r7, sp, #8
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	f040 8081 	bne.w	8004c62 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_UART_Receive+0x2e>
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e079      	b.n	8004c64 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2222      	movs	r2, #34	@ 0x22
 8004b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b84:	f7fe fd46 	bl	8003614 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9e:	d108      	bne.n	8004bb2 <HAL_UART_Receive+0x74>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e003      	b.n	8004bba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004bba:	e047      	b.n	8004c4c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2120      	movs	r1, #32
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fcf7 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e042      	b.n	8004c64 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10c      	bne.n	8004bfe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e01f      	b.n	8004c3e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c06:	d007      	beq.n	8004c18 <HAL_UART_Receive+0xda>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <HAL_UART_Receive+0xe8>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e008      	b.n	8004c38 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1b2      	bne.n	8004bbc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
  }
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08c      	sub	sp, #48	@ 0x30
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d156      	bne.n	8004d34 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_UART_Transmit_DMA+0x26>
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e04f      	b.n	8004d36 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2221      	movs	r2, #33	@ 0x21
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	4a21      	ldr	r2, [pc, #132]	@ (8004d40 <HAL_UART_Transmit_DMA+0xd4>)
 8004cbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	4a20      	ldr	r2, [pc, #128]	@ (8004d44 <HAL_UART_Transmit_DMA+0xd8>)
 8004cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cca:	4a1f      	ldr	r2, [pc, #124]	@ (8004d48 <HAL_UART_Transmit_DMA+0xdc>)
 8004ccc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	461a      	mov	r2, r3
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	f7fe fe27 	bl	8003940 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3314      	adds	r3, #20
 8004d02:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d1e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6a39      	ldr	r1, [r7, #32]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3730      	adds	r7, #48	@ 0x30
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	08005309 	.word	0x08005309
 8004d44:	080053a3 	.word	0x080053a3
 8004d48:	08005527 	.word	0x08005527

08004d4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d112      	bne.n	8004d8c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_UART_Receive_DMA+0x26>
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e00b      	b.n	8004d8e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fc72 	bl	800566c <UART_Start_Receive_DMA>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	e000      	b.n	8004d8e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d8c:	2302      	movs	r3, #2
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10f      	bne.n	8004dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_UART_IRQHandler+0x66>
 8004dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fdd6 	bl	80059a8 <UART_Receive_IT>
      return;
 8004dfc:	e25b      	b.n	80052b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80de 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x22c>
 8004e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80d1 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <HAL_UART_IRQHandler+0xae>
 8004e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0xd2>
 8004e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f043 0202 	orr.w	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_UART_IRQHandler+0xf6>
 8004e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e86:	f043 0204 	orr.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d011      	beq.n	8004ebe <HAL_UART_IRQHandler+0x126>
 8004e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d105      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	f043 0208 	orr.w	r2, r3, #8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 81f2 	beq.w	80052ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x14e>
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fd61 	bl	80059a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <HAL_UART_IRQHandler+0x17a>
 8004f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04f      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fc6b 	bl	80057ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d041      	beq.n	8004faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1d9      	bne.n	8004f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d013      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005178 <HAL_UART_IRQHandler+0x3e0>)
 8004f80:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fd76 	bl	8003a78 <HAL_DMA_Abort_IT>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	e00e      	b.n	8004fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f99c 	bl	80052e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	e00a      	b.n	8004fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f998 	bl	80052e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e006      	b.n	8004fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f994 	bl	80052e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fbe:	e175      	b.n	80052ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	bf00      	nop
    return;
 8004fc2:	e173      	b.n	80052ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	f040 814f 	bne.w	800526c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8148 	beq.w	800526c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8141 	beq.w	800526c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80b6 	beq.w	800517c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800501c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8145 	beq.w	80052b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800502a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800502e:	429a      	cmp	r2, r3
 8005030:	f080 813e 	bcs.w	80052b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800503a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b20      	cmp	r3, #32
 8005044:	f000 8088 	beq.w	8005158 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	330c      	adds	r3, #12
 800504e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800505e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005066:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005074:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005080:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800508c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1d9      	bne.n	8005048 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e1      	bne.n	8005094 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3314      	adds	r3, #20
 80050f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e3      	bne.n	80050d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005128:	f023 0310 	bic.w	r3, r3, #16
 800512c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800513a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800513c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e3      	bne.n	8005116 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fc54 	bl	8003a00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005166:	b29b      	uxth	r3, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	b29b      	uxth	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8bf 	bl	80052f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005174:	e09c      	b.n	80052b0 <HAL_UART_IRQHandler+0x518>
 8005176:	bf00      	nop
 8005178:	080058b3 	.word	0x080058b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005184:	b29b      	uxth	r3, r3
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 808e 	beq.w	80052b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8089 	beq.w	80052b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e3      	bne.n	80051a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	623b      	str	r3, [r7, #32]
   return(result);
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e3      	bne.n	80051da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005244:	61fa      	str	r2, [r7, #28]
 8005246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	617b      	str	r3, [r7, #20]
   return(result);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e3      	bne.n	8005220 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800525e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f844 	bl	80052f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800526a:	e023      	b.n	80052b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <HAL_UART_IRQHandler+0x4f4>
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb28 	bl	80058da <UART_Transmit_IT>
    return;
 800528a:	e014      	b.n	80052b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00e      	beq.n	80052b6 <HAL_UART_IRQHandler+0x51e>
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fb67 	bl	8005978 <UART_EndTransmit_IT>
    return;
 80052aa:	e004      	b.n	80052b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80052ac:	bf00      	nop
 80052ae:	e002      	b.n	80052b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052b0:	bf00      	nop
 80052b2:	e000      	b.n	80052b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052b4:	bf00      	nop
  }
}
 80052b6:	37e8      	adds	r7, #232	@ 0xe8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b090      	sub	sp, #64	@ 0x40
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d137      	bne.n	8005394 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005326:	2200      	movs	r2, #0
 8005328:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800532a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	623b      	str	r3, [r7, #32]
   return(result);
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005340:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3314      	adds	r3, #20
 8005348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800534a:	633a      	str	r2, [r7, #48]	@ 0x30
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e5      	bne.n	800532a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	60fb      	str	r3, [r7, #12]
   return(result);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005374:	637b      	str	r3, [r7, #52]	@ 0x34
 8005376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800537e:	61fa      	str	r2, [r7, #28]
 8005380:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	69b9      	ldr	r1, [r7, #24]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	617b      	str	r3, [r7, #20]
   return(result);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005392:	e002      	b.n	800539a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005394:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005396:	f7fd fdd1 	bl	8002f3c <HAL_UART_TxCpltCallback>
}
 800539a:	bf00      	nop
 800539c:	3740      	adds	r7, #64	@ 0x40
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff ff83 	bl	80052bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b09c      	sub	sp, #112	@ 0x70
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d172      	bne.n	80054c0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80053da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053dc:	2200      	movs	r2, #0
 80053de:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005400:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005402:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005406:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800540e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	667b      	str	r3, [r7, #100]	@ 0x64
 800542c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005434:	647a      	str	r2, [r7, #68]	@ 0x44
 8005436:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800543a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	623b      	str	r3, [r7, #32]
   return(result);
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800545e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3314      	adds	r3, #20
 8005466:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005468:	633a      	str	r2, [r7, #48]	@ 0x30
 800546a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800546e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e5      	bne.n	8005448 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800547c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800547e:	2220      	movs	r2, #32
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	2b01      	cmp	r3, #1
 800548a:	d119      	bne.n	80054c0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	60fb      	str	r3, [r7, #12]
   return(result);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0310 	bic.w	r3, r3, #16
 80054a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054ac:	61fa      	str	r2, [r7, #28]
 80054ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	69b9      	ldr	r1, [r7, #24]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e5      	bne.n	800548c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c2:	2200      	movs	r2, #0
 80054c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d106      	bne.n	80054dc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054d2:	4619      	mov	r1, r3
 80054d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80054d6:	f7ff ff0c 	bl	80052f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054da:	e002      	b.n	80054e2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80054dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80054de:	f7fd fd3d 	bl	8002f5c <HAL_UART_RxCpltCallback>
}
 80054e2:	bf00      	nop
 80054e4:	3770      	adds	r7, #112	@ 0x70
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	2b01      	cmp	r3, #1
 8005504:	d108      	bne.n	8005518 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	4619      	mov	r1, r3
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff feee 	bl	80052f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005516:	e002      	b.n	800551e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff fed8 	bl	80052ce <HAL_UART_RxHalfCpltCallback>
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b21      	cmp	r3, #33	@ 0x21
 8005558:	d108      	bne.n	800556c <UART_DMAError+0x46>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2200      	movs	r2, #0
 8005564:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f000 f91a 	bl	80057a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b22      	cmp	r3, #34	@ 0x22
 800558c:	d108      	bne.n	80055a0 <UART_DMAError+0x7a>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800559a:	68b8      	ldr	r0, [r7, #8]
 800559c:	f000 f927 	bl	80057ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a4:	f043 0210 	orr.w	r2, r3, #16
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055ac:	68b8      	ldr	r0, [r7, #8]
 80055ae:	f7ff fe97 	bl	80052e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ca:	e03b      	b.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d037      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7fe f81e 	bl	8003614 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	6a3a      	ldr	r2, [r7, #32]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <UART_WaitOnFlagUntilTimeout+0x30>
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e03a      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d023      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b80      	cmp	r3, #128	@ 0x80
 8005600:	d020      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d01d      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b08      	cmp	r3, #8
 8005614:	d116      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f8de 	bl	80057ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2208      	movs	r2, #8
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e00f      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4013      	ands	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	429a      	cmp	r2, r3
 8005660:	d0b4      	beq.n	80055cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b098      	sub	sp, #96	@ 0x60
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2222      	movs	r2, #34	@ 0x22
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005698:	4a3e      	ldr	r2, [pc, #248]	@ (8005794 <UART_Start_Receive_DMA+0x128>)
 800569a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a0:	4a3d      	ldr	r2, [pc, #244]	@ (8005798 <UART_Start_Receive_DMA+0x12c>)
 80056a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a8:	4a3c      	ldr	r2, [pc, #240]	@ (800579c <UART_Start_Receive_DMA+0x130>)
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b0:	2200      	movs	r2, #0
 80056b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80056b4:	f107 0308 	add.w	r3, r7, #8
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4619      	mov	r1, r3
 80056c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	f7fe f938 	bl	8003940 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d019      	beq.n	8005722 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005704:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800570e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005710:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005714:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800571c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3314      	adds	r3, #20
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	657b      	str	r3, [r7, #84]	@ 0x54
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005742:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3314      	adds	r3, #20
 800575c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	617b      	str	r3, [r7, #20]
   return(result);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800576c:	653b      	str	r3, [r7, #80]	@ 0x50
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005776:	627a      	str	r2, [r7, #36]	@ 0x24
 8005778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6a39      	ldr	r1, [r7, #32]
 800577c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	61fb      	str	r3, [r7, #28]
   return(result);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e5      	bne.n	8005756 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3760      	adds	r7, #96	@ 0x60
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	080053bf 	.word	0x080053bf
 8005798:	080054eb 	.word	0x080054eb
 800579c:	08005527 	.word	0x08005527

080057a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b089      	sub	sp, #36	@ 0x24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	61ba      	str	r2, [r7, #24]
 80057ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6979      	ldr	r1, [r7, #20]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	613b      	str	r3, [r7, #16]
   return(result);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80057e4:	bf00      	nop
 80057e6:	3724      	adds	r7, #36	@ 0x24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b095      	sub	sp, #84	@ 0x54
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800580c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005816:	643a      	str	r2, [r7, #64]	@ 0x40
 8005818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800581c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	61fb      	str	r3, [r7, #28]
   return(result);
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3314      	adds	r3, #20
 8005848:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800584a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e5      	bne.n	800582a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	2b01      	cmp	r3, #1
 8005864:	d119      	bne.n	800589a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	60bb      	str	r3, [r7, #8]
   return(result);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 0310 	bic.w	r3, r3, #16
 800587c:	647b      	str	r3, [r7, #68]	@ 0x44
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005886:	61ba      	str	r2, [r7, #24]
 8005888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6979      	ldr	r1, [r7, #20]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058a8:	bf00      	nop
 80058aa:	3754      	adds	r7, #84	@ 0x54
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff fd07 	bl	80052e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b21      	cmp	r3, #33	@ 0x21
 80058ec:	d13e      	bne.n	800596c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f6:	d114      	bne.n	8005922 <UART_Transmit_IT+0x48>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d110      	bne.n	8005922 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005914:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	1c9a      	adds	r2, r3, #2
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	621a      	str	r2, [r3, #32]
 8005920:	e008      	b.n	8005934 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	1c59      	adds	r1, r3, #1
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6211      	str	r1, [r2, #32]
 800592c:	781a      	ldrb	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29b      	uxth	r3, r3
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	4619      	mov	r1, r3
 8005942:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10f      	bne.n	8005968 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005956:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005966:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800596c:	2302      	movs	r3, #2
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800598e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fd facf 	bl	8002f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08c      	sub	sp, #48	@ 0x30
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b22      	cmp	r3, #34	@ 0x22
 80059ba:	f040 80ae 	bne.w	8005b1a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c6:	d117      	bne.n	80059f8 <UART_Receive_IT+0x50>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d113      	bne.n	80059f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	1c9a      	adds	r2, r3, #2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80059f6:	e026      	b.n	8005a46 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0a:	d007      	beq.n	8005a1c <UART_Receive_IT+0x74>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <UART_Receive_IT+0x82>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e008      	b.n	8005a3c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4619      	mov	r1, r3
 8005a54:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d15d      	bne.n	8005b16 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0220 	bic.w	r2, r2, #32
 8005a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0201 	bic.w	r2, r2, #1
 8005a88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d135      	bne.n	8005b0c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f023 0310 	bic.w	r3, r3, #16
 8005abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac6:	623a      	str	r2, [r7, #32]
 8005ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	69f9      	ldr	r1, [r7, #28]
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d10a      	bne.n	8005afe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fbf4 	bl	80052f2 <HAL_UARTEx_RxEventCallback>
 8005b0a:	e002      	b.n	8005b12 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fd fa25 	bl	8002f5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e002      	b.n	8005b1c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e000      	b.n	8005b1c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3730      	adds	r7, #48	@ 0x30
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b5e:	f023 030c 	bic.w	r3, r3, #12
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2c      	ldr	r2, [pc, #176]	@ (8005c38 <UART_SetConfig+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d103      	bne.n	8005b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b8c:	f7fe feca 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	e002      	b.n	8005b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fe feb2 	bl	80048fc <HAL_RCC_GetPCLK1Freq>
 8005b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009a      	lsls	r2, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb0:	4a22      	ldr	r2, [pc, #136]	@ (8005c3c <UART_SetConfig+0x118>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	0119      	lsls	r1, r3, #4
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009a      	lsls	r2, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c3c <UART_SetConfig+0x118>)
 8005bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2064      	movs	r0, #100	@ 0x64
 8005bda:	fb00 f303 	mul.w	r3, r0, r3
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	3332      	adds	r3, #50	@ 0x32
 8005be4:	4a15      	ldr	r2, [pc, #84]	@ (8005c3c <UART_SetConfig+0x118>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bf0:	4419      	add	r1, r3
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009a      	lsls	r2, r3, #2
 8005bfc:	441a      	add	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c08:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <UART_SetConfig+0x118>)
 8005c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	2064      	movs	r0, #100	@ 0x64
 8005c12:	fb00 f303 	mul.w	r3, r0, r3
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	3332      	adds	r3, #50	@ 0x32
 8005c1c:	4a07      	ldr	r2, [pc, #28]	@ (8005c3c <UART_SetConfig+0x118>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	f003 020f 	and.w	r2, r3, #15
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40013800 	.word	0x40013800
 8005c3c:	51eb851f 	.word	0x51eb851f

08005c40 <std>:
 8005c40:	2300      	movs	r3, #0
 8005c42:	b510      	push	{r4, lr}
 8005c44:	4604      	mov	r4, r0
 8005c46:	e9c0 3300 	strd	r3, r3, [r0]
 8005c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c4e:	6083      	str	r3, [r0, #8]
 8005c50:	8181      	strh	r1, [r0, #12]
 8005c52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c54:	81c2      	strh	r2, [r0, #14]
 8005c56:	6183      	str	r3, [r0, #24]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	305c      	adds	r0, #92	@ 0x5c
 8005c5e:	f000 fa1b 	bl	8006098 <memset>
 8005c62:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <std+0x58>)
 8005c64:	6224      	str	r4, [r4, #32]
 8005c66:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c68:	4b0c      	ldr	r3, [pc, #48]	@ (8005c9c <std+0x5c>)
 8005c6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca0 <std+0x60>)
 8005c6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <std+0x64>)
 8005c72:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca8 <std+0x68>)
 8005c76:	429c      	cmp	r4, r3
 8005c78:	d006      	beq.n	8005c88 <std+0x48>
 8005c7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c7e:	4294      	cmp	r4, r2
 8005c80:	d002      	beq.n	8005c88 <std+0x48>
 8005c82:	33d0      	adds	r3, #208	@ 0xd0
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d105      	bne.n	8005c94 <std+0x54>
 8005c88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c90:	f000 ba7a 	b.w	8006188 <__retarget_lock_init_recursive>
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	08005ee9 	.word	0x08005ee9
 8005c9c:	08005f0b 	.word	0x08005f0b
 8005ca0:	08005f43 	.word	0x08005f43
 8005ca4:	08005f67 	.word	0x08005f67
 8005ca8:	20000878 	.word	0x20000878

08005cac <stdio_exit_handler>:
 8005cac:	4a02      	ldr	r2, [pc, #8]	@ (8005cb8 <stdio_exit_handler+0xc>)
 8005cae:	4903      	ldr	r1, [pc, #12]	@ (8005cbc <stdio_exit_handler+0x10>)
 8005cb0:	4803      	ldr	r0, [pc, #12]	@ (8005cc0 <stdio_exit_handler+0x14>)
 8005cb2:	f000 b869 	b.w	8005d88 <_fwalk_sglue>
 8005cb6:	bf00      	nop
 8005cb8:	20000030 	.word	0x20000030
 8005cbc:	08006ce9 	.word	0x08006ce9
 8005cc0:	20000040 	.word	0x20000040

08005cc4 <cleanup_stdio>:
 8005cc4:	6841      	ldr	r1, [r0, #4]
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <cleanup_stdio+0x34>)
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	4604      	mov	r4, r0
 8005cce:	d001      	beq.n	8005cd4 <cleanup_stdio+0x10>
 8005cd0:	f001 f80a 	bl	8006ce8 <_fflush_r>
 8005cd4:	68a1      	ldr	r1, [r4, #8]
 8005cd6:	4b09      	ldr	r3, [pc, #36]	@ (8005cfc <cleanup_stdio+0x38>)
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	d002      	beq.n	8005ce2 <cleanup_stdio+0x1e>
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f001 f803 	bl	8006ce8 <_fflush_r>
 8005ce2:	68e1      	ldr	r1, [r4, #12]
 8005ce4:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <cleanup_stdio+0x3c>)
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	d004      	beq.n	8005cf4 <cleanup_stdio+0x30>
 8005cea:	4620      	mov	r0, r4
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	f000 bffa 	b.w	8006ce8 <_fflush_r>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000878 	.word	0x20000878
 8005cfc:	200008e0 	.word	0x200008e0
 8005d00:	20000948 	.word	0x20000948

08005d04 <global_stdio_init.part.0>:
 8005d04:	b510      	push	{r4, lr}
 8005d06:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <global_stdio_init.part.0+0x30>)
 8005d08:	4c0b      	ldr	r4, [pc, #44]	@ (8005d38 <global_stdio_init.part.0+0x34>)
 8005d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d3c <global_stdio_init.part.0+0x38>)
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	2104      	movs	r1, #4
 8005d12:	2200      	movs	r2, #0
 8005d14:	f7ff ff94 	bl	8005c40 <std>
 8005d18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	2109      	movs	r1, #9
 8005d20:	f7ff ff8e 	bl	8005c40 <std>
 8005d24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d28:	2202      	movs	r2, #2
 8005d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2e:	2112      	movs	r1, #18
 8005d30:	f7ff bf86 	b.w	8005c40 <std>
 8005d34:	200009b0 	.word	0x200009b0
 8005d38:	20000878 	.word	0x20000878
 8005d3c:	08005cad 	.word	0x08005cad

08005d40 <__sfp_lock_acquire>:
 8005d40:	4801      	ldr	r0, [pc, #4]	@ (8005d48 <__sfp_lock_acquire+0x8>)
 8005d42:	f000 ba22 	b.w	800618a <__retarget_lock_acquire_recursive>
 8005d46:	bf00      	nop
 8005d48:	200009b9 	.word	0x200009b9

08005d4c <__sfp_lock_release>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	@ (8005d54 <__sfp_lock_release+0x8>)
 8005d4e:	f000 ba1d 	b.w	800618c <__retarget_lock_release_recursive>
 8005d52:	bf00      	nop
 8005d54:	200009b9 	.word	0x200009b9

08005d58 <__sinit>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f7ff fff0 	bl	8005d40 <__sfp_lock_acquire>
 8005d60:	6a23      	ldr	r3, [r4, #32]
 8005d62:	b11b      	cbz	r3, 8005d6c <__sinit+0x14>
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f7ff bff0 	b.w	8005d4c <__sfp_lock_release>
 8005d6c:	4b04      	ldr	r3, [pc, #16]	@ (8005d80 <__sinit+0x28>)
 8005d6e:	6223      	str	r3, [r4, #32]
 8005d70:	4b04      	ldr	r3, [pc, #16]	@ (8005d84 <__sinit+0x2c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f5      	bne.n	8005d64 <__sinit+0xc>
 8005d78:	f7ff ffc4 	bl	8005d04 <global_stdio_init.part.0>
 8005d7c:	e7f2      	b.n	8005d64 <__sinit+0xc>
 8005d7e:	bf00      	nop
 8005d80:	08005cc5 	.word	0x08005cc5
 8005d84:	200009b0 	.word	0x200009b0

08005d88 <_fwalk_sglue>:
 8005d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	4688      	mov	r8, r1
 8005d90:	4614      	mov	r4, r2
 8005d92:	2600      	movs	r6, #0
 8005d94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d98:	f1b9 0901 	subs.w	r9, r9, #1
 8005d9c:	d505      	bpl.n	8005daa <_fwalk_sglue+0x22>
 8005d9e:	6824      	ldr	r4, [r4, #0]
 8005da0:	2c00      	cmp	r4, #0
 8005da2:	d1f7      	bne.n	8005d94 <_fwalk_sglue+0xc>
 8005da4:	4630      	mov	r0, r6
 8005da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d907      	bls.n	8005dc0 <_fwalk_sglue+0x38>
 8005db0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005db4:	3301      	adds	r3, #1
 8005db6:	d003      	beq.n	8005dc0 <_fwalk_sglue+0x38>
 8005db8:	4629      	mov	r1, r5
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c0      	blx	r8
 8005dbe:	4306      	orrs	r6, r0
 8005dc0:	3568      	adds	r5, #104	@ 0x68
 8005dc2:	e7e9      	b.n	8005d98 <_fwalk_sglue+0x10>

08005dc4 <iprintf>:
 8005dc4:	b40f      	push	{r0, r1, r2, r3}
 8005dc6:	b507      	push	{r0, r1, r2, lr}
 8005dc8:	4906      	ldr	r1, [pc, #24]	@ (8005de4 <iprintf+0x20>)
 8005dca:	ab04      	add	r3, sp, #16
 8005dcc:	6808      	ldr	r0, [r1, #0]
 8005dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd2:	6881      	ldr	r1, [r0, #8]
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	f000 fc5f 	bl	8006698 <_vfiprintf_r>
 8005dda:	b003      	add	sp, #12
 8005ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de0:	b004      	add	sp, #16
 8005de2:	4770      	bx	lr
 8005de4:	2000003c 	.word	0x2000003c

08005de8 <_puts_r>:
 8005de8:	6a03      	ldr	r3, [r0, #32]
 8005dea:	b570      	push	{r4, r5, r6, lr}
 8005dec:	4605      	mov	r5, r0
 8005dee:	460e      	mov	r6, r1
 8005df0:	6884      	ldr	r4, [r0, #8]
 8005df2:	b90b      	cbnz	r3, 8005df8 <_puts_r+0x10>
 8005df4:	f7ff ffb0 	bl	8005d58 <__sinit>
 8005df8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dfa:	07db      	lsls	r3, r3, #31
 8005dfc:	d405      	bmi.n	8005e0a <_puts_r+0x22>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	0598      	lsls	r0, r3, #22
 8005e02:	d402      	bmi.n	8005e0a <_puts_r+0x22>
 8005e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e06:	f000 f9c0 	bl	800618a <__retarget_lock_acquire_recursive>
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	0719      	lsls	r1, r3, #28
 8005e0e:	d502      	bpl.n	8005e16 <_puts_r+0x2e>
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d135      	bne.n	8005e82 <_puts_r+0x9a>
 8005e16:	4621      	mov	r1, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 f8e7 	bl	8005fec <__swsetup_r>
 8005e1e:	b380      	cbz	r0, 8005e82 <_puts_r+0x9a>
 8005e20:	f04f 35ff 	mov.w	r5, #4294967295
 8005e24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e26:	07da      	lsls	r2, r3, #31
 8005e28:	d405      	bmi.n	8005e36 <_puts_r+0x4e>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	059b      	lsls	r3, r3, #22
 8005e2e:	d402      	bmi.n	8005e36 <_puts_r+0x4e>
 8005e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e32:	f000 f9ab 	bl	800618c <__retarget_lock_release_recursive>
 8005e36:	4628      	mov	r0, r5
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da04      	bge.n	8005e48 <_puts_r+0x60>
 8005e3e:	69a2      	ldr	r2, [r4, #24]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	dc17      	bgt.n	8005e74 <_puts_r+0x8c>
 8005e44:	290a      	cmp	r1, #10
 8005e46:	d015      	beq.n	8005e74 <_puts_r+0x8c>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	6022      	str	r2, [r4, #0]
 8005e4e:	7019      	strb	r1, [r3, #0]
 8005e50:	68a3      	ldr	r3, [r4, #8]
 8005e52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e56:	3b01      	subs	r3, #1
 8005e58:	60a3      	str	r3, [r4, #8]
 8005e5a:	2900      	cmp	r1, #0
 8005e5c:	d1ed      	bne.n	8005e3a <_puts_r+0x52>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da11      	bge.n	8005e86 <_puts_r+0x9e>
 8005e62:	4622      	mov	r2, r4
 8005e64:	210a      	movs	r1, #10
 8005e66:	4628      	mov	r0, r5
 8005e68:	f000 f881 	bl	8005f6e <__swbuf_r>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d0d7      	beq.n	8005e20 <_puts_r+0x38>
 8005e70:	250a      	movs	r5, #10
 8005e72:	e7d7      	b.n	8005e24 <_puts_r+0x3c>
 8005e74:	4622      	mov	r2, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 f879 	bl	8005f6e <__swbuf_r>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d1e7      	bne.n	8005e50 <_puts_r+0x68>
 8005e80:	e7ce      	b.n	8005e20 <_puts_r+0x38>
 8005e82:	3e01      	subs	r6, #1
 8005e84:	e7e4      	b.n	8005e50 <_puts_r+0x68>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	6022      	str	r2, [r4, #0]
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e7ee      	b.n	8005e70 <_puts_r+0x88>
	...

08005e94 <puts>:
 8005e94:	4b02      	ldr	r3, [pc, #8]	@ (8005ea0 <puts+0xc>)
 8005e96:	4601      	mov	r1, r0
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	f7ff bfa5 	b.w	8005de8 <_puts_r>
 8005e9e:	bf00      	nop
 8005ea0:	2000003c 	.word	0x2000003c

08005ea4 <siprintf>:
 8005ea4:	b40e      	push	{r1, r2, r3}
 8005ea6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	2400      	movs	r4, #0
 8005eae:	b09d      	sub	sp, #116	@ 0x74
 8005eb0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005eb2:	9002      	str	r0, [sp, #8]
 8005eb4:	9006      	str	r0, [sp, #24]
 8005eb6:	9107      	str	r1, [sp, #28]
 8005eb8:	9104      	str	r1, [sp, #16]
 8005eba:	4809      	ldr	r0, [pc, #36]	@ (8005ee0 <siprintf+0x3c>)
 8005ebc:	4909      	ldr	r1, [pc, #36]	@ (8005ee4 <siprintf+0x40>)
 8005ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec2:	9105      	str	r1, [sp, #20]
 8005ec4:	6800      	ldr	r0, [r0, #0]
 8005ec6:	a902      	add	r1, sp, #8
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005ecc:	f000 fac0 	bl	8006450 <_svfiprintf_r>
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	701c      	strb	r4, [r3, #0]
 8005ed4:	b01d      	add	sp, #116	@ 0x74
 8005ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eda:	b003      	add	sp, #12
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	2000003c 	.word	0x2000003c
 8005ee4:	ffff0208 	.word	0xffff0208

08005ee8 <__sread>:
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	460c      	mov	r4, r1
 8005eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef0:	f000 f8fc 	bl	80060ec <_read_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	bfab      	itete	ge
 8005ef8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005efa:	89a3      	ldrhlt	r3, [r4, #12]
 8005efc:	181b      	addge	r3, r3, r0
 8005efe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f02:	bfac      	ite	ge
 8005f04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f06:	81a3      	strhlt	r3, [r4, #12]
 8005f08:	bd10      	pop	{r4, pc}

08005f0a <__swrite>:
 8005f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	461f      	mov	r7, r3
 8005f10:	898b      	ldrh	r3, [r1, #12]
 8005f12:	4605      	mov	r5, r0
 8005f14:	05db      	lsls	r3, r3, #23
 8005f16:	460c      	mov	r4, r1
 8005f18:	4616      	mov	r6, r2
 8005f1a:	d505      	bpl.n	8005f28 <__swrite+0x1e>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f24:	f000 f8d0 	bl	80060c8 <_lseek_r>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	4632      	mov	r2, r6
 8005f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	4628      	mov	r0, r5
 8005f34:	463b      	mov	r3, r7
 8005f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3e:	f000 b8e7 	b.w	8006110 <_write_r>

08005f42 <__sseek>:
 8005f42:	b510      	push	{r4, lr}
 8005f44:	460c      	mov	r4, r1
 8005f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4a:	f000 f8bd 	bl	80060c8 <_lseek_r>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	bf15      	itete	ne
 8005f54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f5e:	81a3      	strheq	r3, [r4, #12]
 8005f60:	bf18      	it	ne
 8005f62:	81a3      	strhne	r3, [r4, #12]
 8005f64:	bd10      	pop	{r4, pc}

08005f66 <__sclose>:
 8005f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6a:	f000 b89d 	b.w	80060a8 <_close_r>

08005f6e <__swbuf_r>:
 8005f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f70:	460e      	mov	r6, r1
 8005f72:	4614      	mov	r4, r2
 8005f74:	4605      	mov	r5, r0
 8005f76:	b118      	cbz	r0, 8005f80 <__swbuf_r+0x12>
 8005f78:	6a03      	ldr	r3, [r0, #32]
 8005f7a:	b90b      	cbnz	r3, 8005f80 <__swbuf_r+0x12>
 8005f7c:	f7ff feec 	bl	8005d58 <__sinit>
 8005f80:	69a3      	ldr	r3, [r4, #24]
 8005f82:	60a3      	str	r3, [r4, #8]
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	071a      	lsls	r2, r3, #28
 8005f88:	d501      	bpl.n	8005f8e <__swbuf_r+0x20>
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	b943      	cbnz	r3, 8005fa0 <__swbuf_r+0x32>
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4628      	mov	r0, r5
 8005f92:	f000 f82b 	bl	8005fec <__swsetup_r>
 8005f96:	b118      	cbz	r0, 8005fa0 <__swbuf_r+0x32>
 8005f98:	f04f 37ff 	mov.w	r7, #4294967295
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	6922      	ldr	r2, [r4, #16]
 8005fa4:	b2f6      	uxtb	r6, r6
 8005fa6:	1a98      	subs	r0, r3, r2
 8005fa8:	6963      	ldr	r3, [r4, #20]
 8005faa:	4637      	mov	r7, r6
 8005fac:	4283      	cmp	r3, r0
 8005fae:	dc05      	bgt.n	8005fbc <__swbuf_r+0x4e>
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 fe98 	bl	8006ce8 <_fflush_r>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d1ed      	bne.n	8005f98 <__swbuf_r+0x2a>
 8005fbc:	68a3      	ldr	r3, [r4, #8]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	60a3      	str	r3, [r4, #8]
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	6022      	str	r2, [r4, #0]
 8005fc8:	701e      	strb	r6, [r3, #0]
 8005fca:	6962      	ldr	r2, [r4, #20]
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d004      	beq.n	8005fdc <__swbuf_r+0x6e>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	07db      	lsls	r3, r3, #31
 8005fd6:	d5e1      	bpl.n	8005f9c <__swbuf_r+0x2e>
 8005fd8:	2e0a      	cmp	r6, #10
 8005fda:	d1df      	bne.n	8005f9c <__swbuf_r+0x2e>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 fe82 	bl	8006ce8 <_fflush_r>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d0d9      	beq.n	8005f9c <__swbuf_r+0x2e>
 8005fe8:	e7d6      	b.n	8005f98 <__swbuf_r+0x2a>
	...

08005fec <__swsetup_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4b29      	ldr	r3, [pc, #164]	@ (8006094 <__swsetup_r+0xa8>)
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	b118      	cbz	r0, 8006000 <__swsetup_r+0x14>
 8005ff8:	6a03      	ldr	r3, [r0, #32]
 8005ffa:	b90b      	cbnz	r3, 8006000 <__swsetup_r+0x14>
 8005ffc:	f7ff feac 	bl	8005d58 <__sinit>
 8006000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006004:	0719      	lsls	r1, r3, #28
 8006006:	d422      	bmi.n	800604e <__swsetup_r+0x62>
 8006008:	06da      	lsls	r2, r3, #27
 800600a:	d407      	bmi.n	800601c <__swsetup_r+0x30>
 800600c:	2209      	movs	r2, #9
 800600e:	602a      	str	r2, [r5, #0]
 8006010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	e033      	b.n	8006084 <__swsetup_r+0x98>
 800601c:	0758      	lsls	r0, r3, #29
 800601e:	d512      	bpl.n	8006046 <__swsetup_r+0x5a>
 8006020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006022:	b141      	cbz	r1, 8006036 <__swsetup_r+0x4a>
 8006024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006028:	4299      	cmp	r1, r3
 800602a:	d002      	beq.n	8006032 <__swsetup_r+0x46>
 800602c:	4628      	mov	r0, r5
 800602e:	f000 f8bd 	bl	80061ac <_free_r>
 8006032:	2300      	movs	r3, #0
 8006034:	6363      	str	r3, [r4, #52]	@ 0x34
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	2300      	movs	r3, #0
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f043 0308 	orr.w	r3, r3, #8
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	b94b      	cbnz	r3, 8006066 <__swsetup_r+0x7a>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800605c:	d003      	beq.n	8006066 <__swsetup_r+0x7a>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 fe8e 	bl	8006d82 <__smakebuf_r>
 8006066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606a:	f013 0201 	ands.w	r2, r3, #1
 800606e:	d00a      	beq.n	8006086 <__swsetup_r+0x9a>
 8006070:	2200      	movs	r2, #0
 8006072:	60a2      	str	r2, [r4, #8]
 8006074:	6962      	ldr	r2, [r4, #20]
 8006076:	4252      	negs	r2, r2
 8006078:	61a2      	str	r2, [r4, #24]
 800607a:	6922      	ldr	r2, [r4, #16]
 800607c:	b942      	cbnz	r2, 8006090 <__swsetup_r+0xa4>
 800607e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006082:	d1c5      	bne.n	8006010 <__swsetup_r+0x24>
 8006084:	bd38      	pop	{r3, r4, r5, pc}
 8006086:	0799      	lsls	r1, r3, #30
 8006088:	bf58      	it	pl
 800608a:	6962      	ldrpl	r2, [r4, #20]
 800608c:	60a2      	str	r2, [r4, #8]
 800608e:	e7f4      	b.n	800607a <__swsetup_r+0x8e>
 8006090:	2000      	movs	r0, #0
 8006092:	e7f7      	b.n	8006084 <__swsetup_r+0x98>
 8006094:	2000003c 	.word	0x2000003c

08006098 <memset>:
 8006098:	4603      	mov	r3, r0
 800609a:	4402      	add	r2, r0
 800609c:	4293      	cmp	r3, r2
 800609e:	d100      	bne.n	80060a2 <memset+0xa>
 80060a0:	4770      	bx	lr
 80060a2:	f803 1b01 	strb.w	r1, [r3], #1
 80060a6:	e7f9      	b.n	800609c <memset+0x4>

080060a8 <_close_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	2300      	movs	r3, #0
 80060ac:	4d05      	ldr	r5, [pc, #20]	@ (80060c4 <_close_r+0x1c>)
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	f7fd f812 	bl	80030dc <_close>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_close_r+0x1a>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_close_r+0x1a>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	200009b4 	.word	0x200009b4

080060c8 <_lseek_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	4611      	mov	r1, r2
 80060d0:	2200      	movs	r2, #0
 80060d2:	4d05      	ldr	r5, [pc, #20]	@ (80060e8 <_lseek_r+0x20>)
 80060d4:	602a      	str	r2, [r5, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fd f824 	bl	8003124 <_lseek>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_lseek_r+0x1e>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_lseek_r+0x1e>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	200009b4 	.word	0x200009b4

080060ec <_read_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	2200      	movs	r2, #0
 80060f6:	4d05      	ldr	r5, [pc, #20]	@ (800610c <_read_r+0x20>)
 80060f8:	602a      	str	r2, [r5, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fc ffd1 	bl	80030a2 <_read>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_read_r+0x1e>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_read_r+0x1e>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	200009b4 	.word	0x200009b4

08006110 <_write_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	2200      	movs	r2, #0
 800611a:	4d05      	ldr	r5, [pc, #20]	@ (8006130 <_write_r+0x20>)
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fd f9e4 	bl	80034ec <_write>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_write_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_write_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	200009b4 	.word	0x200009b4

08006134 <__errno>:
 8006134:	4b01      	ldr	r3, [pc, #4]	@ (800613c <__errno+0x8>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	2000003c 	.word	0x2000003c

08006140 <__libc_init_array>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	2600      	movs	r6, #0
 8006144:	4d0c      	ldr	r5, [pc, #48]	@ (8006178 <__libc_init_array+0x38>)
 8006146:	4c0d      	ldr	r4, [pc, #52]	@ (800617c <__libc_init_array+0x3c>)
 8006148:	1b64      	subs	r4, r4, r5
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	42a6      	cmp	r6, r4
 800614e:	d109      	bne.n	8006164 <__libc_init_array+0x24>
 8006150:	f000 fee4 	bl	8006f1c <_init>
 8006154:	2600      	movs	r6, #0
 8006156:	4d0a      	ldr	r5, [pc, #40]	@ (8006180 <__libc_init_array+0x40>)
 8006158:	4c0a      	ldr	r4, [pc, #40]	@ (8006184 <__libc_init_array+0x44>)
 800615a:	1b64      	subs	r4, r4, r5
 800615c:	10a4      	asrs	r4, r4, #2
 800615e:	42a6      	cmp	r6, r4
 8006160:	d105      	bne.n	800616e <__libc_init_array+0x2e>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	f855 3b04 	ldr.w	r3, [r5], #4
 8006168:	4798      	blx	r3
 800616a:	3601      	adds	r6, #1
 800616c:	e7ee      	b.n	800614c <__libc_init_array+0xc>
 800616e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006172:	4798      	blx	r3
 8006174:	3601      	adds	r6, #1
 8006176:	e7f2      	b.n	800615e <__libc_init_array+0x1e>
 8006178:	0800824c 	.word	0x0800824c
 800617c:	0800824c 	.word	0x0800824c
 8006180:	0800824c 	.word	0x0800824c
 8006184:	08008250 	.word	0x08008250

08006188 <__retarget_lock_init_recursive>:
 8006188:	4770      	bx	lr

0800618a <__retarget_lock_acquire_recursive>:
 800618a:	4770      	bx	lr

0800618c <__retarget_lock_release_recursive>:
 800618c:	4770      	bx	lr

0800618e <memcpy>:
 800618e:	440a      	add	r2, r1
 8006190:	4291      	cmp	r1, r2
 8006192:	f100 33ff 	add.w	r3, r0, #4294967295
 8006196:	d100      	bne.n	800619a <memcpy+0xc>
 8006198:	4770      	bx	lr
 800619a:	b510      	push	{r4, lr}
 800619c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a0:	4291      	cmp	r1, r2
 80061a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a6:	d1f9      	bne.n	800619c <memcpy+0xe>
 80061a8:	bd10      	pop	{r4, pc}
	...

080061ac <_free_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4605      	mov	r5, r0
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d040      	beq.n	8006236 <_free_r+0x8a>
 80061b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b8:	1f0c      	subs	r4, r1, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bfb8      	it	lt
 80061be:	18e4      	addlt	r4, r4, r3
 80061c0:	f000 f8de 	bl	8006380 <__malloc_lock>
 80061c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <_free_r+0x8c>)
 80061c6:	6813      	ldr	r3, [r2, #0]
 80061c8:	b933      	cbnz	r3, 80061d8 <_free_r+0x2c>
 80061ca:	6063      	str	r3, [r4, #4]
 80061cc:	6014      	str	r4, [r2, #0]
 80061ce:	4628      	mov	r0, r5
 80061d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d4:	f000 b8da 	b.w	800638c <__malloc_unlock>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d908      	bls.n	80061ee <_free_r+0x42>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	1821      	adds	r1, r4, r0
 80061e0:	428b      	cmp	r3, r1
 80061e2:	bf01      	itttt	eq
 80061e4:	6819      	ldreq	r1, [r3, #0]
 80061e6:	685b      	ldreq	r3, [r3, #4]
 80061e8:	1809      	addeq	r1, r1, r0
 80061ea:	6021      	streq	r1, [r4, #0]
 80061ec:	e7ed      	b.n	80061ca <_free_r+0x1e>
 80061ee:	461a      	mov	r2, r3
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	b10b      	cbz	r3, 80061f8 <_free_r+0x4c>
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d9fa      	bls.n	80061ee <_free_r+0x42>
 80061f8:	6811      	ldr	r1, [r2, #0]
 80061fa:	1850      	adds	r0, r2, r1
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d10b      	bne.n	8006218 <_free_r+0x6c>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	4401      	add	r1, r0
 8006204:	1850      	adds	r0, r2, r1
 8006206:	4283      	cmp	r3, r0
 8006208:	6011      	str	r1, [r2, #0]
 800620a:	d1e0      	bne.n	80061ce <_free_r+0x22>
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4408      	add	r0, r1
 8006212:	6010      	str	r0, [r2, #0]
 8006214:	6053      	str	r3, [r2, #4]
 8006216:	e7da      	b.n	80061ce <_free_r+0x22>
 8006218:	d902      	bls.n	8006220 <_free_r+0x74>
 800621a:	230c      	movs	r3, #12
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	e7d6      	b.n	80061ce <_free_r+0x22>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	1821      	adds	r1, r4, r0
 8006224:	428b      	cmp	r3, r1
 8006226:	bf01      	itttt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	1809      	addeq	r1, r1, r0
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	6063      	str	r3, [r4, #4]
 8006232:	6054      	str	r4, [r2, #4]
 8006234:	e7cb      	b.n	80061ce <_free_r+0x22>
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	200009c0 	.word	0x200009c0

0800623c <sbrk_aligned>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	4e0f      	ldr	r6, [pc, #60]	@ (800627c <sbrk_aligned+0x40>)
 8006240:	460c      	mov	r4, r1
 8006242:	6831      	ldr	r1, [r6, #0]
 8006244:	4605      	mov	r5, r0
 8006246:	b911      	cbnz	r1, 800624e <sbrk_aligned+0x12>
 8006248:	f000 fe14 	bl	8006e74 <_sbrk_r>
 800624c:	6030      	str	r0, [r6, #0]
 800624e:	4621      	mov	r1, r4
 8006250:	4628      	mov	r0, r5
 8006252:	f000 fe0f 	bl	8006e74 <_sbrk_r>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	d103      	bne.n	8006262 <sbrk_aligned+0x26>
 800625a:	f04f 34ff 	mov.w	r4, #4294967295
 800625e:	4620      	mov	r0, r4
 8006260:	bd70      	pop	{r4, r5, r6, pc}
 8006262:	1cc4      	adds	r4, r0, #3
 8006264:	f024 0403 	bic.w	r4, r4, #3
 8006268:	42a0      	cmp	r0, r4
 800626a:	d0f8      	beq.n	800625e <sbrk_aligned+0x22>
 800626c:	1a21      	subs	r1, r4, r0
 800626e:	4628      	mov	r0, r5
 8006270:	f000 fe00 	bl	8006e74 <_sbrk_r>
 8006274:	3001      	adds	r0, #1
 8006276:	d1f2      	bne.n	800625e <sbrk_aligned+0x22>
 8006278:	e7ef      	b.n	800625a <sbrk_aligned+0x1e>
 800627a:	bf00      	nop
 800627c:	200009bc 	.word	0x200009bc

08006280 <_malloc_r>:
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	1ccd      	adds	r5, r1, #3
 8006286:	f025 0503 	bic.w	r5, r5, #3
 800628a:	3508      	adds	r5, #8
 800628c:	2d0c      	cmp	r5, #12
 800628e:	bf38      	it	cc
 8006290:	250c      	movcc	r5, #12
 8006292:	2d00      	cmp	r5, #0
 8006294:	4606      	mov	r6, r0
 8006296:	db01      	blt.n	800629c <_malloc_r+0x1c>
 8006298:	42a9      	cmp	r1, r5
 800629a:	d904      	bls.n	80062a6 <_malloc_r+0x26>
 800629c:	230c      	movs	r3, #12
 800629e:	6033      	str	r3, [r6, #0]
 80062a0:	2000      	movs	r0, #0
 80062a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800637c <_malloc_r+0xfc>
 80062aa:	f000 f869 	bl	8006380 <__malloc_lock>
 80062ae:	f8d8 3000 	ldr.w	r3, [r8]
 80062b2:	461c      	mov	r4, r3
 80062b4:	bb44      	cbnz	r4, 8006308 <_malloc_r+0x88>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7ff ffbf 	bl	800623c <sbrk_aligned>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	4604      	mov	r4, r0
 80062c2:	d158      	bne.n	8006376 <_malloc_r+0xf6>
 80062c4:	f8d8 4000 	ldr.w	r4, [r8]
 80062c8:	4627      	mov	r7, r4
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	d143      	bne.n	8006356 <_malloc_r+0xd6>
 80062ce:	2c00      	cmp	r4, #0
 80062d0:	d04b      	beq.n	800636a <_malloc_r+0xea>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	4639      	mov	r1, r7
 80062d6:	4630      	mov	r0, r6
 80062d8:	eb04 0903 	add.w	r9, r4, r3
 80062dc:	f000 fdca 	bl	8006e74 <_sbrk_r>
 80062e0:	4581      	cmp	r9, r0
 80062e2:	d142      	bne.n	800636a <_malloc_r+0xea>
 80062e4:	6821      	ldr	r1, [r4, #0]
 80062e6:	4630      	mov	r0, r6
 80062e8:	1a6d      	subs	r5, r5, r1
 80062ea:	4629      	mov	r1, r5
 80062ec:	f7ff ffa6 	bl	800623c <sbrk_aligned>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d03a      	beq.n	800636a <_malloc_r+0xea>
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	442b      	add	r3, r5
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	f8d8 3000 	ldr.w	r3, [r8]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	bb62      	cbnz	r2, 800635c <_malloc_r+0xdc>
 8006302:	f8c8 7000 	str.w	r7, [r8]
 8006306:	e00f      	b.n	8006328 <_malloc_r+0xa8>
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	1b52      	subs	r2, r2, r5
 800630c:	d420      	bmi.n	8006350 <_malloc_r+0xd0>
 800630e:	2a0b      	cmp	r2, #11
 8006310:	d917      	bls.n	8006342 <_malloc_r+0xc2>
 8006312:	1961      	adds	r1, r4, r5
 8006314:	42a3      	cmp	r3, r4
 8006316:	6025      	str	r5, [r4, #0]
 8006318:	bf18      	it	ne
 800631a:	6059      	strne	r1, [r3, #4]
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	bf08      	it	eq
 8006320:	f8c8 1000 	streq.w	r1, [r8]
 8006324:	5162      	str	r2, [r4, r5]
 8006326:	604b      	str	r3, [r1, #4]
 8006328:	4630      	mov	r0, r6
 800632a:	f000 f82f 	bl	800638c <__malloc_unlock>
 800632e:	f104 000b 	add.w	r0, r4, #11
 8006332:	1d23      	adds	r3, r4, #4
 8006334:	f020 0007 	bic.w	r0, r0, #7
 8006338:	1ac2      	subs	r2, r0, r3
 800633a:	bf1c      	itt	ne
 800633c:	1a1b      	subne	r3, r3, r0
 800633e:	50a3      	strne	r3, [r4, r2]
 8006340:	e7af      	b.n	80062a2 <_malloc_r+0x22>
 8006342:	6862      	ldr	r2, [r4, #4]
 8006344:	42a3      	cmp	r3, r4
 8006346:	bf0c      	ite	eq
 8006348:	f8c8 2000 	streq.w	r2, [r8]
 800634c:	605a      	strne	r2, [r3, #4]
 800634e:	e7eb      	b.n	8006328 <_malloc_r+0xa8>
 8006350:	4623      	mov	r3, r4
 8006352:	6864      	ldr	r4, [r4, #4]
 8006354:	e7ae      	b.n	80062b4 <_malloc_r+0x34>
 8006356:	463c      	mov	r4, r7
 8006358:	687f      	ldr	r7, [r7, #4]
 800635a:	e7b6      	b.n	80062ca <_malloc_r+0x4a>
 800635c:	461a      	mov	r2, r3
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	42a3      	cmp	r3, r4
 8006362:	d1fb      	bne.n	800635c <_malloc_r+0xdc>
 8006364:	2300      	movs	r3, #0
 8006366:	6053      	str	r3, [r2, #4]
 8006368:	e7de      	b.n	8006328 <_malloc_r+0xa8>
 800636a:	230c      	movs	r3, #12
 800636c:	4630      	mov	r0, r6
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	f000 f80c 	bl	800638c <__malloc_unlock>
 8006374:	e794      	b.n	80062a0 <_malloc_r+0x20>
 8006376:	6005      	str	r5, [r0, #0]
 8006378:	e7d6      	b.n	8006328 <_malloc_r+0xa8>
 800637a:	bf00      	nop
 800637c:	200009c0 	.word	0x200009c0

08006380 <__malloc_lock>:
 8006380:	4801      	ldr	r0, [pc, #4]	@ (8006388 <__malloc_lock+0x8>)
 8006382:	f7ff bf02 	b.w	800618a <__retarget_lock_acquire_recursive>
 8006386:	bf00      	nop
 8006388:	200009b8 	.word	0x200009b8

0800638c <__malloc_unlock>:
 800638c:	4801      	ldr	r0, [pc, #4]	@ (8006394 <__malloc_unlock+0x8>)
 800638e:	f7ff befd 	b.w	800618c <__retarget_lock_release_recursive>
 8006392:	bf00      	nop
 8006394:	200009b8 	.word	0x200009b8

08006398 <__ssputs_r>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	461f      	mov	r7, r3
 800639e:	688e      	ldr	r6, [r1, #8]
 80063a0:	4682      	mov	sl, r0
 80063a2:	42be      	cmp	r6, r7
 80063a4:	460c      	mov	r4, r1
 80063a6:	4690      	mov	r8, r2
 80063a8:	680b      	ldr	r3, [r1, #0]
 80063aa:	d82d      	bhi.n	8006408 <__ssputs_r+0x70>
 80063ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063b4:	d026      	beq.n	8006404 <__ssputs_r+0x6c>
 80063b6:	6965      	ldr	r5, [r4, #20]
 80063b8:	6909      	ldr	r1, [r1, #16]
 80063ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063be:	eba3 0901 	sub.w	r9, r3, r1
 80063c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063c6:	1c7b      	adds	r3, r7, #1
 80063c8:	444b      	add	r3, r9
 80063ca:	106d      	asrs	r5, r5, #1
 80063cc:	429d      	cmp	r5, r3
 80063ce:	bf38      	it	cc
 80063d0:	461d      	movcc	r5, r3
 80063d2:	0553      	lsls	r3, r2, #21
 80063d4:	d527      	bpl.n	8006426 <__ssputs_r+0x8e>
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7ff ff52 	bl	8006280 <_malloc_r>
 80063dc:	4606      	mov	r6, r0
 80063de:	b360      	cbz	r0, 800643a <__ssputs_r+0xa2>
 80063e0:	464a      	mov	r2, r9
 80063e2:	6921      	ldr	r1, [r4, #16]
 80063e4:	f7ff fed3 	bl	800618e <memcpy>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	6126      	str	r6, [r4, #16]
 80063f6:	444e      	add	r6, r9
 80063f8:	6026      	str	r6, [r4, #0]
 80063fa:	463e      	mov	r6, r7
 80063fc:	6165      	str	r5, [r4, #20]
 80063fe:	eba5 0509 	sub.w	r5, r5, r9
 8006402:	60a5      	str	r5, [r4, #8]
 8006404:	42be      	cmp	r6, r7
 8006406:	d900      	bls.n	800640a <__ssputs_r+0x72>
 8006408:	463e      	mov	r6, r7
 800640a:	4632      	mov	r2, r6
 800640c:	4641      	mov	r1, r8
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	f000 fcf3 	bl	8006dfa <memmove>
 8006414:	2000      	movs	r0, #0
 8006416:	68a3      	ldr	r3, [r4, #8]
 8006418:	1b9b      	subs	r3, r3, r6
 800641a:	60a3      	str	r3, [r4, #8]
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	4433      	add	r3, r6
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006426:	462a      	mov	r2, r5
 8006428:	f000 fd42 	bl	8006eb0 <_realloc_r>
 800642c:	4606      	mov	r6, r0
 800642e:	2800      	cmp	r0, #0
 8006430:	d1e0      	bne.n	80063f4 <__ssputs_r+0x5c>
 8006432:	4650      	mov	r0, sl
 8006434:	6921      	ldr	r1, [r4, #16]
 8006436:	f7ff feb9 	bl	80061ac <_free_r>
 800643a:	230c      	movs	r3, #12
 800643c:	f8ca 3000 	str.w	r3, [sl]
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f04f 30ff 	mov.w	r0, #4294967295
 8006446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	e7e9      	b.n	8006422 <__ssputs_r+0x8a>
	...

08006450 <_svfiprintf_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	4698      	mov	r8, r3
 8006456:	898b      	ldrh	r3, [r1, #12]
 8006458:	4607      	mov	r7, r0
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	460d      	mov	r5, r1
 800645e:	4614      	mov	r4, r2
 8006460:	b09d      	sub	sp, #116	@ 0x74
 8006462:	d510      	bpl.n	8006486 <_svfiprintf_r+0x36>
 8006464:	690b      	ldr	r3, [r1, #16]
 8006466:	b973      	cbnz	r3, 8006486 <_svfiprintf_r+0x36>
 8006468:	2140      	movs	r1, #64	@ 0x40
 800646a:	f7ff ff09 	bl	8006280 <_malloc_r>
 800646e:	6028      	str	r0, [r5, #0]
 8006470:	6128      	str	r0, [r5, #16]
 8006472:	b930      	cbnz	r0, 8006482 <_svfiprintf_r+0x32>
 8006474:	230c      	movs	r3, #12
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	b01d      	add	sp, #116	@ 0x74
 800647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006482:	2340      	movs	r3, #64	@ 0x40
 8006484:	616b      	str	r3, [r5, #20]
 8006486:	2300      	movs	r3, #0
 8006488:	9309      	str	r3, [sp, #36]	@ 0x24
 800648a:	2320      	movs	r3, #32
 800648c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006490:	2330      	movs	r3, #48	@ 0x30
 8006492:	f04f 0901 	mov.w	r9, #1
 8006496:	f8cd 800c 	str.w	r8, [sp, #12]
 800649a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006634 <_svfiprintf_r+0x1e4>
 800649e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064a2:	4623      	mov	r3, r4
 80064a4:	469a      	mov	sl, r3
 80064a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064aa:	b10a      	cbz	r2, 80064b0 <_svfiprintf_r+0x60>
 80064ac:	2a25      	cmp	r2, #37	@ 0x25
 80064ae:	d1f9      	bne.n	80064a4 <_svfiprintf_r+0x54>
 80064b0:	ebba 0b04 	subs.w	fp, sl, r4
 80064b4:	d00b      	beq.n	80064ce <_svfiprintf_r+0x7e>
 80064b6:	465b      	mov	r3, fp
 80064b8:	4622      	mov	r2, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	4638      	mov	r0, r7
 80064be:	f7ff ff6b 	bl	8006398 <__ssputs_r>
 80064c2:	3001      	adds	r0, #1
 80064c4:	f000 80a7 	beq.w	8006616 <_svfiprintf_r+0x1c6>
 80064c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ca:	445a      	add	r2, fp
 80064cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80064ce:	f89a 3000 	ldrb.w	r3, [sl]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 809f 	beq.w	8006616 <_svfiprintf_r+0x1c6>
 80064d8:	2300      	movs	r3, #0
 80064da:	f04f 32ff 	mov.w	r2, #4294967295
 80064de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e2:	f10a 0a01 	add.w	sl, sl, #1
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	9307      	str	r3, [sp, #28]
 80064ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80064f0:	4654      	mov	r4, sl
 80064f2:	2205      	movs	r2, #5
 80064f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f8:	484e      	ldr	r0, [pc, #312]	@ (8006634 <_svfiprintf_r+0x1e4>)
 80064fa:	f000 fccb 	bl	8006e94 <memchr>
 80064fe:	9a04      	ldr	r2, [sp, #16]
 8006500:	b9d8      	cbnz	r0, 800653a <_svfiprintf_r+0xea>
 8006502:	06d0      	lsls	r0, r2, #27
 8006504:	bf44      	itt	mi
 8006506:	2320      	movmi	r3, #32
 8006508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800650c:	0711      	lsls	r1, r2, #28
 800650e:	bf44      	itt	mi
 8006510:	232b      	movmi	r3, #43	@ 0x2b
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006516:	f89a 3000 	ldrb.w	r3, [sl]
 800651a:	2b2a      	cmp	r3, #42	@ 0x2a
 800651c:	d015      	beq.n	800654a <_svfiprintf_r+0xfa>
 800651e:	4654      	mov	r4, sl
 8006520:	2000      	movs	r0, #0
 8006522:	f04f 0c0a 	mov.w	ip, #10
 8006526:	9a07      	ldr	r2, [sp, #28]
 8006528:	4621      	mov	r1, r4
 800652a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800652e:	3b30      	subs	r3, #48	@ 0x30
 8006530:	2b09      	cmp	r3, #9
 8006532:	d94b      	bls.n	80065cc <_svfiprintf_r+0x17c>
 8006534:	b1b0      	cbz	r0, 8006564 <_svfiprintf_r+0x114>
 8006536:	9207      	str	r2, [sp, #28]
 8006538:	e014      	b.n	8006564 <_svfiprintf_r+0x114>
 800653a:	eba0 0308 	sub.w	r3, r0, r8
 800653e:	fa09 f303 	lsl.w	r3, r9, r3
 8006542:	4313      	orrs	r3, r2
 8006544:	46a2      	mov	sl, r4
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	e7d2      	b.n	80064f0 <_svfiprintf_r+0xa0>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	9103      	str	r1, [sp, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfbb      	ittet	lt
 8006556:	425b      	neglt	r3, r3
 8006558:	f042 0202 	orrlt.w	r2, r2, #2
 800655c:	9307      	strge	r3, [sp, #28]
 800655e:	9307      	strlt	r3, [sp, #28]
 8006560:	bfb8      	it	lt
 8006562:	9204      	strlt	r2, [sp, #16]
 8006564:	7823      	ldrb	r3, [r4, #0]
 8006566:	2b2e      	cmp	r3, #46	@ 0x2e
 8006568:	d10a      	bne.n	8006580 <_svfiprintf_r+0x130>
 800656a:	7863      	ldrb	r3, [r4, #1]
 800656c:	2b2a      	cmp	r3, #42	@ 0x2a
 800656e:	d132      	bne.n	80065d6 <_svfiprintf_r+0x186>
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	3402      	adds	r4, #2
 8006574:	1d1a      	adds	r2, r3, #4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	9203      	str	r2, [sp, #12]
 800657a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800657e:	9305      	str	r3, [sp, #20]
 8006580:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006638 <_svfiprintf_r+0x1e8>
 8006584:	2203      	movs	r2, #3
 8006586:	4650      	mov	r0, sl
 8006588:	7821      	ldrb	r1, [r4, #0]
 800658a:	f000 fc83 	bl	8006e94 <memchr>
 800658e:	b138      	cbz	r0, 80065a0 <_svfiprintf_r+0x150>
 8006590:	2240      	movs	r2, #64	@ 0x40
 8006592:	9b04      	ldr	r3, [sp, #16]
 8006594:	eba0 000a 	sub.w	r0, r0, sl
 8006598:	4082      	lsls	r2, r0
 800659a:	4313      	orrs	r3, r2
 800659c:	3401      	adds	r4, #1
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a4:	2206      	movs	r2, #6
 80065a6:	4825      	ldr	r0, [pc, #148]	@ (800663c <_svfiprintf_r+0x1ec>)
 80065a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065ac:	f000 fc72 	bl	8006e94 <memchr>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d036      	beq.n	8006622 <_svfiprintf_r+0x1d2>
 80065b4:	4b22      	ldr	r3, [pc, #136]	@ (8006640 <_svfiprintf_r+0x1f0>)
 80065b6:	bb1b      	cbnz	r3, 8006600 <_svfiprintf_r+0x1b0>
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	3307      	adds	r3, #7
 80065bc:	f023 0307 	bic.w	r3, r3, #7
 80065c0:	3308      	adds	r3, #8
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c6:	4433      	add	r3, r6
 80065c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ca:	e76a      	b.n	80064a2 <_svfiprintf_r+0x52>
 80065cc:	460c      	mov	r4, r1
 80065ce:	2001      	movs	r0, #1
 80065d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d4:	e7a8      	b.n	8006528 <_svfiprintf_r+0xd8>
 80065d6:	2300      	movs	r3, #0
 80065d8:	f04f 0c0a 	mov.w	ip, #10
 80065dc:	4619      	mov	r1, r3
 80065de:	3401      	adds	r4, #1
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	4620      	mov	r0, r4
 80065e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e8:	3a30      	subs	r2, #48	@ 0x30
 80065ea:	2a09      	cmp	r2, #9
 80065ec:	d903      	bls.n	80065f6 <_svfiprintf_r+0x1a6>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0c6      	beq.n	8006580 <_svfiprintf_r+0x130>
 80065f2:	9105      	str	r1, [sp, #20]
 80065f4:	e7c4      	b.n	8006580 <_svfiprintf_r+0x130>
 80065f6:	4604      	mov	r4, r0
 80065f8:	2301      	movs	r3, #1
 80065fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80065fe:	e7f0      	b.n	80065e2 <_svfiprintf_r+0x192>
 8006600:	ab03      	add	r3, sp, #12
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	462a      	mov	r2, r5
 8006606:	4638      	mov	r0, r7
 8006608:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <_svfiprintf_r+0x1f4>)
 800660a:	a904      	add	r1, sp, #16
 800660c:	f3af 8000 	nop.w
 8006610:	1c42      	adds	r2, r0, #1
 8006612:	4606      	mov	r6, r0
 8006614:	d1d6      	bne.n	80065c4 <_svfiprintf_r+0x174>
 8006616:	89ab      	ldrh	r3, [r5, #12]
 8006618:	065b      	lsls	r3, r3, #25
 800661a:	f53f af2d 	bmi.w	8006478 <_svfiprintf_r+0x28>
 800661e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006620:	e72c      	b.n	800647c <_svfiprintf_r+0x2c>
 8006622:	ab03      	add	r3, sp, #12
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	462a      	mov	r2, r5
 8006628:	4638      	mov	r0, r7
 800662a:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <_svfiprintf_r+0x1f4>)
 800662c:	a904      	add	r1, sp, #16
 800662e:	f000 f9bd 	bl	80069ac <_printf_i>
 8006632:	e7ed      	b.n	8006610 <_svfiprintf_r+0x1c0>
 8006634:	08008216 	.word	0x08008216
 8006638:	0800821c 	.word	0x0800821c
 800663c:	08008220 	.word	0x08008220
 8006640:	00000000 	.word	0x00000000
 8006644:	08006399 	.word	0x08006399

08006648 <__sfputc_r>:
 8006648:	6893      	ldr	r3, [r2, #8]
 800664a:	b410      	push	{r4}
 800664c:	3b01      	subs	r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	6093      	str	r3, [r2, #8]
 8006652:	da07      	bge.n	8006664 <__sfputc_r+0x1c>
 8006654:	6994      	ldr	r4, [r2, #24]
 8006656:	42a3      	cmp	r3, r4
 8006658:	db01      	blt.n	800665e <__sfputc_r+0x16>
 800665a:	290a      	cmp	r1, #10
 800665c:	d102      	bne.n	8006664 <__sfputc_r+0x1c>
 800665e:	bc10      	pop	{r4}
 8006660:	f7ff bc85 	b.w	8005f6e <__swbuf_r>
 8006664:	6813      	ldr	r3, [r2, #0]
 8006666:	1c58      	adds	r0, r3, #1
 8006668:	6010      	str	r0, [r2, #0]
 800666a:	7019      	strb	r1, [r3, #0]
 800666c:	4608      	mov	r0, r1
 800666e:	bc10      	pop	{r4}
 8006670:	4770      	bx	lr

08006672 <__sfputs_r>:
 8006672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006674:	4606      	mov	r6, r0
 8006676:	460f      	mov	r7, r1
 8006678:	4614      	mov	r4, r2
 800667a:	18d5      	adds	r5, r2, r3
 800667c:	42ac      	cmp	r4, r5
 800667e:	d101      	bne.n	8006684 <__sfputs_r+0x12>
 8006680:	2000      	movs	r0, #0
 8006682:	e007      	b.n	8006694 <__sfputs_r+0x22>
 8006684:	463a      	mov	r2, r7
 8006686:	4630      	mov	r0, r6
 8006688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668c:	f7ff ffdc 	bl	8006648 <__sfputc_r>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d1f3      	bne.n	800667c <__sfputs_r+0xa>
 8006694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006698 <_vfiprintf_r>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	460d      	mov	r5, r1
 800669e:	4614      	mov	r4, r2
 80066a0:	4698      	mov	r8, r3
 80066a2:	4606      	mov	r6, r0
 80066a4:	b09d      	sub	sp, #116	@ 0x74
 80066a6:	b118      	cbz	r0, 80066b0 <_vfiprintf_r+0x18>
 80066a8:	6a03      	ldr	r3, [r0, #32]
 80066aa:	b90b      	cbnz	r3, 80066b0 <_vfiprintf_r+0x18>
 80066ac:	f7ff fb54 	bl	8005d58 <__sinit>
 80066b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066b2:	07d9      	lsls	r1, r3, #31
 80066b4:	d405      	bmi.n	80066c2 <_vfiprintf_r+0x2a>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	059a      	lsls	r2, r3, #22
 80066ba:	d402      	bmi.n	80066c2 <_vfiprintf_r+0x2a>
 80066bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066be:	f7ff fd64 	bl	800618a <__retarget_lock_acquire_recursive>
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	071b      	lsls	r3, r3, #28
 80066c6:	d501      	bpl.n	80066cc <_vfiprintf_r+0x34>
 80066c8:	692b      	ldr	r3, [r5, #16]
 80066ca:	b99b      	cbnz	r3, 80066f4 <_vfiprintf_r+0x5c>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7ff fc8c 	bl	8005fec <__swsetup_r>
 80066d4:	b170      	cbz	r0, 80066f4 <_vfiprintf_r+0x5c>
 80066d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066d8:	07dc      	lsls	r4, r3, #31
 80066da:	d504      	bpl.n	80066e6 <_vfiprintf_r+0x4e>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	b01d      	add	sp, #116	@ 0x74
 80066e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	0598      	lsls	r0, r3, #22
 80066ea:	d4f7      	bmi.n	80066dc <_vfiprintf_r+0x44>
 80066ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ee:	f7ff fd4d 	bl	800618c <__retarget_lock_release_recursive>
 80066f2:	e7f3      	b.n	80066dc <_vfiprintf_r+0x44>
 80066f4:	2300      	movs	r3, #0
 80066f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066f8:	2320      	movs	r3, #32
 80066fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066fe:	2330      	movs	r3, #48	@ 0x30
 8006700:	f04f 0901 	mov.w	r9, #1
 8006704:	f8cd 800c 	str.w	r8, [sp, #12]
 8006708:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80068b4 <_vfiprintf_r+0x21c>
 800670c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006710:	4623      	mov	r3, r4
 8006712:	469a      	mov	sl, r3
 8006714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006718:	b10a      	cbz	r2, 800671e <_vfiprintf_r+0x86>
 800671a:	2a25      	cmp	r2, #37	@ 0x25
 800671c:	d1f9      	bne.n	8006712 <_vfiprintf_r+0x7a>
 800671e:	ebba 0b04 	subs.w	fp, sl, r4
 8006722:	d00b      	beq.n	800673c <_vfiprintf_r+0xa4>
 8006724:	465b      	mov	r3, fp
 8006726:	4622      	mov	r2, r4
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ffa1 	bl	8006672 <__sfputs_r>
 8006730:	3001      	adds	r0, #1
 8006732:	f000 80a7 	beq.w	8006884 <_vfiprintf_r+0x1ec>
 8006736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006738:	445a      	add	r2, fp
 800673a:	9209      	str	r2, [sp, #36]	@ 0x24
 800673c:	f89a 3000 	ldrb.w	r3, [sl]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 809f 	beq.w	8006884 <_vfiprintf_r+0x1ec>
 8006746:	2300      	movs	r3, #0
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006750:	f10a 0a01 	add.w	sl, sl, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800675c:	931a      	str	r3, [sp, #104]	@ 0x68
 800675e:	4654      	mov	r4, sl
 8006760:	2205      	movs	r2, #5
 8006762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006766:	4853      	ldr	r0, [pc, #332]	@ (80068b4 <_vfiprintf_r+0x21c>)
 8006768:	f000 fb94 	bl	8006e94 <memchr>
 800676c:	9a04      	ldr	r2, [sp, #16]
 800676e:	b9d8      	cbnz	r0, 80067a8 <_vfiprintf_r+0x110>
 8006770:	06d1      	lsls	r1, r2, #27
 8006772:	bf44      	itt	mi
 8006774:	2320      	movmi	r3, #32
 8006776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800677a:	0713      	lsls	r3, r2, #28
 800677c:	bf44      	itt	mi
 800677e:	232b      	movmi	r3, #43	@ 0x2b
 8006780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b2a      	cmp	r3, #42	@ 0x2a
 800678a:	d015      	beq.n	80067b8 <_vfiprintf_r+0x120>
 800678c:	4654      	mov	r4, sl
 800678e:	2000      	movs	r0, #0
 8006790:	f04f 0c0a 	mov.w	ip, #10
 8006794:	9a07      	ldr	r2, [sp, #28]
 8006796:	4621      	mov	r1, r4
 8006798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679c:	3b30      	subs	r3, #48	@ 0x30
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d94b      	bls.n	800683a <_vfiprintf_r+0x1a2>
 80067a2:	b1b0      	cbz	r0, 80067d2 <_vfiprintf_r+0x13a>
 80067a4:	9207      	str	r2, [sp, #28]
 80067a6:	e014      	b.n	80067d2 <_vfiprintf_r+0x13a>
 80067a8:	eba0 0308 	sub.w	r3, r0, r8
 80067ac:	fa09 f303 	lsl.w	r3, r9, r3
 80067b0:	4313      	orrs	r3, r2
 80067b2:	46a2      	mov	sl, r4
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	e7d2      	b.n	800675e <_vfiprintf_r+0xc6>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	1d19      	adds	r1, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	9103      	str	r1, [sp, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfbb      	ittet	lt
 80067c4:	425b      	neglt	r3, r3
 80067c6:	f042 0202 	orrlt.w	r2, r2, #2
 80067ca:	9307      	strge	r3, [sp, #28]
 80067cc:	9307      	strlt	r3, [sp, #28]
 80067ce:	bfb8      	it	lt
 80067d0:	9204      	strlt	r2, [sp, #16]
 80067d2:	7823      	ldrb	r3, [r4, #0]
 80067d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80067d6:	d10a      	bne.n	80067ee <_vfiprintf_r+0x156>
 80067d8:	7863      	ldrb	r3, [r4, #1]
 80067da:	2b2a      	cmp	r3, #42	@ 0x2a
 80067dc:	d132      	bne.n	8006844 <_vfiprintf_r+0x1ac>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	3402      	adds	r4, #2
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	9203      	str	r2, [sp, #12]
 80067e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067ec:	9305      	str	r3, [sp, #20]
 80067ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80068b8 <_vfiprintf_r+0x220>
 80067f2:	2203      	movs	r2, #3
 80067f4:	4650      	mov	r0, sl
 80067f6:	7821      	ldrb	r1, [r4, #0]
 80067f8:	f000 fb4c 	bl	8006e94 <memchr>
 80067fc:	b138      	cbz	r0, 800680e <_vfiprintf_r+0x176>
 80067fe:	2240      	movs	r2, #64	@ 0x40
 8006800:	9b04      	ldr	r3, [sp, #16]
 8006802:	eba0 000a 	sub.w	r0, r0, sl
 8006806:	4082      	lsls	r2, r0
 8006808:	4313      	orrs	r3, r2
 800680a:	3401      	adds	r4, #1
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006812:	2206      	movs	r2, #6
 8006814:	4829      	ldr	r0, [pc, #164]	@ (80068bc <_vfiprintf_r+0x224>)
 8006816:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800681a:	f000 fb3b 	bl	8006e94 <memchr>
 800681e:	2800      	cmp	r0, #0
 8006820:	d03f      	beq.n	80068a2 <_vfiprintf_r+0x20a>
 8006822:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <_vfiprintf_r+0x228>)
 8006824:	bb1b      	cbnz	r3, 800686e <_vfiprintf_r+0x1d6>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3307      	adds	r3, #7
 800682a:	f023 0307 	bic.w	r3, r3, #7
 800682e:	3308      	adds	r3, #8
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006834:	443b      	add	r3, r7
 8006836:	9309      	str	r3, [sp, #36]	@ 0x24
 8006838:	e76a      	b.n	8006710 <_vfiprintf_r+0x78>
 800683a:	460c      	mov	r4, r1
 800683c:	2001      	movs	r0, #1
 800683e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006842:	e7a8      	b.n	8006796 <_vfiprintf_r+0xfe>
 8006844:	2300      	movs	r3, #0
 8006846:	f04f 0c0a 	mov.w	ip, #10
 800684a:	4619      	mov	r1, r3
 800684c:	3401      	adds	r4, #1
 800684e:	9305      	str	r3, [sp, #20]
 8006850:	4620      	mov	r0, r4
 8006852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006856:	3a30      	subs	r2, #48	@ 0x30
 8006858:	2a09      	cmp	r2, #9
 800685a:	d903      	bls.n	8006864 <_vfiprintf_r+0x1cc>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0c6      	beq.n	80067ee <_vfiprintf_r+0x156>
 8006860:	9105      	str	r1, [sp, #20]
 8006862:	e7c4      	b.n	80067ee <_vfiprintf_r+0x156>
 8006864:	4604      	mov	r4, r0
 8006866:	2301      	movs	r3, #1
 8006868:	fb0c 2101 	mla	r1, ip, r1, r2
 800686c:	e7f0      	b.n	8006850 <_vfiprintf_r+0x1b8>
 800686e:	ab03      	add	r3, sp, #12
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	462a      	mov	r2, r5
 8006874:	4630      	mov	r0, r6
 8006876:	4b13      	ldr	r3, [pc, #76]	@ (80068c4 <_vfiprintf_r+0x22c>)
 8006878:	a904      	add	r1, sp, #16
 800687a:	f3af 8000 	nop.w
 800687e:	4607      	mov	r7, r0
 8006880:	1c78      	adds	r0, r7, #1
 8006882:	d1d6      	bne.n	8006832 <_vfiprintf_r+0x19a>
 8006884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006886:	07d9      	lsls	r1, r3, #31
 8006888:	d405      	bmi.n	8006896 <_vfiprintf_r+0x1fe>
 800688a:	89ab      	ldrh	r3, [r5, #12]
 800688c:	059a      	lsls	r2, r3, #22
 800688e:	d402      	bmi.n	8006896 <_vfiprintf_r+0x1fe>
 8006890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006892:	f7ff fc7b 	bl	800618c <__retarget_lock_release_recursive>
 8006896:	89ab      	ldrh	r3, [r5, #12]
 8006898:	065b      	lsls	r3, r3, #25
 800689a:	f53f af1f 	bmi.w	80066dc <_vfiprintf_r+0x44>
 800689e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068a0:	e71e      	b.n	80066e0 <_vfiprintf_r+0x48>
 80068a2:	ab03      	add	r3, sp, #12
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	462a      	mov	r2, r5
 80068a8:	4630      	mov	r0, r6
 80068aa:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <_vfiprintf_r+0x22c>)
 80068ac:	a904      	add	r1, sp, #16
 80068ae:	f000 f87d 	bl	80069ac <_printf_i>
 80068b2:	e7e4      	b.n	800687e <_vfiprintf_r+0x1e6>
 80068b4:	08008216 	.word	0x08008216
 80068b8:	0800821c 	.word	0x0800821c
 80068bc:	08008220 	.word	0x08008220
 80068c0:	00000000 	.word	0x00000000
 80068c4:	08006673 	.word	0x08006673

080068c8 <_printf_common>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	4616      	mov	r6, r2
 80068ce:	4698      	mov	r8, r3
 80068d0:	688a      	ldr	r2, [r1, #8]
 80068d2:	690b      	ldr	r3, [r1, #16]
 80068d4:	4607      	mov	r7, r0
 80068d6:	4293      	cmp	r3, r2
 80068d8:	bfb8      	it	lt
 80068da:	4613      	movlt	r3, r2
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068e2:	460c      	mov	r4, r1
 80068e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068e8:	b10a      	cbz	r2, 80068ee <_printf_common+0x26>
 80068ea:	3301      	adds	r3, #1
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	0699      	lsls	r1, r3, #26
 80068f2:	bf42      	ittt	mi
 80068f4:	6833      	ldrmi	r3, [r6, #0]
 80068f6:	3302      	addmi	r3, #2
 80068f8:	6033      	strmi	r3, [r6, #0]
 80068fa:	6825      	ldr	r5, [r4, #0]
 80068fc:	f015 0506 	ands.w	r5, r5, #6
 8006900:	d106      	bne.n	8006910 <_printf_common+0x48>
 8006902:	f104 0a19 	add.w	sl, r4, #25
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	6832      	ldr	r2, [r6, #0]
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	42ab      	cmp	r3, r5
 800690e:	dc2b      	bgt.n	8006968 <_printf_common+0xa0>
 8006910:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	3b00      	subs	r3, #0
 8006918:	bf18      	it	ne
 800691a:	2301      	movne	r3, #1
 800691c:	0692      	lsls	r2, r2, #26
 800691e:	d430      	bmi.n	8006982 <_printf_common+0xba>
 8006920:	4641      	mov	r1, r8
 8006922:	4638      	mov	r0, r7
 8006924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006928:	47c8      	blx	r9
 800692a:	3001      	adds	r0, #1
 800692c:	d023      	beq.n	8006976 <_printf_common+0xae>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	6922      	ldr	r2, [r4, #16]
 8006932:	f003 0306 	and.w	r3, r3, #6
 8006936:	2b04      	cmp	r3, #4
 8006938:	bf14      	ite	ne
 800693a:	2500      	movne	r5, #0
 800693c:	6833      	ldreq	r3, [r6, #0]
 800693e:	f04f 0600 	mov.w	r6, #0
 8006942:	bf08      	it	eq
 8006944:	68e5      	ldreq	r5, [r4, #12]
 8006946:	f104 041a 	add.w	r4, r4, #26
 800694a:	bf08      	it	eq
 800694c:	1aed      	subeq	r5, r5, r3
 800694e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006952:	bf08      	it	eq
 8006954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006958:	4293      	cmp	r3, r2
 800695a:	bfc4      	itt	gt
 800695c:	1a9b      	subgt	r3, r3, r2
 800695e:	18ed      	addgt	r5, r5, r3
 8006960:	42b5      	cmp	r5, r6
 8006962:	d11a      	bne.n	800699a <_printf_common+0xd2>
 8006964:	2000      	movs	r0, #0
 8006966:	e008      	b.n	800697a <_printf_common+0xb2>
 8006968:	2301      	movs	r3, #1
 800696a:	4652      	mov	r2, sl
 800696c:	4641      	mov	r1, r8
 800696e:	4638      	mov	r0, r7
 8006970:	47c8      	blx	r9
 8006972:	3001      	adds	r0, #1
 8006974:	d103      	bne.n	800697e <_printf_common+0xb6>
 8006976:	f04f 30ff 	mov.w	r0, #4294967295
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	3501      	adds	r5, #1
 8006980:	e7c1      	b.n	8006906 <_printf_common+0x3e>
 8006982:	2030      	movs	r0, #48	@ 0x30
 8006984:	18e1      	adds	r1, r4, r3
 8006986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006990:	4422      	add	r2, r4
 8006992:	3302      	adds	r3, #2
 8006994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006998:	e7c2      	b.n	8006920 <_printf_common+0x58>
 800699a:	2301      	movs	r3, #1
 800699c:	4622      	mov	r2, r4
 800699e:	4641      	mov	r1, r8
 80069a0:	4638      	mov	r0, r7
 80069a2:	47c8      	blx	r9
 80069a4:	3001      	adds	r0, #1
 80069a6:	d0e6      	beq.n	8006976 <_printf_common+0xae>
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7d9      	b.n	8006960 <_printf_common+0x98>

080069ac <_printf_i>:
 80069ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	7e0f      	ldrb	r7, [r1, #24]
 80069b2:	4691      	mov	r9, r2
 80069b4:	2f78      	cmp	r7, #120	@ 0x78
 80069b6:	4680      	mov	r8, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	469a      	mov	sl, r3
 80069bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069c2:	d807      	bhi.n	80069d4 <_printf_i+0x28>
 80069c4:	2f62      	cmp	r7, #98	@ 0x62
 80069c6:	d80a      	bhi.n	80069de <_printf_i+0x32>
 80069c8:	2f00      	cmp	r7, #0
 80069ca:	f000 80d1 	beq.w	8006b70 <_printf_i+0x1c4>
 80069ce:	2f58      	cmp	r7, #88	@ 0x58
 80069d0:	f000 80b8 	beq.w	8006b44 <_printf_i+0x198>
 80069d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069dc:	e03a      	b.n	8006a54 <_printf_i+0xa8>
 80069de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069e2:	2b15      	cmp	r3, #21
 80069e4:	d8f6      	bhi.n	80069d4 <_printf_i+0x28>
 80069e6:	a101      	add	r1, pc, #4	@ (adr r1, 80069ec <_printf_i+0x40>)
 80069e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069ec:	08006a45 	.word	0x08006a45
 80069f0:	08006a59 	.word	0x08006a59
 80069f4:	080069d5 	.word	0x080069d5
 80069f8:	080069d5 	.word	0x080069d5
 80069fc:	080069d5 	.word	0x080069d5
 8006a00:	080069d5 	.word	0x080069d5
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	080069d5 	.word	0x080069d5
 8006a0c:	080069d5 	.word	0x080069d5
 8006a10:	080069d5 	.word	0x080069d5
 8006a14:	080069d5 	.word	0x080069d5
 8006a18:	08006b57 	.word	0x08006b57
 8006a1c:	08006a83 	.word	0x08006a83
 8006a20:	08006b11 	.word	0x08006b11
 8006a24:	080069d5 	.word	0x080069d5
 8006a28:	080069d5 	.word	0x080069d5
 8006a2c:	08006b79 	.word	0x08006b79
 8006a30:	080069d5 	.word	0x080069d5
 8006a34:	08006a83 	.word	0x08006a83
 8006a38:	080069d5 	.word	0x080069d5
 8006a3c:	080069d5 	.word	0x080069d5
 8006a40:	08006b19 	.word	0x08006b19
 8006a44:	6833      	ldr	r3, [r6, #0]
 8006a46:	1d1a      	adds	r2, r3, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6032      	str	r2, [r6, #0]
 8006a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a54:	2301      	movs	r3, #1
 8006a56:	e09c      	b.n	8006b92 <_printf_i+0x1e6>
 8006a58:	6833      	ldr	r3, [r6, #0]
 8006a5a:	6820      	ldr	r0, [r4, #0]
 8006a5c:	1d19      	adds	r1, r3, #4
 8006a5e:	6031      	str	r1, [r6, #0]
 8006a60:	0606      	lsls	r6, r0, #24
 8006a62:	d501      	bpl.n	8006a68 <_printf_i+0xbc>
 8006a64:	681d      	ldr	r5, [r3, #0]
 8006a66:	e003      	b.n	8006a70 <_printf_i+0xc4>
 8006a68:	0645      	lsls	r5, r0, #25
 8006a6a:	d5fb      	bpl.n	8006a64 <_printf_i+0xb8>
 8006a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	da03      	bge.n	8006a7c <_printf_i+0xd0>
 8006a74:	232d      	movs	r3, #45	@ 0x2d
 8006a76:	426d      	negs	r5, r5
 8006a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a7c:	230a      	movs	r3, #10
 8006a7e:	4858      	ldr	r0, [pc, #352]	@ (8006be0 <_printf_i+0x234>)
 8006a80:	e011      	b.n	8006aa6 <_printf_i+0xfa>
 8006a82:	6821      	ldr	r1, [r4, #0]
 8006a84:	6833      	ldr	r3, [r6, #0]
 8006a86:	0608      	lsls	r0, r1, #24
 8006a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a8c:	d402      	bmi.n	8006a94 <_printf_i+0xe8>
 8006a8e:	0649      	lsls	r1, r1, #25
 8006a90:	bf48      	it	mi
 8006a92:	b2ad      	uxthmi	r5, r5
 8006a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a96:	6033      	str	r3, [r6, #0]
 8006a98:	bf14      	ite	ne
 8006a9a:	230a      	movne	r3, #10
 8006a9c:	2308      	moveq	r3, #8
 8006a9e:	4850      	ldr	r0, [pc, #320]	@ (8006be0 <_printf_i+0x234>)
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006aa6:	6866      	ldr	r6, [r4, #4]
 8006aa8:	2e00      	cmp	r6, #0
 8006aaa:	60a6      	str	r6, [r4, #8]
 8006aac:	db05      	blt.n	8006aba <_printf_i+0x10e>
 8006aae:	6821      	ldr	r1, [r4, #0]
 8006ab0:	432e      	orrs	r6, r5
 8006ab2:	f021 0104 	bic.w	r1, r1, #4
 8006ab6:	6021      	str	r1, [r4, #0]
 8006ab8:	d04b      	beq.n	8006b52 <_printf_i+0x1a6>
 8006aba:	4616      	mov	r6, r2
 8006abc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ac0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ac4:	5dc7      	ldrb	r7, [r0, r7]
 8006ac6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aca:	462f      	mov	r7, r5
 8006acc:	42bb      	cmp	r3, r7
 8006ace:	460d      	mov	r5, r1
 8006ad0:	d9f4      	bls.n	8006abc <_printf_i+0x110>
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d10b      	bne.n	8006aee <_printf_i+0x142>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	07df      	lsls	r7, r3, #31
 8006ada:	d508      	bpl.n	8006aee <_printf_i+0x142>
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	6861      	ldr	r1, [r4, #4]
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	bfde      	ittt	le
 8006ae4:	2330      	movle	r3, #48	@ 0x30
 8006ae6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006aee:	1b92      	subs	r2, r2, r6
 8006af0:	6122      	str	r2, [r4, #16]
 8006af2:	464b      	mov	r3, r9
 8006af4:	4621      	mov	r1, r4
 8006af6:	4640      	mov	r0, r8
 8006af8:	f8cd a000 	str.w	sl, [sp]
 8006afc:	aa03      	add	r2, sp, #12
 8006afe:	f7ff fee3 	bl	80068c8 <_printf_common>
 8006b02:	3001      	adds	r0, #1
 8006b04:	d14a      	bne.n	8006b9c <_printf_i+0x1f0>
 8006b06:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0a:	b004      	add	sp, #16
 8006b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	f043 0320 	orr.w	r3, r3, #32
 8006b16:	6023      	str	r3, [r4, #0]
 8006b18:	2778      	movs	r7, #120	@ 0x78
 8006b1a:	4832      	ldr	r0, [pc, #200]	@ (8006be4 <_printf_i+0x238>)
 8006b1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	6831      	ldr	r1, [r6, #0]
 8006b24:	061f      	lsls	r7, r3, #24
 8006b26:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b2a:	d402      	bmi.n	8006b32 <_printf_i+0x186>
 8006b2c:	065f      	lsls	r7, r3, #25
 8006b2e:	bf48      	it	mi
 8006b30:	b2ad      	uxthmi	r5, r5
 8006b32:	6031      	str	r1, [r6, #0]
 8006b34:	07d9      	lsls	r1, r3, #31
 8006b36:	bf44      	itt	mi
 8006b38:	f043 0320 	orrmi.w	r3, r3, #32
 8006b3c:	6023      	strmi	r3, [r4, #0]
 8006b3e:	b11d      	cbz	r5, 8006b48 <_printf_i+0x19c>
 8006b40:	2310      	movs	r3, #16
 8006b42:	e7ad      	b.n	8006aa0 <_printf_i+0xf4>
 8006b44:	4826      	ldr	r0, [pc, #152]	@ (8006be0 <_printf_i+0x234>)
 8006b46:	e7e9      	b.n	8006b1c <_printf_i+0x170>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	f023 0320 	bic.w	r3, r3, #32
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	e7f6      	b.n	8006b40 <_printf_i+0x194>
 8006b52:	4616      	mov	r6, r2
 8006b54:	e7bd      	b.n	8006ad2 <_printf_i+0x126>
 8006b56:	6833      	ldr	r3, [r6, #0]
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	1d18      	adds	r0, r3, #4
 8006b5c:	6961      	ldr	r1, [r4, #20]
 8006b5e:	6030      	str	r0, [r6, #0]
 8006b60:	062e      	lsls	r6, r5, #24
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	d501      	bpl.n	8006b6a <_printf_i+0x1be>
 8006b66:	6019      	str	r1, [r3, #0]
 8006b68:	e002      	b.n	8006b70 <_printf_i+0x1c4>
 8006b6a:	0668      	lsls	r0, r5, #25
 8006b6c:	d5fb      	bpl.n	8006b66 <_printf_i+0x1ba>
 8006b6e:	8019      	strh	r1, [r3, #0]
 8006b70:	2300      	movs	r3, #0
 8006b72:	4616      	mov	r6, r2
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	e7bc      	b.n	8006af2 <_printf_i+0x146>
 8006b78:	6833      	ldr	r3, [r6, #0]
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	6032      	str	r2, [r6, #0]
 8006b80:	681e      	ldr	r6, [r3, #0]
 8006b82:	6862      	ldr	r2, [r4, #4]
 8006b84:	4630      	mov	r0, r6
 8006b86:	f000 f985 	bl	8006e94 <memchr>
 8006b8a:	b108      	cbz	r0, 8006b90 <_printf_i+0x1e4>
 8006b8c:	1b80      	subs	r0, r0, r6
 8006b8e:	6060      	str	r0, [r4, #4]
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	2300      	movs	r3, #0
 8006b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b9a:	e7aa      	b.n	8006af2 <_printf_i+0x146>
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	47d0      	blx	sl
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	d0ad      	beq.n	8006b06 <_printf_i+0x15a>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	079b      	lsls	r3, r3, #30
 8006bae:	d413      	bmi.n	8006bd8 <_printf_i+0x22c>
 8006bb0:	68e0      	ldr	r0, [r4, #12]
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	4298      	cmp	r0, r3
 8006bb6:	bfb8      	it	lt
 8006bb8:	4618      	movlt	r0, r3
 8006bba:	e7a6      	b.n	8006b0a <_printf_i+0x15e>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	47d0      	blx	sl
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d09d      	beq.n	8006b06 <_printf_i+0x15a>
 8006bca:	3501      	adds	r5, #1
 8006bcc:	68e3      	ldr	r3, [r4, #12]
 8006bce:	9903      	ldr	r1, [sp, #12]
 8006bd0:	1a5b      	subs	r3, r3, r1
 8006bd2:	42ab      	cmp	r3, r5
 8006bd4:	dcf2      	bgt.n	8006bbc <_printf_i+0x210>
 8006bd6:	e7eb      	b.n	8006bb0 <_printf_i+0x204>
 8006bd8:	2500      	movs	r5, #0
 8006bda:	f104 0619 	add.w	r6, r4, #25
 8006bde:	e7f5      	b.n	8006bcc <_printf_i+0x220>
 8006be0:	08008227 	.word	0x08008227
 8006be4:	08008238 	.word	0x08008238

08006be8 <__sflush_r>:
 8006be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	0716      	lsls	r6, r2, #28
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	d454      	bmi.n	8006ca0 <__sflush_r+0xb8>
 8006bf6:	684b      	ldr	r3, [r1, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc02      	bgt.n	8006c02 <__sflush_r+0x1a>
 8006bfc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dd48      	ble.n	8006c94 <__sflush_r+0xac>
 8006c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	d045      	beq.n	8006c94 <__sflush_r+0xac>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c0e:	682f      	ldr	r7, [r5, #0]
 8006c10:	6a21      	ldr	r1, [r4, #32]
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	d030      	beq.n	8006c78 <__sflush_r+0x90>
 8006c16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	0759      	lsls	r1, r3, #29
 8006c1c:	d505      	bpl.n	8006c2a <__sflush_r+0x42>
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	1ad2      	subs	r2, r2, r3
 8006c22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c24:	b10b      	cbz	r3, 8006c2a <__sflush_r+0x42>
 8006c26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c30:	6a21      	ldr	r1, [r4, #32]
 8006c32:	47b0      	blx	r6
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	d106      	bne.n	8006c48 <__sflush_r+0x60>
 8006c3a:	6829      	ldr	r1, [r5, #0]
 8006c3c:	291d      	cmp	r1, #29
 8006c3e:	d82b      	bhi.n	8006c98 <__sflush_r+0xb0>
 8006c40:	4a28      	ldr	r2, [pc, #160]	@ (8006ce4 <__sflush_r+0xfc>)
 8006c42:	40ca      	lsrs	r2, r1
 8006c44:	07d6      	lsls	r6, r2, #31
 8006c46:	d527      	bpl.n	8006c98 <__sflush_r+0xb0>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	6062      	str	r2, [r4, #4]
 8006c4c:	6922      	ldr	r2, [r4, #16]
 8006c4e:	04d9      	lsls	r1, r3, #19
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	d504      	bpl.n	8006c5e <__sflush_r+0x76>
 8006c54:	1c42      	adds	r2, r0, #1
 8006c56:	d101      	bne.n	8006c5c <__sflush_r+0x74>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b903      	cbnz	r3, 8006c5e <__sflush_r+0x76>
 8006c5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c60:	602f      	str	r7, [r5, #0]
 8006c62:	b1b9      	cbz	r1, 8006c94 <__sflush_r+0xac>
 8006c64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	d002      	beq.n	8006c72 <__sflush_r+0x8a>
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f7ff fa9d 	bl	80061ac <_free_r>
 8006c72:	2300      	movs	r3, #0
 8006c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c76:	e00d      	b.n	8006c94 <__sflush_r+0xac>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b0      	blx	r6
 8006c7e:	4602      	mov	r2, r0
 8006c80:	1c50      	adds	r0, r2, #1
 8006c82:	d1c9      	bne.n	8006c18 <__sflush_r+0x30>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0c6      	beq.n	8006c18 <__sflush_r+0x30>
 8006c8a:	2b1d      	cmp	r3, #29
 8006c8c:	d001      	beq.n	8006c92 <__sflush_r+0xaa>
 8006c8e:	2b16      	cmp	r3, #22
 8006c90:	d11d      	bne.n	8006cce <__sflush_r+0xe6>
 8006c92:	602f      	str	r7, [r5, #0]
 8006c94:	2000      	movs	r0, #0
 8006c96:	e021      	b.n	8006cdc <__sflush_r+0xf4>
 8006c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	e01a      	b.n	8006cd6 <__sflush_r+0xee>
 8006ca0:	690f      	ldr	r7, [r1, #16]
 8006ca2:	2f00      	cmp	r7, #0
 8006ca4:	d0f6      	beq.n	8006c94 <__sflush_r+0xac>
 8006ca6:	0793      	lsls	r3, r2, #30
 8006ca8:	bf18      	it	ne
 8006caa:	2300      	movne	r3, #0
 8006cac:	680e      	ldr	r6, [r1, #0]
 8006cae:	bf08      	it	eq
 8006cb0:	694b      	ldreq	r3, [r1, #20]
 8006cb2:	1bf6      	subs	r6, r6, r7
 8006cb4:	600f      	str	r7, [r1, #0]
 8006cb6:	608b      	str	r3, [r1, #8]
 8006cb8:	2e00      	cmp	r6, #0
 8006cba:	ddeb      	ble.n	8006c94 <__sflush_r+0xac>
 8006cbc:	4633      	mov	r3, r6
 8006cbe:	463a      	mov	r2, r7
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	6a21      	ldr	r1, [r4, #32]
 8006cc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006cc8:	47e0      	blx	ip
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	dc07      	bgt.n	8006cde <__sflush_r+0xf6>
 8006cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cde:	4407      	add	r7, r0
 8006ce0:	1a36      	subs	r6, r6, r0
 8006ce2:	e7e9      	b.n	8006cb8 <__sflush_r+0xd0>
 8006ce4:	20400001 	.word	0x20400001

08006ce8 <_fflush_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	690b      	ldr	r3, [r1, #16]
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b913      	cbnz	r3, 8006cf8 <_fflush_r+0x10>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	b118      	cbz	r0, 8006d02 <_fflush_r+0x1a>
 8006cfa:	6a03      	ldr	r3, [r0, #32]
 8006cfc:	b90b      	cbnz	r3, 8006d02 <_fflush_r+0x1a>
 8006cfe:	f7ff f82b 	bl	8005d58 <__sinit>
 8006d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f3      	beq.n	8006cf2 <_fflush_r+0xa>
 8006d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d0c:	07d0      	lsls	r0, r2, #31
 8006d0e:	d404      	bmi.n	8006d1a <_fflush_r+0x32>
 8006d10:	0599      	lsls	r1, r3, #22
 8006d12:	d402      	bmi.n	8006d1a <_fflush_r+0x32>
 8006d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d16:	f7ff fa38 	bl	800618a <__retarget_lock_acquire_recursive>
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	f7ff ff63 	bl	8006be8 <__sflush_r>
 8006d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d24:	4605      	mov	r5, r0
 8006d26:	07da      	lsls	r2, r3, #31
 8006d28:	d4e4      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	059b      	lsls	r3, r3, #22
 8006d2e:	d4e1      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d32:	f7ff fa2b 	bl	800618c <__retarget_lock_release_recursive>
 8006d36:	e7dd      	b.n	8006cf4 <_fflush_r+0xc>

08006d38 <__swhatbuf_r>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d40:	4615      	mov	r5, r2
 8006d42:	2900      	cmp	r1, #0
 8006d44:	461e      	mov	r6, r3
 8006d46:	b096      	sub	sp, #88	@ 0x58
 8006d48:	da0c      	bge.n	8006d64 <__swhatbuf_r+0x2c>
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d52:	bf14      	ite	ne
 8006d54:	2340      	movne	r3, #64	@ 0x40
 8006d56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	6031      	str	r1, [r6, #0]
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	b016      	add	sp, #88	@ 0x58
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	466a      	mov	r2, sp
 8006d66:	f000 f863 	bl	8006e30 <_fstat_r>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	dbed      	blt.n	8006d4a <__swhatbuf_r+0x12>
 8006d6e:	9901      	ldr	r1, [sp, #4]
 8006d70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d78:	4259      	negs	r1, r3
 8006d7a:	4159      	adcs	r1, r3
 8006d7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d80:	e7eb      	b.n	8006d5a <__swhatbuf_r+0x22>

08006d82 <__smakebuf_r>:
 8006d82:	898b      	ldrh	r3, [r1, #12]
 8006d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d86:	079d      	lsls	r5, r3, #30
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	d507      	bpl.n	8006d9e <__smakebuf_r+0x1c>
 8006d8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	6123      	str	r3, [r4, #16]
 8006d96:	2301      	movs	r3, #1
 8006d98:	6163      	str	r3, [r4, #20]
 8006d9a:	b003      	add	sp, #12
 8006d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9e:	466a      	mov	r2, sp
 8006da0:	ab01      	add	r3, sp, #4
 8006da2:	f7ff ffc9 	bl	8006d38 <__swhatbuf_r>
 8006da6:	9f00      	ldr	r7, [sp, #0]
 8006da8:	4605      	mov	r5, r0
 8006daa:	4639      	mov	r1, r7
 8006dac:	4630      	mov	r0, r6
 8006dae:	f7ff fa67 	bl	8006280 <_malloc_r>
 8006db2:	b948      	cbnz	r0, 8006dc8 <__smakebuf_r+0x46>
 8006db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db8:	059a      	lsls	r2, r3, #22
 8006dba:	d4ee      	bmi.n	8006d9a <__smakebuf_r+0x18>
 8006dbc:	f023 0303 	bic.w	r3, r3, #3
 8006dc0:	f043 0302 	orr.w	r3, r3, #2
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	e7e2      	b.n	8006d8e <__smakebuf_r+0xc>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	6020      	str	r0, [r4, #0]
 8006dd8:	b15b      	cbz	r3, 8006df2 <__smakebuf_r+0x70>
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de0:	f000 f838 	bl	8006e54 <_isatty_r>
 8006de4:	b128      	cbz	r0, 8006df2 <__smakebuf_r+0x70>
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f023 0303 	bic.w	r3, r3, #3
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	431d      	orrs	r5, r3
 8006df6:	81a5      	strh	r5, [r4, #12]
 8006df8:	e7cf      	b.n	8006d9a <__smakebuf_r+0x18>

08006dfa <memmove>:
 8006dfa:	4288      	cmp	r0, r1
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	eb01 0402 	add.w	r4, r1, r2
 8006e02:	d902      	bls.n	8006e0a <memmove+0x10>
 8006e04:	4284      	cmp	r4, r0
 8006e06:	4623      	mov	r3, r4
 8006e08:	d807      	bhi.n	8006e1a <memmove+0x20>
 8006e0a:	1e43      	subs	r3, r0, #1
 8006e0c:	42a1      	cmp	r1, r4
 8006e0e:	d008      	beq.n	8006e22 <memmove+0x28>
 8006e10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e18:	e7f8      	b.n	8006e0c <memmove+0x12>
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	4402      	add	r2, r0
 8006e1e:	428a      	cmp	r2, r1
 8006e20:	d100      	bne.n	8006e24 <memmove+0x2a>
 8006e22:	bd10      	pop	{r4, pc}
 8006e24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e2c:	e7f7      	b.n	8006e1e <memmove+0x24>
	...

08006e30 <_fstat_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	2300      	movs	r3, #0
 8006e34:	4d06      	ldr	r5, [pc, #24]	@ (8006e50 <_fstat_r+0x20>)
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f7fc f958 	bl	80030f2 <_fstat>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d102      	bne.n	8006e4c <_fstat_r+0x1c>
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	b103      	cbz	r3, 8006e4c <_fstat_r+0x1c>
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	bf00      	nop
 8006e50:	200009b4 	.word	0x200009b4

08006e54 <_isatty_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	2300      	movs	r3, #0
 8006e58:	4d05      	ldr	r5, [pc, #20]	@ (8006e70 <_isatty_r+0x1c>)
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fc f956 	bl	8003110 <_isatty>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_isatty_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_isatty_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	200009b4 	.word	0x200009b4

08006e74 <_sbrk_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	2300      	movs	r3, #0
 8006e78:	4d05      	ldr	r5, [pc, #20]	@ (8006e90 <_sbrk_r+0x1c>)
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	602b      	str	r3, [r5, #0]
 8006e80:	f7fc f95c 	bl	800313c <_sbrk>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_sbrk_r+0x1a>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_sbrk_r+0x1a>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	200009b4 	.word	0x200009b4

08006e94 <memchr>:
 8006e94:	4603      	mov	r3, r0
 8006e96:	b510      	push	{r4, lr}
 8006e98:	b2c9      	uxtb	r1, r1
 8006e9a:	4402      	add	r2, r0
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	d101      	bne.n	8006ea6 <memchr+0x12>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e003      	b.n	8006eae <memchr+0x1a>
 8006ea6:	7804      	ldrb	r4, [r0, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	428c      	cmp	r4, r1
 8006eac:	d1f6      	bne.n	8006e9c <memchr+0x8>
 8006eae:	bd10      	pop	{r4, pc}

08006eb0 <_realloc_r>:
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	460d      	mov	r5, r1
 8006eba:	b921      	cbnz	r1, 8006ec6 <_realloc_r+0x16>
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec2:	f7ff b9dd 	b.w	8006280 <_malloc_r>
 8006ec6:	b92a      	cbnz	r2, 8006ed4 <_realloc_r+0x24>
 8006ec8:	f7ff f970 	bl	80061ac <_free_r>
 8006ecc:	4625      	mov	r5, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed4:	f000 f81a 	bl	8006f0c <_malloc_usable_size_r>
 8006ed8:	4284      	cmp	r4, r0
 8006eda:	4606      	mov	r6, r0
 8006edc:	d802      	bhi.n	8006ee4 <_realloc_r+0x34>
 8006ede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ee2:	d8f4      	bhi.n	8006ece <_realloc_r+0x1e>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f7ff f9ca 	bl	8006280 <_malloc_r>
 8006eec:	4680      	mov	r8, r0
 8006eee:	b908      	cbnz	r0, 8006ef4 <_realloc_r+0x44>
 8006ef0:	4645      	mov	r5, r8
 8006ef2:	e7ec      	b.n	8006ece <_realloc_r+0x1e>
 8006ef4:	42b4      	cmp	r4, r6
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	bf28      	it	cs
 8006efc:	4632      	movcs	r2, r6
 8006efe:	f7ff f946 	bl	800618e <memcpy>
 8006f02:	4629      	mov	r1, r5
 8006f04:	4638      	mov	r0, r7
 8006f06:	f7ff f951 	bl	80061ac <_free_r>
 8006f0a:	e7f1      	b.n	8006ef0 <_realloc_r+0x40>

08006f0c <_malloc_usable_size_r>:
 8006f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f10:	1f18      	subs	r0, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfbc      	itt	lt
 8006f16:	580b      	ldrlt	r3, [r1, r0]
 8006f18:	18c0      	addlt	r0, r0, r3
 8006f1a:	4770      	bx	lr

08006f1c <_init>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr

08006f28 <_fini>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr
