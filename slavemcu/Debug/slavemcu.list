
slavemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08004304  08004304  00005304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004970  08004970  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004970  08004970  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00005970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004978  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000006c  080049e4  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080049e4  0000623c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ca3  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3a  00000000  00000000  0000dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0000f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d3  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001827e  00000000  00000000  00010603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a107  00000000  00000000  00028881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084440  00000000  00000000  00032988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6dc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  000b6e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b9484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080042ec 	.word	0x080042ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080042ec 	.word	0x080042ec

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <LED_Init>:

// Define LED pin
#define LED_PORT GPIOA
#define LED_PIN GPIO_PIN_1  // LED -> PA1 (output)

void LED_Init(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]

    // Enable GPIOA clock (if not already)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <LED_Init+0x5c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <LED_Init+0x5c>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <LED_Init+0x5c>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

    // Output for LED, push-pull, initial low (off)
    GPIO_InitStruct.Pin = LED_PIN;
 8000e74:	2302      	movs	r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2302      	movs	r3, #2
 8000e82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4807      	ldr	r0, [pc, #28]	@ (8000ea8 <LED_Init+0x60>)
 8000e8c:	f001 fa08 	bl	80022a0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);  // Off
 8000e90:	2200      	movs	r2, #0
 8000e92:	2102      	movs	r1, #2
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <LED_Init+0x60>)
 8000e96:	f001 fb87 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <LED_On>:

void LED_On(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <LED_On+0x14>)
 8000eb6:	f001 fb77 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <LED_Off>:

void LED_Off(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <LED_Off+0x14>)
 8000ece:	f001 fb6b 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010800 	.word	0x40010800

08000edc <LED_Toggle>:

void LED_Toggle(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4802      	ldr	r0, [pc, #8]	@ (8000eec <LED_Toggle+0x10>)
 8000ee4:	f001 fb78 	bl	80025d8 <HAL_GPIO_TogglePin>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010800 	.word	0x40010800

08000ef0 <LED_Flash>:

void LED_Flash(uint8_t times) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < times; i++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e012      	b.n	8000f26 <LED_Flash+0x36>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);  // On
 8000f00:	2201      	movs	r2, #1
 8000f02:	2102      	movs	r1, #2
 8000f04:	480e      	ldr	r0, [pc, #56]	@ (8000f40 <LED_Flash+0x50>)
 8000f06:	f001 fb4f 	bl	80025a8 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000f0a:	20c8      	movs	r0, #200	@ 0xc8
 8000f0c:	f001 f8c0 	bl	8002090 <HAL_Delay>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);  // Off
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <LED_Flash+0x50>)
 8000f16:	f001 fb47 	bl	80025a8 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000f1a:	20c8      	movs	r0, #200	@ 0xc8
 8000f1c:	f001 f8b8 	bl	8002090 <HAL_Delay>
    for (uint8_t i = 0; i < times; i++) {
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	3301      	adds	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3e8      	bcc.n	8000f00 <LED_Flash+0x10>
    }
    HAL_Delay(500);  // Pause after flashes
 8000f2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f32:	f001 f8ad 	bl	8002090 <HAL_Delay>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40010800 	.word	0x40010800

08000f44 <calculate_checksum>:
#include <string.h>  // 用于memcpy

static UART_HandleTypeDef *servo_uart;  // USART句柄

// 函数：计算校验和
static uint8_t calculate_checksum(uint8_t *packet, uint8_t len) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 8000f54:	2302      	movs	r3, #2
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	e009      	b.n	8000f6e <calculate_checksum+0x2a>
        sum += packet[i];
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4413      	add	r3, r2
 8000f66:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < len - 1; i++) {  // 从ID到Params结束
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	7bba      	ldrb	r2, [r7, #14]
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <calculate_checksum+0x16>
    }
    return ~sum;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <send_packet>:

// 函数：发送包
static void send_packet(uint8_t *packet, uint8_t len) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(servo_uart, packet, len, HAL_MAX_DELAY);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <send_packet+0x28>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	f001 ff93 	bl	8002ecc <HAL_UART_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000088 	.word	0x20000088

08000fb4 <receive_packet>:

// 函数：接收包（简单阻塞式，假设响应快速；实际可加超时/DMA）
static uint8_t receive_packet(uint8_t *rx_packet, uint8_t expected_len) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Receive(servo_uart, rx_packet, expected_len, 100);  // 返回实际接收长度，超时100ms
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <receive_packet+0x28>)
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f002 f809 	bl	8002fe2 <HAL_UART_Receive>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000088 	.word	0x20000088

08000fe0 <servo_init>:

// 初始化（默认波特率1M，无需设置寄存器0x06，因为初始值0=1M）
void servo_init(UART_HandleTypeDef *huart) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    servo_uart = huart;
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <servo_init+0x1c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
    // 可在此PING舵机确认连接
    servo_ping(SERVO_DEFAULT_ID);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 f806 	bl	8001000 <servo_ping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000088 	.word	0x20000088

08001000 <servo_ping>:

// PING
uint8_t servo_ping(uint8_t id) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
    uint8_t packet[6] = {0xFF, 0xFF, id, 0x02, SERVO_INST_PING, 0x00};
 800100a:	23ff      	movs	r3, #255	@ 0xff
 800100c:	743b      	strb	r3, [r7, #16]
 800100e:	23ff      	movs	r3, #255	@ 0xff
 8001010:	747b      	strb	r3, [r7, #17]
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	74bb      	strb	r3, [r7, #18]
 8001016:	2302      	movs	r3, #2
 8001018:	74fb      	strb	r3, [r7, #19]
 800101a:	2301      	movs	r3, #1
 800101c:	753b      	strb	r3, [r7, #20]
 800101e:	2300      	movs	r3, #0
 8001020:	757b      	strb	r3, [r7, #21]
    packet[5] = calculate_checksum(packet, 6);
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2106      	movs	r1, #6
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff8b 	bl	8000f44 <calculate_checksum>
 800102e:	4603      	mov	r3, r0
 8001030:	757b      	strb	r3, [r7, #21]
    send_packet(packet, 6);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2106      	movs	r1, #6
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffa5 	bl	8000f88 <send_packet>

    uint8_t rx_packet[6];
    if (receive_packet(rx_packet, 6) == 6 &&
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	2106      	movs	r1, #6
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffb5 	bl	8000fb4 <receive_packet>
 800104a:	4603      	mov	r3, r0
 800104c:	2b06      	cmp	r3, #6
 800104e:	d111      	bne.n	8001074 <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8001050:	7a3b      	ldrb	r3, [r7, #8]
    if (receive_packet(rx_packet, 6) == 6 &&
 8001052:	2bff      	cmp	r3, #255	@ 0xff
 8001054:	d10e      	bne.n	8001074 <servo_ping+0x74>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8001056:	7a7b      	ldrb	r3, [r7, #9]
 8001058:	2bff      	cmp	r3, #255	@ 0xff
 800105a:	d10b      	bne.n	8001074 <servo_ping+0x74>
 800105c:	7abb      	ldrb	r3, [r7, #10]
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	429a      	cmp	r2, r3
 8001062:	d107      	bne.n	8001074 <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 8001064:	7afb      	ldrb	r3, [r7, #11]
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8001066:	2b02      	cmp	r3, #2
 8001068:	d104      	bne.n	8001074 <servo_ping+0x74>
        rx_packet[3] == 0x02 && rx_packet[4] == 0x00) {
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <servo_ping+0x74>
        return 1;  // 成功
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <servo_ping+0x76>
    }
    return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <servo_write_reg>:

// 写寄存器（低字节在前）
void servo_write_reg(uint8_t id, uint8_t reg_addr, uint8_t *data, uint8_t data_len) {
 800107e:	b590      	push	{r4, r7, lr}
 8001080:	b0c7      	sub	sp, #284	@ 0x11c
 8001082:	af00      	add	r7, sp, #0
 8001084:	4604      	mov	r4, r0
 8001086:	4608      	mov	r0, r1
 8001088:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800108c:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8001090:	600a      	str	r2, [r1, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001098:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800109c:	4622      	mov	r2, r4
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010a4:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80010a8:	4602      	mov	r2, r0
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010b0:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80010b4:	460a      	mov	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
    uint8_t packet[256];
    uint8_t idx = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx++] = 0xFF;
 80010be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80010c8:	461a      	mov	r2, r3
 80010ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010d2:	21ff      	movs	r1, #255	@ 0xff
 80010d4:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0xFF;
 80010d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80010e0:	461a      	mov	r2, r3
 80010e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010ea:	21ff      	movs	r1, #255	@ 0xff
 80010ec:	5499      	strb	r1, [r3, r2]
    packet[idx++] = id;
 80010ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80010f8:	4619      	mov	r1, r3
 80010fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001102:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001106:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 800110a:	7812      	ldrb	r2, [r2, #0]
 800110c:	545a      	strb	r2, [r3, r1]
    packet[idx++] = data_len + 3;  // Length = Instr + Addr + Data
 800110e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001118:	461a      	mov	r2, r3
 800111a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800111e:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3303      	adds	r3, #3
 8001126:	b2d9      	uxtb	r1, r3
 8001128:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800112c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001130:	5499      	strb	r1, [r3, r2]
    packet[idx++] = SERVO_INST_WRITE;
 8001132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800113c:	461a      	mov	r2, r3
 800113e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001146:	2103      	movs	r1, #3
 8001148:	5499      	strb	r1, [r3, r2]
    packet[idx++] = reg_addr;
 800114a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001154:	4619      	mov	r1, r3
 8001156:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800115a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800115e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001162:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	545a      	strb	r2, [r3, r1]
    memcpy(&packet[idx], data, data_len);
 800116a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800116e:	f107 0214 	add.w	r2, r7, #20
 8001172:	18d0      	adds	r0, r2, r3
 8001174:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001178:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001182:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	f002 fb91 	bl	80038ae <memcpy>
    idx += data_len;
 800118c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001190:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8001194:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    packet[idx] = calculate_checksum(packet, idx + 1);
 80011a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	f897 4117 	ldrb.w	r4, [r7, #279]	@ 0x117
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fec6 	bl	8000f44 <calculate_checksum>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011c4:	551a      	strb	r2, [r3, r4]
    send_packet(packet, idx + 1);
 80011c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80011ca:	3301      	adds	r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fed7 	bl	8000f88 <send_packet>

    // 忽略响应（若非广播），实际可检查
    if (id != SERVO_BROADCAST_ID) {
 80011da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011de:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2bfe      	cmp	r3, #254	@ 0xfe
 80011e6:	d005      	beq.n	80011f4 <servo_write_reg+0x176>
        uint8_t rx_packet[6];
        receive_packet(rx_packet, 6);  // 预期响应Length=2, Error+Checksum
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2106      	movs	r1, #6
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fee0 	bl	8000fb4 <receive_packet>
    }
}
 80011f4:	bf00      	nop
 80011f6:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}

080011fe <servo_read_reg>:

// 读寄存器
uint8_t servo_read_reg(uint8_t id, uint8_t reg_addr, uint8_t data_len, uint8_t *rx_data) {
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b0c5      	sub	sp, #276	@ 0x114
 8001202:	af00      	add	r7, sp, #0
 8001204:	4604      	mov	r4, r0
 8001206:	4608      	mov	r0, r1
 8001208:	4611      	mov	r1, r2
 800120a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800120e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001218:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800121c:	4622      	mov	r2, r4
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001224:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001228:	4602      	mov	r2, r0
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001230:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8001234:	460a      	mov	r2, r1
 8001236:	701a      	strb	r2, [r3, #0]
    uint8_t packet[7] = {0xFF, 0xFF, id, 0x04, SERVO_INST_READ, reg_addr, data_len};
 8001238:	23ff      	movs	r3, #255	@ 0xff
 800123a:	f887 3108 	strb.w	r3, [r7, #264]	@ 0x108
 800123e:	23ff      	movs	r3, #255	@ 0xff
 8001240:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
 8001244:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001248:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8001252:	2304      	movs	r3, #4
 8001254:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8001258:	2302      	movs	r3, #2
 800125a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800125e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001262:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800126c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001270:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    packet[6] = calculate_checksum(packet, 7);
 800127a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800127e:	2107      	movs	r1, #7
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe5f 	bl	8000f44 <calculate_checksum>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    send_packet(packet, 7);
 800128c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001290:	2107      	movs	r1, #7
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe78 	bl	8000f88 <send_packet>

    uint8_t expected_len = data_len + 5;  // FF FF ID Len Error Params... Checksum
 8001298:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800129c:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3305      	adds	r3, #5
 80012a4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t rx_packet[256];
    if (receive_packet(rx_packet, expected_len) == expected_len &&
 80012a8:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe7e 	bl	8000fb4 <receive_packet>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d13f      	bne.n	8001344 <servo_read_reg+0x146>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80012c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012cc:	781b      	ldrb	r3, [r3, #0]
    if (receive_packet(rx_packet, expected_len) == expected_len &&
 80012ce:	2bff      	cmp	r3, #255	@ 0xff
 80012d0:	d138      	bne.n	8001344 <servo_read_reg+0x146>
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 80012d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	2bff      	cmp	r3, #255	@ 0xff
 80012de:	d131      	bne.n	8001344 <servo_read_reg+0x146>
 80012e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012e8:	789b      	ldrb	r3, [r3, #2]
 80012ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012ee:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d125      	bne.n	8001344 <servo_read_reg+0x146>
        rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 80012f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001300:	78db      	ldrb	r3, [r3, #3]
 8001302:	461a      	mov	r2, r3
 8001304:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001308:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3302      	adds	r3, #2
        rx_packet[0] == 0xFF && rx_packet[1] == 0xFF && rx_packet[2] == id &&
 8001310:	429a      	cmp	r2, r3
 8001312:	d117      	bne.n	8001344 <servo_read_reg+0x146>
        rx_packet[3] == data_len + 2 && rx_packet[4] == 0x00) {
 8001314:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800131c:	791b      	ldrb	r3, [r3, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d110      	bne.n	8001344 <servo_read_reg+0x146>
        memcpy(rx_data, &rx_packet[5], data_len);
 8001322:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001326:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	1d59      	adds	r1, r3, #5
 8001332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001336:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	f002 fab7 	bl	80038ae <memcpy>
        return 1;  // 成功
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <servo_read_reg+0x148>
    }
    return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}

08001350 <servo_set_torque_enable>:

// 扭矩开关
void servo_set_torque_enable(uint8_t id, uint8_t enable) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	460a      	mov	r2, r1
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	71bb      	strb	r3, [r7, #6]
    uint8_t data = enable;
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	73fb      	strb	r3, [r7, #15]
    servo_write_reg(id, SERVO_REG_TORQUE_ENABLE, &data, 1);
 8001364:	f107 020f 	add.w	r2, r7, #15
 8001368:	79f8      	ldrb	r0, [r7, #7]
 800136a:	2301      	movs	r3, #1
 800136c:	2128      	movs	r1, #40	@ 0x28
 800136e:	f7ff fe86 	bl	800107e <servo_write_reg>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <servo_set_speed>:

// 设置速度 (2字节，低在前)
void servo_set_speed(uint8_t id, int16_t speed) {
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	460a      	mov	r2, r1
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	4613      	mov	r3, r2
 8001388:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = speed & 0xFF;  // 低
 800138a:	88bb      	ldrh	r3, [r7, #4]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	733b      	strb	r3, [r7, #12]
    data[1] = (speed >> 8) & 0xFF;  // 高
 8001390:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001394:	121b      	asrs	r3, r3, #8
 8001396:	b21b      	sxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_SPEED, data, 2);
 800139c:	f107 020c 	add.w	r2, r7, #12
 80013a0:	79f8      	ldrb	r0, [r7, #7]
 80013a2:	2302      	movs	r3, #2
 80013a4:	212e      	movs	r1, #46	@ 0x2e
 80013a6:	f7ff fe6a 	bl	800107e <servo_write_reg>
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <servo_set_position>:

// 设置位置 (2字节，低在前)
void servo_set_position(uint8_t id, int16_t position) {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	460a      	mov	r2, r1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	4613      	mov	r3, r2
 80013c0:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = position & 0xFF;
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	733b      	strb	r3, [r7, #12]
    data[1] = (position >> 8) & 0xFF;
 80013c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013cc:	121b      	asrs	r3, r3, #8
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	737b      	strb	r3, [r7, #13]
    servo_write_reg(id, SERVO_REG_TARGET_POS, data, 2);
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	79f8      	ldrb	r0, [r7, #7]
 80013da:	2302      	movs	r3, #2
 80013dc:	212a      	movs	r1, #42	@ 0x2a
 80013de:	f7ff fe4e 	bl	800107e <servo_write_reg>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <servo_get_position>:

// 获取当前位置
uint16_t servo_get_position(uint8_t id) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data[2];
    if (servo_read_reg(id, SERVO_REG_CURR_POS, 2, rx_data)) {
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	79f8      	ldrb	r0, [r7, #7]
 80013fa:	2202      	movs	r2, #2
 80013fc:	2138      	movs	r1, #56	@ 0x38
 80013fe:	f7ff fefe 	bl	80011fe <servo_read_reg>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <servo_get_position+0x32>
        return (rx_data[1] << 8) | rx_data[0];  // 高<<8 | 低
 8001408:	7b7b      	ldrb	r3, [r7, #13]
 800140a:	b21b      	sxth	r3, r3
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b21a      	sxth	r2, r3
 8001410:	7b3b      	ldrb	r3, [r7, #12]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21b      	sxth	r3, r3
 8001418:	b29b      	uxth	r3, r3
 800141a:	e000      	b.n	800141e <servo_get_position+0x34>
    }
    return 0;  // 错误返回0
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <servo_is_moving>:

// 检查是否移动
uint8_t servo_is_moving(uint8_t id) {
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    if (servo_read_reg(id, SERVO_REG_MOVING, 1, &rx_data)) {
 8001430:	f107 030f 	add.w	r3, r7, #15
 8001434:	79f8      	ldrb	r0, [r7, #7]
 8001436:	2201      	movs	r2, #1
 8001438:	2142      	movs	r1, #66	@ 0x42
 800143a:	f7ff fee0 	bl	80011fe <servo_read_reg>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <servo_is_moving+0x22>
        return rx_data;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	e000      	b.n	800144a <servo_is_moving+0x24>
    }
    return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001468:	4b36      	ldr	r3, [pc, #216]	@ (8001544 <MX_GPIO_Init+0xf0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a35      	ldr	r2, [pc, #212]	@ (8001544 <MX_GPIO_Init+0xf0>)
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <MX_GPIO_Init+0xf0>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <MX_GPIO_Init+0xf0>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a2f      	ldr	r2, [pc, #188]	@ (8001544 <MX_GPIO_Init+0xf0>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <MX_GPIO_Init+0xf0>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <MX_GPIO_Init+0xf0>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a29      	ldr	r2, [pc, #164]	@ (8001544 <MX_GPIO_Init+0xf0>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <MX_GPIO_Init+0xf0>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2102      	movs	r1, #2
 80014b4:	4824      	ldr	r0, [pc, #144]	@ (8001548 <MX_GPIO_Init+0xf4>)
 80014b6:	f001 f877 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 80014c0:	4821      	ldr	r0, [pc, #132]	@ (8001548 <MX_GPIO_Init+0xf4>)
 80014c2:	f001 f871 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2120      	movs	r1, #32
 80014ca:	4820      	ldr	r0, [pc, #128]	@ (800154c <MX_GPIO_Init+0xf8>)
 80014cc:	f001 f86c 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_12;
 80014d0:	f241 0322 	movw	r3, #4130	@ 0x1022
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2302      	movs	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	4817      	ldr	r0, [pc, #92]	@ (8001548 <MX_GPIO_Init+0xf4>)
 80014ea:	f000 fed9 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 80014ee:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	4811      	ldr	r0, [pc, #68]	@ (8001548 <MX_GPIO_Init+0xf4>)
 8001504:	f000 fecc 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2302      	movs	r3, #2
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	@ (800154c <MX_GPIO_Init+0xf8>)
 800151c:	f000 fec0 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001520:	2320      	movs	r3, #32
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2302      	movs	r3, #2
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_GPIO_Init+0xf8>)
 8001538:	f000 feb2 	bl	80022a0 <HAL_GPIO_Init>

}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f000 fd3a 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 f826 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f7ff ff7a 	bl	8001454 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001560:	f000 fc98 	bl	8001e94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize LED first
  LED_Init();
 8001564:	f7ff fc70 	bl	8000e48 <LED_Init>
  LED_Flash(3);  // Flash 3 times to indicate system start
 8001568:	2003      	movs	r0, #3
 800156a:	f7ff fcc1 	bl	8000ef0 <LED_Flash>
  
  printf("\n\n========================================\n");
 800156e:	480a      	ldr	r0, [pc, #40]	@ (8001598 <main+0x48>)
 8001570:	f002 f842 	bl	80035f8 <puts>
  printf("SERVO MAX SPEED TEST PROGRAM\n");
 8001574:	4809      	ldr	r0, [pc, #36]	@ (800159c <main+0x4c>)
 8001576:	f002 f83f 	bl	80035f8 <puts>
  printf("LED Pin: PA1\n");
 800157a:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <main+0x50>)
 800157c:	f002 f83c 	bl	80035f8 <puts>
  printf("========================================\n");
 8001580:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <main+0x54>)
 8001582:	f002 f839 	bl	80035f8 <puts>
  
  // Initialize servo for max speed test
  Servo_MaxSpeed_Test_Init();
 8001586:	f000 f855 	bl	8001634 <Servo_MaxSpeed_Test_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Servo_MaxSpeed_Test_Loop();
 800158a:	f000 f935 	bl	80017f8 <Servo_MaxSpeed_Test_Loop>
    HAL_Delay(10);
 800158e:	200a      	movs	r0, #10
 8001590:	f000 fd7e 	bl	8002090 <HAL_Delay>
    Servo_MaxSpeed_Test_Loop();
 8001594:	bf00      	nop
 8001596:	e7f8      	b.n	800158a <main+0x3a>
 8001598:	08004304 	.word	0x08004304
 800159c:	08004330 	.word	0x08004330
 80015a0:	08004350 	.word	0x08004350
 80015a4:	08004360 	.word	0x08004360

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b090      	sub	sp, #64	@ 0x40
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	2228      	movs	r2, #40	@ 0x28
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f8fe 	bl	80037b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d8:	2301      	movs	r3, #1
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f001 f80b 	bl	800260c <HAL_RCC_OscConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015fc:	f000 fb40 	bl	8001c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001600:	230f      	movs	r3, #15
 8001602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	2302      	movs	r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fa78 	bl	8002b10 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001626:	f000 fb2b 	bl	8001c80 <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3740      	adds	r7, #64	@ 0x40
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <Servo_MaxSpeed_Test_Init>:
/**
  * @brief  Initialize servo for max speed testing
  * @retval None
  */
static void Servo_MaxSpeed_Test_Init(void) 
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
    printf("\nInitializing servo for max speed test...\n");
 800163a:	485a      	ldr	r0, [pc, #360]	@ (80017a4 <Servo_MaxSpeed_Test_Init+0x170>)
 800163c:	f001 ffdc 	bl	80035f8 <puts>
    
    // Initialize servo communication
    servo_init(&huart3);
 8001640:	4859      	ldr	r0, [pc, #356]	@ (80017a8 <Servo_MaxSpeed_Test_Init+0x174>)
 8001642:	f7ff fccd 	bl	8000fe0 <servo_init>
    HAL_Delay(100);
 8001646:	2064      	movs	r0, #100	@ 0x64
 8001648:	f000 fd22 	bl	8002090 <HAL_Delay>
    
    // Ping servo to check connection
    printf("Pinging servo ID %d...\n", servo_id);
 800164c:	4b57      	ldr	r3, [pc, #348]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	4857      	ldr	r0, [pc, #348]	@ (80017b0 <Servo_MaxSpeed_Test_Init+0x17c>)
 8001654:	f001 ff68 	bl	8003528 <iprintf>
    uint8_t ping_result = servo_ping(servo_id);
 8001658:	4b54      	ldr	r3, [pc, #336]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fccf 	bl	8001000 <servo_ping>
 8001662:	4603      	mov	r3, r0
 8001664:	72fb      	strb	r3, [r7, #11]
    if (ping_result == 1) {
 8001666:	7afb      	ldrb	r3, [r7, #11]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d109      	bne.n	8001680 <Servo_MaxSpeed_Test_Init+0x4c>
        printf("Servo ID %d responded successfully!\n", servo_id);
 800166c:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4850      	ldr	r0, [pc, #320]	@ (80017b4 <Servo_MaxSpeed_Test_Init+0x180>)
 8001674:	f001 ff58 	bl	8003528 <iprintf>
        LED_Flash(1);  // Flash once for successful connection
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff fc39 	bl	8000ef0 <LED_Flash>
 800167e:	e015      	b.n	80016ac <Servo_MaxSpeed_Test_Init+0x78>
    } else {
        printf("WARNING: No response from servo ID %d, continuing anyway...\n", servo_id);
 8001680:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	484c      	ldr	r0, [pc, #304]	@ (80017b8 <Servo_MaxSpeed_Test_Init+0x184>)
 8001688:	f001 ff4e 	bl	8003528 <iprintf>
        // Fast flash 5 times for connection warning
        for(int i = 0; i < 5; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e007      	b.n	80016a2 <Servo_MaxSpeed_Test_Init+0x6e>
            LED_Toggle();
 8001692:	f7ff fc23 	bl	8000edc <LED_Toggle>
            HAL_Delay(100);
 8001696:	2064      	movs	r0, #100	@ 0x64
 8001698:	f000 fcfa 	bl	8002090 <HAL_Delay>
        for(int i = 0; i < 5; i++) {
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	ddf4      	ble.n	8001692 <Servo_MaxSpeed_Test_Init+0x5e>
        }
        LED_Off();
 80016a8:	f7ff fc0c 	bl	8000ec4 <LED_Off>
    }
    
    // Set angle limits to 0 for unlimited multi-turn control
    printf("Setting angle limits to 0 for multi-turn mode...\n");
 80016ac:	4843      	ldr	r0, [pc, #268]	@ (80017bc <Servo_MaxSpeed_Test_Init+0x188>)
 80016ae:	f001 ffa3 	bl	80035f8 <puts>
    uint8_t min_limit[2] = {0x00, 0x00};
 80016b2:	2300      	movs	r3, #0
 80016b4:	813b      	strh	r3, [r7, #8]
    uint8_t max_limit[2] = {0x00, 0x00};
 80016b6:	2300      	movs	r3, #0
 80016b8:	80bb      	strh	r3, [r7, #4]
    servo_write_reg(servo_id, 0x09, min_limit, 2);
 80016ba:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 80016bc:	7818      	ldrb	r0, [r3, #0]
 80016be:	f107 0208 	add.w	r2, r7, #8
 80016c2:	2302      	movs	r3, #2
 80016c4:	2109      	movs	r1, #9
 80016c6:	f7ff fcda 	bl	800107e <servo_write_reg>
    HAL_Delay(50);
 80016ca:	2032      	movs	r0, #50	@ 0x32
 80016cc:	f000 fce0 	bl	8002090 <HAL_Delay>
    servo_write_reg(servo_id, 0x0B, max_limit, 2);
 80016d0:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 80016d2:	7818      	ldrb	r0, [r3, #0]
 80016d4:	1d3a      	adds	r2, r7, #4
 80016d6:	2302      	movs	r3, #2
 80016d8:	210b      	movs	r1, #11
 80016da:	f7ff fcd0 	bl	800107e <servo_write_reg>
    HAL_Delay(50);
 80016de:	2032      	movs	r0, #50	@ 0x32
 80016e0:	f000 fcd6 	bl	8002090 <HAL_Delay>
    
    // Set operation mode to position servo mode (0x21 = 0)
    printf("Setting operation mode to position servo (mode 0)...\n");
 80016e4:	4836      	ldr	r0, [pc, #216]	@ (80017c0 <Servo_MaxSpeed_Test_Init+0x18c>)
 80016e6:	f001 ff87 	bl	80035f8 <puts>
    uint8_t mode = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	70fb      	strb	r3, [r7, #3]
    servo_write_reg(servo_id, 0x21, &mode, 1);
 80016ee:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 80016f0:	7818      	ldrb	r0, [r3, #0]
 80016f2:	1cfa      	adds	r2, r7, #3
 80016f4:	2301      	movs	r3, #1
 80016f6:	2121      	movs	r1, #33	@ 0x21
 80016f8:	f7ff fcc1 	bl	800107e <servo_write_reg>
    HAL_Delay(50);
 80016fc:	2032      	movs	r0, #50	@ 0x32
 80016fe:	f000 fcc7 	bl	8002090 <HAL_Delay>
    
    // Enable torque (address 0x28)
    printf("Enabling servo torque...\n");
 8001702:	4830      	ldr	r0, [pc, #192]	@ (80017c4 <Servo_MaxSpeed_Test_Init+0x190>)
 8001704:	f001 ff78 	bl	80035f8 <puts>
    servo_set_torque_enable(servo_id, 1);
 8001708:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe1e 	bl	8001350 <servo_set_torque_enable>
    HAL_Delay(100);
 8001714:	2064      	movs	r0, #100	@ 0x64
 8001716:	f000 fcbb 	bl	8002090 <HAL_Delay>
    
    // Set maximum speed (32766 steps/s)
    printf("Setting servo to MAXIMUM speed (32766 steps/s = 479 RPM)...\n");
 800171a:	482b      	ldr	r0, [pc, #172]	@ (80017c8 <Servo_MaxSpeed_Test_Init+0x194>)
 800171c:	f001 ff6c 	bl	80035f8 <puts>
    servo_set_speed(servo_id, 32766);
 8001720:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f647 71fe 	movw	r1, #32766	@ 0x7ffe
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fe26 	bl	800137a <servo_set_speed>
    HAL_Delay(100);
 800172e:	2064      	movs	r0, #100	@ 0x64
 8001730:	f000 fcae 	bl	8002090 <HAL_Delay>
    
    // Set acceleration (address 0x29)
    printf("Setting acceleration to 1000 steps/s^2...\n");
 8001734:	4825      	ldr	r0, [pc, #148]	@ (80017cc <Servo_MaxSpeed_Test_Init+0x198>)
 8001736:	f001 ff5f 	bl	80035f8 <puts>
    uint8_t accel = 10;
 800173a:	230a      	movs	r3, #10
 800173c:	70bb      	strb	r3, [r7, #2]
    servo_write_reg(servo_id, 0x29, &accel, 1);
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 8001740:	7818      	ldrb	r0, [r3, #0]
 8001742:	1cba      	adds	r2, r7, #2
 8001744:	2301      	movs	r3, #1
 8001746:	2129      	movs	r1, #41	@ 0x29
 8001748:	f7ff fc99 	bl	800107e <servo_write_reg>
    HAL_Delay(50);
 800174c:	2032      	movs	r0, #50	@ 0x32
 800174e:	f000 fc9f 	bl	8002090 <HAL_Delay>
    
    // Move to center position (0) first
    printf("Moving to center position (0)...\n");
 8001752:	481f      	ldr	r0, [pc, #124]	@ (80017d0 <Servo_MaxSpeed_Test_Init+0x19c>)
 8001754:	f001 ff50 	bl	80035f8 <puts>
    servo_set_position(servo_id, 0);
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <Servo_MaxSpeed_Test_Init+0x178>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe27 	bl	80013b2 <servo_set_position>
    HAL_Delay(3000);
 8001764:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001768:	f000 fc92 	bl	8002090 <HAL_Delay>
    
    printf("\n========================================\n");
 800176c:	4819      	ldr	r0, [pc, #100]	@ (80017d4 <Servo_MaxSpeed_Test_Init+0x1a0>)
 800176e:	f001 ff43 	bl	80035f8 <puts>
    printf("SERVO SPECIFICATIONS:\n");
 8001772:	4819      	ldr	r0, [pc, #100]	@ (80017d8 <Servo_MaxSpeed_Test_Init+0x1a4>)
 8001774:	f001 ff40 	bl	80035f8 <puts>
    printf("- Resolution: 4096 steps per 360 degrees\n");
 8001778:	4818      	ldr	r0, [pc, #96]	@ (80017dc <Servo_MaxSpeed_Test_Init+0x1a8>)
 800177a:	f001 ff3d 	bl	80035f8 <puts>
    printf("- Min resolution: 0.0879 degrees/step\n");
 800177e:	4818      	ldr	r0, [pc, #96]	@ (80017e0 <Servo_MaxSpeed_Test_Init+0x1ac>)
 8001780:	f001 ff3a 	bl	80035f8 <puts>
    printf("- Max angle: 360 degrees (multi-turn supported)\n");
 8001784:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <Servo_MaxSpeed_Test_Init+0x1b0>)
 8001786:	f001 ff37 	bl	80035f8 <puts>
    printf("- Max speed set: 32766 steps/s (479 RPM)\n");
 800178a:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <Servo_MaxSpeed_Test_Init+0x1b4>)
 800178c:	f001 ff34 	bl	80035f8 <puts>
    printf("- Test rotation: 10 full turns = 40960 steps\n");
 8001790:	4816      	ldr	r0, [pc, #88]	@ (80017ec <Servo_MaxSpeed_Test_Init+0x1b8>)
 8001792:	f001 ff31 	bl	80035f8 <puts>
    printf("========================================\n\n");
 8001796:	4816      	ldr	r0, [pc, #88]	@ (80017f0 <Servo_MaxSpeed_Test_Init+0x1bc>)
 8001798:	f001 ff2e 	bl	80035f8 <puts>
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	0800438c 	.word	0x0800438c
 80017a8:	200000a4 	.word	0x200000a4
 80017ac:	20000000 	.word	0x20000000
 80017b0:	080043b8 	.word	0x080043b8
 80017b4:	080043d0 	.word	0x080043d0
 80017b8:	080043f8 	.word	0x080043f8
 80017bc:	08004438 	.word	0x08004438
 80017c0:	0800446c 	.word	0x0800446c
 80017c4:	080044a4 	.word	0x080044a4
 80017c8:	080044c0 	.word	0x080044c0
 80017cc:	080044fc 	.word	0x080044fc
 80017d0:	08004528 	.word	0x08004528
 80017d4:	0800454c 	.word	0x0800454c
 80017d8:	08004578 	.word	0x08004578
 80017dc:	08004590 	.word	0x08004590
 80017e0:	080045bc 	.word	0x080045bc
 80017e4:	080045e4 	.word	0x080045e4
 80017e8:	08004614 	.word	0x08004614
 80017ec:	08004640 	.word	0x08004640
 80017f0:	08004670 	.word	0x08004670
 80017f4:	00000000 	.word	0x00000000

080017f8 <Servo_MaxSpeed_Test_Loop>:
/**
  * @brief  Main test loop for max speed rotation
  * @retval None
  */
static void Servo_MaxSpeed_Test_Loop(void) 
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b08b      	sub	sp, #44	@ 0x2c
 80017fc:	af04      	add	r7, sp, #16
    static uint32_t rotation_start_time = 0;
    static int16_t start_position = 0;
    static uint32_t status_check_time = 0;
    
    // During rotation, check status every 500ms
    if ((test_state == 1 || test_state == 3 || test_state == 5) && 
 80017fe:	4bac      	ldr	r3, [pc, #688]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d008      	beq.n	8001818 <Servo_MaxSpeed_Test_Loop+0x20>
 8001806:	4baa      	ldr	r3, [pc, #680]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d004      	beq.n	8001818 <Servo_MaxSpeed_Test_Loop+0x20>
 800180e:	4ba8      	ldr	r3, [pc, #672]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b05      	cmp	r3, #5
 8001814:	f040 80dd 	bne.w	80019d2 <Servo_MaxSpeed_Test_Loop+0x1da>
        (HAL_GetTick() - status_check_time >= 500)) {
 8001818:	f000 fc30 	bl	800207c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	4ba5      	ldr	r3, [pc, #660]	@ (8001ab4 <Servo_MaxSpeed_Test_Loop+0x2bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1ad3      	subs	r3, r2, r3
    if ((test_state == 1 || test_state == 3 || test_state == 5) && 
 8001824:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001828:	f0c0 80d3 	bcc.w	80019d2 <Servo_MaxSpeed_Test_Loop+0x1da>
        
        // Blink LED during return to center (state 5)
        if (test_state == 5) {
 800182c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d101      	bne.n	8001838 <Servo_MaxSpeed_Test_Loop+0x40>
            LED_Toggle();
 8001834:	f7ff fb52 	bl	8000edc <LED_Toggle>
        }
        
        uint16_t current_pos = servo_get_position(servo_id);
 8001838:	4b9f      	ldr	r3, [pc, #636]	@ (8001ab8 <Servo_MaxSpeed_Test_Loop+0x2c0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fdd4 	bl	80013ea <servo_get_position>
 8001842:	4603      	mov	r3, r0
 8001844:	82fb      	strh	r3, [r7, #22]
        uint8_t is_moving = servo_is_moving(servo_id);
 8001846:	4b9c      	ldr	r3, [pc, #624]	@ (8001ab8 <Servo_MaxSpeed_Test_Loop+0x2c0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fdeb 	bl	8001426 <servo_is_moving>
 8001850:	4603      	mov	r3, r0
 8001852:	757b      	strb	r3, [r7, #21]
        uint32_t elapsed = HAL_GetTick() - rotation_start_time;
 8001854:	f000 fc12 	bl	800207c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	4b98      	ldr	r3, [pc, #608]	@ (8001abc <Servo_MaxSpeed_Test_Loop+0x2c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	613b      	str	r3, [r7, #16]
        
        printf("  [%lu.%lu s] Pos: %d steps (%.1f deg), Moving: %s\n", 
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4a96      	ldr	r2, [pc, #600]	@ (8001ac0 <Servo_MaxSpeed_Test_Loop+0x2c8>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	099c      	lsrs	r4, r3, #6
               elapsed/1000, (elapsed%1000)/100,
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4b94      	ldr	r3, [pc, #592]	@ (8001ac0 <Servo_MaxSpeed_Test_Loop+0x2c8>)
 8001870:	fba3 1302 	umull	r1, r3, r3, r2
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	1ad3      	subs	r3, r2, r3
        printf("  [%lu.%lu s] Pos: %d steps (%.1f deg), Moving: %s\n", 
 8001880:	4a90      	ldr	r2, [pc, #576]	@ (8001ac4 <Servo_MaxSpeed_Test_Loop+0x2cc>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	095d      	lsrs	r5, r3, #5
               (int16_t)current_pos, 
 8001888:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
        printf("  [%lu.%lu s] Pos: %d steps (%.1f deg), Moving: %s\n", 
 800188c:	461e      	mov	r6, r3
               (int16_t)current_pos * 0.0879,
 800188e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
        printf("  [%lu.%lu s] Pos: %d steps (%.1f deg), Moving: %s\n", 
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fdae 	bl	80003f4 <__aeabi_i2d>
 8001898:	a383      	add	r3, pc, #524	@ (adr r3, 8001aa8 <Servo_MaxSpeed_Test_Loop+0x2b0>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe13 	bl	80004c8 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	7d79      	ldrb	r1, [r7, #21]
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d001      	beq.n	80018b0 <Servo_MaxSpeed_Test_Loop+0xb8>
 80018ac:	4986      	ldr	r1, [pc, #536]	@ (8001ac8 <Servo_MaxSpeed_Test_Loop+0x2d0>)
 80018ae:	e000      	b.n	80018b2 <Servo_MaxSpeed_Test_Loop+0xba>
 80018b0:	4986      	ldr	r1, [pc, #536]	@ (8001acc <Servo_MaxSpeed_Test_Loop+0x2d4>)
 80018b2:	9102      	str	r1, [sp, #8]
 80018b4:	e9cd 2300 	strd	r2, r3, [sp]
 80018b8:	4633      	mov	r3, r6
 80018ba:	462a      	mov	r2, r5
 80018bc:	4621      	mov	r1, r4
 80018be:	4884      	ldr	r0, [pc, #528]	@ (8001ad0 <Servo_MaxSpeed_Test_Loop+0x2d8>)
 80018c0:	f001 fe32 	bl	8003528 <iprintf>
               is_moving ? "YES" : "NO");
        
        status_check_time = HAL_GetTick();
 80018c4:	f000 fbda 	bl	800207c <HAL_GetTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a7a      	ldr	r2, [pc, #488]	@ (8001ab4 <Servo_MaxSpeed_Test_Loop+0x2bc>)
 80018cc:	6013      	str	r3, [r2, #0]
        
        // If stopped moving after 1 second, proceed to next test
        if (!is_moving && elapsed > 1000) {
 80018ce:	7d7b      	ldrb	r3, [r7, #21]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 81a8 	bne.w	8001c26 <Servo_MaxSpeed_Test_Loop+0x42e>
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018dc:	f240 81a3 	bls.w	8001c26 <Servo_MaxSpeed_Test_Loop+0x42e>
            int16_t total_steps = (int16_t)current_pos - start_position;
 80018e0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad4 <Servo_MaxSpeed_Test_Loop+0x2dc>)
 80018e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	8afa      	ldrh	r2, [r7, #22]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	81fb      	strh	r3, [r7, #14]
            float total_degrees = total_steps * 0.0879;
 80018f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fd7d 	bl	80003f4 <__aeabi_i2d>
 80018fa:	a36b      	add	r3, pc, #428	@ (adr r3, 8001aa8 <Servo_MaxSpeed_Test_Loop+0x2b0>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fde2 	bl	80004c8 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7fe ffee 	bl	80008ec <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	60bb      	str	r3, [r7, #8]
            float total_rotations = total_degrees / 360.0;
 8001914:	4970      	ldr	r1, [pc, #448]	@ (8001ad8 <Servo_MaxSpeed_Test_Loop+0x2e0>)
 8001916:	68b8      	ldr	r0, [r7, #8]
 8001918:	f7ff f9fa 	bl	8000d10 <__aeabi_fdiv>
 800191c:	4603      	mov	r3, r0
 800191e:	607b      	str	r3, [r7, #4]
            
            printf("  >>> Rotation completed!\n");
 8001920:	486e      	ldr	r0, [pc, #440]	@ (8001adc <Servo_MaxSpeed_Test_Loop+0x2e4>)
 8001922:	f001 fe69 	bl	80035f8 <puts>
            printf("  >>> Total: %d steps = %.1f degrees = %.2f rotations\n", 
 8001926:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800192a:	68b8      	ldr	r0, [r7, #8]
 800192c:	f7fe fd74 	bl	8000418 <__aeabi_f2d>
 8001930:	4604      	mov	r4, r0
 8001932:	460d      	mov	r5, r1
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7fe fd6f 	bl	8000418 <__aeabi_f2d>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	e9cd 2300 	strd	r2, r3, [sp]
 8001942:	4622      	mov	r2, r4
 8001944:	462b      	mov	r3, r5
 8001946:	4631      	mov	r1, r6
 8001948:	4865      	ldr	r0, [pc, #404]	@ (8001ae0 <Servo_MaxSpeed_Test_Loop+0x2e8>)
 800194a:	f001 fded 	bl	8003528 <iprintf>
                   total_steps, total_degrees, total_rotations);
            printf("  >>> Duration: %.2f seconds\n", elapsed/1000.0);
 800194e:	6938      	ldr	r0, [r7, #16]
 8001950:	f7fe fd40 	bl	80003d4 <__aeabi_ui2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b62      	ldr	r3, [pc, #392]	@ (8001ae4 <Servo_MaxSpeed_Test_Loop+0x2ec>)
 800195a:	f7fe fedf 	bl	800071c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4861      	ldr	r0, [pc, #388]	@ (8001ae8 <Servo_MaxSpeed_Test_Loop+0x2f0>)
 8001964:	f001 fde0 	bl	8003528 <iprintf>
            printf("  >>> Average speed: %.1f steps/s\n\n", 
                   (float)abs(total_steps) / (elapsed/1000.0));
 8001968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800196c:	2b00      	cmp	r3, #0
 800196e:	bfb8      	it	lt
 8001970:	425b      	neglt	r3, r3
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f8c3 	bl	8000b00 <__aeabi_i2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fd4b 	bl	8000418 <__aeabi_f2d>
 8001982:	4604      	mov	r4, r0
 8001984:	460d      	mov	r5, r1
 8001986:	6938      	ldr	r0, [r7, #16]
 8001988:	f7fe fd24 	bl	80003d4 <__aeabi_ui2d>
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b54      	ldr	r3, [pc, #336]	@ (8001ae4 <Servo_MaxSpeed_Test_Loop+0x2ec>)
 8001992:	f7fe fec3 	bl	800071c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
            printf("  >>> Average speed: %.1f steps/s\n\n", 
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f7fe febd 	bl	800071c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4851      	ldr	r0, [pc, #324]	@ (8001aec <Servo_MaxSpeed_Test_Loop+0x2f4>)
 80019a8:	f001 fdbe 	bl	8003528 <iprintf>
            
            LED_Flash(2);  // Flash twice to indicate test completion
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7ff fa9f 	bl	8000ef0 <LED_Flash>
            HAL_Delay(2000);
 80019b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019b6:	f000 fb6b 	bl	8002090 <HAL_Delay>
            test_state++;
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 80019c4:	701a      	strb	r2, [r3, #0]
            last_test_time = HAL_GetTick();
 80019c6:	f000 fb59 	bl	800207c <HAL_GetTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a48      	ldr	r2, [pc, #288]	@ (8001af0 <Servo_MaxSpeed_Test_Loop+0x2f8>)
 80019ce:	6013      	str	r3, [r2, #0]
        }
        return;
 80019d0:	e129      	b.n	8001c26 <Servo_MaxSpeed_Test_Loop+0x42e>
    }
    
    // Wait between major tests
    if (test_state != 0 && HAL_GetTick() - last_test_time < 2000) {
 80019d2:	4b37      	ldr	r3, [pc, #220]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <Servo_MaxSpeed_Test_Loop+0x1f6>
 80019da:	f000 fb4f 	bl	800207c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <Servo_MaxSpeed_Test_Loop+0x2f8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80019ea:	f0c0 811e 	bcc.w	8001c2a <Servo_MaxSpeed_Test_Loop+0x432>
        return;
    }
    
    switch (test_state) {
 80019ee:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	f200 8113 	bhi.w	8001c1e <Servo_MaxSpeed_Test_Loop+0x426>
 80019f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001a00 <Servo_MaxSpeed_Test_Loop+0x208>)
 80019fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fe:	bf00      	nop
 8001a00:	08001a1d 	.word	0x08001a1d
 8001a04:	08001c2f 	.word	0x08001c2f
 8001a08:	08001b15 	.word	0x08001b15
 8001a0c:	08001c2f 	.word	0x08001c2f
 8001a10:	08001b9d 	.word	0x08001b9d
 8001a14:	08001c2f 	.word	0x08001c2f
 8001a18:	08001bf3 	.word	0x08001bf3
        case 0:
            // Test 1: Maximum speed forward rotation
            printf("\n========================================\n");
 8001a1c:	4835      	ldr	r0, [pc, #212]	@ (8001af4 <Servo_MaxSpeed_Test_Loop+0x2fc>)
 8001a1e:	f001 fdeb 	bl	80035f8 <puts>
            printf("[TEST 1] MAX SPEED FORWARD ROTATION\n");
 8001a22:	4835      	ldr	r0, [pc, #212]	@ (8001af8 <Servo_MaxSpeed_Test_Loop+0x300>)
 8001a24:	f001 fde8 	bl	80035f8 <puts>
            printf("Target: +10 full rotations (40960 steps)\n");
 8001a28:	4834      	ldr	r0, [pc, #208]	@ (8001afc <Servo_MaxSpeed_Test_Loop+0x304>)
 8001a2a:	f001 fde5 	bl	80035f8 <puts>
            printf("Expected time: ~1.25 seconds\n");
 8001a2e:	4834      	ldr	r0, [pc, #208]	@ (8001b00 <Servo_MaxSpeed_Test_Loop+0x308>)
 8001a30:	f001 fde2 	bl	80035f8 <puts>
            printf("========================================\n");
 8001a34:	4833      	ldr	r0, [pc, #204]	@ (8001b04 <Servo_MaxSpeed_Test_Loop+0x30c>)
 8001a36:	f001 fddf 	bl	80035f8 <puts>
            
            start_position = servo_get_position(servo_id);
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <Servo_MaxSpeed_Test_Loop+0x2c0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fcd3 	bl	80013ea <servo_get_position>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <Servo_MaxSpeed_Test_Loop+0x2dc>)
 8001a4a:	801a      	strh	r2, [r3, #0]
            printf("Starting position: %d steps\n", start_position);
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <Servo_MaxSpeed_Test_Loop+0x2dc>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	4619      	mov	r1, r3
 8001a54:	482c      	ldr	r0, [pc, #176]	@ (8001b08 <Servo_MaxSpeed_Test_Loop+0x310>)
 8001a56:	f001 fd67 	bl	8003528 <iprintf>
            printf("Target position: %d steps\n", start_position + 40960);
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <Servo_MaxSpeed_Test_Loop+0x2dc>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	f503 4320 	add.w	r3, r3, #40960	@ 0xa000
 8001a64:	4619      	mov	r1, r3
 8001a66:	4829      	ldr	r0, [pc, #164]	@ (8001b0c <Servo_MaxSpeed_Test_Loop+0x314>)
 8001a68:	f001 fd5e 	bl	8003528 <iprintf>
            printf("Executing...\n");
 8001a6c:	4828      	ldr	r0, [pc, #160]	@ (8001b10 <Servo_MaxSpeed_Test_Loop+0x318>)
 8001a6e:	f001 fdc3 	bl	80035f8 <puts>
            LED_On();  // LED on during forward rotation
 8001a72:	f7ff fa1b 	bl	8000eac <LED_On>
            
            servo_set_position(servo_id, start_position + 40960);
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <Servo_MaxSpeed_Test_Loop+0x2c0>)
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <Servo_MaxSpeed_Test_Loop+0x2dc>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f5a3 43c0 	sub.w	r3, r3, #24576	@ 0x6000
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	f7ff fc90 	bl	80013b2 <servo_set_position>
            rotation_start_time = HAL_GetTick();
 8001a92:	f000 faf3 	bl	800207c <HAL_GetTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <Servo_MaxSpeed_Test_Loop+0x2c4>)
 8001a9a:	6013      	str	r3, [r2, #0]
            test_state = 1;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <Servo_MaxSpeed_Test_Loop+0x2b8>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
            break;
 8001aa2:	e0c5      	b.n	8001c30 <Servo_MaxSpeed_Test_Loop+0x438>
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	495182aa 	.word	0x495182aa
 8001aac:	3fb6809d 	.word	0x3fb6809d
 8001ab0:	2000008c 	.word	0x2000008c
 8001ab4:	20000090 	.word	0x20000090
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000094 	.word	0x20000094
 8001ac0:	10624dd3 	.word	0x10624dd3
 8001ac4:	51eb851f 	.word	0x51eb851f
 8001ac8:	0800469c 	.word	0x0800469c
 8001acc:	080046a0 	.word	0x080046a0
 8001ad0:	080046a4 	.word	0x080046a4
 8001ad4:	20000098 	.word	0x20000098
 8001ad8:	43b40000 	.word	0x43b40000
 8001adc:	080046d8 	.word	0x080046d8
 8001ae0:	080046f4 	.word	0x080046f4
 8001ae4:	408f4000 	.word	0x408f4000
 8001ae8:	0800472c 	.word	0x0800472c
 8001aec:	0800474c 	.word	0x0800474c
 8001af0:	2000009c 	.word	0x2000009c
 8001af4:	0800454c 	.word	0x0800454c
 8001af8:	08004770 	.word	0x08004770
 8001afc:	08004794 	.word	0x08004794
 8001b00:	080047c0 	.word	0x080047c0
 8001b04:	08004360 	.word	0x08004360
 8001b08:	080047e0 	.word	0x080047e0
 8001b0c:	08004800 	.word	0x08004800
 8001b10:	0800481c 	.word	0x0800481c
            // Monitoring forward rotation (handled above)
            break;
            
        case 2:
            // Test 2: Maximum speed reverse rotation
            printf("\n========================================\n");
 8001b14:	4848      	ldr	r0, [pc, #288]	@ (8001c38 <Servo_MaxSpeed_Test_Loop+0x440>)
 8001b16:	f001 fd6f 	bl	80035f8 <puts>
            printf("[TEST 2] MAX SPEED REVERSE ROTATION\n");
 8001b1a:	4848      	ldr	r0, [pc, #288]	@ (8001c3c <Servo_MaxSpeed_Test_Loop+0x444>)
 8001b1c:	f001 fd6c 	bl	80035f8 <puts>
            printf("Target: -10 full rotations (-40960 steps)\n");
 8001b20:	4847      	ldr	r0, [pc, #284]	@ (8001c40 <Servo_MaxSpeed_Test_Loop+0x448>)
 8001b22:	f001 fd69 	bl	80035f8 <puts>
            printf("Expected time: ~1.25 seconds\n");
 8001b26:	4847      	ldr	r0, [pc, #284]	@ (8001c44 <Servo_MaxSpeed_Test_Loop+0x44c>)
 8001b28:	f001 fd66 	bl	80035f8 <puts>
            printf("========================================\n");
 8001b2c:	4846      	ldr	r0, [pc, #280]	@ (8001c48 <Servo_MaxSpeed_Test_Loop+0x450>)
 8001b2e:	f001 fd63 	bl	80035f8 <puts>
            
            start_position = servo_get_position(servo_id);
 8001b32:	4b46      	ldr	r3, [pc, #280]	@ (8001c4c <Servo_MaxSpeed_Test_Loop+0x454>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fc57 	bl	80013ea <servo_get_position>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b43      	ldr	r3, [pc, #268]	@ (8001c50 <Servo_MaxSpeed_Test_Loop+0x458>)
 8001b42:	801a      	strh	r2, [r3, #0]
            printf("Starting position: %d steps\n", start_position);
 8001b44:	4b42      	ldr	r3, [pc, #264]	@ (8001c50 <Servo_MaxSpeed_Test_Loop+0x458>)
 8001b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4841      	ldr	r0, [pc, #260]	@ (8001c54 <Servo_MaxSpeed_Test_Loop+0x45c>)
 8001b4e:	f001 fceb 	bl	8003528 <iprintf>
            printf("Target position: %d steps\n", start_position - 40960);
 8001b52:	4b3f      	ldr	r3, [pc, #252]	@ (8001c50 <Servo_MaxSpeed_Test_Loop+0x458>)
 8001b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b58:	f5a3 4320 	sub.w	r3, r3, #40960	@ 0xa000
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	483e      	ldr	r0, [pc, #248]	@ (8001c58 <Servo_MaxSpeed_Test_Loop+0x460>)
 8001b60:	f001 fce2 	bl	8003528 <iprintf>
            printf("Executing...\n");
 8001b64:	483d      	ldr	r0, [pc, #244]	@ (8001c5c <Servo_MaxSpeed_Test_Loop+0x464>)
 8001b66:	f001 fd47 	bl	80035f8 <puts>
            LED_Off();  // LED off during reverse rotation
 8001b6a:	f7ff f9ab 	bl	8000ec4 <LED_Off>
            
            servo_set_position(servo_id, start_position - 40960);
 8001b6e:	4b37      	ldr	r3, [pc, #220]	@ (8001c4c <Servo_MaxSpeed_Test_Loop+0x454>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	4b37      	ldr	r3, [pc, #220]	@ (8001c50 <Servo_MaxSpeed_Test_Loop+0x458>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7ff fc14 	bl	80013b2 <servo_set_position>
            rotation_start_time = HAL_GetTick();
 8001b8a:	f000 fa77 	bl	800207c <HAL_GetTick>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a33      	ldr	r2, [pc, #204]	@ (8001c60 <Servo_MaxSpeed_Test_Loop+0x468>)
 8001b92:	6013      	str	r3, [r2, #0]
            test_state = 3;
 8001b94:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <Servo_MaxSpeed_Test_Loop+0x46c>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	701a      	strb	r2, [r3, #0]
            break;
 8001b9a:	e049      	b.n	8001c30 <Servo_MaxSpeed_Test_Loop+0x438>
            // Monitoring reverse rotation (handled above)
            break;
            
        case 4:
            // Test 3: Return to zero
            printf("\n========================================\n");
 8001b9c:	4826      	ldr	r0, [pc, #152]	@ (8001c38 <Servo_MaxSpeed_Test_Loop+0x440>)
 8001b9e:	f001 fd2b 	bl	80035f8 <puts>
            printf("[TEST 3] RETURN TO CENTER (0)\n");
 8001ba2:	4831      	ldr	r0, [pc, #196]	@ (8001c68 <Servo_MaxSpeed_Test_Loop+0x470>)
 8001ba4:	f001 fd28 	bl	80035f8 <puts>
            printf("========================================\n");
 8001ba8:	4827      	ldr	r0, [pc, #156]	@ (8001c48 <Servo_MaxSpeed_Test_Loop+0x450>)
 8001baa:	f001 fd25 	bl	80035f8 <puts>
            
            start_position = servo_get_position(servo_id);
 8001bae:	4b27      	ldr	r3, [pc, #156]	@ (8001c4c <Servo_MaxSpeed_Test_Loop+0x454>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fc19 	bl	80013ea <servo_get_position>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <Servo_MaxSpeed_Test_Loop+0x458>)
 8001bbe:	801a      	strh	r2, [r3, #0]
            printf("Current position: %d steps\n", start_position);
 8001bc0:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <Servo_MaxSpeed_Test_Loop+0x458>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4828      	ldr	r0, [pc, #160]	@ (8001c6c <Servo_MaxSpeed_Test_Loop+0x474>)
 8001bca:	f001 fcad 	bl	8003528 <iprintf>
            printf("Returning to position 0...\n");
 8001bce:	4828      	ldr	r0, [pc, #160]	@ (8001c70 <Servo_MaxSpeed_Test_Loop+0x478>)
 8001bd0:	f001 fd12 	bl	80035f8 <puts>
            
            // LED will blink during return (handled in status check above)
            servo_set_position(servo_id, 0);
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <Servo_MaxSpeed_Test_Loop+0x454>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fbe9 	bl	80013b2 <servo_set_position>
            rotation_start_time = HAL_GetTick();
 8001be0:	f000 fa4c 	bl	800207c <HAL_GetTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c60 <Servo_MaxSpeed_Test_Loop+0x468>)
 8001be8:	6013      	str	r3, [r2, #0]
            test_state = 5;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <Servo_MaxSpeed_Test_Loop+0x46c>)
 8001bec:	2205      	movs	r2, #5
 8001bee:	701a      	strb	r2, [r3, #0]
            break;
 8001bf0:	e01e      	b.n	8001c30 <Servo_MaxSpeed_Test_Loop+0x438>
            // Monitoring return to center (handled above)
            break;
            
        case 6:
            // Test complete, wait and restart
            LED_Off();  // Ensure LED is off
 8001bf2:	f7ff f967 	bl	8000ec4 <LED_Off>
            printf("\n========================================\n");
 8001bf6:	4810      	ldr	r0, [pc, #64]	@ (8001c38 <Servo_MaxSpeed_Test_Loop+0x440>)
 8001bf8:	f001 fcfe 	bl	80035f8 <puts>
            printf("TEST CYCLE COMPLETE!\n");
 8001bfc:	481d      	ldr	r0, [pc, #116]	@ (8001c74 <Servo_MaxSpeed_Test_Loop+0x47c>)
 8001bfe:	f001 fcfb 	bl	80035f8 <puts>
            printf("Waiting 5 seconds before restart...\n");
 8001c02:	481d      	ldr	r0, [pc, #116]	@ (8001c78 <Servo_MaxSpeed_Test_Loop+0x480>)
 8001c04:	f001 fcf8 	bl	80035f8 <puts>
            printf("========================================\n\n");
 8001c08:	481c      	ldr	r0, [pc, #112]	@ (8001c7c <Servo_MaxSpeed_Test_Loop+0x484>)
 8001c0a:	f001 fcf5 	bl	80035f8 <puts>
            
            HAL_Delay(5000);
 8001c0e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c12:	f000 fa3d 	bl	8002090 <HAL_Delay>
            test_state = 0;
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <Servo_MaxSpeed_Test_Loop+0x46c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
            break;
 8001c1c:	e008      	b.n	8001c30 <Servo_MaxSpeed_Test_Loop+0x438>
            
        default:
            test_state = 0;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <Servo_MaxSpeed_Test_Loop+0x46c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
            break;
 8001c24:	e004      	b.n	8001c30 <Servo_MaxSpeed_Test_Loop+0x438>
        return;
 8001c26:	bf00      	nop
 8001c28:	e002      	b.n	8001c30 <Servo_MaxSpeed_Test_Loop+0x438>
        return;
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <Servo_MaxSpeed_Test_Loop+0x438>
            break;
 8001c2e:	bf00      	nop
    }
}
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	0800454c 	.word	0x0800454c
 8001c3c:	0800482c 	.word	0x0800482c
 8001c40:	08004850 	.word	0x08004850
 8001c44:	080047c0 	.word	0x080047c0
 8001c48:	08004360 	.word	0x08004360
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000098 	.word	0x20000098
 8001c54:	080047e0 	.word	0x080047e0
 8001c58:	08004800 	.word	0x08004800
 8001c5c:	0800481c 	.word	0x0800481c
 8001c60:	20000094 	.word	0x20000094
 8001c64:	2000008c 	.word	0x2000008c
 8001c68:	0800487c 	.word	0x0800487c
 8001c6c:	0800489c 	.word	0x0800489c
 8001c70:	080048b8 	.word	0x080048b8
 8001c74:	080048d4 	.word	0x080048d4
 8001c78:	080048ec 	.word	0x080048ec
 8001c7c:	08004670 	.word	0x08004670

08001c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c84:	b672      	cpsid	i
}
 8001c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <Error_Handler+0x8>

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4a14      	ldr	r2, [pc, #80]	@ (8001ce8 <HAL_MspInit+0x5c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6193      	str	r3, [r2, #24]
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_MspInit+0x5c>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce8 <HAL_MspInit+0x5c>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <HAL_MspInit+0x5c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_MspInit+0x60>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <HAL_MspInit+0x60>)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <MemManage_Handler+0x4>

08001d08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d40:	f000 f98a 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e00a      	b.n	8001d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5a:	f3af 8000 	nop.w
 8001d5e:	4601      	mov	r1, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	60ba      	str	r2, [r7, #8]
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf0      	blt.n	8001d5a <_read+0x12>
  }

  return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e009      	b.n	8001da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	60ba      	str	r2, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf1      	blt.n	8001d94 <_write+0x12>
  }
  return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_close>:

int _close(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de0:	605a      	str	r2, [r3, #4]
  return 0;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <_isatty>:

int _isatty(int file)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
	...

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	@ (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f001 fd02 	bl	8003854 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20005000 	.word	0x20005000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	200000a0 	.word	0x200000a0
 8001e84:	20000240 	.word	0x20000240

08001e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e98:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001e9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <MX_USART3_UART_Init+0x50>)
 8001ea2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001eb8:	220c      	movs	r2, #12
 8001eba:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	@ (8001edc <MX_USART3_UART_Init+0x48>)
 8001eca:	f000 ffaf 	bl	8002e2c <HAL_UART_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001ed4:	f7ff fed4 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200000a4 	.word	0x200000a4
 8001ee0:	40004800 	.word	0x40004800
 8001ee4:	000f4240 	.word	0x000f4240

08001ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <HAL_UART_MspInit+0x8c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d131      	bne.n	8001f6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f08:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <HAL_UART_MspInit+0x90>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f78 <HAL_UART_MspInit+0x90>)
 8001f0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f12:	61d3      	str	r3, [r2, #28]
 8001f14:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <HAL_UART_MspInit+0x90>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_UART_MspInit+0x90>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <HAL_UART_MspInit+0x90>)
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_UART_MspInit+0x90>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480b      	ldr	r0, [pc, #44]	@ (8001f7c <HAL_UART_MspInit+0x94>)
 8001f4e:	f000 f9a7 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4619      	mov	r1, r3
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <HAL_UART_MspInit+0x94>)
 8001f68:	f000 f99a 	bl	80022a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40004800 	.word	0x40004800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010c00 	.word	0x40010c00

08001f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f80:	f7ff ff82 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f84:	480b      	ldr	r0, [pc, #44]	@ (8001fb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f86:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f88:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f9c:	4c09      	ldr	r4, [pc, #36]	@ (8001fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001faa:	f001 fc59 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fae:	f7ff facf 	bl	8001550 <main>
  bx lr
 8001fb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fbc:	08004978 	.word	0x08004978
  ldr r2, =_sbss
 8001fc0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fc4:	2000023c 	.word	0x2000023c

08001fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_2_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_Init+0x28>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a07      	ldr	r2, [pc, #28]	@ (8001ff4 <HAL_Init+0x28>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f000 f92b 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f000 f808 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe8:	f7ff fe50 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_InitTick+0x54>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_InitTick+0x58>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f935 	bl	8002286 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f000 f90b 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	@ (8002054 <HAL_InitTick+0x5c>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000004 	.word	0x20000004
 8002050:	2000000c 	.word	0x2000000c
 8002054:	20000008 	.word	0x20000008

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_IncTick+0x1c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_IncTick+0x20>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a03      	ldr	r2, [pc, #12]	@ (8002078 <HAL_IncTick+0x20>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	2000000c 	.word	0x2000000c
 8002078:	200000ec 	.word	0x200000ec

0800207c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b02      	ldr	r3, [pc, #8]	@ (800208c <HAL_GetTick+0x10>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	200000ec 	.word	0x200000ec

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff fff0 	bl	800207c <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d005      	beq.n	80020b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_Delay+0x44>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b6:	bf00      	nop
 80020b8:	f7ff ffe0 	bl	800207c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d8f7      	bhi.n	80020b8 <HAL_Delay+0x28>
  {
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000000c 	.word	0x2000000c

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff90 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff49 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff5e 	bl	8002120 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff90 	bl	8002190 <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5f 	bl	800213c <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffb0 	bl	80021f4 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b08b      	sub	sp, #44	@ 0x2c
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e169      	b.n	8002588 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022b4:	2201      	movs	r2, #1
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8158 	bne.w	8002582 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002540 <HAL_GPIO_Init+0x2a0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d05e      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022dc:	4a98      	ldr	r2, [pc, #608]	@ (8002540 <HAL_GPIO_Init+0x2a0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d875      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022e2:	4a98      	ldr	r2, [pc, #608]	@ (8002544 <HAL_GPIO_Init+0x2a4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d058      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022e8:	4a96      	ldr	r2, [pc, #600]	@ (8002544 <HAL_GPIO_Init+0x2a4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d86f      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022ee:	4a96      	ldr	r2, [pc, #600]	@ (8002548 <HAL_GPIO_Init+0x2a8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d052      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022f4:	4a94      	ldr	r2, [pc, #592]	@ (8002548 <HAL_GPIO_Init+0x2a8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d869      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022fa:	4a94      	ldr	r2, [pc, #592]	@ (800254c <HAL_GPIO_Init+0x2ac>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d04c      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 8002300:	4a92      	ldr	r2, [pc, #584]	@ (800254c <HAL_GPIO_Init+0x2ac>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d863      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 8002306:	4a92      	ldr	r2, [pc, #584]	@ (8002550 <HAL_GPIO_Init+0x2b0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d046      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 800230c:	4a90      	ldr	r2, [pc, #576]	@ (8002550 <HAL_GPIO_Init+0x2b0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d85d      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 8002312:	2b12      	cmp	r3, #18
 8002314:	d82a      	bhi.n	800236c <HAL_GPIO_Init+0xcc>
 8002316:	2b12      	cmp	r3, #18
 8002318:	d859      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 800231a:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <HAL_GPIO_Init+0x80>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	0800239b 	.word	0x0800239b
 8002324:	08002375 	.word	0x08002375
 8002328:	08002387 	.word	0x08002387
 800232c:	080023c9 	.word	0x080023c9
 8002330:	080023cf 	.word	0x080023cf
 8002334:	080023cf 	.word	0x080023cf
 8002338:	080023cf 	.word	0x080023cf
 800233c:	080023cf 	.word	0x080023cf
 8002340:	080023cf 	.word	0x080023cf
 8002344:	080023cf 	.word	0x080023cf
 8002348:	080023cf 	.word	0x080023cf
 800234c:	080023cf 	.word	0x080023cf
 8002350:	080023cf 	.word	0x080023cf
 8002354:	080023cf 	.word	0x080023cf
 8002358:	080023cf 	.word	0x080023cf
 800235c:	080023cf 	.word	0x080023cf
 8002360:	080023cf 	.word	0x080023cf
 8002364:	0800237d 	.word	0x0800237d
 8002368:	08002391 	.word	0x08002391
 800236c:	4a79      	ldr	r2, [pc, #484]	@ (8002554 <HAL_GPIO_Init+0x2b4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002372:	e02c      	b.n	80023ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	623b      	str	r3, [r7, #32]
          break;
 800237a:	e029      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	3304      	adds	r3, #4
 8002382:	623b      	str	r3, [r7, #32]
          break;
 8002384:	e024      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	3308      	adds	r3, #8
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e01f      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	330c      	adds	r3, #12
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e01a      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023a2:	2304      	movs	r3, #4
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e013      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b0:	2308      	movs	r3, #8
 80023b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	611a      	str	r2, [r3, #16]
          break;
 80023ba:	e009      	b.n	80023d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023bc:	2308      	movs	r3, #8
 80023be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	615a      	str	r2, [r3, #20]
          break;
 80023c6:	e003      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
          break;
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          break;
 80023ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d801      	bhi.n	80023da <HAL_GPIO_Init+0x13a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	e001      	b.n	80023de <HAL_GPIO_Init+0x13e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2bff      	cmp	r3, #255	@ 0xff
 80023e4:	d802      	bhi.n	80023ec <HAL_GPIO_Init+0x14c>
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x152>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	3b08      	subs	r3, #8
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	210f      	movs	r1, #15
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	6a39      	ldr	r1, [r7, #32]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	431a      	orrs	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80b1 	beq.w	8002582 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002420:	4b4d      	ldr	r3, [pc, #308]	@ (8002558 <HAL_GPIO_Init+0x2b8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a4c      	ldr	r2, [pc, #304]	@ (8002558 <HAL_GPIO_Init+0x2b8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b4a      	ldr	r3, [pc, #296]	@ (8002558 <HAL_GPIO_Init+0x2b8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002438:	4a48      	ldr	r2, [pc, #288]	@ (800255c <HAL_GPIO_Init+0x2bc>)
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a40      	ldr	r2, [pc, #256]	@ (8002560 <HAL_GPIO_Init+0x2c0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_GPIO_Init+0x1ec>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3f      	ldr	r2, [pc, #252]	@ (8002564 <HAL_GPIO_Init+0x2c4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00d      	beq.n	8002488 <HAL_GPIO_Init+0x1e8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3e      	ldr	r2, [pc, #248]	@ (8002568 <HAL_GPIO_Init+0x2c8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <HAL_GPIO_Init+0x1e4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3d      	ldr	r2, [pc, #244]	@ (800256c <HAL_GPIO_Init+0x2cc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_GPIO_Init+0x1e0>
 800247c:	2303      	movs	r3, #3
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002480:	2304      	movs	r3, #4
 8002482:	e004      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002484:	2302      	movs	r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 800248c:	2300      	movs	r3, #0
 800248e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	4093      	lsls	r3, r2
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800249e:	492f      	ldr	r1, [pc, #188]	@ (800255c <HAL_GPIO_Init+0x2bc>)
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	492c      	ldr	r1, [pc, #176]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4928      	ldr	r1, [pc, #160]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d006      	beq.n	80024ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024e0:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	4922      	ldr	r1, [pc, #136]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ee:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	491e      	ldr	r1, [pc, #120]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002508:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4918      	ldr	r1, [pc, #96]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	43db      	mvns	r3, r3
 800251e:	4914      	ldr	r1, [pc, #80]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002520:	4013      	ands	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d021      	beq.n	8002574 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	490e      	ldr	r1, [pc, #56]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e021      	b.n	8002582 <HAL_GPIO_Init+0x2e2>
 800253e:	bf00      	nop
 8002540:	10320000 	.word	0x10320000
 8002544:	10310000 	.word	0x10310000
 8002548:	10220000 	.word	0x10220000
 800254c:	10210000 	.word	0x10210000
 8002550:	10120000 	.word	0x10120000
 8002554:	10110000 	.word	0x10110000
 8002558:	40021000 	.word	0x40021000
 800255c:	40010000 	.word	0x40010000
 8002560:	40010800 	.word	0x40010800
 8002564:	40010c00 	.word	0x40010c00
 8002568:	40011000 	.word	0x40011000
 800256c:	40011400 	.word	0x40011400
 8002570:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	43db      	mvns	r3, r3
 800257c:	4909      	ldr	r1, [pc, #36]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 800257e:	4013      	ands	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	3301      	adds	r3, #1
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	fa22 f303 	lsr.w	r3, r2, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f ae8e 	bne.w	80022b4 <HAL_GPIO_Init+0x14>
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	372c      	adds	r7, #44	@ 0x2c
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c4:	e003      	b.n	80025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	041a      	lsls	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43d9      	mvns	r1, r3
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	400b      	ands	r3, r1
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	611a      	str	r2, [r3, #16]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
	...

0800260c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e272      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8087 	beq.w	800273a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800262c:	4b92      	ldr	r3, [pc, #584]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00c      	beq.n	8002652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002638:	4b8f      	ldr	r3, [pc, #572]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d112      	bne.n	800266a <HAL_RCC_OscConfig+0x5e>
 8002644:	4b8c      	ldr	r3, [pc, #560]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d10b      	bne.n	800266a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002652:	4b89      	ldr	r3, [pc, #548]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d06c      	beq.n	8002738 <HAL_RCC_OscConfig+0x12c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d168      	bne.n	8002738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e24c      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x76>
 8002674:	4b80      	ldr	r3, [pc, #512]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a7f      	ldr	r2, [pc, #508]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b7b      	ldr	r3, [pc, #492]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7a      	ldr	r2, [pc, #488]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b78      	ldr	r3, [pc, #480]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a77      	ldr	r2, [pc, #476]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0xbc>
 80026ae:	4b72      	ldr	r3, [pc, #456]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a71      	ldr	r2, [pc, #452]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6e      	ldr	r2, [pc, #440]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 80026c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b68      	ldr	r3, [pc, #416]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a67      	ldr	r2, [pc, #412]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fcc8 	bl	800207c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fcc4 	bl	800207c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e200      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b5d      	ldr	r3, [pc, #372]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe4>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fcb4 	bl	800207c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff fcb0 	bl	800207c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1ec      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x10c>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002746:	4b4c      	ldr	r3, [pc, #304]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002752:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b08      	cmp	r3, #8
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x18c>
 800275e:	4b46      	ldr	r3, [pc, #280]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b43      	ldr	r3, [pc, #268]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x176>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1c0      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4939      	ldr	r1, [pc, #228]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e03a      	b.n	800280e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b36      	ldr	r3, [pc, #216]	@ (800287c <HAL_RCC_OscConfig+0x270>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fc69 	bl	800207c <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7ff fc65 	bl	800207c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1a1      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4927      	ldr	r1, [pc, #156]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b26      	ldr	r3, [pc, #152]	@ (800287c <HAL_RCC_OscConfig+0x270>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fc48 	bl	800207c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7ff fc44 	bl	800207c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e180      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d03a      	beq.n	8002890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002822:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7ff fc28 	bl	800207c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff fc24 	bl	800207c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e160      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f000 face 	bl	8002df0 <RCC_Delay>
 8002854:	e01c      	b.n	8002890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002856:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7ff fc0e 	bl	800207c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002862:	e00f      	b.n	8002884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7ff fc0a 	bl	800207c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d908      	bls.n	8002884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e146      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	42420000 	.word	0x42420000
 8002880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	4b92      	ldr	r3, [pc, #584]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e9      	bne.n	8002864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a6 	beq.w	80029ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a87      	ldr	r2, [pc, #540]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b85      	ldr	r3, [pc, #532]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b82      	ldr	r3, [pc, #520]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7ff fbcb 	bl	800207c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7ff fbc7 	bl	800207c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	@ 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e103      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b75      	ldr	r3, [pc, #468]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x312>
 8002910:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	e02d      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002926:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a69      	ldr	r2, [pc, #420]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	4b67      	ldr	r3, [pc, #412]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a66      	ldr	r2, [pc, #408]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	e01c      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_OscConfig+0x356>
 8002948:	4b61      	ldr	r3, [pc, #388]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a60      	ldr	r2, [pc, #384]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	e00b      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 8002962:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a5a      	ldr	r2, [pc, #360]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	4b58      	ldr	r3, [pc, #352]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a57      	ldr	r2, [pc, #348]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7ff fb7b 	bl	800207c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7ff fb77 	bl	800207c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0b1      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ee      	beq.n	800298a <HAL_RCC_OscConfig+0x37e>
 80029ac:	e014      	b.n	80029d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7ff fb65 	bl	800207c <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7ff fb61 	bl	800207c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e09b      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	4b40      	ldr	r3, [pc, #256]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ee      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8087 	beq.w	8002b02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f4:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d061      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d146      	bne.n	8002a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b33      	ldr	r3, [pc, #204]	@ (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fb35 	bl	800207c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff fb31 	bl	800207c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e06d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a28:	4b29      	ldr	r3, [pc, #164]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3c:	d108      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4921      	ldr	r1, [pc, #132]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a19      	ldr	r1, [r3, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	430b      	orrs	r3, r1
 8002a62:	491b      	ldr	r1, [pc, #108]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fb05 	bl	800207c <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff fb01 	bl	800207c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e03d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x46a>
 8002a94:	e035      	b.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff faee 	bl	800207c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff faea 	bl	800207c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e026      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x498>
 8002ac2:	e01e      	b.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e019      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x500>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d0      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d910      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4965      	ldr	r1, [pc, #404]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a58      	ldr	r2, [pc, #352]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a52      	ldr	r2, [pc, #328]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d040      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d115      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e073      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e06b      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b39      	ldr	r3, [pc, #228]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4936      	ldr	r1, [pc, #216]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7ff fa3c 	bl	800207c <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7ff fa38 	bl	800207c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e053      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b27      	ldr	r3, [pc, #156]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d210      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4922      	ldr	r1, [pc, #136]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490a      	ldr	r1, [pc, #40]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x1cc>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f99a 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08004910 	.word	0x08004910
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	20000008 	.word	0x20000008

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x30>
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x36>
 8002d12:	e027      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d16:	613b      	str	r3, [r7, #16]
      break;
 8002d18:	e027      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0c9b      	lsrs	r3, r3, #18
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d32:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0c5b      	lsrs	r3, r3, #17
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	4a11      	ldr	r2, [pc, #68]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d46:	fb03 f202 	mul.w	r2, r3, r2
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e004      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0c      	ldr	r2, [pc, #48]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	613b      	str	r3, [r7, #16]
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d66:	613b      	str	r3, [r7, #16]
      break;
 8002d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6a:	693b      	ldr	r3, [r7, #16]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	08004928 	.word	0x08004928
 8002d84:	08004938 	.word	0x08004938
 8002d88:	003d0900 	.word	0x003d0900

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b02      	ldr	r3, [pc, #8]	@ (8002d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da4:	f7ff fff2 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	@ (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08004920 	.word	0x08004920

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dcc:	f7ff ffde 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	0adb      	lsrs	r3, r3, #11
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	@ (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08004920 	.word	0x08004920

08002df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <RCC_Delay+0x34>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e28 <RCC_Delay+0x38>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0a5b      	lsrs	r3, r3, #9
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e0c:	bf00      	nop
  }
  while (Delay --);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f9      	bne.n	8002e0c <RCC_Delay+0x1c>
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	20000004 	.word	0x20000004
 8002e28:	10624dd3 	.word	0x10624dd3

08002e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e042      	b.n	8002ec4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff f848 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	@ 0x24
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fa09 	bl	8003288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	@ 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d175      	bne.n	8002fd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_UART_Transmit+0x2c>
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e06e      	b.n	8002fda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	@ 0x21
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0a:	f7ff f8b7 	bl	800207c <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f40:	e02e      	b.n	8002fa0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	@ 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f8df 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e03a      	b.n	8002fda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1cb      	bne.n	8002f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2140      	movs	r1, #64	@ 0x40
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8ab 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e006      	b.n	8002fda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b08a      	sub	sp, #40	@ 0x28
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	f040 8081 	bne.w	8003106 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UART_Receive+0x2e>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e079      	b.n	8003108 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2222      	movs	r2, #34	@ 0x22
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003028:	f7ff f828 	bl	800207c <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003042:	d108      	bne.n	8003056 <HAL_UART_Receive+0x74>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e003      	b.n	800305e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800305e:	e047      	b.n	80030f0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	2120      	movs	r1, #32
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f850 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e042      	b.n	8003108 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10c      	bne.n	80030a2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003094:	b29a      	uxth	r2, r3
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	3302      	adds	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e01f      	b.n	80030e2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030aa:	d007      	beq.n	80030bc <HAL_UART_Receive+0xda>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_UART_Receive+0xe8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e008      	b.n	80030dc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1b2      	bne.n	8003060 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003120:	e03b      	b.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d037      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fe ffa7 	bl	800207c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <UART_WaitOnFlagUntilTimeout+0x30>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e03a      	b.n	80031ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d023      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b80      	cmp	r3, #128	@ 0x80
 8003156:	d020      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b40      	cmp	r3, #64	@ 0x40
 800315c:	d01d      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d116      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f81d 	bl	80031c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2208      	movs	r2, #8
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e00f      	b.n	80031ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d0b4      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b095      	sub	sp, #84	@ 0x54
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80031ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e5      	bne.n	80031ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3314      	adds	r3, #20
 8003204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	61fb      	str	r3, [r7, #28]
   return(result);
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3314      	adds	r3, #20
 800321c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800321e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e5      	bne.n	80031fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	2b01      	cmp	r3, #1
 8003238:	d119      	bne.n	800326e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	60bb      	str	r3, [r7, #8]
   return(result);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f023 0310 	bic.w	r3, r3, #16
 8003250:	647b      	str	r3, [r7, #68]	@ 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800325a:	61ba      	str	r2, [r7, #24]
 800325c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	613b      	str	r3, [r7, #16]
   return(result);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800327c:	bf00      	nop
 800327e:	3754      	adds	r7, #84	@ 0x54
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
	...

08003288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80032c2:	f023 030c 	bic.w	r3, r3, #12
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2c      	ldr	r2, [pc, #176]	@ (800339c <UART_SetConfig+0x114>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7ff fd6a 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	e002      	b.n	80032fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7ff fd52 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009a      	lsls	r2, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <UART_SetConfig+0x118>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	0119      	lsls	r1, r3, #4
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <UART_SetConfig+0x118>)
 8003336:	fba3 0302 	umull	r0, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2064      	movs	r0, #100	@ 0x64
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3332      	adds	r3, #50	@ 0x32
 8003348:	4a15      	ldr	r2, [pc, #84]	@ (80033a0 <UART_SetConfig+0x118>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003354:	4419      	add	r1, r3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009a      	lsls	r2, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <UART_SetConfig+0x118>)
 800336e:	fba3 0302 	umull	r0, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2064      	movs	r0, #100	@ 0x64
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	3332      	adds	r3, #50	@ 0x32
 8003380:	4a07      	ldr	r2, [pc, #28]	@ (80033a0 <UART_SetConfig+0x118>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	440a      	add	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40013800 	.word	0x40013800
 80033a0:	51eb851f 	.word	0x51eb851f

080033a4 <std>:
 80033a4:	2300      	movs	r3, #0
 80033a6:	b510      	push	{r4, lr}
 80033a8:	4604      	mov	r4, r0
 80033aa:	e9c0 3300 	strd	r3, r3, [r0]
 80033ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033b2:	6083      	str	r3, [r0, #8]
 80033b4:	8181      	strh	r1, [r0, #12]
 80033b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80033b8:	81c2      	strh	r2, [r0, #14]
 80033ba:	6183      	str	r3, [r0, #24]
 80033bc:	4619      	mov	r1, r3
 80033be:	2208      	movs	r2, #8
 80033c0:	305c      	adds	r0, #92	@ 0x5c
 80033c2:	f000 f9f9 	bl	80037b8 <memset>
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <std+0x58>)
 80033c8:	6224      	str	r4, [r4, #32]
 80033ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <std+0x5c>)
 80033ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <std+0x60>)
 80033d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <std+0x64>)
 80033d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <std+0x68>)
 80033da:	429c      	cmp	r4, r3
 80033dc:	d006      	beq.n	80033ec <std+0x48>
 80033de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033e2:	4294      	cmp	r4, r2
 80033e4:	d002      	beq.n	80033ec <std+0x48>
 80033e6:	33d0      	adds	r3, #208	@ 0xd0
 80033e8:	429c      	cmp	r4, r3
 80033ea:	d105      	bne.n	80033f8 <std+0x54>
 80033ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f4:	f000 ba58 	b.w	80038a8 <__retarget_lock_init_recursive>
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	bf00      	nop
 80033fc:	08003609 	.word	0x08003609
 8003400:	0800362b 	.word	0x0800362b
 8003404:	08003663 	.word	0x08003663
 8003408:	08003687 	.word	0x08003687
 800340c:	200000f0 	.word	0x200000f0

08003410 <stdio_exit_handler>:
 8003410:	4a02      	ldr	r2, [pc, #8]	@ (800341c <stdio_exit_handler+0xc>)
 8003412:	4903      	ldr	r1, [pc, #12]	@ (8003420 <stdio_exit_handler+0x10>)
 8003414:	4803      	ldr	r0, [pc, #12]	@ (8003424 <stdio_exit_handler+0x14>)
 8003416:	f000 b869 	b.w	80034ec <_fwalk_sglue>
 800341a:	bf00      	nop
 800341c:	20000010 	.word	0x20000010
 8003420:	08004159 	.word	0x08004159
 8003424:	20000020 	.word	0x20000020

08003428 <cleanup_stdio>:
 8003428:	6841      	ldr	r1, [r0, #4]
 800342a:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <cleanup_stdio+0x34>)
 800342c:	b510      	push	{r4, lr}
 800342e:	4299      	cmp	r1, r3
 8003430:	4604      	mov	r4, r0
 8003432:	d001      	beq.n	8003438 <cleanup_stdio+0x10>
 8003434:	f000 fe90 	bl	8004158 <_fflush_r>
 8003438:	68a1      	ldr	r1, [r4, #8]
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <cleanup_stdio+0x38>)
 800343c:	4299      	cmp	r1, r3
 800343e:	d002      	beq.n	8003446 <cleanup_stdio+0x1e>
 8003440:	4620      	mov	r0, r4
 8003442:	f000 fe89 	bl	8004158 <_fflush_r>
 8003446:	68e1      	ldr	r1, [r4, #12]
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <cleanup_stdio+0x3c>)
 800344a:	4299      	cmp	r1, r3
 800344c:	d004      	beq.n	8003458 <cleanup_stdio+0x30>
 800344e:	4620      	mov	r0, r4
 8003450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003454:	f000 be80 	b.w	8004158 <_fflush_r>
 8003458:	bd10      	pop	{r4, pc}
 800345a:	bf00      	nop
 800345c:	200000f0 	.word	0x200000f0
 8003460:	20000158 	.word	0x20000158
 8003464:	200001c0 	.word	0x200001c0

08003468 <global_stdio_init.part.0>:
 8003468:	b510      	push	{r4, lr}
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <global_stdio_init.part.0+0x30>)
 800346c:	4c0b      	ldr	r4, [pc, #44]	@ (800349c <global_stdio_init.part.0+0x34>)
 800346e:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <global_stdio_init.part.0+0x38>)
 8003470:	4620      	mov	r0, r4
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	2104      	movs	r1, #4
 8003476:	2200      	movs	r2, #0
 8003478:	f7ff ff94 	bl	80033a4 <std>
 800347c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003480:	2201      	movs	r2, #1
 8003482:	2109      	movs	r1, #9
 8003484:	f7ff ff8e 	bl	80033a4 <std>
 8003488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800348c:	2202      	movs	r2, #2
 800348e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003492:	2112      	movs	r1, #18
 8003494:	f7ff bf86 	b.w	80033a4 <std>
 8003498:	20000228 	.word	0x20000228
 800349c:	200000f0 	.word	0x200000f0
 80034a0:	08003411 	.word	0x08003411

080034a4 <__sfp_lock_acquire>:
 80034a4:	4801      	ldr	r0, [pc, #4]	@ (80034ac <__sfp_lock_acquire+0x8>)
 80034a6:	f000 ba00 	b.w	80038aa <__retarget_lock_acquire_recursive>
 80034aa:	bf00      	nop
 80034ac:	20000231 	.word	0x20000231

080034b0 <__sfp_lock_release>:
 80034b0:	4801      	ldr	r0, [pc, #4]	@ (80034b8 <__sfp_lock_release+0x8>)
 80034b2:	f000 b9fb 	b.w	80038ac <__retarget_lock_release_recursive>
 80034b6:	bf00      	nop
 80034b8:	20000231 	.word	0x20000231

080034bc <__sinit>:
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
 80034c0:	f7ff fff0 	bl	80034a4 <__sfp_lock_acquire>
 80034c4:	6a23      	ldr	r3, [r4, #32]
 80034c6:	b11b      	cbz	r3, 80034d0 <__sinit+0x14>
 80034c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034cc:	f7ff bff0 	b.w	80034b0 <__sfp_lock_release>
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <__sinit+0x28>)
 80034d2:	6223      	str	r3, [r4, #32]
 80034d4:	4b04      	ldr	r3, [pc, #16]	@ (80034e8 <__sinit+0x2c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f5      	bne.n	80034c8 <__sinit+0xc>
 80034dc:	f7ff ffc4 	bl	8003468 <global_stdio_init.part.0>
 80034e0:	e7f2      	b.n	80034c8 <__sinit+0xc>
 80034e2:	bf00      	nop
 80034e4:	08003429 	.word	0x08003429
 80034e8:	20000228 	.word	0x20000228

080034ec <_fwalk_sglue>:
 80034ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f0:	4607      	mov	r7, r0
 80034f2:	4688      	mov	r8, r1
 80034f4:	4614      	mov	r4, r2
 80034f6:	2600      	movs	r6, #0
 80034f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034fc:	f1b9 0901 	subs.w	r9, r9, #1
 8003500:	d505      	bpl.n	800350e <_fwalk_sglue+0x22>
 8003502:	6824      	ldr	r4, [r4, #0]
 8003504:	2c00      	cmp	r4, #0
 8003506:	d1f7      	bne.n	80034f8 <_fwalk_sglue+0xc>
 8003508:	4630      	mov	r0, r6
 800350a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800350e:	89ab      	ldrh	r3, [r5, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d907      	bls.n	8003524 <_fwalk_sglue+0x38>
 8003514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003518:	3301      	adds	r3, #1
 800351a:	d003      	beq.n	8003524 <_fwalk_sglue+0x38>
 800351c:	4629      	mov	r1, r5
 800351e:	4638      	mov	r0, r7
 8003520:	47c0      	blx	r8
 8003522:	4306      	orrs	r6, r0
 8003524:	3568      	adds	r5, #104	@ 0x68
 8003526:	e7e9      	b.n	80034fc <_fwalk_sglue+0x10>

08003528 <iprintf>:
 8003528:	b40f      	push	{r0, r1, r2, r3}
 800352a:	b507      	push	{r0, r1, r2, lr}
 800352c:	4906      	ldr	r1, [pc, #24]	@ (8003548 <iprintf+0x20>)
 800352e:	ab04      	add	r3, sp, #16
 8003530:	6808      	ldr	r0, [r1, #0]
 8003532:	f853 2b04 	ldr.w	r2, [r3], #4
 8003536:	6881      	ldr	r1, [r0, #8]
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	f000 fae5 	bl	8003b08 <_vfiprintf_r>
 800353e:	b003      	add	sp, #12
 8003540:	f85d eb04 	ldr.w	lr, [sp], #4
 8003544:	b004      	add	sp, #16
 8003546:	4770      	bx	lr
 8003548:	2000001c 	.word	0x2000001c

0800354c <_puts_r>:
 800354c:	6a03      	ldr	r3, [r0, #32]
 800354e:	b570      	push	{r4, r5, r6, lr}
 8003550:	4605      	mov	r5, r0
 8003552:	460e      	mov	r6, r1
 8003554:	6884      	ldr	r4, [r0, #8]
 8003556:	b90b      	cbnz	r3, 800355c <_puts_r+0x10>
 8003558:	f7ff ffb0 	bl	80034bc <__sinit>
 800355c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800355e:	07db      	lsls	r3, r3, #31
 8003560:	d405      	bmi.n	800356e <_puts_r+0x22>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	0598      	lsls	r0, r3, #22
 8003566:	d402      	bmi.n	800356e <_puts_r+0x22>
 8003568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800356a:	f000 f99e 	bl	80038aa <__retarget_lock_acquire_recursive>
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	0719      	lsls	r1, r3, #28
 8003572:	d502      	bpl.n	800357a <_puts_r+0x2e>
 8003574:	6923      	ldr	r3, [r4, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d135      	bne.n	80035e6 <_puts_r+0x9a>
 800357a:	4621      	mov	r1, r4
 800357c:	4628      	mov	r0, r5
 800357e:	f000 f8c5 	bl	800370c <__swsetup_r>
 8003582:	b380      	cbz	r0, 80035e6 <_puts_r+0x9a>
 8003584:	f04f 35ff 	mov.w	r5, #4294967295
 8003588:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800358a:	07da      	lsls	r2, r3, #31
 800358c:	d405      	bmi.n	800359a <_puts_r+0x4e>
 800358e:	89a3      	ldrh	r3, [r4, #12]
 8003590:	059b      	lsls	r3, r3, #22
 8003592:	d402      	bmi.n	800359a <_puts_r+0x4e>
 8003594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003596:	f000 f989 	bl	80038ac <__retarget_lock_release_recursive>
 800359a:	4628      	mov	r0, r5
 800359c:	bd70      	pop	{r4, r5, r6, pc}
 800359e:	2b00      	cmp	r3, #0
 80035a0:	da04      	bge.n	80035ac <_puts_r+0x60>
 80035a2:	69a2      	ldr	r2, [r4, #24]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	dc17      	bgt.n	80035d8 <_puts_r+0x8c>
 80035a8:	290a      	cmp	r1, #10
 80035aa:	d015      	beq.n	80035d8 <_puts_r+0x8c>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	6022      	str	r2, [r4, #0]
 80035b2:	7019      	strb	r1, [r3, #0]
 80035b4:	68a3      	ldr	r3, [r4, #8]
 80035b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035ba:	3b01      	subs	r3, #1
 80035bc:	60a3      	str	r3, [r4, #8]
 80035be:	2900      	cmp	r1, #0
 80035c0:	d1ed      	bne.n	800359e <_puts_r+0x52>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da11      	bge.n	80035ea <_puts_r+0x9e>
 80035c6:	4622      	mov	r2, r4
 80035c8:	210a      	movs	r1, #10
 80035ca:	4628      	mov	r0, r5
 80035cc:	f000 f85f 	bl	800368e <__swbuf_r>
 80035d0:	3001      	adds	r0, #1
 80035d2:	d0d7      	beq.n	8003584 <_puts_r+0x38>
 80035d4:	250a      	movs	r5, #10
 80035d6:	e7d7      	b.n	8003588 <_puts_r+0x3c>
 80035d8:	4622      	mov	r2, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 f857 	bl	800368e <__swbuf_r>
 80035e0:	3001      	adds	r0, #1
 80035e2:	d1e7      	bne.n	80035b4 <_puts_r+0x68>
 80035e4:	e7ce      	b.n	8003584 <_puts_r+0x38>
 80035e6:	3e01      	subs	r6, #1
 80035e8:	e7e4      	b.n	80035b4 <_puts_r+0x68>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	6022      	str	r2, [r4, #0]
 80035f0:	220a      	movs	r2, #10
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e7ee      	b.n	80035d4 <_puts_r+0x88>
	...

080035f8 <puts>:
 80035f8:	4b02      	ldr	r3, [pc, #8]	@ (8003604 <puts+0xc>)
 80035fa:	4601      	mov	r1, r0
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	f7ff bfa5 	b.w	800354c <_puts_r>
 8003602:	bf00      	nop
 8003604:	2000001c 	.word	0x2000001c

08003608 <__sread>:
 8003608:	b510      	push	{r4, lr}
 800360a:	460c      	mov	r4, r1
 800360c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003610:	f000 f8fc 	bl	800380c <_read_r>
 8003614:	2800      	cmp	r0, #0
 8003616:	bfab      	itete	ge
 8003618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800361a:	89a3      	ldrhlt	r3, [r4, #12]
 800361c:	181b      	addge	r3, r3, r0
 800361e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003622:	bfac      	ite	ge
 8003624:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003626:	81a3      	strhlt	r3, [r4, #12]
 8003628:	bd10      	pop	{r4, pc}

0800362a <__swrite>:
 800362a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800362e:	461f      	mov	r7, r3
 8003630:	898b      	ldrh	r3, [r1, #12]
 8003632:	4605      	mov	r5, r0
 8003634:	05db      	lsls	r3, r3, #23
 8003636:	460c      	mov	r4, r1
 8003638:	4616      	mov	r6, r2
 800363a:	d505      	bpl.n	8003648 <__swrite+0x1e>
 800363c:	2302      	movs	r3, #2
 800363e:	2200      	movs	r2, #0
 8003640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003644:	f000 f8d0 	bl	80037e8 <_lseek_r>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	4632      	mov	r2, r6
 800364c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	4628      	mov	r0, r5
 8003654:	463b      	mov	r3, r7
 8003656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800365a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800365e:	f000 b8e7 	b.w	8003830 <_write_r>

08003662 <__sseek>:
 8003662:	b510      	push	{r4, lr}
 8003664:	460c      	mov	r4, r1
 8003666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800366a:	f000 f8bd 	bl	80037e8 <_lseek_r>
 800366e:	1c43      	adds	r3, r0, #1
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	bf15      	itete	ne
 8003674:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003676:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800367a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800367e:	81a3      	strheq	r3, [r4, #12]
 8003680:	bf18      	it	ne
 8003682:	81a3      	strhne	r3, [r4, #12]
 8003684:	bd10      	pop	{r4, pc}

08003686 <__sclose>:
 8003686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800368a:	f000 b89d 	b.w	80037c8 <_close_r>

0800368e <__swbuf_r>:
 800368e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003690:	460e      	mov	r6, r1
 8003692:	4614      	mov	r4, r2
 8003694:	4605      	mov	r5, r0
 8003696:	b118      	cbz	r0, 80036a0 <__swbuf_r+0x12>
 8003698:	6a03      	ldr	r3, [r0, #32]
 800369a:	b90b      	cbnz	r3, 80036a0 <__swbuf_r+0x12>
 800369c:	f7ff ff0e 	bl	80034bc <__sinit>
 80036a0:	69a3      	ldr	r3, [r4, #24]
 80036a2:	60a3      	str	r3, [r4, #8]
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	071a      	lsls	r2, r3, #28
 80036a8:	d501      	bpl.n	80036ae <__swbuf_r+0x20>
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	b943      	cbnz	r3, 80036c0 <__swbuf_r+0x32>
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 f82b 	bl	800370c <__swsetup_r>
 80036b6:	b118      	cbz	r0, 80036c0 <__swbuf_r+0x32>
 80036b8:	f04f 37ff 	mov.w	r7, #4294967295
 80036bc:	4638      	mov	r0, r7
 80036be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	6922      	ldr	r2, [r4, #16]
 80036c4:	b2f6      	uxtb	r6, r6
 80036c6:	1a98      	subs	r0, r3, r2
 80036c8:	6963      	ldr	r3, [r4, #20]
 80036ca:	4637      	mov	r7, r6
 80036cc:	4283      	cmp	r3, r0
 80036ce:	dc05      	bgt.n	80036dc <__swbuf_r+0x4e>
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 fd40 	bl	8004158 <_fflush_r>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d1ed      	bne.n	80036b8 <__swbuf_r+0x2a>
 80036dc:	68a3      	ldr	r3, [r4, #8]
 80036de:	3b01      	subs	r3, #1
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	6022      	str	r2, [r4, #0]
 80036e8:	701e      	strb	r6, [r3, #0]
 80036ea:	6962      	ldr	r2, [r4, #20]
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d004      	beq.n	80036fc <__swbuf_r+0x6e>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	07db      	lsls	r3, r3, #31
 80036f6:	d5e1      	bpl.n	80036bc <__swbuf_r+0x2e>
 80036f8:	2e0a      	cmp	r6, #10
 80036fa:	d1df      	bne.n	80036bc <__swbuf_r+0x2e>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 fd2a 	bl	8004158 <_fflush_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	d0d9      	beq.n	80036bc <__swbuf_r+0x2e>
 8003708:	e7d6      	b.n	80036b8 <__swbuf_r+0x2a>
	...

0800370c <__swsetup_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4b29      	ldr	r3, [pc, #164]	@ (80037b4 <__swsetup_r+0xa8>)
 8003710:	4605      	mov	r5, r0
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	460c      	mov	r4, r1
 8003716:	b118      	cbz	r0, 8003720 <__swsetup_r+0x14>
 8003718:	6a03      	ldr	r3, [r0, #32]
 800371a:	b90b      	cbnz	r3, 8003720 <__swsetup_r+0x14>
 800371c:	f7ff fece 	bl	80034bc <__sinit>
 8003720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003724:	0719      	lsls	r1, r3, #28
 8003726:	d422      	bmi.n	800376e <__swsetup_r+0x62>
 8003728:	06da      	lsls	r2, r3, #27
 800372a:	d407      	bmi.n	800373c <__swsetup_r+0x30>
 800372c:	2209      	movs	r2, #9
 800372e:	602a      	str	r2, [r5, #0]
 8003730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	e033      	b.n	80037a4 <__swsetup_r+0x98>
 800373c:	0758      	lsls	r0, r3, #29
 800373e:	d512      	bpl.n	8003766 <__swsetup_r+0x5a>
 8003740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003742:	b141      	cbz	r1, 8003756 <__swsetup_r+0x4a>
 8003744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003748:	4299      	cmp	r1, r3
 800374a:	d002      	beq.n	8003752 <__swsetup_r+0x46>
 800374c:	4628      	mov	r0, r5
 800374e:	f000 f8bd 	bl	80038cc <_free_r>
 8003752:	2300      	movs	r3, #0
 8003754:	6363      	str	r3, [r4, #52]	@ 0x34
 8003756:	89a3      	ldrh	r3, [r4, #12]
 8003758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	2300      	movs	r3, #0
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6923      	ldr	r3, [r4, #16]
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	81a3      	strh	r3, [r4, #12]
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	b94b      	cbnz	r3, 8003786 <__swsetup_r+0x7a>
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800377c:	d003      	beq.n	8003786 <__swsetup_r+0x7a>
 800377e:	4621      	mov	r1, r4
 8003780:	4628      	mov	r0, r5
 8003782:	f000 fd36 	bl	80041f2 <__smakebuf_r>
 8003786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800378a:	f013 0201 	ands.w	r2, r3, #1
 800378e:	d00a      	beq.n	80037a6 <__swsetup_r+0x9a>
 8003790:	2200      	movs	r2, #0
 8003792:	60a2      	str	r2, [r4, #8]
 8003794:	6962      	ldr	r2, [r4, #20]
 8003796:	4252      	negs	r2, r2
 8003798:	61a2      	str	r2, [r4, #24]
 800379a:	6922      	ldr	r2, [r4, #16]
 800379c:	b942      	cbnz	r2, 80037b0 <__swsetup_r+0xa4>
 800379e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037a2:	d1c5      	bne.n	8003730 <__swsetup_r+0x24>
 80037a4:	bd38      	pop	{r3, r4, r5, pc}
 80037a6:	0799      	lsls	r1, r3, #30
 80037a8:	bf58      	it	pl
 80037aa:	6962      	ldrpl	r2, [r4, #20]
 80037ac:	60a2      	str	r2, [r4, #8]
 80037ae:	e7f4      	b.n	800379a <__swsetup_r+0x8e>
 80037b0:	2000      	movs	r0, #0
 80037b2:	e7f7      	b.n	80037a4 <__swsetup_r+0x98>
 80037b4:	2000001c 	.word	0x2000001c

080037b8 <memset>:
 80037b8:	4603      	mov	r3, r0
 80037ba:	4402      	add	r2, r0
 80037bc:	4293      	cmp	r3, r2
 80037be:	d100      	bne.n	80037c2 <memset+0xa>
 80037c0:	4770      	bx	lr
 80037c2:	f803 1b01 	strb.w	r1, [r3], #1
 80037c6:	e7f9      	b.n	80037bc <memset+0x4>

080037c8 <_close_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	2300      	movs	r3, #0
 80037cc:	4d05      	ldr	r5, [pc, #20]	@ (80037e4 <_close_r+0x1c>)
 80037ce:	4604      	mov	r4, r0
 80037d0:	4608      	mov	r0, r1
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	f7fe faf1 	bl	8001dba <_close>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_close_r+0x1a>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_close_r+0x1a>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	2000022c 	.word	0x2000022c

080037e8 <_lseek_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	2200      	movs	r2, #0
 80037f2:	4d05      	ldr	r5, [pc, #20]	@ (8003808 <_lseek_r+0x20>)
 80037f4:	602a      	str	r2, [r5, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f7fe fb03 	bl	8001e02 <_lseek>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d102      	bne.n	8003806 <_lseek_r+0x1e>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	b103      	cbz	r3, 8003806 <_lseek_r+0x1e>
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	2000022c 	.word	0x2000022c

0800380c <_read_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4604      	mov	r4, r0
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	2200      	movs	r2, #0
 8003816:	4d05      	ldr	r5, [pc, #20]	@ (800382c <_read_r+0x20>)
 8003818:	602a      	str	r2, [r5, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	f7fe fa94 	bl	8001d48 <_read>
 8003820:	1c43      	adds	r3, r0, #1
 8003822:	d102      	bne.n	800382a <_read_r+0x1e>
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	b103      	cbz	r3, 800382a <_read_r+0x1e>
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	2000022c 	.word	0x2000022c

08003830 <_write_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4604      	mov	r4, r0
 8003834:	4608      	mov	r0, r1
 8003836:	4611      	mov	r1, r2
 8003838:	2200      	movs	r2, #0
 800383a:	4d05      	ldr	r5, [pc, #20]	@ (8003850 <_write_r+0x20>)
 800383c:	602a      	str	r2, [r5, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f7fe fa9f 	bl	8001d82 <_write>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_write_r+0x1e>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_write_r+0x1e>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	2000022c 	.word	0x2000022c

08003854 <__errno>:
 8003854:	4b01      	ldr	r3, [pc, #4]	@ (800385c <__errno+0x8>)
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	2000001c 	.word	0x2000001c

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	2600      	movs	r6, #0
 8003864:	4d0c      	ldr	r5, [pc, #48]	@ (8003898 <__libc_init_array+0x38>)
 8003866:	4c0d      	ldr	r4, [pc, #52]	@ (800389c <__libc_init_array+0x3c>)
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	f000 fd3c 	bl	80042ec <_init>
 8003874:	2600      	movs	r6, #0
 8003876:	4d0a      	ldr	r5, [pc, #40]	@ (80038a0 <__libc_init_array+0x40>)
 8003878:	4c0a      	ldr	r4, [pc, #40]	@ (80038a4 <__libc_init_array+0x44>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f855 3b04 	ldr.w	r3, [r5], #4
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	08004970 	.word	0x08004970
 800389c:	08004970 	.word	0x08004970
 80038a0:	08004970 	.word	0x08004970
 80038a4:	08004974 	.word	0x08004974

080038a8 <__retarget_lock_init_recursive>:
 80038a8:	4770      	bx	lr

080038aa <__retarget_lock_acquire_recursive>:
 80038aa:	4770      	bx	lr

080038ac <__retarget_lock_release_recursive>:
 80038ac:	4770      	bx	lr

080038ae <memcpy>:
 80038ae:	440a      	add	r2, r1
 80038b0:	4291      	cmp	r1, r2
 80038b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80038b6:	d100      	bne.n	80038ba <memcpy+0xc>
 80038b8:	4770      	bx	lr
 80038ba:	b510      	push	{r4, lr}
 80038bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038c0:	4291      	cmp	r1, r2
 80038c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c6:	d1f9      	bne.n	80038bc <memcpy+0xe>
 80038c8:	bd10      	pop	{r4, pc}
	...

080038cc <_free_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4605      	mov	r5, r0
 80038d0:	2900      	cmp	r1, #0
 80038d2:	d040      	beq.n	8003956 <_free_r+0x8a>
 80038d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d8:	1f0c      	subs	r4, r1, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bfb8      	it	lt
 80038de:	18e4      	addlt	r4, r4, r3
 80038e0:	f000 f8de 	bl	8003aa0 <__malloc_lock>
 80038e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <_free_r+0x8c>)
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	b933      	cbnz	r3, 80038f8 <_free_r+0x2c>
 80038ea:	6063      	str	r3, [r4, #4]
 80038ec:	6014      	str	r4, [r2, #0]
 80038ee:	4628      	mov	r0, r5
 80038f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038f4:	f000 b8da 	b.w	8003aac <__malloc_unlock>
 80038f8:	42a3      	cmp	r3, r4
 80038fa:	d908      	bls.n	800390e <_free_r+0x42>
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	1821      	adds	r1, r4, r0
 8003900:	428b      	cmp	r3, r1
 8003902:	bf01      	itttt	eq
 8003904:	6819      	ldreq	r1, [r3, #0]
 8003906:	685b      	ldreq	r3, [r3, #4]
 8003908:	1809      	addeq	r1, r1, r0
 800390a:	6021      	streq	r1, [r4, #0]
 800390c:	e7ed      	b.n	80038ea <_free_r+0x1e>
 800390e:	461a      	mov	r2, r3
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b10b      	cbz	r3, 8003918 <_free_r+0x4c>
 8003914:	42a3      	cmp	r3, r4
 8003916:	d9fa      	bls.n	800390e <_free_r+0x42>
 8003918:	6811      	ldr	r1, [r2, #0]
 800391a:	1850      	adds	r0, r2, r1
 800391c:	42a0      	cmp	r0, r4
 800391e:	d10b      	bne.n	8003938 <_free_r+0x6c>
 8003920:	6820      	ldr	r0, [r4, #0]
 8003922:	4401      	add	r1, r0
 8003924:	1850      	adds	r0, r2, r1
 8003926:	4283      	cmp	r3, r0
 8003928:	6011      	str	r1, [r2, #0]
 800392a:	d1e0      	bne.n	80038ee <_free_r+0x22>
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4408      	add	r0, r1
 8003932:	6010      	str	r0, [r2, #0]
 8003934:	6053      	str	r3, [r2, #4]
 8003936:	e7da      	b.n	80038ee <_free_r+0x22>
 8003938:	d902      	bls.n	8003940 <_free_r+0x74>
 800393a:	230c      	movs	r3, #12
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	e7d6      	b.n	80038ee <_free_r+0x22>
 8003940:	6820      	ldr	r0, [r4, #0]
 8003942:	1821      	adds	r1, r4, r0
 8003944:	428b      	cmp	r3, r1
 8003946:	bf01      	itttt	eq
 8003948:	6819      	ldreq	r1, [r3, #0]
 800394a:	685b      	ldreq	r3, [r3, #4]
 800394c:	1809      	addeq	r1, r1, r0
 800394e:	6021      	streq	r1, [r4, #0]
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	6054      	str	r4, [r2, #4]
 8003954:	e7cb      	b.n	80038ee <_free_r+0x22>
 8003956:	bd38      	pop	{r3, r4, r5, pc}
 8003958:	20000238 	.word	0x20000238

0800395c <sbrk_aligned>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4e0f      	ldr	r6, [pc, #60]	@ (800399c <sbrk_aligned+0x40>)
 8003960:	460c      	mov	r4, r1
 8003962:	6831      	ldr	r1, [r6, #0]
 8003964:	4605      	mov	r5, r0
 8003966:	b911      	cbnz	r1, 800396e <sbrk_aligned+0x12>
 8003968:	f000 fca2 	bl	80042b0 <_sbrk_r>
 800396c:	6030      	str	r0, [r6, #0]
 800396e:	4621      	mov	r1, r4
 8003970:	4628      	mov	r0, r5
 8003972:	f000 fc9d 	bl	80042b0 <_sbrk_r>
 8003976:	1c43      	adds	r3, r0, #1
 8003978:	d103      	bne.n	8003982 <sbrk_aligned+0x26>
 800397a:	f04f 34ff 	mov.w	r4, #4294967295
 800397e:	4620      	mov	r0, r4
 8003980:	bd70      	pop	{r4, r5, r6, pc}
 8003982:	1cc4      	adds	r4, r0, #3
 8003984:	f024 0403 	bic.w	r4, r4, #3
 8003988:	42a0      	cmp	r0, r4
 800398a:	d0f8      	beq.n	800397e <sbrk_aligned+0x22>
 800398c:	1a21      	subs	r1, r4, r0
 800398e:	4628      	mov	r0, r5
 8003990:	f000 fc8e 	bl	80042b0 <_sbrk_r>
 8003994:	3001      	adds	r0, #1
 8003996:	d1f2      	bne.n	800397e <sbrk_aligned+0x22>
 8003998:	e7ef      	b.n	800397a <sbrk_aligned+0x1e>
 800399a:	bf00      	nop
 800399c:	20000234 	.word	0x20000234

080039a0 <_malloc_r>:
 80039a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a4:	1ccd      	adds	r5, r1, #3
 80039a6:	f025 0503 	bic.w	r5, r5, #3
 80039aa:	3508      	adds	r5, #8
 80039ac:	2d0c      	cmp	r5, #12
 80039ae:	bf38      	it	cc
 80039b0:	250c      	movcc	r5, #12
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	4606      	mov	r6, r0
 80039b6:	db01      	blt.n	80039bc <_malloc_r+0x1c>
 80039b8:	42a9      	cmp	r1, r5
 80039ba:	d904      	bls.n	80039c6 <_malloc_r+0x26>
 80039bc:	230c      	movs	r3, #12
 80039be:	6033      	str	r3, [r6, #0]
 80039c0:	2000      	movs	r0, #0
 80039c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a9c <_malloc_r+0xfc>
 80039ca:	f000 f869 	bl	8003aa0 <__malloc_lock>
 80039ce:	f8d8 3000 	ldr.w	r3, [r8]
 80039d2:	461c      	mov	r4, r3
 80039d4:	bb44      	cbnz	r4, 8003a28 <_malloc_r+0x88>
 80039d6:	4629      	mov	r1, r5
 80039d8:	4630      	mov	r0, r6
 80039da:	f7ff ffbf 	bl	800395c <sbrk_aligned>
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	4604      	mov	r4, r0
 80039e2:	d158      	bne.n	8003a96 <_malloc_r+0xf6>
 80039e4:	f8d8 4000 	ldr.w	r4, [r8]
 80039e8:	4627      	mov	r7, r4
 80039ea:	2f00      	cmp	r7, #0
 80039ec:	d143      	bne.n	8003a76 <_malloc_r+0xd6>
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	d04b      	beq.n	8003a8a <_malloc_r+0xea>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	4639      	mov	r1, r7
 80039f6:	4630      	mov	r0, r6
 80039f8:	eb04 0903 	add.w	r9, r4, r3
 80039fc:	f000 fc58 	bl	80042b0 <_sbrk_r>
 8003a00:	4581      	cmp	r9, r0
 8003a02:	d142      	bne.n	8003a8a <_malloc_r+0xea>
 8003a04:	6821      	ldr	r1, [r4, #0]
 8003a06:	4630      	mov	r0, r6
 8003a08:	1a6d      	subs	r5, r5, r1
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7ff ffa6 	bl	800395c <sbrk_aligned>
 8003a10:	3001      	adds	r0, #1
 8003a12:	d03a      	beq.n	8003a8a <_malloc_r+0xea>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	442b      	add	r3, r5
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	bb62      	cbnz	r2, 8003a7c <_malloc_r+0xdc>
 8003a22:	f8c8 7000 	str.w	r7, [r8]
 8003a26:	e00f      	b.n	8003a48 <_malloc_r+0xa8>
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	1b52      	subs	r2, r2, r5
 8003a2c:	d420      	bmi.n	8003a70 <_malloc_r+0xd0>
 8003a2e:	2a0b      	cmp	r2, #11
 8003a30:	d917      	bls.n	8003a62 <_malloc_r+0xc2>
 8003a32:	1961      	adds	r1, r4, r5
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	6025      	str	r5, [r4, #0]
 8003a38:	bf18      	it	ne
 8003a3a:	6059      	strne	r1, [r3, #4]
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	bf08      	it	eq
 8003a40:	f8c8 1000 	streq.w	r1, [r8]
 8003a44:	5162      	str	r2, [r4, r5]
 8003a46:	604b      	str	r3, [r1, #4]
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 f82f 	bl	8003aac <__malloc_unlock>
 8003a4e:	f104 000b 	add.w	r0, r4, #11
 8003a52:	1d23      	adds	r3, r4, #4
 8003a54:	f020 0007 	bic.w	r0, r0, #7
 8003a58:	1ac2      	subs	r2, r0, r3
 8003a5a:	bf1c      	itt	ne
 8003a5c:	1a1b      	subne	r3, r3, r0
 8003a5e:	50a3      	strne	r3, [r4, r2]
 8003a60:	e7af      	b.n	80039c2 <_malloc_r+0x22>
 8003a62:	6862      	ldr	r2, [r4, #4]
 8003a64:	42a3      	cmp	r3, r4
 8003a66:	bf0c      	ite	eq
 8003a68:	f8c8 2000 	streq.w	r2, [r8]
 8003a6c:	605a      	strne	r2, [r3, #4]
 8003a6e:	e7eb      	b.n	8003a48 <_malloc_r+0xa8>
 8003a70:	4623      	mov	r3, r4
 8003a72:	6864      	ldr	r4, [r4, #4]
 8003a74:	e7ae      	b.n	80039d4 <_malloc_r+0x34>
 8003a76:	463c      	mov	r4, r7
 8003a78:	687f      	ldr	r7, [r7, #4]
 8003a7a:	e7b6      	b.n	80039ea <_malloc_r+0x4a>
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	d1fb      	bne.n	8003a7c <_malloc_r+0xdc>
 8003a84:	2300      	movs	r3, #0
 8003a86:	6053      	str	r3, [r2, #4]
 8003a88:	e7de      	b.n	8003a48 <_malloc_r+0xa8>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	6033      	str	r3, [r6, #0]
 8003a90:	f000 f80c 	bl	8003aac <__malloc_unlock>
 8003a94:	e794      	b.n	80039c0 <_malloc_r+0x20>
 8003a96:	6005      	str	r5, [r0, #0]
 8003a98:	e7d6      	b.n	8003a48 <_malloc_r+0xa8>
 8003a9a:	bf00      	nop
 8003a9c:	20000238 	.word	0x20000238

08003aa0 <__malloc_lock>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	@ (8003aa8 <__malloc_lock+0x8>)
 8003aa2:	f7ff bf02 	b.w	80038aa <__retarget_lock_acquire_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	20000230 	.word	0x20000230

08003aac <__malloc_unlock>:
 8003aac:	4801      	ldr	r0, [pc, #4]	@ (8003ab4 <__malloc_unlock+0x8>)
 8003aae:	f7ff befd 	b.w	80038ac <__retarget_lock_release_recursive>
 8003ab2:	bf00      	nop
 8003ab4:	20000230 	.word	0x20000230

08003ab8 <__sfputc_r>:
 8003ab8:	6893      	ldr	r3, [r2, #8]
 8003aba:	b410      	push	{r4}
 8003abc:	3b01      	subs	r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	6093      	str	r3, [r2, #8]
 8003ac2:	da07      	bge.n	8003ad4 <__sfputc_r+0x1c>
 8003ac4:	6994      	ldr	r4, [r2, #24]
 8003ac6:	42a3      	cmp	r3, r4
 8003ac8:	db01      	blt.n	8003ace <__sfputc_r+0x16>
 8003aca:	290a      	cmp	r1, #10
 8003acc:	d102      	bne.n	8003ad4 <__sfputc_r+0x1c>
 8003ace:	bc10      	pop	{r4}
 8003ad0:	f7ff bddd 	b.w	800368e <__swbuf_r>
 8003ad4:	6813      	ldr	r3, [r2, #0]
 8003ad6:	1c58      	adds	r0, r3, #1
 8003ad8:	6010      	str	r0, [r2, #0]
 8003ada:	7019      	strb	r1, [r3, #0]
 8003adc:	4608      	mov	r0, r1
 8003ade:	bc10      	pop	{r4}
 8003ae0:	4770      	bx	lr

08003ae2 <__sfputs_r>:
 8003ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	460f      	mov	r7, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	18d5      	adds	r5, r2, r3
 8003aec:	42ac      	cmp	r4, r5
 8003aee:	d101      	bne.n	8003af4 <__sfputs_r+0x12>
 8003af0:	2000      	movs	r0, #0
 8003af2:	e007      	b.n	8003b04 <__sfputs_r+0x22>
 8003af4:	463a      	mov	r2, r7
 8003af6:	4630      	mov	r0, r6
 8003af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afc:	f7ff ffdc 	bl	8003ab8 <__sfputc_r>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d1f3      	bne.n	8003aec <__sfputs_r+0xa>
 8003b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b08 <_vfiprintf_r>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	460d      	mov	r5, r1
 8003b0e:	4614      	mov	r4, r2
 8003b10:	4698      	mov	r8, r3
 8003b12:	4606      	mov	r6, r0
 8003b14:	b09d      	sub	sp, #116	@ 0x74
 8003b16:	b118      	cbz	r0, 8003b20 <_vfiprintf_r+0x18>
 8003b18:	6a03      	ldr	r3, [r0, #32]
 8003b1a:	b90b      	cbnz	r3, 8003b20 <_vfiprintf_r+0x18>
 8003b1c:	f7ff fcce 	bl	80034bc <__sinit>
 8003b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b22:	07d9      	lsls	r1, r3, #31
 8003b24:	d405      	bmi.n	8003b32 <_vfiprintf_r+0x2a>
 8003b26:	89ab      	ldrh	r3, [r5, #12]
 8003b28:	059a      	lsls	r2, r3, #22
 8003b2a:	d402      	bmi.n	8003b32 <_vfiprintf_r+0x2a>
 8003b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b2e:	f7ff febc 	bl	80038aa <__retarget_lock_acquire_recursive>
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	d501      	bpl.n	8003b3c <_vfiprintf_r+0x34>
 8003b38:	692b      	ldr	r3, [r5, #16]
 8003b3a:	b99b      	cbnz	r3, 8003b64 <_vfiprintf_r+0x5c>
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7ff fde4 	bl	800370c <__swsetup_r>
 8003b44:	b170      	cbz	r0, 8003b64 <_vfiprintf_r+0x5c>
 8003b46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b48:	07dc      	lsls	r4, r3, #31
 8003b4a:	d504      	bpl.n	8003b56 <_vfiprintf_r+0x4e>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	b01d      	add	sp, #116	@ 0x74
 8003b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	0598      	lsls	r0, r3, #22
 8003b5a:	d4f7      	bmi.n	8003b4c <_vfiprintf_r+0x44>
 8003b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b5e:	f7ff fea5 	bl	80038ac <__retarget_lock_release_recursive>
 8003b62:	e7f3      	b.n	8003b4c <_vfiprintf_r+0x44>
 8003b64:	2300      	movs	r3, #0
 8003b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b68:	2320      	movs	r3, #32
 8003b6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b6e:	2330      	movs	r3, #48	@ 0x30
 8003b70:	f04f 0901 	mov.w	r9, #1
 8003b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b78:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003d24 <_vfiprintf_r+0x21c>
 8003b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b80:	4623      	mov	r3, r4
 8003b82:	469a      	mov	sl, r3
 8003b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b88:	b10a      	cbz	r2, 8003b8e <_vfiprintf_r+0x86>
 8003b8a:	2a25      	cmp	r2, #37	@ 0x25
 8003b8c:	d1f9      	bne.n	8003b82 <_vfiprintf_r+0x7a>
 8003b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003b92:	d00b      	beq.n	8003bac <_vfiprintf_r+0xa4>
 8003b94:	465b      	mov	r3, fp
 8003b96:	4622      	mov	r2, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ffa1 	bl	8003ae2 <__sfputs_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f000 80a7 	beq.w	8003cf4 <_vfiprintf_r+0x1ec>
 8003ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ba8:	445a      	add	r2, fp
 8003baa:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bac:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 809f 	beq.w	8003cf4 <_vfiprintf_r+0x1ec>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc0:	f10a 0a01 	add.w	sl, sl, #1
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	9307      	str	r3, [sp, #28]
 8003bc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bce:	4654      	mov	r4, sl
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd6:	4853      	ldr	r0, [pc, #332]	@ (8003d24 <_vfiprintf_r+0x21c>)
 8003bd8:	f000 fb7a 	bl	80042d0 <memchr>
 8003bdc:	9a04      	ldr	r2, [sp, #16]
 8003bde:	b9d8      	cbnz	r0, 8003c18 <_vfiprintf_r+0x110>
 8003be0:	06d1      	lsls	r1, r2, #27
 8003be2:	bf44      	itt	mi
 8003be4:	2320      	movmi	r3, #32
 8003be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bea:	0713      	lsls	r3, r2, #28
 8003bec:	bf44      	itt	mi
 8003bee:	232b      	movmi	r3, #43	@ 0x2b
 8003bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bfa:	d015      	beq.n	8003c28 <_vfiprintf_r+0x120>
 8003bfc:	4654      	mov	r4, sl
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f04f 0c0a 	mov.w	ip, #10
 8003c04:	9a07      	ldr	r2, [sp, #28]
 8003c06:	4621      	mov	r1, r4
 8003c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0c:	3b30      	subs	r3, #48	@ 0x30
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d94b      	bls.n	8003caa <_vfiprintf_r+0x1a2>
 8003c12:	b1b0      	cbz	r0, 8003c42 <_vfiprintf_r+0x13a>
 8003c14:	9207      	str	r2, [sp, #28]
 8003c16:	e014      	b.n	8003c42 <_vfiprintf_r+0x13a>
 8003c18:	eba0 0308 	sub.w	r3, r0, r8
 8003c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	46a2      	mov	sl, r4
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	e7d2      	b.n	8003bce <_vfiprintf_r+0xc6>
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	1d19      	adds	r1, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	9103      	str	r1, [sp, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bfbb      	ittet	lt
 8003c34:	425b      	neglt	r3, r3
 8003c36:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3a:	9307      	strge	r3, [sp, #28]
 8003c3c:	9307      	strlt	r3, [sp, #28]
 8003c3e:	bfb8      	it	lt
 8003c40:	9204      	strlt	r2, [sp, #16]
 8003c42:	7823      	ldrb	r3, [r4, #0]
 8003c44:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c46:	d10a      	bne.n	8003c5e <_vfiprintf_r+0x156>
 8003c48:	7863      	ldrb	r3, [r4, #1]
 8003c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c4c:	d132      	bne.n	8003cb4 <_vfiprintf_r+0x1ac>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	3402      	adds	r4, #2
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	9203      	str	r2, [sp, #12]
 8003c58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c5c:	9305      	str	r3, [sp, #20]
 8003c5e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003d28 <_vfiprintf_r+0x220>
 8003c62:	2203      	movs	r2, #3
 8003c64:	4650      	mov	r0, sl
 8003c66:	7821      	ldrb	r1, [r4, #0]
 8003c68:	f000 fb32 	bl	80042d0 <memchr>
 8003c6c:	b138      	cbz	r0, 8003c7e <_vfiprintf_r+0x176>
 8003c6e:	2240      	movs	r2, #64	@ 0x40
 8003c70:	9b04      	ldr	r3, [sp, #16]
 8003c72:	eba0 000a 	sub.w	r0, r0, sl
 8003c76:	4082      	lsls	r2, r0
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	3401      	adds	r4, #1
 8003c7c:	9304      	str	r3, [sp, #16]
 8003c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c82:	2206      	movs	r2, #6
 8003c84:	4829      	ldr	r0, [pc, #164]	@ (8003d2c <_vfiprintf_r+0x224>)
 8003c86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c8a:	f000 fb21 	bl	80042d0 <memchr>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d03f      	beq.n	8003d12 <_vfiprintf_r+0x20a>
 8003c92:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <_vfiprintf_r+0x228>)
 8003c94:	bb1b      	cbnz	r3, 8003cde <_vfiprintf_r+0x1d6>
 8003c96:	9b03      	ldr	r3, [sp, #12]
 8003c98:	3307      	adds	r3, #7
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	9303      	str	r3, [sp, #12]
 8003ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ca4:	443b      	add	r3, r7
 8003ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ca8:	e76a      	b.n	8003b80 <_vfiprintf_r+0x78>
 8003caa:	460c      	mov	r4, r1
 8003cac:	2001      	movs	r0, #1
 8003cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb2:	e7a8      	b.n	8003c06 <_vfiprintf_r+0xfe>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f04f 0c0a 	mov.w	ip, #10
 8003cba:	4619      	mov	r1, r3
 8003cbc:	3401      	adds	r4, #1
 8003cbe:	9305      	str	r3, [sp, #20]
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc6:	3a30      	subs	r2, #48	@ 0x30
 8003cc8:	2a09      	cmp	r2, #9
 8003cca:	d903      	bls.n	8003cd4 <_vfiprintf_r+0x1cc>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0c6      	beq.n	8003c5e <_vfiprintf_r+0x156>
 8003cd0:	9105      	str	r1, [sp, #20]
 8003cd2:	e7c4      	b.n	8003c5e <_vfiprintf_r+0x156>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cdc:	e7f0      	b.n	8003cc0 <_vfiprintf_r+0x1b8>
 8003cde:	ab03      	add	r3, sp, #12
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	462a      	mov	r2, r5
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <_vfiprintf_r+0x22c>)
 8003ce8:	a904      	add	r1, sp, #16
 8003cea:	f3af 8000 	nop.w
 8003cee:	4607      	mov	r7, r0
 8003cf0:	1c78      	adds	r0, r7, #1
 8003cf2:	d1d6      	bne.n	8003ca2 <_vfiprintf_r+0x19a>
 8003cf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cf6:	07d9      	lsls	r1, r3, #31
 8003cf8:	d405      	bmi.n	8003d06 <_vfiprintf_r+0x1fe>
 8003cfa:	89ab      	ldrh	r3, [r5, #12]
 8003cfc:	059a      	lsls	r2, r3, #22
 8003cfe:	d402      	bmi.n	8003d06 <_vfiprintf_r+0x1fe>
 8003d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d02:	f7ff fdd3 	bl	80038ac <__retarget_lock_release_recursive>
 8003d06:	89ab      	ldrh	r3, [r5, #12]
 8003d08:	065b      	lsls	r3, r3, #25
 8003d0a:	f53f af1f 	bmi.w	8003b4c <_vfiprintf_r+0x44>
 8003d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d10:	e71e      	b.n	8003b50 <_vfiprintf_r+0x48>
 8003d12:	ab03      	add	r3, sp, #12
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	462a      	mov	r2, r5
 8003d18:	4630      	mov	r0, r6
 8003d1a:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <_vfiprintf_r+0x22c>)
 8003d1c:	a904      	add	r1, sp, #16
 8003d1e:	f000 f87d 	bl	8003e1c <_printf_i>
 8003d22:	e7e4      	b.n	8003cee <_vfiprintf_r+0x1e6>
 8003d24:	0800493a 	.word	0x0800493a
 8003d28:	08004940 	.word	0x08004940
 8003d2c:	08004944 	.word	0x08004944
 8003d30:	00000000 	.word	0x00000000
 8003d34:	08003ae3 	.word	0x08003ae3

08003d38 <_printf_common>:
 8003d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	4698      	mov	r8, r3
 8003d40:	688a      	ldr	r2, [r1, #8]
 8003d42:	690b      	ldr	r3, [r1, #16]
 8003d44:	4607      	mov	r7, r0
 8003d46:	4293      	cmp	r3, r2
 8003d48:	bfb8      	it	lt
 8003d4a:	4613      	movlt	r3, r2
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d52:	460c      	mov	r4, r1
 8003d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d58:	b10a      	cbz	r2, 8003d5e <_printf_common+0x26>
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	0699      	lsls	r1, r3, #26
 8003d62:	bf42      	ittt	mi
 8003d64:	6833      	ldrmi	r3, [r6, #0]
 8003d66:	3302      	addmi	r3, #2
 8003d68:	6033      	strmi	r3, [r6, #0]
 8003d6a:	6825      	ldr	r5, [r4, #0]
 8003d6c:	f015 0506 	ands.w	r5, r5, #6
 8003d70:	d106      	bne.n	8003d80 <_printf_common+0x48>
 8003d72:	f104 0a19 	add.w	sl, r4, #25
 8003d76:	68e3      	ldr	r3, [r4, #12]
 8003d78:	6832      	ldr	r2, [r6, #0]
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	42ab      	cmp	r3, r5
 8003d7e:	dc2b      	bgt.n	8003dd8 <_printf_common+0xa0>
 8003d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	3b00      	subs	r3, #0
 8003d88:	bf18      	it	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	0692      	lsls	r2, r2, #26
 8003d8e:	d430      	bmi.n	8003df2 <_printf_common+0xba>
 8003d90:	4641      	mov	r1, r8
 8003d92:	4638      	mov	r0, r7
 8003d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d98:	47c8      	blx	r9
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d023      	beq.n	8003de6 <_printf_common+0xae>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	6922      	ldr	r2, [r4, #16]
 8003da2:	f003 0306 	and.w	r3, r3, #6
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf14      	ite	ne
 8003daa:	2500      	movne	r5, #0
 8003dac:	6833      	ldreq	r3, [r6, #0]
 8003dae:	f04f 0600 	mov.w	r6, #0
 8003db2:	bf08      	it	eq
 8003db4:	68e5      	ldreq	r5, [r4, #12]
 8003db6:	f104 041a 	add.w	r4, r4, #26
 8003dba:	bf08      	it	eq
 8003dbc:	1aed      	subeq	r5, r5, r3
 8003dbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003dc2:	bf08      	it	eq
 8003dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bfc4      	itt	gt
 8003dcc:	1a9b      	subgt	r3, r3, r2
 8003dce:	18ed      	addgt	r5, r5, r3
 8003dd0:	42b5      	cmp	r5, r6
 8003dd2:	d11a      	bne.n	8003e0a <_printf_common+0xd2>
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	e008      	b.n	8003dea <_printf_common+0xb2>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	4652      	mov	r2, sl
 8003ddc:	4641      	mov	r1, r8
 8003dde:	4638      	mov	r0, r7
 8003de0:	47c8      	blx	r9
 8003de2:	3001      	adds	r0, #1
 8003de4:	d103      	bne.n	8003dee <_printf_common+0xb6>
 8003de6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dee:	3501      	adds	r5, #1
 8003df0:	e7c1      	b.n	8003d76 <_printf_common+0x3e>
 8003df2:	2030      	movs	r0, #48	@ 0x30
 8003df4:	18e1      	adds	r1, r4, r3
 8003df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e00:	4422      	add	r2, r4
 8003e02:	3302      	adds	r3, #2
 8003e04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e08:	e7c2      	b.n	8003d90 <_printf_common+0x58>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4641      	mov	r1, r8
 8003e10:	4638      	mov	r0, r7
 8003e12:	47c8      	blx	r9
 8003e14:	3001      	adds	r0, #1
 8003e16:	d0e6      	beq.n	8003de6 <_printf_common+0xae>
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7d9      	b.n	8003dd0 <_printf_common+0x98>

08003e1c <_printf_i>:
 8003e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e20:	7e0f      	ldrb	r7, [r1, #24]
 8003e22:	4691      	mov	r9, r2
 8003e24:	2f78      	cmp	r7, #120	@ 0x78
 8003e26:	4680      	mov	r8, r0
 8003e28:	460c      	mov	r4, r1
 8003e2a:	469a      	mov	sl, r3
 8003e2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e32:	d807      	bhi.n	8003e44 <_printf_i+0x28>
 8003e34:	2f62      	cmp	r7, #98	@ 0x62
 8003e36:	d80a      	bhi.n	8003e4e <_printf_i+0x32>
 8003e38:	2f00      	cmp	r7, #0
 8003e3a:	f000 80d1 	beq.w	8003fe0 <_printf_i+0x1c4>
 8003e3e:	2f58      	cmp	r7, #88	@ 0x58
 8003e40:	f000 80b8 	beq.w	8003fb4 <_printf_i+0x198>
 8003e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e4c:	e03a      	b.n	8003ec4 <_printf_i+0xa8>
 8003e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e52:	2b15      	cmp	r3, #21
 8003e54:	d8f6      	bhi.n	8003e44 <_printf_i+0x28>
 8003e56:	a101      	add	r1, pc, #4	@ (adr r1, 8003e5c <_printf_i+0x40>)
 8003e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e5c:	08003eb5 	.word	0x08003eb5
 8003e60:	08003ec9 	.word	0x08003ec9
 8003e64:	08003e45 	.word	0x08003e45
 8003e68:	08003e45 	.word	0x08003e45
 8003e6c:	08003e45 	.word	0x08003e45
 8003e70:	08003e45 	.word	0x08003e45
 8003e74:	08003ec9 	.word	0x08003ec9
 8003e78:	08003e45 	.word	0x08003e45
 8003e7c:	08003e45 	.word	0x08003e45
 8003e80:	08003e45 	.word	0x08003e45
 8003e84:	08003e45 	.word	0x08003e45
 8003e88:	08003fc7 	.word	0x08003fc7
 8003e8c:	08003ef3 	.word	0x08003ef3
 8003e90:	08003f81 	.word	0x08003f81
 8003e94:	08003e45 	.word	0x08003e45
 8003e98:	08003e45 	.word	0x08003e45
 8003e9c:	08003fe9 	.word	0x08003fe9
 8003ea0:	08003e45 	.word	0x08003e45
 8003ea4:	08003ef3 	.word	0x08003ef3
 8003ea8:	08003e45 	.word	0x08003e45
 8003eac:	08003e45 	.word	0x08003e45
 8003eb0:	08003f89 	.word	0x08003f89
 8003eb4:	6833      	ldr	r3, [r6, #0]
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6032      	str	r2, [r6, #0]
 8003ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e09c      	b.n	8004002 <_printf_i+0x1e6>
 8003ec8:	6833      	ldr	r3, [r6, #0]
 8003eca:	6820      	ldr	r0, [r4, #0]
 8003ecc:	1d19      	adds	r1, r3, #4
 8003ece:	6031      	str	r1, [r6, #0]
 8003ed0:	0606      	lsls	r6, r0, #24
 8003ed2:	d501      	bpl.n	8003ed8 <_printf_i+0xbc>
 8003ed4:	681d      	ldr	r5, [r3, #0]
 8003ed6:	e003      	b.n	8003ee0 <_printf_i+0xc4>
 8003ed8:	0645      	lsls	r5, r0, #25
 8003eda:	d5fb      	bpl.n	8003ed4 <_printf_i+0xb8>
 8003edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	da03      	bge.n	8003eec <_printf_i+0xd0>
 8003ee4:	232d      	movs	r3, #45	@ 0x2d
 8003ee6:	426d      	negs	r5, r5
 8003ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eec:	230a      	movs	r3, #10
 8003eee:	4858      	ldr	r0, [pc, #352]	@ (8004050 <_printf_i+0x234>)
 8003ef0:	e011      	b.n	8003f16 <_printf_i+0xfa>
 8003ef2:	6821      	ldr	r1, [r4, #0]
 8003ef4:	6833      	ldr	r3, [r6, #0]
 8003ef6:	0608      	lsls	r0, r1, #24
 8003ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003efc:	d402      	bmi.n	8003f04 <_printf_i+0xe8>
 8003efe:	0649      	lsls	r1, r1, #25
 8003f00:	bf48      	it	mi
 8003f02:	b2ad      	uxthmi	r5, r5
 8003f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f06:	6033      	str	r3, [r6, #0]
 8003f08:	bf14      	ite	ne
 8003f0a:	230a      	movne	r3, #10
 8003f0c:	2308      	moveq	r3, #8
 8003f0e:	4850      	ldr	r0, [pc, #320]	@ (8004050 <_printf_i+0x234>)
 8003f10:	2100      	movs	r1, #0
 8003f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f16:	6866      	ldr	r6, [r4, #4]
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	60a6      	str	r6, [r4, #8]
 8003f1c:	db05      	blt.n	8003f2a <_printf_i+0x10e>
 8003f1e:	6821      	ldr	r1, [r4, #0]
 8003f20:	432e      	orrs	r6, r5
 8003f22:	f021 0104 	bic.w	r1, r1, #4
 8003f26:	6021      	str	r1, [r4, #0]
 8003f28:	d04b      	beq.n	8003fc2 <_printf_i+0x1a6>
 8003f2a:	4616      	mov	r6, r2
 8003f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f30:	fb03 5711 	mls	r7, r3, r1, r5
 8003f34:	5dc7      	ldrb	r7, [r0, r7]
 8003f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f3a:	462f      	mov	r7, r5
 8003f3c:	42bb      	cmp	r3, r7
 8003f3e:	460d      	mov	r5, r1
 8003f40:	d9f4      	bls.n	8003f2c <_printf_i+0x110>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d10b      	bne.n	8003f5e <_printf_i+0x142>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	07df      	lsls	r7, r3, #31
 8003f4a:	d508      	bpl.n	8003f5e <_printf_i+0x142>
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	6861      	ldr	r1, [r4, #4]
 8003f50:	4299      	cmp	r1, r3
 8003f52:	bfde      	ittt	le
 8003f54:	2330      	movle	r3, #48	@ 0x30
 8003f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f5e:	1b92      	subs	r2, r2, r6
 8003f60:	6122      	str	r2, [r4, #16]
 8003f62:	464b      	mov	r3, r9
 8003f64:	4621      	mov	r1, r4
 8003f66:	4640      	mov	r0, r8
 8003f68:	f8cd a000 	str.w	sl, [sp]
 8003f6c:	aa03      	add	r2, sp, #12
 8003f6e:	f7ff fee3 	bl	8003d38 <_printf_common>
 8003f72:	3001      	adds	r0, #1
 8003f74:	d14a      	bne.n	800400c <_printf_i+0x1f0>
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7a:	b004      	add	sp, #16
 8003f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f043 0320 	orr.w	r3, r3, #32
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	2778      	movs	r7, #120	@ 0x78
 8003f8a:	4832      	ldr	r0, [pc, #200]	@ (8004054 <_printf_i+0x238>)
 8003f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	6831      	ldr	r1, [r6, #0]
 8003f94:	061f      	lsls	r7, r3, #24
 8003f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f9a:	d402      	bmi.n	8003fa2 <_printf_i+0x186>
 8003f9c:	065f      	lsls	r7, r3, #25
 8003f9e:	bf48      	it	mi
 8003fa0:	b2ad      	uxthmi	r5, r5
 8003fa2:	6031      	str	r1, [r6, #0]
 8003fa4:	07d9      	lsls	r1, r3, #31
 8003fa6:	bf44      	itt	mi
 8003fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8003fac:	6023      	strmi	r3, [r4, #0]
 8003fae:	b11d      	cbz	r5, 8003fb8 <_printf_i+0x19c>
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	e7ad      	b.n	8003f10 <_printf_i+0xf4>
 8003fb4:	4826      	ldr	r0, [pc, #152]	@ (8004050 <_printf_i+0x234>)
 8003fb6:	e7e9      	b.n	8003f8c <_printf_i+0x170>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f023 0320 	bic.w	r3, r3, #32
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	e7f6      	b.n	8003fb0 <_printf_i+0x194>
 8003fc2:	4616      	mov	r6, r2
 8003fc4:	e7bd      	b.n	8003f42 <_printf_i+0x126>
 8003fc6:	6833      	ldr	r3, [r6, #0]
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	6961      	ldr	r1, [r4, #20]
 8003fce:	6030      	str	r0, [r6, #0]
 8003fd0:	062e      	lsls	r6, r5, #24
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	d501      	bpl.n	8003fda <_printf_i+0x1be>
 8003fd6:	6019      	str	r1, [r3, #0]
 8003fd8:	e002      	b.n	8003fe0 <_printf_i+0x1c4>
 8003fda:	0668      	lsls	r0, r5, #25
 8003fdc:	d5fb      	bpl.n	8003fd6 <_printf_i+0x1ba>
 8003fde:	8019      	strh	r1, [r3, #0]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4616      	mov	r6, r2
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	e7bc      	b.n	8003f62 <_printf_i+0x146>
 8003fe8:	6833      	ldr	r3, [r6, #0]
 8003fea:	2100      	movs	r1, #0
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	6032      	str	r2, [r6, #0]
 8003ff0:	681e      	ldr	r6, [r3, #0]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f000 f96b 	bl	80042d0 <memchr>
 8003ffa:	b108      	cbz	r0, 8004000 <_printf_i+0x1e4>
 8003ffc:	1b80      	subs	r0, r0, r6
 8003ffe:	6060      	str	r0, [r4, #4]
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	2300      	movs	r3, #0
 8004006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800400a:	e7aa      	b.n	8003f62 <_printf_i+0x146>
 800400c:	4632      	mov	r2, r6
 800400e:	4649      	mov	r1, r9
 8004010:	4640      	mov	r0, r8
 8004012:	6923      	ldr	r3, [r4, #16]
 8004014:	47d0      	blx	sl
 8004016:	3001      	adds	r0, #1
 8004018:	d0ad      	beq.n	8003f76 <_printf_i+0x15a>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	079b      	lsls	r3, r3, #30
 800401e:	d413      	bmi.n	8004048 <_printf_i+0x22c>
 8004020:	68e0      	ldr	r0, [r4, #12]
 8004022:	9b03      	ldr	r3, [sp, #12]
 8004024:	4298      	cmp	r0, r3
 8004026:	bfb8      	it	lt
 8004028:	4618      	movlt	r0, r3
 800402a:	e7a6      	b.n	8003f7a <_printf_i+0x15e>
 800402c:	2301      	movs	r3, #1
 800402e:	4632      	mov	r2, r6
 8004030:	4649      	mov	r1, r9
 8004032:	4640      	mov	r0, r8
 8004034:	47d0      	blx	sl
 8004036:	3001      	adds	r0, #1
 8004038:	d09d      	beq.n	8003f76 <_printf_i+0x15a>
 800403a:	3501      	adds	r5, #1
 800403c:	68e3      	ldr	r3, [r4, #12]
 800403e:	9903      	ldr	r1, [sp, #12]
 8004040:	1a5b      	subs	r3, r3, r1
 8004042:	42ab      	cmp	r3, r5
 8004044:	dcf2      	bgt.n	800402c <_printf_i+0x210>
 8004046:	e7eb      	b.n	8004020 <_printf_i+0x204>
 8004048:	2500      	movs	r5, #0
 800404a:	f104 0619 	add.w	r6, r4, #25
 800404e:	e7f5      	b.n	800403c <_printf_i+0x220>
 8004050:	0800494b 	.word	0x0800494b
 8004054:	0800495c 	.word	0x0800495c

08004058 <__sflush_r>:
 8004058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	0716      	lsls	r6, r2, #28
 8004060:	4605      	mov	r5, r0
 8004062:	460c      	mov	r4, r1
 8004064:	d454      	bmi.n	8004110 <__sflush_r+0xb8>
 8004066:	684b      	ldr	r3, [r1, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	dc02      	bgt.n	8004072 <__sflush_r+0x1a>
 800406c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	dd48      	ble.n	8004104 <__sflush_r+0xac>
 8004072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004074:	2e00      	cmp	r6, #0
 8004076:	d045      	beq.n	8004104 <__sflush_r+0xac>
 8004078:	2300      	movs	r3, #0
 800407a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800407e:	682f      	ldr	r7, [r5, #0]
 8004080:	6a21      	ldr	r1, [r4, #32]
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	d030      	beq.n	80040e8 <__sflush_r+0x90>
 8004086:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	0759      	lsls	r1, r3, #29
 800408c:	d505      	bpl.n	800409a <__sflush_r+0x42>
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	1ad2      	subs	r2, r2, r3
 8004092:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004094:	b10b      	cbz	r3, 800409a <__sflush_r+0x42>
 8004096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	2300      	movs	r3, #0
 800409c:	4628      	mov	r0, r5
 800409e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040a0:	6a21      	ldr	r1, [r4, #32]
 80040a2:	47b0      	blx	r6
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	d106      	bne.n	80040b8 <__sflush_r+0x60>
 80040aa:	6829      	ldr	r1, [r5, #0]
 80040ac:	291d      	cmp	r1, #29
 80040ae:	d82b      	bhi.n	8004108 <__sflush_r+0xb0>
 80040b0:	4a28      	ldr	r2, [pc, #160]	@ (8004154 <__sflush_r+0xfc>)
 80040b2:	40ca      	lsrs	r2, r1
 80040b4:	07d6      	lsls	r6, r2, #31
 80040b6:	d527      	bpl.n	8004108 <__sflush_r+0xb0>
 80040b8:	2200      	movs	r2, #0
 80040ba:	6062      	str	r2, [r4, #4]
 80040bc:	6922      	ldr	r2, [r4, #16]
 80040be:	04d9      	lsls	r1, r3, #19
 80040c0:	6022      	str	r2, [r4, #0]
 80040c2:	d504      	bpl.n	80040ce <__sflush_r+0x76>
 80040c4:	1c42      	adds	r2, r0, #1
 80040c6:	d101      	bne.n	80040cc <__sflush_r+0x74>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b903      	cbnz	r3, 80040ce <__sflush_r+0x76>
 80040cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80040ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040d0:	602f      	str	r7, [r5, #0]
 80040d2:	b1b9      	cbz	r1, 8004104 <__sflush_r+0xac>
 80040d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040d8:	4299      	cmp	r1, r3
 80040da:	d002      	beq.n	80040e2 <__sflush_r+0x8a>
 80040dc:	4628      	mov	r0, r5
 80040de:	f7ff fbf5 	bl	80038cc <_free_r>
 80040e2:	2300      	movs	r3, #0
 80040e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80040e6:	e00d      	b.n	8004104 <__sflush_r+0xac>
 80040e8:	2301      	movs	r3, #1
 80040ea:	4628      	mov	r0, r5
 80040ec:	47b0      	blx	r6
 80040ee:	4602      	mov	r2, r0
 80040f0:	1c50      	adds	r0, r2, #1
 80040f2:	d1c9      	bne.n	8004088 <__sflush_r+0x30>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0c6      	beq.n	8004088 <__sflush_r+0x30>
 80040fa:	2b1d      	cmp	r3, #29
 80040fc:	d001      	beq.n	8004102 <__sflush_r+0xaa>
 80040fe:	2b16      	cmp	r3, #22
 8004100:	d11d      	bne.n	800413e <__sflush_r+0xe6>
 8004102:	602f      	str	r7, [r5, #0]
 8004104:	2000      	movs	r0, #0
 8004106:	e021      	b.n	800414c <__sflush_r+0xf4>
 8004108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800410c:	b21b      	sxth	r3, r3
 800410e:	e01a      	b.n	8004146 <__sflush_r+0xee>
 8004110:	690f      	ldr	r7, [r1, #16]
 8004112:	2f00      	cmp	r7, #0
 8004114:	d0f6      	beq.n	8004104 <__sflush_r+0xac>
 8004116:	0793      	lsls	r3, r2, #30
 8004118:	bf18      	it	ne
 800411a:	2300      	movne	r3, #0
 800411c:	680e      	ldr	r6, [r1, #0]
 800411e:	bf08      	it	eq
 8004120:	694b      	ldreq	r3, [r1, #20]
 8004122:	1bf6      	subs	r6, r6, r7
 8004124:	600f      	str	r7, [r1, #0]
 8004126:	608b      	str	r3, [r1, #8]
 8004128:	2e00      	cmp	r6, #0
 800412a:	ddeb      	ble.n	8004104 <__sflush_r+0xac>
 800412c:	4633      	mov	r3, r6
 800412e:	463a      	mov	r2, r7
 8004130:	4628      	mov	r0, r5
 8004132:	6a21      	ldr	r1, [r4, #32]
 8004134:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004138:	47e0      	blx	ip
 800413a:	2800      	cmp	r0, #0
 800413c:	dc07      	bgt.n	800414e <__sflush_r+0xf6>
 800413e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800414e:	4407      	add	r7, r0
 8004150:	1a36      	subs	r6, r6, r0
 8004152:	e7e9      	b.n	8004128 <__sflush_r+0xd0>
 8004154:	20400001 	.word	0x20400001

08004158 <_fflush_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	690b      	ldr	r3, [r1, #16]
 800415c:	4605      	mov	r5, r0
 800415e:	460c      	mov	r4, r1
 8004160:	b913      	cbnz	r3, 8004168 <_fflush_r+0x10>
 8004162:	2500      	movs	r5, #0
 8004164:	4628      	mov	r0, r5
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	b118      	cbz	r0, 8004172 <_fflush_r+0x1a>
 800416a:	6a03      	ldr	r3, [r0, #32]
 800416c:	b90b      	cbnz	r3, 8004172 <_fflush_r+0x1a>
 800416e:	f7ff f9a5 	bl	80034bc <__sinit>
 8004172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f3      	beq.n	8004162 <_fflush_r+0xa>
 800417a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800417c:	07d0      	lsls	r0, r2, #31
 800417e:	d404      	bmi.n	800418a <_fflush_r+0x32>
 8004180:	0599      	lsls	r1, r3, #22
 8004182:	d402      	bmi.n	800418a <_fflush_r+0x32>
 8004184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004186:	f7ff fb90 	bl	80038aa <__retarget_lock_acquire_recursive>
 800418a:	4628      	mov	r0, r5
 800418c:	4621      	mov	r1, r4
 800418e:	f7ff ff63 	bl	8004058 <__sflush_r>
 8004192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004194:	4605      	mov	r5, r0
 8004196:	07da      	lsls	r2, r3, #31
 8004198:	d4e4      	bmi.n	8004164 <_fflush_r+0xc>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	059b      	lsls	r3, r3, #22
 800419e:	d4e1      	bmi.n	8004164 <_fflush_r+0xc>
 80041a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041a2:	f7ff fb83 	bl	80038ac <__retarget_lock_release_recursive>
 80041a6:	e7dd      	b.n	8004164 <_fflush_r+0xc>

080041a8 <__swhatbuf_r>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	460c      	mov	r4, r1
 80041ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b0:	4615      	mov	r5, r2
 80041b2:	2900      	cmp	r1, #0
 80041b4:	461e      	mov	r6, r3
 80041b6:	b096      	sub	sp, #88	@ 0x58
 80041b8:	da0c      	bge.n	80041d4 <__swhatbuf_r+0x2c>
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	2100      	movs	r1, #0
 80041be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80041c2:	bf14      	ite	ne
 80041c4:	2340      	movne	r3, #64	@ 0x40
 80041c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80041ca:	2000      	movs	r0, #0
 80041cc:	6031      	str	r1, [r6, #0]
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	b016      	add	sp, #88	@ 0x58
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	466a      	mov	r2, sp
 80041d6:	f000 f849 	bl	800426c <_fstat_r>
 80041da:	2800      	cmp	r0, #0
 80041dc:	dbed      	blt.n	80041ba <__swhatbuf_r+0x12>
 80041de:	9901      	ldr	r1, [sp, #4]
 80041e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80041e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80041e8:	4259      	negs	r1, r3
 80041ea:	4159      	adcs	r1, r3
 80041ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041f0:	e7eb      	b.n	80041ca <__swhatbuf_r+0x22>

080041f2 <__smakebuf_r>:
 80041f2:	898b      	ldrh	r3, [r1, #12]
 80041f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041f6:	079d      	lsls	r5, r3, #30
 80041f8:	4606      	mov	r6, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	d507      	bpl.n	800420e <__smakebuf_r+0x1c>
 80041fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	6123      	str	r3, [r4, #16]
 8004206:	2301      	movs	r3, #1
 8004208:	6163      	str	r3, [r4, #20]
 800420a:	b003      	add	sp, #12
 800420c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800420e:	466a      	mov	r2, sp
 8004210:	ab01      	add	r3, sp, #4
 8004212:	f7ff ffc9 	bl	80041a8 <__swhatbuf_r>
 8004216:	9f00      	ldr	r7, [sp, #0]
 8004218:	4605      	mov	r5, r0
 800421a:	4639      	mov	r1, r7
 800421c:	4630      	mov	r0, r6
 800421e:	f7ff fbbf 	bl	80039a0 <_malloc_r>
 8004222:	b948      	cbnz	r0, 8004238 <__smakebuf_r+0x46>
 8004224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004228:	059a      	lsls	r2, r3, #22
 800422a:	d4ee      	bmi.n	800420a <__smakebuf_r+0x18>
 800422c:	f023 0303 	bic.w	r3, r3, #3
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	81a3      	strh	r3, [r4, #12]
 8004236:	e7e2      	b.n	80041fe <__smakebuf_r+0xc>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800423e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	9b01      	ldr	r3, [sp, #4]
 8004246:	6020      	str	r0, [r4, #0]
 8004248:	b15b      	cbz	r3, 8004262 <__smakebuf_r+0x70>
 800424a:	4630      	mov	r0, r6
 800424c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004250:	f000 f81e 	bl	8004290 <_isatty_r>
 8004254:	b128      	cbz	r0, 8004262 <__smakebuf_r+0x70>
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	f023 0303 	bic.w	r3, r3, #3
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	431d      	orrs	r5, r3
 8004266:	81a5      	strh	r5, [r4, #12]
 8004268:	e7cf      	b.n	800420a <__smakebuf_r+0x18>
	...

0800426c <_fstat_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	2300      	movs	r3, #0
 8004270:	4d06      	ldr	r5, [pc, #24]	@ (800428c <_fstat_r+0x20>)
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	f7fd fda9 	bl	8001dd0 <_fstat>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	d102      	bne.n	8004288 <_fstat_r+0x1c>
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	b103      	cbz	r3, 8004288 <_fstat_r+0x1c>
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	bd38      	pop	{r3, r4, r5, pc}
 800428a:	bf00      	nop
 800428c:	2000022c 	.word	0x2000022c

08004290 <_isatty_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	2300      	movs	r3, #0
 8004294:	4d05      	ldr	r5, [pc, #20]	@ (80042ac <_isatty_r+0x1c>)
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fd fda7 	bl	8001dee <_isatty>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_isatty_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_isatty_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	2000022c 	.word	0x2000022c

080042b0 <_sbrk_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	2300      	movs	r3, #0
 80042b4:	4d05      	ldr	r5, [pc, #20]	@ (80042cc <_sbrk_r+0x1c>)
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	f7fd fdae 	bl	8001e1c <_sbrk>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_sbrk_r+0x1a>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_sbrk_r+0x1a>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	2000022c 	.word	0x2000022c

080042d0 <memchr>:
 80042d0:	4603      	mov	r3, r0
 80042d2:	b510      	push	{r4, lr}
 80042d4:	b2c9      	uxtb	r1, r1
 80042d6:	4402      	add	r2, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	d101      	bne.n	80042e2 <memchr+0x12>
 80042de:	2000      	movs	r0, #0
 80042e0:	e003      	b.n	80042ea <memchr+0x1a>
 80042e2:	7804      	ldrb	r4, [r0, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	428c      	cmp	r4, r1
 80042e8:	d1f6      	bne.n	80042d8 <memchr+0x8>
 80042ea:	bd10      	pop	{r4, pc}

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
