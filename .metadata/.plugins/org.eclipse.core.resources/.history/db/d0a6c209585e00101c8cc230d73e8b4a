#include "oled.h"

u8g2_t u8g2;

// 软件SPI发送字节（优化版本）
static void OLED_SPI_SendByte(uint8_t byte) {
    for (int i = 0; i < 8; i++) {
        // 设置数据线
        if (byte & 0x80) {
            HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, GPIO_PIN_SET);
        } else {
            HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, GPIO_PIN_RESET);
        }

        // 时钟上升沿
        HAL_GPIO_WritePin(OLED_SCK_GPIO_Port, OLED_SCK_Pin, GPIO_PIN_SET);
        // 短延时（可以用__NOP()替代）
        for(volatile int j = 0; j < 10; j++);

        // 时钟下降沿
        HAL_GPIO_WritePin(OLED_SCK_GPIO_Port, OLED_SCK_Pin, GPIO_PIN_RESET);

        byte <<= 1;
    }
}

// GPIO和延时回调函数
uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
    switch (msg) {
        case U8X8_MSG_GPIO_AND_DELAY_INIT:
            // GPIO初始化（如果CubeMX没做的话）
            break;

        case U8X8_MSG_DELAY_MILLI:
            HAL_Delay(arg_int);
            break;

        case U8X8_MSG_DELAY_10MICRO:
            // 10微秒延时
            for(volatile int i = 0; i < 320; i++); // 假设系统时钟84MHz
            break;

        case U8X8_MSG_DELAY_100NANO:
            __NOP();
            break;

        case U8X8_MSG_GPIO_DC:
            HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int ? GPIO_PIN_SET : GPIO_PIN_RESET);
            break;

        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int ? GPIO_PIN_SET : GPIO_PIN_RESET);
            break;

        case U8X8_MSG_GPIO_SPI_CLOCK:
            HAL_GPIO_WritePin(OLED_SCK_GPIO_Port, OLED_SCK_Pin, arg_int ? GPIO_PIN_SET : GPIO_PIN_RESET);
            break;

        case U8X8_MSG_GPIO_SPI_DATA:
            HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, arg_int ? GPIO_PIN_SET : GPIO_PIN_RESET);
            break;

        default:
            return 0;
    }
    return 1;
}

// SPI字节发送回调
uint8_t u8x8_byte_stm32_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
    uint8_t *data;

    switch (msg) {
        case U8X8_MSG_BYTE_SEND:
            data = (uint8_t *)arg_ptr;
            while (arg_int > 0) {
                OLED_SPI_SendByte(*data);
                data++;
                arg_int--;
            }
            break;

        case U8X8_MSG_BYTE_INIT:
            // 初始化时钟和数据线为高电平
            HAL_GPIO_WritePin(OLED_SCK_GPIO_Port, OLED_SCK_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, GPIO_PIN_RESET);
            break;

        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int ? GPIO_PIN_SET : GPIO_PIN_RESET);
            break;

        case U8X8_MSG_BYTE_START_TRANSFER:
        case U8X8_MSG_BYTE_END_TRANSFER:
            // 没有CS引脚，忽略
            break;

        default:
            return 0;
    }
    return 1;
}

// OLED初始化
void OLED_Init(void) {
    // 设置u8g2
    u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_spi, u8x8_gpio_and_delay_stm32);

    // 初始化显示
    u8g2_InitDisplay(&u8g2);
    u8g2_SetPowerSave(&u8g2, 0);

    // 清屏
    u8g2_ClearBuffer(&u8g2);
    u8g2_SendBuffer(&u8g2);
}

// 显示字符串
void OLED_ShowString(uint8_t x, uint8_t y, const char *str) {
    u8g2_SetFont(&u8g2, u8g2_font_6x10_tr);  // 使用6x10字体
    u8g2_DrawStr(&u8g2, x, y, str);  // 注意是DrawStr不是DrawString
    u8g2_SendBuffer(&u8g2);
}

// 显示文字示例
void OLED_DisplayText(void) {
    u8g2_ClearBuffer(&u8g2);

    u8g2_SetFont(&u8g2, u8g2_font_6x10_tr);
    u8g2_DrawStr(&u8g2, 0, 10, "Hello World!");
    u8g2_DrawStr(&u8g2, 0, 25, "STM32 OLED");

    u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
    u8g2_DrawStr(&u8g2, 0, 40, "U8g2 Library");

    u8g2_SendBuffer(&u8g2);
}
