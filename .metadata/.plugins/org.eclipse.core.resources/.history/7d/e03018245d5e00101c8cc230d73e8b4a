#ifndef CAN_STEPPER_H
#define CAN_STEPPER_H

#include "stm32f4xx_hal.h"
#include "../CAN/can.h"
#include <stdbool.h>

// CAN步进电机结构体
typedef struct {
    uint16_t motor_can_id;          // 电机CAN ID
    int32_t current_position;       // 当前位置
    int32_t target_position;        // 目标位置
    bool is_moving;                 // 运动状态
    uint16_t speed;                 // 当前速度
    uint8_t status;                 // 电机状态
    uint32_t last_command_time;     // 上次发送命令时间
    uint32_t last_response_time;    // 上次收到响应时间
} CANStepperMotor_t;

// CAN命令定义（根据你的电机协议调整）
#define CAN_CMD_MOVE_ABSOLUTE       0x01    // 绝对位置移动
#define CAN_CMD_MOVE_RELATIVE       0x02    // 相对位置移动
#define CAN_CMD_SET_SPEED           0x03    // 设置速度
#define CAN_CMD_STOP                0x04    // 停止
#define CAN_CMD_SET_ZERO            0x05    // 设置零点
#define CAN_CMD_READ_POSITION       0x06    // 读取位置
#define CAN_CMD_READ_STATUS         0x07    // 读取状态

// 电机状态定义
#define MOTOR_STATUS_IDLE           0x00    // 空闲
#define MOTOR_STATUS_RUNNING        0x01    // 运行中
#define MOTOR_STATUS_FAULT          0x02    // 故障
#define MOTOR_STATUS_TIMEOUT        0x03    // 通信超时

// 函数声明
void CANStepper_Init(CANStepperMotor_t* motor, uint16_t motor_id);
uint8_t CANStepper_MoveTo(CANStepperMotor_t* motor, int32_t position);
uint8_t CANStepper_MoveSteps(CANStepperMotor_t* motor, int32_t steps);
uint8_t CANStepper_SetSpeed(CANStepperMotor_t* motor, uint16_t speed);
uint8_t CANStepper_Stop(CANStepperMotor_t* motor);
uint8_t CANStepper_SetZero(CANStepperMotor_t* motor);
uint8_t CANStepper_ReadPosition(CANStepperMotor_t* motor);
uint8_t CANStepper_ReadStatus(CANStepperMotor_t* motor);

// CAN接收处理函数
void CANStepper_ProcessRxMessage(CANStepperMotor_t* motor, uint16_t rx_id, uint8_t* data);

// 状态获取函数
int32_t CANStepper_GetPosition(CANStepperMotor_t* motor);
bool CANStepper_IsMoving(CANStepperMotor_t* motor);
uint8_t CANStepper_GetStatus(CANStepperMotor_t* motor);
bool CANStepper_IsConnected(CANStepperMotor_t* motor);

#endif /* CAN_STEPPER_H */
